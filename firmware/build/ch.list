
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__vectors_base__>:
 8000000:	20000200 	.word	0x20000200
 8000004:	08000191 	.word	0x08000191
 8000008:	080079d1 	.word	0x080079d1
 800000c:	08000193 	.word	0x08000193
 8000010:	08000193 	.word	0x08000193
 8000014:	08000193 	.word	0x08000193
 8000018:	08000193 	.word	0x08000193
 800001c:	08000193 	.word	0x08000193
 8000020:	08000193 	.word	0x08000193
 8000024:	08000193 	.word	0x08000193
 8000028:	08000193 	.word	0x08000193
 800002c:	08000193 	.word	0x08000193
 8000030:	08000193 	.word	0x08000193
 8000034:	08000193 	.word	0x08000193
 8000038:	08000193 	.word	0x08000193
 800003c:	08000193 	.word	0x08000193
 8000040:	08000193 	.word	0x08000193
 8000044:	08000193 	.word	0x08000193
 8000048:	08000193 	.word	0x08000193
 800004c:	08000193 	.word	0x08000193
 8000050:	08000193 	.word	0x08000193
 8000054:	08000193 	.word	0x08000193
 8000058:	08000193 	.word	0x08000193
 800005c:	08000193 	.word	0x08000193
 8000060:	08000193 	.word	0x08000193
 8000064:	08000193 	.word	0x08000193
 8000068:	08000193 	.word	0x08000193
 800006c:	08000193 	.word	0x08000193
 8000070:	08000193 	.word	0x08000193
 8000074:	08004301 	.word	0x08004301
 8000078:	08004331 	.word	0x08004331
 800007c:	08000193 	.word	0x08000193
 8000080:	08004361 	.word	0x08004361
 8000084:	08000193 	.word	0x08000193
 8000088:	08000193 	.word	0x08000193
 800008c:	08004231 	.word	0x08004231
 8000090:	08000193 	.word	0x08000193
 8000094:	08000193 	.word	0x08000193
 8000098:	08000193 	.word	0x08000193
 800009c:	08000193 	.word	0x08000193
 80000a0:	08000193 	.word	0x08000193
 80000a4:	08000193 	.word	0x08000193
 80000a8:	08000193 	.word	0x08000193
 80000ac:	08003f21 	.word	0x08003f21
 80000b0:	08003f41 	.word	0x08003f41
 80000b4:	08003f71 	.word	0x08003f71
 80000b8:	08000193 	.word	0x08000193
 80000bc:	08000193 	.word	0x08000193

Disassembly of section .text:

080000c0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80000c0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80000c2:	4824      	ldr	r0, [pc, #144]	; (8000154 <endfiniloop+0x6>)
                msr     MSP, r0
 80000c4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80000c8:	4823      	ldr	r0, [pc, #140]	; (8000158 <endfiniloop+0xa>)
                msr     PSP, r0
 80000ca:	f380 8809 	msr	PSP, r0

                /* CPU mode initialization as configured.*/
                movs    r0, #CRT0_CONTROL_INIT
 80000ce:	2002      	movs	r0, #2
                msr     CONTROL, r0
 80000d0:	f380 8814 	msr	CONTROL, r0
                isb
 80000d4:	f3bf 8f6f 	isb	sy
                str     r0, [r1]
#endif

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 80000d8:	f002 ff92 	bl	8003000 <__cpu_init>
#endif

                /* Early initialization..*/
                bl      __early_init
 80000dc:	f004 fe18 	bl	8004d10 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 80000e0:	481e      	ldr	r0, [pc, #120]	; (800015c <endfiniloop+0xe>)
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 80000e2:	491f      	ldr	r1, [pc, #124]	; (8000160 <endfiniloop+0x12>)
                ldr     r2, =__main_stack_end__
 80000e4:	4a1b      	ldr	r2, [pc, #108]	; (8000154 <endfiniloop+0x6>)

080000e6 <msloop>:
msloop:
                cmp     r1, r2
 80000e6:	4291      	cmp	r1, r2
                bge     endmsloop
 80000e8:	da02      	bge.n	80000f0 <endmsloop>
                str     r0, [r1]
 80000ea:	6008      	str	r0, [r1, #0]
                adds    r1, #4
 80000ec:	3104      	adds	r1, #4
                b       msloop
 80000ee:	e7fa      	b.n	80000e6 <msloop>

080000f0 <endmsloop>:
endmsloop:
                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 80000f0:	491c      	ldr	r1, [pc, #112]	; (8000164 <endfiniloop+0x16>)
                ldr     r2, =__process_stack_end__
 80000f2:	4a19      	ldr	r2, [pc, #100]	; (8000158 <endfiniloop+0xa>)

080000f4 <psloop>:
psloop:
                cmp     r1, r2
 80000f4:	4291      	cmp	r1, r2
                bge     endpsloop
 80000f6:	da02      	bge.n	80000fe <endpsloop>
                str     r0, [r1]
 80000f8:	6008      	str	r0, [r1, #0]
                adds    r1, #4
 80000fa:	3104      	adds	r1, #4
                b       psloop
 80000fc:	e7fa      	b.n	80000f4 <psloop>

080000fe <endpsloop>:

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                ldr     r1, =__textdata_base__
 80000fe:	491a      	ldr	r1, [pc, #104]	; (8000168 <endfiniloop+0x1a>)
                ldr     r2, =__data_base__
 8000100:	4a1a      	ldr	r2, [pc, #104]	; (800016c <endfiniloop+0x1e>)
                ldr     r3, =__data_end__
 8000102:	4b1b      	ldr	r3, [pc, #108]	; (8000170 <endfiniloop+0x22>)

08000104 <dloop>:
dloop:
                cmp     r2, r3
 8000104:	429a      	cmp	r2, r3
                bge     enddloop
 8000106:	da04      	bge.n	8000112 <enddloop>
                ldr     r0, [r1]
 8000108:	6808      	ldr	r0, [r1, #0]
                str     r0, [r2]
 800010a:	6010      	str	r0, [r2, #0]
                adds    r1, #4
 800010c:	3104      	adds	r1, #4
                adds    r2, #4
 800010e:	3204      	adds	r2, #4
                b       dloop
 8000110:	e7f8      	b.n	8000104 <dloop>

08000112 <enddloop>:

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                movs    r0, #0
 8000112:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000114:	4917      	ldr	r1, [pc, #92]	; (8000174 <endfiniloop+0x26>)
                ldr     r2, =__bss_end__
 8000116:	4a18      	ldr	r2, [pc, #96]	; (8000178 <endfiniloop+0x2a>)

08000118 <bloop>:
bloop:
                cmp     r1, r2
 8000118:	4291      	cmp	r1, r2
                bge     endbloop
 800011a:	da02      	bge.n	8000122 <endbloop>
                str     r0, [r1]
 800011c:	6008      	str	r0, [r1, #0]
                adds    r1, #4
 800011e:	3104      	adds	r1, #4
                b       bloop
 8000120:	e7fa      	b.n	8000118 <bloop>

08000122 <endbloop>:
endbloop:
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000122:	f002 ff85 	bl	8003030 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000126:	f002 ff73 	bl	8003010 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 800012a:	4c14      	ldr	r4, [pc, #80]	; (800017c <endfiniloop+0x2e>)
                ldr     r5, =__init_array_end__
 800012c:	4d14      	ldr	r5, [pc, #80]	; (8000180 <endfiniloop+0x32>)

0800012e <initloop>:
initloop:
                cmp     r4, r5
 800012e:	42ac      	cmp	r4, r5
                bge     endinitloop
 8000130:	da03      	bge.n	800013a <endinitloop>
                ldr     r1, [r4]
 8000132:	6821      	ldr	r1, [r4, #0]
                blx     r1
 8000134:	4788      	blx	r1
                adds    r4, #4
 8000136:	3404      	adds	r4, #4
                b       initloop
 8000138:	e7f9      	b.n	800012e <initloop>

0800013a <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 800013a:	f009 fc19 	bl	8009970 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800013e:	4c11      	ldr	r4, [pc, #68]	; (8000184 <endfiniloop+0x36>)
                ldr     r5, =__fini_array_end__
 8000140:	4d11      	ldr	r5, [pc, #68]	; (8000188 <endfiniloop+0x3a>)

08000142 <finiloop>:
finiloop:
                cmp     r4, r5
 8000142:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000144:	da03      	bge.n	800014e <endfiniloop>
                ldr     r1, [r4]
 8000146:	6821      	ldr	r1, [r4, #0]
                blx     r1
 8000148:	4788      	blx	r1
                adds    r4, #4
 800014a:	3404      	adds	r4, #4
                b       finiloop
 800014c:	e7f9      	b.n	8000142 <finiloop>

0800014e <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                ldr     r1, =__default_exit
 800014e:	490f      	ldr	r1, [pc, #60]	; (800018c <endfiniloop+0x3e>)
                bx      r1
 8000150:	4708      	bx	r1
 8000152:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 8000154:	20000200 	.word	0x20000200
                ldr     r0, =__process_stack_end__
 8000158:	20000400 	.word	0x20000400
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800015c:	55555555 	.word	0x55555555
                ldr     r1, =__main_stack_base__
 8000160:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000164:	20000200 	.word	0x20000200
                ldr     r1, =__textdata_base__
 8000168:	0800c028 	.word	0x0800c028
                ldr     r2, =__data_base__
 800016c:	20000400 	.word	0x20000400
                ldr     r3, =__data_end__
 8000170:	20000940 	.word	0x20000940
                ldr     r1, =__bss_base__
 8000174:	20000940 	.word	0x20000940
                ldr     r2, =__bss_end__
 8000178:	200012e0 	.word	0x200012e0
                ldr     r4, =__init_array_base__
 800017c:	080000c0 	.word	0x080000c0
                ldr     r5, =__init_array_end__
 8000180:	080000c0 	.word	0x080000c0
                ldr     r4, =__fini_array_base__
 8000184:	080000c0 	.word	0x080000c0
                ldr     r5, =__fini_array_end__
 8000188:	080000c0 	.word	0x080000c0
                ldr     r1, =__default_exit
 800018c:	08003021 	.word	0x08003021

08000190 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000190:	e796      	b.n	80000c0 <_crt0_entry>

08000192 <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 8000192:	f000 f800 	bl	8000196 <_unhandled_exception>

08000196 <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 8000196:	e7fe      	b.n	8000196 <_unhandled_exception>

08000198 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, lr}
 8000198:	b5f0      	push	{r4, r5, r6, r7, lr}
                mov     r4, r8
 800019a:	4644      	mov	r4, r8
                mov     r5, r9
 800019c:	464d      	mov	r5, r9
                mov     r6, r10
 800019e:	4656      	mov	r6, sl
                mov     r7, r11
 80001a0:	465f      	mov	r7, fp
                push    {r4, r5, r6, r7}
 80001a2:	b4f0      	push	{r4, r5, r6, r7}
                
                mov     r3, sp
 80001a4:	466b      	mov	r3, sp
                str     r3, [r1, #CONTEXT_OFFSET]
 80001a6:	60cb      	str	r3, [r1, #12]
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80001a8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80001aa:	469d      	mov	sp, r3
                
                pop     {r4, r5, r6, r7}
 80001ac:	bcf0      	pop	{r4, r5, r6, r7}
                mov     r8, r4
 80001ae:	46a0      	mov	r8, r4
                mov     r9, r5
 80001b0:	46a9      	mov	r9, r5
                mov     r10, r6
 80001b2:	46b2      	mov	sl, r6
                mov     r11, r7
 80001b4:	46bb      	mov	fp, r7
                pop     {r4, r5, r6, r7, pc}
 80001b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080001b8 <__port_thread_start>:
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_thread_start
__port_thread_start:
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
 80001b8:	f004 fec2 	bl	8004f40 <__dbg_check_unlock>
#endif
#if CH_DBG_STATISTICS
                bl      __stats_stop_measure_crit_thd
#endif
                cpsie   i
 80001bc:	b662      	cpsie	i
                mov     r0, r5
 80001be:	1c28      	adds	r0, r5, #0
                blx     r4
 80001c0:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80001c2:	2000      	movs	r0, #0
                bl      chThdExit
 80001c4:	f006 fac4 	bl	8006750 <chThdExit>

080001c8 <.zombies>:
.zombies:       b       .zombies
 80001c8:	e7fe      	b.n	80001c8 <.zombies>

080001ca <__port_switch_from_isr>:
__port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
 80001ca:	f004 fe91 	bl	8004ef0 <__dbg_check_lock>
#endif
                bl      chSchDoPreemption
 80001ce:	f005 fe6f 	bl	8005eb0 <chSchDoPreemption>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
 80001d2:	f004 feb5 	bl	8004f40 <__dbg_check_unlock>

080001d6 <__port_exit_from_isr>:
#if CH_DBG_STATISTICS
                bl      __stats_stop_measure_crit_thd
#endif
                .globl  __port_exit_from_isr
__port_exit_from_isr:
                ldr     r2, .L2
 80001d6:	4a02      	ldr	r2, [pc, #8]	; (80001e0 <__port_exit_from_isr+0xa>)
                ldr     r3, .L3
 80001d8:	4b02      	ldr	r3, [pc, #8]	; (80001e4 <__port_exit_from_isr+0xe>)
                str     r3, [r2, #0]
 80001da:	6013      	str	r3, [r2, #0]
#if CORTEX_ALTERNATE_SWITCH
                cpsie   i
#endif
.L1:            b       .L1
 80001dc:	e7fe      	b.n	80001dc <__port_exit_from_isr+0x6>
 80001de:	46c0      	nop			; (mov r8, r8)
 80001e0:	e000ed04 	.word	0xe000ed04
 80001e4:	80000000 	.word	0x80000000

080001e8 <__aeabi_cdrcmple>:
 80001e8:	4684      	mov	ip, r0
 80001ea:	1c10      	adds	r0, r2, #0
 80001ec:	4662      	mov	r2, ip
 80001ee:	468c      	mov	ip, r1
 80001f0:	1c19      	adds	r1, r3, #0
 80001f2:	4663      	mov	r3, ip
 80001f4:	e000      	b.n	80001f8 <__aeabi_cdcmpeq>
 80001f6:	46c0      	nop			; (mov r8, r8)

080001f8 <__aeabi_cdcmpeq>:
 80001f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80001fa:	f001 fd0f 	bl	8001c1c <__ledf2>
 80001fe:	2800      	cmp	r0, #0
 8000200:	d401      	bmi.n	8000206 <__aeabi_cdcmpeq+0xe>
 8000202:	2100      	movs	r1, #0
 8000204:	42c8      	cmn	r0, r1
 8000206:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000208 <__aeabi_dcmpeq>:
 8000208:	b510      	push	{r4, lr}
 800020a:	f001 fc59 	bl	8001ac0 <__eqdf2>
 800020e:	4240      	negs	r0, r0
 8000210:	3001      	adds	r0, #1
 8000212:	bd10      	pop	{r4, pc}

08000214 <__aeabi_dcmplt>:
 8000214:	b510      	push	{r4, lr}
 8000216:	f001 fd01 	bl	8001c1c <__ledf2>
 800021a:	2800      	cmp	r0, #0
 800021c:	db01      	blt.n	8000222 <__aeabi_dcmplt+0xe>
 800021e:	2000      	movs	r0, #0
 8000220:	bd10      	pop	{r4, pc}
 8000222:	2001      	movs	r0, #1
 8000224:	bd10      	pop	{r4, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_dcmple>:
 8000228:	b510      	push	{r4, lr}
 800022a:	f001 fcf7 	bl	8001c1c <__ledf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	dd01      	ble.n	8000236 <__aeabi_dcmple+0xe>
 8000232:	2000      	movs	r0, #0
 8000234:	bd10      	pop	{r4, pc}
 8000236:	2001      	movs	r0, #1
 8000238:	bd10      	pop	{r4, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_dcmpgt>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f001 fc7b 	bl	8001b38 <__gedf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	dc01      	bgt.n	800024a <__aeabi_dcmpgt+0xe>
 8000246:	2000      	movs	r0, #0
 8000248:	bd10      	pop	{r4, pc}
 800024a:	2001      	movs	r0, #1
 800024c:	bd10      	pop	{r4, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_dcmpge>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f001 fc71 	bl	8001b38 <__gedf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	da01      	bge.n	800025e <__aeabi_dcmpge+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_cfrcmple>:
 8000264:	4684      	mov	ip, r0
 8000266:	1c08      	adds	r0, r1, #0
 8000268:	4661      	mov	r1, ip
 800026a:	e7ff      	b.n	800026c <__aeabi_cfcmpeq>

0800026c <__aeabi_cfcmpeq>:
 800026c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800026e:	f000 fa43 	bl	80006f8 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	d401      	bmi.n	800027a <__aeabi_cfcmpeq+0xe>
 8000276:	2100      	movs	r1, #0
 8000278:	42c8      	cmn	r0, r1
 800027a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800027c <__aeabi_fcmpeq>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 f9c7 	bl	8000610 <__eqsf2>
 8000282:	4240      	negs	r0, r0
 8000284:	3001      	adds	r0, #1
 8000286:	bd10      	pop	{r4, pc}

08000288 <__aeabi_fcmplt>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fa35 	bl	80006f8 <__lesf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	db01      	blt.n	8000296 <__aeabi_fcmplt+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_fcmple>:
 800029c:	b510      	push	{r4, lr}
 800029e:	f000 fa2b 	bl	80006f8 <__lesf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	dd01      	ble.n	80002aa <__aeabi_fcmple+0xe>
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	2001      	movs	r0, #1
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)

080002b0 <__aeabi_fcmpgt>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	f000 f9d5 	bl	8000660 <__gesf2>
 80002b6:	2800      	cmp	r0, #0
 80002b8:	dc01      	bgt.n	80002be <__aeabi_fcmpgt+0xe>
 80002ba:	2000      	movs	r0, #0
 80002bc:	bd10      	pop	{r4, pc}
 80002be:	2001      	movs	r0, #1
 80002c0:	bd10      	pop	{r4, pc}
 80002c2:	46c0      	nop			; (mov r8, r8)

080002c4 <__aeabi_fcmpge>:
 80002c4:	b510      	push	{r4, lr}
 80002c6:	f000 f9cb 	bl	8000660 <__gesf2>
 80002ca:	2800      	cmp	r0, #0
 80002cc:	da01      	bge.n	80002d2 <__aeabi_fcmpge+0xe>
 80002ce:	2000      	movs	r0, #0
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	2001      	movs	r0, #1
 80002d4:	bd10      	pop	{r4, pc}
 80002d6:	46c0      	nop			; (mov r8, r8)

080002d8 <__aeabi_fadd>:
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	4646      	mov	r6, r8
 80002dc:	46d6      	mov	lr, sl
 80002de:	464f      	mov	r7, r9
 80002e0:	024d      	lsls	r5, r1, #9
 80002e2:	0242      	lsls	r2, r0, #9
 80002e4:	b5c0      	push	{r6, r7, lr}
 80002e6:	0a52      	lsrs	r2, r2, #9
 80002e8:	0a6e      	lsrs	r6, r5, #9
 80002ea:	0047      	lsls	r7, r0, #1
 80002ec:	46b0      	mov	r8, r6
 80002ee:	0e3f      	lsrs	r7, r7, #24
 80002f0:	004e      	lsls	r6, r1, #1
 80002f2:	0fc4      	lsrs	r4, r0, #31
 80002f4:	00d0      	lsls	r0, r2, #3
 80002f6:	4694      	mov	ip, r2
 80002f8:	003b      	movs	r3, r7
 80002fa:	4682      	mov	sl, r0
 80002fc:	0e36      	lsrs	r6, r6, #24
 80002fe:	0fc9      	lsrs	r1, r1, #31
 8000300:	09ad      	lsrs	r5, r5, #6
 8000302:	428c      	cmp	r4, r1
 8000304:	d06d      	beq.n	80003e2 <__aeabi_fadd+0x10a>
 8000306:	1bb8      	subs	r0, r7, r6
 8000308:	4681      	mov	r9, r0
 800030a:	2800      	cmp	r0, #0
 800030c:	dd4d      	ble.n	80003aa <__aeabi_fadd+0xd2>
 800030e:	2e00      	cmp	r6, #0
 8000310:	d100      	bne.n	8000314 <__aeabi_fadd+0x3c>
 8000312:	e088      	b.n	8000426 <__aeabi_fadd+0x14e>
 8000314:	2fff      	cmp	r7, #255	; 0xff
 8000316:	d05a      	beq.n	80003ce <__aeabi_fadd+0xf6>
 8000318:	2380      	movs	r3, #128	; 0x80
 800031a:	04db      	lsls	r3, r3, #19
 800031c:	431d      	orrs	r5, r3
 800031e:	464b      	mov	r3, r9
 8000320:	2201      	movs	r2, #1
 8000322:	2b1b      	cmp	r3, #27
 8000324:	dc0a      	bgt.n	800033c <__aeabi_fadd+0x64>
 8000326:	002b      	movs	r3, r5
 8000328:	464a      	mov	r2, r9
 800032a:	4649      	mov	r1, r9
 800032c:	40d3      	lsrs	r3, r2
 800032e:	2220      	movs	r2, #32
 8000330:	1a52      	subs	r2, r2, r1
 8000332:	4095      	lsls	r5, r2
 8000334:	002a      	movs	r2, r5
 8000336:	1e55      	subs	r5, r2, #1
 8000338:	41aa      	sbcs	r2, r5
 800033a:	431a      	orrs	r2, r3
 800033c:	4653      	mov	r3, sl
 800033e:	1a9a      	subs	r2, r3, r2
 8000340:	0153      	lsls	r3, r2, #5
 8000342:	d400      	bmi.n	8000346 <__aeabi_fadd+0x6e>
 8000344:	e0b9      	b.n	80004ba <__aeabi_fadd+0x1e2>
 8000346:	0192      	lsls	r2, r2, #6
 8000348:	0996      	lsrs	r6, r2, #6
 800034a:	0030      	movs	r0, r6
 800034c:	f002 fbc6 	bl	8002adc <__clzsi2>
 8000350:	3805      	subs	r0, #5
 8000352:	4086      	lsls	r6, r0
 8000354:	4287      	cmp	r7, r0
 8000356:	dd00      	ble.n	800035a <__aeabi_fadd+0x82>
 8000358:	e0d4      	b.n	8000504 <__aeabi_fadd+0x22c>
 800035a:	0033      	movs	r3, r6
 800035c:	1bc7      	subs	r7, r0, r7
 800035e:	2020      	movs	r0, #32
 8000360:	3701      	adds	r7, #1
 8000362:	40fb      	lsrs	r3, r7
 8000364:	1bc7      	subs	r7, r0, r7
 8000366:	40be      	lsls	r6, r7
 8000368:	0032      	movs	r2, r6
 800036a:	1e56      	subs	r6, r2, #1
 800036c:	41b2      	sbcs	r2, r6
 800036e:	2700      	movs	r7, #0
 8000370:	431a      	orrs	r2, r3
 8000372:	0753      	lsls	r3, r2, #29
 8000374:	d004      	beq.n	8000380 <__aeabi_fadd+0xa8>
 8000376:	230f      	movs	r3, #15
 8000378:	4013      	ands	r3, r2
 800037a:	2b04      	cmp	r3, #4
 800037c:	d000      	beq.n	8000380 <__aeabi_fadd+0xa8>
 800037e:	3204      	adds	r2, #4
 8000380:	0153      	lsls	r3, r2, #5
 8000382:	d400      	bmi.n	8000386 <__aeabi_fadd+0xae>
 8000384:	e09c      	b.n	80004c0 <__aeabi_fadd+0x1e8>
 8000386:	1c7b      	adds	r3, r7, #1
 8000388:	2ffe      	cmp	r7, #254	; 0xfe
 800038a:	d100      	bne.n	800038e <__aeabi_fadd+0xb6>
 800038c:	e09a      	b.n	80004c4 <__aeabi_fadd+0x1ec>
 800038e:	0192      	lsls	r2, r2, #6
 8000390:	0a52      	lsrs	r2, r2, #9
 8000392:	4694      	mov	ip, r2
 8000394:	b2db      	uxtb	r3, r3
 8000396:	05d8      	lsls	r0, r3, #23
 8000398:	4663      	mov	r3, ip
 800039a:	07e4      	lsls	r4, r4, #31
 800039c:	4318      	orrs	r0, r3
 800039e:	4320      	orrs	r0, r4
 80003a0:	bce0      	pop	{r5, r6, r7}
 80003a2:	46ba      	mov	sl, r7
 80003a4:	46b1      	mov	r9, r6
 80003a6:	46a8      	mov	r8, r5
 80003a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003aa:	2800      	cmp	r0, #0
 80003ac:	d049      	beq.n	8000442 <__aeabi_fadd+0x16a>
 80003ae:	1bf3      	subs	r3, r6, r7
 80003b0:	2f00      	cmp	r7, #0
 80003b2:	d000      	beq.n	80003b6 <__aeabi_fadd+0xde>
 80003b4:	e0b6      	b.n	8000524 <__aeabi_fadd+0x24c>
 80003b6:	4652      	mov	r2, sl
 80003b8:	2a00      	cmp	r2, #0
 80003ba:	d060      	beq.n	800047e <__aeabi_fadd+0x1a6>
 80003bc:	3b01      	subs	r3, #1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d100      	bne.n	80003c4 <__aeabi_fadd+0xec>
 80003c2:	e0fc      	b.n	80005be <__aeabi_fadd+0x2e6>
 80003c4:	2eff      	cmp	r6, #255	; 0xff
 80003c6:	d000      	beq.n	80003ca <__aeabi_fadd+0xf2>
 80003c8:	e0b4      	b.n	8000534 <__aeabi_fadd+0x25c>
 80003ca:	000c      	movs	r4, r1
 80003cc:	4642      	mov	r2, r8
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d078      	beq.n	80004c4 <__aeabi_fadd+0x1ec>
 80003d2:	2080      	movs	r0, #128	; 0x80
 80003d4:	03c0      	lsls	r0, r0, #15
 80003d6:	4310      	orrs	r0, r2
 80003d8:	0242      	lsls	r2, r0, #9
 80003da:	0a53      	lsrs	r3, r2, #9
 80003dc:	469c      	mov	ip, r3
 80003de:	23ff      	movs	r3, #255	; 0xff
 80003e0:	e7d9      	b.n	8000396 <__aeabi_fadd+0xbe>
 80003e2:	1bb9      	subs	r1, r7, r6
 80003e4:	2900      	cmp	r1, #0
 80003e6:	dd71      	ble.n	80004cc <__aeabi_fadd+0x1f4>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d03f      	beq.n	800046c <__aeabi_fadd+0x194>
 80003ec:	2fff      	cmp	r7, #255	; 0xff
 80003ee:	d0ee      	beq.n	80003ce <__aeabi_fadd+0xf6>
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	04db      	lsls	r3, r3, #19
 80003f4:	431d      	orrs	r5, r3
 80003f6:	2201      	movs	r2, #1
 80003f8:	291b      	cmp	r1, #27
 80003fa:	dc07      	bgt.n	800040c <__aeabi_fadd+0x134>
 80003fc:	002a      	movs	r2, r5
 80003fe:	2320      	movs	r3, #32
 8000400:	40ca      	lsrs	r2, r1
 8000402:	1a59      	subs	r1, r3, r1
 8000404:	408d      	lsls	r5, r1
 8000406:	1e6b      	subs	r3, r5, #1
 8000408:	419d      	sbcs	r5, r3
 800040a:	432a      	orrs	r2, r5
 800040c:	4452      	add	r2, sl
 800040e:	0153      	lsls	r3, r2, #5
 8000410:	d553      	bpl.n	80004ba <__aeabi_fadd+0x1e2>
 8000412:	3701      	adds	r7, #1
 8000414:	2fff      	cmp	r7, #255	; 0xff
 8000416:	d055      	beq.n	80004c4 <__aeabi_fadd+0x1ec>
 8000418:	2301      	movs	r3, #1
 800041a:	497b      	ldr	r1, [pc, #492]	; (8000608 <__aeabi_fadd+0x330>)
 800041c:	4013      	ands	r3, r2
 800041e:	0852      	lsrs	r2, r2, #1
 8000420:	400a      	ands	r2, r1
 8000422:	431a      	orrs	r2, r3
 8000424:	e7a5      	b.n	8000372 <__aeabi_fadd+0x9a>
 8000426:	2d00      	cmp	r5, #0
 8000428:	d02c      	beq.n	8000484 <__aeabi_fadd+0x1ac>
 800042a:	2301      	movs	r3, #1
 800042c:	425b      	negs	r3, r3
 800042e:	469c      	mov	ip, r3
 8000430:	44e1      	add	r9, ip
 8000432:	464b      	mov	r3, r9
 8000434:	2b00      	cmp	r3, #0
 8000436:	d100      	bne.n	800043a <__aeabi_fadd+0x162>
 8000438:	e0ad      	b.n	8000596 <__aeabi_fadd+0x2be>
 800043a:	2fff      	cmp	r7, #255	; 0xff
 800043c:	d000      	beq.n	8000440 <__aeabi_fadd+0x168>
 800043e:	e76e      	b.n	800031e <__aeabi_fadd+0x46>
 8000440:	e7c5      	b.n	80003ce <__aeabi_fadd+0xf6>
 8000442:	20fe      	movs	r0, #254	; 0xfe
 8000444:	1c7e      	adds	r6, r7, #1
 8000446:	4230      	tst	r0, r6
 8000448:	d160      	bne.n	800050c <__aeabi_fadd+0x234>
 800044a:	2f00      	cmp	r7, #0
 800044c:	d000      	beq.n	8000450 <__aeabi_fadd+0x178>
 800044e:	e093      	b.n	8000578 <__aeabi_fadd+0x2a0>
 8000450:	4652      	mov	r2, sl
 8000452:	2a00      	cmp	r2, #0
 8000454:	d100      	bne.n	8000458 <__aeabi_fadd+0x180>
 8000456:	e0b6      	b.n	80005c6 <__aeabi_fadd+0x2ee>
 8000458:	2d00      	cmp	r5, #0
 800045a:	d09c      	beq.n	8000396 <__aeabi_fadd+0xbe>
 800045c:	1b52      	subs	r2, r2, r5
 800045e:	0150      	lsls	r0, r2, #5
 8000460:	d400      	bmi.n	8000464 <__aeabi_fadd+0x18c>
 8000462:	e0c3      	b.n	80005ec <__aeabi_fadd+0x314>
 8000464:	4653      	mov	r3, sl
 8000466:	000c      	movs	r4, r1
 8000468:	1aea      	subs	r2, r5, r3
 800046a:	e782      	b.n	8000372 <__aeabi_fadd+0x9a>
 800046c:	2d00      	cmp	r5, #0
 800046e:	d009      	beq.n	8000484 <__aeabi_fadd+0x1ac>
 8000470:	3901      	subs	r1, #1
 8000472:	2900      	cmp	r1, #0
 8000474:	d100      	bne.n	8000478 <__aeabi_fadd+0x1a0>
 8000476:	e08b      	b.n	8000590 <__aeabi_fadd+0x2b8>
 8000478:	2fff      	cmp	r7, #255	; 0xff
 800047a:	d1bc      	bne.n	80003f6 <__aeabi_fadd+0x11e>
 800047c:	e7a7      	b.n	80003ce <__aeabi_fadd+0xf6>
 800047e:	000c      	movs	r4, r1
 8000480:	4642      	mov	r2, r8
 8000482:	0037      	movs	r7, r6
 8000484:	2fff      	cmp	r7, #255	; 0xff
 8000486:	d0a2      	beq.n	80003ce <__aeabi_fadd+0xf6>
 8000488:	0252      	lsls	r2, r2, #9
 800048a:	0a53      	lsrs	r3, r2, #9
 800048c:	469c      	mov	ip, r3
 800048e:	b2fb      	uxtb	r3, r7
 8000490:	e781      	b.n	8000396 <__aeabi_fadd+0xbe>
 8000492:	21fe      	movs	r1, #254	; 0xfe
 8000494:	3701      	adds	r7, #1
 8000496:	4239      	tst	r1, r7
 8000498:	d165      	bne.n	8000566 <__aeabi_fadd+0x28e>
 800049a:	2b00      	cmp	r3, #0
 800049c:	d17e      	bne.n	800059c <__aeabi_fadd+0x2c4>
 800049e:	2800      	cmp	r0, #0
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fadd+0x1cc>
 80004a2:	e0aa      	b.n	80005fa <__aeabi_fadd+0x322>
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d100      	bne.n	80004aa <__aeabi_fadd+0x1d2>
 80004a8:	e775      	b.n	8000396 <__aeabi_fadd+0xbe>
 80004aa:	002a      	movs	r2, r5
 80004ac:	4452      	add	r2, sl
 80004ae:	2700      	movs	r7, #0
 80004b0:	0153      	lsls	r3, r2, #5
 80004b2:	d502      	bpl.n	80004ba <__aeabi_fadd+0x1e2>
 80004b4:	4b55      	ldr	r3, [pc, #340]	; (800060c <__aeabi_fadd+0x334>)
 80004b6:	3701      	adds	r7, #1
 80004b8:	401a      	ands	r2, r3
 80004ba:	0753      	lsls	r3, r2, #29
 80004bc:	d000      	beq.n	80004c0 <__aeabi_fadd+0x1e8>
 80004be:	e75a      	b.n	8000376 <__aeabi_fadd+0x9e>
 80004c0:	08d2      	lsrs	r2, r2, #3
 80004c2:	e7df      	b.n	8000484 <__aeabi_fadd+0x1ac>
 80004c4:	2200      	movs	r2, #0
 80004c6:	23ff      	movs	r3, #255	; 0xff
 80004c8:	4694      	mov	ip, r2
 80004ca:	e764      	b.n	8000396 <__aeabi_fadd+0xbe>
 80004cc:	2900      	cmp	r1, #0
 80004ce:	d0e0      	beq.n	8000492 <__aeabi_fadd+0x1ba>
 80004d0:	1bf3      	subs	r3, r6, r7
 80004d2:	2f00      	cmp	r7, #0
 80004d4:	d03e      	beq.n	8000554 <__aeabi_fadd+0x27c>
 80004d6:	2eff      	cmp	r6, #255	; 0xff
 80004d8:	d100      	bne.n	80004dc <__aeabi_fadd+0x204>
 80004da:	e777      	b.n	80003cc <__aeabi_fadd+0xf4>
 80004dc:	2280      	movs	r2, #128	; 0x80
 80004de:	0001      	movs	r1, r0
 80004e0:	04d2      	lsls	r2, r2, #19
 80004e2:	4311      	orrs	r1, r2
 80004e4:	468a      	mov	sl, r1
 80004e6:	2201      	movs	r2, #1
 80004e8:	2b1b      	cmp	r3, #27
 80004ea:	dc08      	bgt.n	80004fe <__aeabi_fadd+0x226>
 80004ec:	4652      	mov	r2, sl
 80004ee:	2120      	movs	r1, #32
 80004f0:	4650      	mov	r0, sl
 80004f2:	40da      	lsrs	r2, r3
 80004f4:	1acb      	subs	r3, r1, r3
 80004f6:	4098      	lsls	r0, r3
 80004f8:	1e43      	subs	r3, r0, #1
 80004fa:	4198      	sbcs	r0, r3
 80004fc:	4302      	orrs	r2, r0
 80004fe:	0037      	movs	r7, r6
 8000500:	1952      	adds	r2, r2, r5
 8000502:	e784      	b.n	800040e <__aeabi_fadd+0x136>
 8000504:	4a41      	ldr	r2, [pc, #260]	; (800060c <__aeabi_fadd+0x334>)
 8000506:	1a3f      	subs	r7, r7, r0
 8000508:	4032      	ands	r2, r6
 800050a:	e732      	b.n	8000372 <__aeabi_fadd+0x9a>
 800050c:	4653      	mov	r3, sl
 800050e:	1b5e      	subs	r6, r3, r5
 8000510:	0173      	lsls	r3, r6, #5
 8000512:	d42d      	bmi.n	8000570 <__aeabi_fadd+0x298>
 8000514:	2e00      	cmp	r6, #0
 8000516:	d000      	beq.n	800051a <__aeabi_fadd+0x242>
 8000518:	e717      	b.n	800034a <__aeabi_fadd+0x72>
 800051a:	2200      	movs	r2, #0
 800051c:	2400      	movs	r4, #0
 800051e:	2300      	movs	r3, #0
 8000520:	4694      	mov	ip, r2
 8000522:	e738      	b.n	8000396 <__aeabi_fadd+0xbe>
 8000524:	2eff      	cmp	r6, #255	; 0xff
 8000526:	d100      	bne.n	800052a <__aeabi_fadd+0x252>
 8000528:	e74f      	b.n	80003ca <__aeabi_fadd+0xf2>
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	4650      	mov	r0, sl
 800052e:	04d2      	lsls	r2, r2, #19
 8000530:	4310      	orrs	r0, r2
 8000532:	4682      	mov	sl, r0
 8000534:	2201      	movs	r2, #1
 8000536:	2b1b      	cmp	r3, #27
 8000538:	dc08      	bgt.n	800054c <__aeabi_fadd+0x274>
 800053a:	4652      	mov	r2, sl
 800053c:	2420      	movs	r4, #32
 800053e:	4650      	mov	r0, sl
 8000540:	40da      	lsrs	r2, r3
 8000542:	1ae3      	subs	r3, r4, r3
 8000544:	4098      	lsls	r0, r3
 8000546:	1e43      	subs	r3, r0, #1
 8000548:	4198      	sbcs	r0, r3
 800054a:	4302      	orrs	r2, r0
 800054c:	000c      	movs	r4, r1
 800054e:	0037      	movs	r7, r6
 8000550:	1aaa      	subs	r2, r5, r2
 8000552:	e6f5      	b.n	8000340 <__aeabi_fadd+0x68>
 8000554:	2800      	cmp	r0, #0
 8000556:	d093      	beq.n	8000480 <__aeabi_fadd+0x1a8>
 8000558:	3b01      	subs	r3, #1
 800055a:	2b00      	cmp	r3, #0
 800055c:	d04f      	beq.n	80005fe <__aeabi_fadd+0x326>
 800055e:	2eff      	cmp	r6, #255	; 0xff
 8000560:	d1c1      	bne.n	80004e6 <__aeabi_fadd+0x20e>
 8000562:	4642      	mov	r2, r8
 8000564:	e733      	b.n	80003ce <__aeabi_fadd+0xf6>
 8000566:	2fff      	cmp	r7, #255	; 0xff
 8000568:	d0ac      	beq.n	80004c4 <__aeabi_fadd+0x1ec>
 800056a:	4455      	add	r5, sl
 800056c:	086a      	lsrs	r2, r5, #1
 800056e:	e7a4      	b.n	80004ba <__aeabi_fadd+0x1e2>
 8000570:	4653      	mov	r3, sl
 8000572:	000c      	movs	r4, r1
 8000574:	1aee      	subs	r6, r5, r3
 8000576:	e6e8      	b.n	800034a <__aeabi_fadd+0x72>
 8000578:	4653      	mov	r3, sl
 800057a:	2b00      	cmp	r3, #0
 800057c:	d128      	bne.n	80005d0 <__aeabi_fadd+0x2f8>
 800057e:	2d00      	cmp	r5, #0
 8000580:	d000      	beq.n	8000584 <__aeabi_fadd+0x2ac>
 8000582:	e722      	b.n	80003ca <__aeabi_fadd+0xf2>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	03db      	lsls	r3, r3, #15
 8000588:	469c      	mov	ip, r3
 800058a:	2400      	movs	r4, #0
 800058c:	23ff      	movs	r3, #255	; 0xff
 800058e:	e702      	b.n	8000396 <__aeabi_fadd+0xbe>
 8000590:	002a      	movs	r2, r5
 8000592:	4452      	add	r2, sl
 8000594:	e73b      	b.n	800040e <__aeabi_fadd+0x136>
 8000596:	4653      	mov	r3, sl
 8000598:	1b5a      	subs	r2, r3, r5
 800059a:	e6d1      	b.n	8000340 <__aeabi_fadd+0x68>
 800059c:	2800      	cmp	r0, #0
 800059e:	d100      	bne.n	80005a2 <__aeabi_fadd+0x2ca>
 80005a0:	e714      	b.n	80003cc <__aeabi_fadd+0xf4>
 80005a2:	2d00      	cmp	r5, #0
 80005a4:	d100      	bne.n	80005a8 <__aeabi_fadd+0x2d0>
 80005a6:	e712      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	03db      	lsls	r3, r3, #15
 80005ac:	421a      	tst	r2, r3
 80005ae:	d100      	bne.n	80005b2 <__aeabi_fadd+0x2da>
 80005b0:	e70d      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005b2:	4641      	mov	r1, r8
 80005b4:	4219      	tst	r1, r3
 80005b6:	d000      	beq.n	80005ba <__aeabi_fadd+0x2e2>
 80005b8:	e709      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005ba:	4642      	mov	r2, r8
 80005bc:	e707      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005be:	000c      	movs	r4, r1
 80005c0:	0037      	movs	r7, r6
 80005c2:	1aaa      	subs	r2, r5, r2
 80005c4:	e6bc      	b.n	8000340 <__aeabi_fadd+0x68>
 80005c6:	2d00      	cmp	r5, #0
 80005c8:	d013      	beq.n	80005f2 <__aeabi_fadd+0x31a>
 80005ca:	000c      	movs	r4, r1
 80005cc:	46c4      	mov	ip, r8
 80005ce:	e6e2      	b.n	8000396 <__aeabi_fadd+0xbe>
 80005d0:	2d00      	cmp	r5, #0
 80005d2:	d100      	bne.n	80005d6 <__aeabi_fadd+0x2fe>
 80005d4:	e6fb      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	03db      	lsls	r3, r3, #15
 80005da:	421a      	tst	r2, r3
 80005dc:	d100      	bne.n	80005e0 <__aeabi_fadd+0x308>
 80005de:	e6f6      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005e0:	4640      	mov	r0, r8
 80005e2:	4218      	tst	r0, r3
 80005e4:	d000      	beq.n	80005e8 <__aeabi_fadd+0x310>
 80005e6:	e6f2      	b.n	80003ce <__aeabi_fadd+0xf6>
 80005e8:	000c      	movs	r4, r1
 80005ea:	e6ef      	b.n	80003cc <__aeabi_fadd+0xf4>
 80005ec:	2a00      	cmp	r2, #0
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fadd+0x31a>
 80005f0:	e763      	b.n	80004ba <__aeabi_fadd+0x1e2>
 80005f2:	2200      	movs	r2, #0
 80005f4:	2400      	movs	r4, #0
 80005f6:	4694      	mov	ip, r2
 80005f8:	e6cd      	b.n	8000396 <__aeabi_fadd+0xbe>
 80005fa:	46c4      	mov	ip, r8
 80005fc:	e6cb      	b.n	8000396 <__aeabi_fadd+0xbe>
 80005fe:	002a      	movs	r2, r5
 8000600:	0037      	movs	r7, r6
 8000602:	4452      	add	r2, sl
 8000604:	e703      	b.n	800040e <__aeabi_fadd+0x136>
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	7dffffff 	.word	0x7dffffff
 800060c:	fbffffff 	.word	0xfbffffff

08000610 <__eqsf2>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	0042      	lsls	r2, r0, #1
 8000614:	024e      	lsls	r6, r1, #9
 8000616:	004c      	lsls	r4, r1, #1
 8000618:	0245      	lsls	r5, r0, #9
 800061a:	0a6d      	lsrs	r5, r5, #9
 800061c:	0e12      	lsrs	r2, r2, #24
 800061e:	0fc3      	lsrs	r3, r0, #31
 8000620:	0a76      	lsrs	r6, r6, #9
 8000622:	0e24      	lsrs	r4, r4, #24
 8000624:	0fc9      	lsrs	r1, r1, #31
 8000626:	2aff      	cmp	r2, #255	; 0xff
 8000628:	d00f      	beq.n	800064a <__eqsf2+0x3a>
 800062a:	2cff      	cmp	r4, #255	; 0xff
 800062c:	d011      	beq.n	8000652 <__eqsf2+0x42>
 800062e:	2001      	movs	r0, #1
 8000630:	42a2      	cmp	r2, r4
 8000632:	d000      	beq.n	8000636 <__eqsf2+0x26>
 8000634:	bd70      	pop	{r4, r5, r6, pc}
 8000636:	42b5      	cmp	r5, r6
 8000638:	d1fc      	bne.n	8000634 <__eqsf2+0x24>
 800063a:	428b      	cmp	r3, r1
 800063c:	d00d      	beq.n	800065a <__eqsf2+0x4a>
 800063e:	2a00      	cmp	r2, #0
 8000640:	d1f8      	bne.n	8000634 <__eqsf2+0x24>
 8000642:	0028      	movs	r0, r5
 8000644:	1e45      	subs	r5, r0, #1
 8000646:	41a8      	sbcs	r0, r5
 8000648:	e7f4      	b.n	8000634 <__eqsf2+0x24>
 800064a:	2001      	movs	r0, #1
 800064c:	2d00      	cmp	r5, #0
 800064e:	d1f1      	bne.n	8000634 <__eqsf2+0x24>
 8000650:	e7eb      	b.n	800062a <__eqsf2+0x1a>
 8000652:	2001      	movs	r0, #1
 8000654:	2e00      	cmp	r6, #0
 8000656:	d1ed      	bne.n	8000634 <__eqsf2+0x24>
 8000658:	e7e9      	b.n	800062e <__eqsf2+0x1e>
 800065a:	2000      	movs	r0, #0
 800065c:	e7ea      	b.n	8000634 <__eqsf2+0x24>
 800065e:	46c0      	nop			; (mov r8, r8)

08000660 <__gesf2>:
 8000660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000662:	0042      	lsls	r2, r0, #1
 8000664:	0246      	lsls	r6, r0, #9
 8000666:	024d      	lsls	r5, r1, #9
 8000668:	004c      	lsls	r4, r1, #1
 800066a:	0fc3      	lsrs	r3, r0, #31
 800066c:	0a76      	lsrs	r6, r6, #9
 800066e:	0e12      	lsrs	r2, r2, #24
 8000670:	0a6d      	lsrs	r5, r5, #9
 8000672:	0e24      	lsrs	r4, r4, #24
 8000674:	0fc8      	lsrs	r0, r1, #31
 8000676:	2aff      	cmp	r2, #255	; 0xff
 8000678:	d01f      	beq.n	80006ba <__gesf2+0x5a>
 800067a:	2cff      	cmp	r4, #255	; 0xff
 800067c:	d010      	beq.n	80006a0 <__gesf2+0x40>
 800067e:	2a00      	cmp	r2, #0
 8000680:	d11f      	bne.n	80006c2 <__gesf2+0x62>
 8000682:	4271      	negs	r1, r6
 8000684:	4171      	adcs	r1, r6
 8000686:	2c00      	cmp	r4, #0
 8000688:	d101      	bne.n	800068e <__gesf2+0x2e>
 800068a:	2d00      	cmp	r5, #0
 800068c:	d01e      	beq.n	80006cc <__gesf2+0x6c>
 800068e:	2900      	cmp	r1, #0
 8000690:	d10e      	bne.n	80006b0 <__gesf2+0x50>
 8000692:	4283      	cmp	r3, r0
 8000694:	d01e      	beq.n	80006d4 <__gesf2+0x74>
 8000696:	2102      	movs	r1, #2
 8000698:	1e58      	subs	r0, r3, #1
 800069a:	4008      	ands	r0, r1
 800069c:	3801      	subs	r0, #1
 800069e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a0:	2d00      	cmp	r5, #0
 80006a2:	d126      	bne.n	80006f2 <__gesf2+0x92>
 80006a4:	2a00      	cmp	r2, #0
 80006a6:	d1f4      	bne.n	8000692 <__gesf2+0x32>
 80006a8:	4271      	negs	r1, r6
 80006aa:	4171      	adcs	r1, r6
 80006ac:	2900      	cmp	r1, #0
 80006ae:	d0f0      	beq.n	8000692 <__gesf2+0x32>
 80006b0:	2800      	cmp	r0, #0
 80006b2:	d1f4      	bne.n	800069e <__gesf2+0x3e>
 80006b4:	2001      	movs	r0, #1
 80006b6:	4240      	negs	r0, r0
 80006b8:	e7f1      	b.n	800069e <__gesf2+0x3e>
 80006ba:	2e00      	cmp	r6, #0
 80006bc:	d119      	bne.n	80006f2 <__gesf2+0x92>
 80006be:	2cff      	cmp	r4, #255	; 0xff
 80006c0:	d0ee      	beq.n	80006a0 <__gesf2+0x40>
 80006c2:	2c00      	cmp	r4, #0
 80006c4:	d1e5      	bne.n	8000692 <__gesf2+0x32>
 80006c6:	2d00      	cmp	r5, #0
 80006c8:	d1e3      	bne.n	8000692 <__gesf2+0x32>
 80006ca:	e7e4      	b.n	8000696 <__gesf2+0x36>
 80006cc:	2000      	movs	r0, #0
 80006ce:	2e00      	cmp	r6, #0
 80006d0:	d0e5      	beq.n	800069e <__gesf2+0x3e>
 80006d2:	e7e0      	b.n	8000696 <__gesf2+0x36>
 80006d4:	42a2      	cmp	r2, r4
 80006d6:	dc05      	bgt.n	80006e4 <__gesf2+0x84>
 80006d8:	dbea      	blt.n	80006b0 <__gesf2+0x50>
 80006da:	42ae      	cmp	r6, r5
 80006dc:	d802      	bhi.n	80006e4 <__gesf2+0x84>
 80006de:	d3e7      	bcc.n	80006b0 <__gesf2+0x50>
 80006e0:	2000      	movs	r0, #0
 80006e2:	e7dc      	b.n	800069e <__gesf2+0x3e>
 80006e4:	4241      	negs	r1, r0
 80006e6:	4141      	adcs	r1, r0
 80006e8:	4248      	negs	r0, r1
 80006ea:	2102      	movs	r1, #2
 80006ec:	4008      	ands	r0, r1
 80006ee:	3801      	subs	r0, #1
 80006f0:	e7d5      	b.n	800069e <__gesf2+0x3e>
 80006f2:	2002      	movs	r0, #2
 80006f4:	4240      	negs	r0, r0
 80006f6:	e7d2      	b.n	800069e <__gesf2+0x3e>

080006f8 <__lesf2>:
 80006f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fa:	0042      	lsls	r2, r0, #1
 80006fc:	0246      	lsls	r6, r0, #9
 80006fe:	024d      	lsls	r5, r1, #9
 8000700:	004c      	lsls	r4, r1, #1
 8000702:	0fc3      	lsrs	r3, r0, #31
 8000704:	0a76      	lsrs	r6, r6, #9
 8000706:	0e12      	lsrs	r2, r2, #24
 8000708:	0a6d      	lsrs	r5, r5, #9
 800070a:	0e24      	lsrs	r4, r4, #24
 800070c:	0fc8      	lsrs	r0, r1, #31
 800070e:	2aff      	cmp	r2, #255	; 0xff
 8000710:	d00d      	beq.n	800072e <__lesf2+0x36>
 8000712:	2cff      	cmp	r4, #255	; 0xff
 8000714:	d00f      	beq.n	8000736 <__lesf2+0x3e>
 8000716:	2a00      	cmp	r2, #0
 8000718:	d123      	bne.n	8000762 <__lesf2+0x6a>
 800071a:	4271      	negs	r1, r6
 800071c:	4171      	adcs	r1, r6
 800071e:	2c00      	cmp	r4, #0
 8000720:	d10f      	bne.n	8000742 <__lesf2+0x4a>
 8000722:	2d00      	cmp	r5, #0
 8000724:	d10d      	bne.n	8000742 <__lesf2+0x4a>
 8000726:	2000      	movs	r0, #0
 8000728:	2e00      	cmp	r6, #0
 800072a:	d014      	beq.n	8000756 <__lesf2+0x5e>
 800072c:	e00d      	b.n	800074a <__lesf2+0x52>
 800072e:	2e00      	cmp	r6, #0
 8000730:	d110      	bne.n	8000754 <__lesf2+0x5c>
 8000732:	2cff      	cmp	r4, #255	; 0xff
 8000734:	d115      	bne.n	8000762 <__lesf2+0x6a>
 8000736:	2d00      	cmp	r5, #0
 8000738:	d10c      	bne.n	8000754 <__lesf2+0x5c>
 800073a:	2a00      	cmp	r2, #0
 800073c:	d103      	bne.n	8000746 <__lesf2+0x4e>
 800073e:	4271      	negs	r1, r6
 8000740:	4171      	adcs	r1, r6
 8000742:	2900      	cmp	r1, #0
 8000744:	d108      	bne.n	8000758 <__lesf2+0x60>
 8000746:	4283      	cmp	r3, r0
 8000748:	d010      	beq.n	800076c <__lesf2+0x74>
 800074a:	2102      	movs	r1, #2
 800074c:	1e58      	subs	r0, r3, #1
 800074e:	4008      	ands	r0, r1
 8000750:	3801      	subs	r0, #1
 8000752:	e000      	b.n	8000756 <__lesf2+0x5e>
 8000754:	2002      	movs	r0, #2
 8000756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000758:	2800      	cmp	r0, #0
 800075a:	d1fc      	bne.n	8000756 <__lesf2+0x5e>
 800075c:	2001      	movs	r0, #1
 800075e:	4240      	negs	r0, r0
 8000760:	e7f9      	b.n	8000756 <__lesf2+0x5e>
 8000762:	2c00      	cmp	r4, #0
 8000764:	d1ef      	bne.n	8000746 <__lesf2+0x4e>
 8000766:	2d00      	cmp	r5, #0
 8000768:	d1ed      	bne.n	8000746 <__lesf2+0x4e>
 800076a:	e7ee      	b.n	800074a <__lesf2+0x52>
 800076c:	42a2      	cmp	r2, r4
 800076e:	dc05      	bgt.n	800077c <__lesf2+0x84>
 8000770:	dbf2      	blt.n	8000758 <__lesf2+0x60>
 8000772:	42ae      	cmp	r6, r5
 8000774:	d802      	bhi.n	800077c <__lesf2+0x84>
 8000776:	d3ef      	bcc.n	8000758 <__lesf2+0x60>
 8000778:	2000      	movs	r0, #0
 800077a:	e7ec      	b.n	8000756 <__lesf2+0x5e>
 800077c:	4241      	negs	r1, r0
 800077e:	4141      	adcs	r1, r0
 8000780:	4248      	negs	r0, r1
 8000782:	2102      	movs	r1, #2
 8000784:	4008      	ands	r0, r1
 8000786:	3801      	subs	r0, #1
 8000788:	e7e5      	b.n	8000756 <__lesf2+0x5e>
 800078a:	46c0      	nop			; (mov r8, r8)

0800078c <__aeabi_fmul>:
 800078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800078e:	4657      	mov	r7, sl
 8000790:	464e      	mov	r6, r9
 8000792:	4645      	mov	r5, r8
 8000794:	46de      	mov	lr, fp
 8000796:	0244      	lsls	r4, r0, #9
 8000798:	b5e0      	push	{r5, r6, r7, lr}
 800079a:	0045      	lsls	r5, r0, #1
 800079c:	1c0f      	adds	r7, r1, #0
 800079e:	0a64      	lsrs	r4, r4, #9
 80007a0:	0e2d      	lsrs	r5, r5, #24
 80007a2:	0fc6      	lsrs	r6, r0, #31
 80007a4:	2d00      	cmp	r5, #0
 80007a6:	d047      	beq.n	8000838 <__aeabi_fmul+0xac>
 80007a8:	2dff      	cmp	r5, #255	; 0xff
 80007aa:	d04d      	beq.n	8000848 <__aeabi_fmul+0xbc>
 80007ac:	2300      	movs	r3, #0
 80007ae:	2080      	movs	r0, #128	; 0x80
 80007b0:	469a      	mov	sl, r3
 80007b2:	469b      	mov	fp, r3
 80007b4:	00e4      	lsls	r4, r4, #3
 80007b6:	04c0      	lsls	r0, r0, #19
 80007b8:	4304      	orrs	r4, r0
 80007ba:	3d7f      	subs	r5, #127	; 0x7f
 80007bc:	0278      	lsls	r0, r7, #9
 80007be:	0a43      	lsrs	r3, r0, #9
 80007c0:	4699      	mov	r9, r3
 80007c2:	007a      	lsls	r2, r7, #1
 80007c4:	0ffb      	lsrs	r3, r7, #31
 80007c6:	4698      	mov	r8, r3
 80007c8:	0e12      	lsrs	r2, r2, #24
 80007ca:	464b      	mov	r3, r9
 80007cc:	d044      	beq.n	8000858 <__aeabi_fmul+0xcc>
 80007ce:	2aff      	cmp	r2, #255	; 0xff
 80007d0:	d011      	beq.n	80007f6 <__aeabi_fmul+0x6a>
 80007d2:	00d8      	lsls	r0, r3, #3
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	04db      	lsls	r3, r3, #19
 80007d8:	4303      	orrs	r3, r0
 80007da:	4699      	mov	r9, r3
 80007dc:	2000      	movs	r0, #0
 80007de:	3a7f      	subs	r2, #127	; 0x7f
 80007e0:	18ad      	adds	r5, r5, r2
 80007e2:	4647      	mov	r7, r8
 80007e4:	4653      	mov	r3, sl
 80007e6:	4077      	eors	r7, r6
 80007e8:	1c69      	adds	r1, r5, #1
 80007ea:	2b0f      	cmp	r3, #15
 80007ec:	d83f      	bhi.n	800086e <__aeabi_fmul+0xe2>
 80007ee:	4a72      	ldr	r2, [pc, #456]	; (80009b8 <__aeabi_fmul+0x22c>)
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	58d3      	ldr	r3, [r2, r3]
 80007f4:	469f      	mov	pc, r3
 80007f6:	35ff      	adds	r5, #255	; 0xff
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d000      	beq.n	80007fe <__aeabi_fmul+0x72>
 80007fc:	e079      	b.n	80008f2 <__aeabi_fmul+0x166>
 80007fe:	4652      	mov	r2, sl
 8000800:	2302      	movs	r3, #2
 8000802:	431a      	orrs	r2, r3
 8000804:	4692      	mov	sl, r2
 8000806:	2002      	movs	r0, #2
 8000808:	e7eb      	b.n	80007e2 <__aeabi_fmul+0x56>
 800080a:	4647      	mov	r7, r8
 800080c:	464c      	mov	r4, r9
 800080e:	4683      	mov	fp, r0
 8000810:	465b      	mov	r3, fp
 8000812:	2b02      	cmp	r3, #2
 8000814:	d028      	beq.n	8000868 <__aeabi_fmul+0xdc>
 8000816:	2b03      	cmp	r3, #3
 8000818:	d100      	bne.n	800081c <__aeabi_fmul+0x90>
 800081a:	e0c6      	b.n	80009aa <__aeabi_fmul+0x21e>
 800081c:	2b01      	cmp	r3, #1
 800081e:	d14f      	bne.n	80008c0 <__aeabi_fmul+0x134>
 8000820:	2000      	movs	r0, #0
 8000822:	2400      	movs	r4, #0
 8000824:	05c0      	lsls	r0, r0, #23
 8000826:	07ff      	lsls	r7, r7, #31
 8000828:	4320      	orrs	r0, r4
 800082a:	4338      	orrs	r0, r7
 800082c:	bcf0      	pop	{r4, r5, r6, r7}
 800082e:	46bb      	mov	fp, r7
 8000830:	46b2      	mov	sl, r6
 8000832:	46a9      	mov	r9, r5
 8000834:	46a0      	mov	r8, r4
 8000836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000838:	2c00      	cmp	r4, #0
 800083a:	d171      	bne.n	8000920 <__aeabi_fmul+0x194>
 800083c:	2304      	movs	r3, #4
 800083e:	469a      	mov	sl, r3
 8000840:	3b03      	subs	r3, #3
 8000842:	2500      	movs	r5, #0
 8000844:	469b      	mov	fp, r3
 8000846:	e7b9      	b.n	80007bc <__aeabi_fmul+0x30>
 8000848:	2c00      	cmp	r4, #0
 800084a:	d163      	bne.n	8000914 <__aeabi_fmul+0x188>
 800084c:	2308      	movs	r3, #8
 800084e:	469a      	mov	sl, r3
 8000850:	3b06      	subs	r3, #6
 8000852:	25ff      	movs	r5, #255	; 0xff
 8000854:	469b      	mov	fp, r3
 8000856:	e7b1      	b.n	80007bc <__aeabi_fmul+0x30>
 8000858:	2b00      	cmp	r3, #0
 800085a:	d150      	bne.n	80008fe <__aeabi_fmul+0x172>
 800085c:	4652      	mov	r2, sl
 800085e:	3301      	adds	r3, #1
 8000860:	431a      	orrs	r2, r3
 8000862:	4692      	mov	sl, r2
 8000864:	2001      	movs	r0, #1
 8000866:	e7bc      	b.n	80007e2 <__aeabi_fmul+0x56>
 8000868:	20ff      	movs	r0, #255	; 0xff
 800086a:	2400      	movs	r4, #0
 800086c:	e7da      	b.n	8000824 <__aeabi_fmul+0x98>
 800086e:	4648      	mov	r0, r9
 8000870:	0c26      	lsrs	r6, r4, #16
 8000872:	0424      	lsls	r4, r4, #16
 8000874:	0c22      	lsrs	r2, r4, #16
 8000876:	0404      	lsls	r4, r0, #16
 8000878:	0c24      	lsrs	r4, r4, #16
 800087a:	464b      	mov	r3, r9
 800087c:	0020      	movs	r0, r4
 800087e:	0c1b      	lsrs	r3, r3, #16
 8000880:	4350      	muls	r0, r2
 8000882:	4374      	muls	r4, r6
 8000884:	435a      	muls	r2, r3
 8000886:	435e      	muls	r6, r3
 8000888:	1912      	adds	r2, r2, r4
 800088a:	0c03      	lsrs	r3, r0, #16
 800088c:	189b      	adds	r3, r3, r2
 800088e:	429c      	cmp	r4, r3
 8000890:	d903      	bls.n	800089a <__aeabi_fmul+0x10e>
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	0252      	lsls	r2, r2, #9
 8000896:	4694      	mov	ip, r2
 8000898:	4466      	add	r6, ip
 800089a:	0400      	lsls	r0, r0, #16
 800089c:	041a      	lsls	r2, r3, #16
 800089e:	0c00      	lsrs	r0, r0, #16
 80008a0:	1812      	adds	r2, r2, r0
 80008a2:	0194      	lsls	r4, r2, #6
 80008a4:	1e60      	subs	r0, r4, #1
 80008a6:	4184      	sbcs	r4, r0
 80008a8:	0c1b      	lsrs	r3, r3, #16
 80008aa:	0e92      	lsrs	r2, r2, #26
 80008ac:	199b      	adds	r3, r3, r6
 80008ae:	4314      	orrs	r4, r2
 80008b0:	019b      	lsls	r3, r3, #6
 80008b2:	431c      	orrs	r4, r3
 80008b4:	011b      	lsls	r3, r3, #4
 80008b6:	d572      	bpl.n	800099e <__aeabi_fmul+0x212>
 80008b8:	2001      	movs	r0, #1
 80008ba:	0863      	lsrs	r3, r4, #1
 80008bc:	4004      	ands	r4, r0
 80008be:	431c      	orrs	r4, r3
 80008c0:	0008      	movs	r0, r1
 80008c2:	307f      	adds	r0, #127	; 0x7f
 80008c4:	2800      	cmp	r0, #0
 80008c6:	dd3c      	ble.n	8000942 <__aeabi_fmul+0x1b6>
 80008c8:	0763      	lsls	r3, r4, #29
 80008ca:	d004      	beq.n	80008d6 <__aeabi_fmul+0x14a>
 80008cc:	230f      	movs	r3, #15
 80008ce:	4023      	ands	r3, r4
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d000      	beq.n	80008d6 <__aeabi_fmul+0x14a>
 80008d4:	3404      	adds	r4, #4
 80008d6:	0123      	lsls	r3, r4, #4
 80008d8:	d503      	bpl.n	80008e2 <__aeabi_fmul+0x156>
 80008da:	3180      	adds	r1, #128	; 0x80
 80008dc:	0008      	movs	r0, r1
 80008de:	4b37      	ldr	r3, [pc, #220]	; (80009bc <__aeabi_fmul+0x230>)
 80008e0:	401c      	ands	r4, r3
 80008e2:	28fe      	cmp	r0, #254	; 0xfe
 80008e4:	dcc0      	bgt.n	8000868 <__aeabi_fmul+0xdc>
 80008e6:	01a4      	lsls	r4, r4, #6
 80008e8:	0a64      	lsrs	r4, r4, #9
 80008ea:	b2c0      	uxtb	r0, r0
 80008ec:	e79a      	b.n	8000824 <__aeabi_fmul+0x98>
 80008ee:	0037      	movs	r7, r6
 80008f0:	e78e      	b.n	8000810 <__aeabi_fmul+0x84>
 80008f2:	4652      	mov	r2, sl
 80008f4:	2303      	movs	r3, #3
 80008f6:	431a      	orrs	r2, r3
 80008f8:	4692      	mov	sl, r2
 80008fa:	2003      	movs	r0, #3
 80008fc:	e771      	b.n	80007e2 <__aeabi_fmul+0x56>
 80008fe:	4648      	mov	r0, r9
 8000900:	f002 f8ec 	bl	8002adc <__clzsi2>
 8000904:	464a      	mov	r2, r9
 8000906:	1f43      	subs	r3, r0, #5
 8000908:	409a      	lsls	r2, r3
 800090a:	1a2d      	subs	r5, r5, r0
 800090c:	4691      	mov	r9, r2
 800090e:	2000      	movs	r0, #0
 8000910:	3d76      	subs	r5, #118	; 0x76
 8000912:	e766      	b.n	80007e2 <__aeabi_fmul+0x56>
 8000914:	230c      	movs	r3, #12
 8000916:	469a      	mov	sl, r3
 8000918:	3b09      	subs	r3, #9
 800091a:	25ff      	movs	r5, #255	; 0xff
 800091c:	469b      	mov	fp, r3
 800091e:	e74d      	b.n	80007bc <__aeabi_fmul+0x30>
 8000920:	0020      	movs	r0, r4
 8000922:	f002 f8db 	bl	8002adc <__clzsi2>
 8000926:	2576      	movs	r5, #118	; 0x76
 8000928:	1f43      	subs	r3, r0, #5
 800092a:	409c      	lsls	r4, r3
 800092c:	2300      	movs	r3, #0
 800092e:	426d      	negs	r5, r5
 8000930:	469a      	mov	sl, r3
 8000932:	469b      	mov	fp, r3
 8000934:	1a2d      	subs	r5, r5, r0
 8000936:	e741      	b.n	80007bc <__aeabi_fmul+0x30>
 8000938:	2480      	movs	r4, #128	; 0x80
 800093a:	2700      	movs	r7, #0
 800093c:	20ff      	movs	r0, #255	; 0xff
 800093e:	03e4      	lsls	r4, r4, #15
 8000940:	e770      	b.n	8000824 <__aeabi_fmul+0x98>
 8000942:	2301      	movs	r3, #1
 8000944:	1a1b      	subs	r3, r3, r0
 8000946:	2b1b      	cmp	r3, #27
 8000948:	dd00      	ble.n	800094c <__aeabi_fmul+0x1c0>
 800094a:	e769      	b.n	8000820 <__aeabi_fmul+0x94>
 800094c:	319e      	adds	r1, #158	; 0x9e
 800094e:	0020      	movs	r0, r4
 8000950:	408c      	lsls	r4, r1
 8000952:	40d8      	lsrs	r0, r3
 8000954:	1e63      	subs	r3, r4, #1
 8000956:	419c      	sbcs	r4, r3
 8000958:	4304      	orrs	r4, r0
 800095a:	0763      	lsls	r3, r4, #29
 800095c:	d004      	beq.n	8000968 <__aeabi_fmul+0x1dc>
 800095e:	230f      	movs	r3, #15
 8000960:	4023      	ands	r3, r4
 8000962:	2b04      	cmp	r3, #4
 8000964:	d000      	beq.n	8000968 <__aeabi_fmul+0x1dc>
 8000966:	3404      	adds	r4, #4
 8000968:	0163      	lsls	r3, r4, #5
 800096a:	d51a      	bpl.n	80009a2 <__aeabi_fmul+0x216>
 800096c:	2001      	movs	r0, #1
 800096e:	2400      	movs	r4, #0
 8000970:	e758      	b.n	8000824 <__aeabi_fmul+0x98>
 8000972:	2080      	movs	r0, #128	; 0x80
 8000974:	03c0      	lsls	r0, r0, #15
 8000976:	4204      	tst	r4, r0
 8000978:	d009      	beq.n	800098e <__aeabi_fmul+0x202>
 800097a:	464b      	mov	r3, r9
 800097c:	4203      	tst	r3, r0
 800097e:	d106      	bne.n	800098e <__aeabi_fmul+0x202>
 8000980:	464c      	mov	r4, r9
 8000982:	4304      	orrs	r4, r0
 8000984:	0264      	lsls	r4, r4, #9
 8000986:	4647      	mov	r7, r8
 8000988:	20ff      	movs	r0, #255	; 0xff
 800098a:	0a64      	lsrs	r4, r4, #9
 800098c:	e74a      	b.n	8000824 <__aeabi_fmul+0x98>
 800098e:	2080      	movs	r0, #128	; 0x80
 8000990:	03c0      	lsls	r0, r0, #15
 8000992:	4304      	orrs	r4, r0
 8000994:	0264      	lsls	r4, r4, #9
 8000996:	0037      	movs	r7, r6
 8000998:	20ff      	movs	r0, #255	; 0xff
 800099a:	0a64      	lsrs	r4, r4, #9
 800099c:	e742      	b.n	8000824 <__aeabi_fmul+0x98>
 800099e:	0029      	movs	r1, r5
 80009a0:	e78e      	b.n	80008c0 <__aeabi_fmul+0x134>
 80009a2:	01a4      	lsls	r4, r4, #6
 80009a4:	2000      	movs	r0, #0
 80009a6:	0a64      	lsrs	r4, r4, #9
 80009a8:	e73c      	b.n	8000824 <__aeabi_fmul+0x98>
 80009aa:	2080      	movs	r0, #128	; 0x80
 80009ac:	03c0      	lsls	r0, r0, #15
 80009ae:	4304      	orrs	r4, r0
 80009b0:	0264      	lsls	r4, r4, #9
 80009b2:	20ff      	movs	r0, #255	; 0xff
 80009b4:	0a64      	lsrs	r4, r4, #9
 80009b6:	e735      	b.n	8000824 <__aeabi_fmul+0x98>
 80009b8:	0800ae98 	.word	0x0800ae98
 80009bc:	f7ffffff 	.word	0xf7ffffff

080009c0 <__aeabi_fsub>:
 80009c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009c2:	4646      	mov	r6, r8
 80009c4:	46d6      	mov	lr, sl
 80009c6:	464f      	mov	r7, r9
 80009c8:	0243      	lsls	r3, r0, #9
 80009ca:	0a5b      	lsrs	r3, r3, #9
 80009cc:	00da      	lsls	r2, r3, #3
 80009ce:	4694      	mov	ip, r2
 80009d0:	024a      	lsls	r2, r1, #9
 80009d2:	b5c0      	push	{r6, r7, lr}
 80009d4:	0044      	lsls	r4, r0, #1
 80009d6:	0a56      	lsrs	r6, r2, #9
 80009d8:	1c05      	adds	r5, r0, #0
 80009da:	46b0      	mov	r8, r6
 80009dc:	0e24      	lsrs	r4, r4, #24
 80009de:	004e      	lsls	r6, r1, #1
 80009e0:	0992      	lsrs	r2, r2, #6
 80009e2:	001f      	movs	r7, r3
 80009e4:	0020      	movs	r0, r4
 80009e6:	4692      	mov	sl, r2
 80009e8:	0fed      	lsrs	r5, r5, #31
 80009ea:	0e36      	lsrs	r6, r6, #24
 80009ec:	0fc9      	lsrs	r1, r1, #31
 80009ee:	2eff      	cmp	r6, #255	; 0xff
 80009f0:	d100      	bne.n	80009f4 <__aeabi_fsub+0x34>
 80009f2:	e07f      	b.n	8000af4 <__aeabi_fsub+0x134>
 80009f4:	2201      	movs	r2, #1
 80009f6:	4051      	eors	r1, r2
 80009f8:	428d      	cmp	r5, r1
 80009fa:	d051      	beq.n	8000aa0 <__aeabi_fsub+0xe0>
 80009fc:	1ba2      	subs	r2, r4, r6
 80009fe:	4691      	mov	r9, r2
 8000a00:	2a00      	cmp	r2, #0
 8000a02:	dc00      	bgt.n	8000a06 <__aeabi_fsub+0x46>
 8000a04:	e07e      	b.n	8000b04 <__aeabi_fsub+0x144>
 8000a06:	2e00      	cmp	r6, #0
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fsub+0x4c>
 8000a0a:	e099      	b.n	8000b40 <__aeabi_fsub+0x180>
 8000a0c:	2cff      	cmp	r4, #255	; 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fsub+0x52>
 8000a10:	e08c      	b.n	8000b2c <__aeabi_fsub+0x16c>
 8000a12:	2380      	movs	r3, #128	; 0x80
 8000a14:	4652      	mov	r2, sl
 8000a16:	04db      	lsls	r3, r3, #19
 8000a18:	431a      	orrs	r2, r3
 8000a1a:	4692      	mov	sl, r2
 8000a1c:	464a      	mov	r2, r9
 8000a1e:	2301      	movs	r3, #1
 8000a20:	2a1b      	cmp	r2, #27
 8000a22:	dc08      	bgt.n	8000a36 <__aeabi_fsub+0x76>
 8000a24:	4653      	mov	r3, sl
 8000a26:	2120      	movs	r1, #32
 8000a28:	40d3      	lsrs	r3, r2
 8000a2a:	1a89      	subs	r1, r1, r2
 8000a2c:	4652      	mov	r2, sl
 8000a2e:	408a      	lsls	r2, r1
 8000a30:	1e51      	subs	r1, r2, #1
 8000a32:	418a      	sbcs	r2, r1
 8000a34:	4313      	orrs	r3, r2
 8000a36:	4662      	mov	r2, ip
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	015a      	lsls	r2, r3, #5
 8000a3c:	d400      	bmi.n	8000a40 <__aeabi_fsub+0x80>
 8000a3e:	e0f3      	b.n	8000c28 <__aeabi_fsub+0x268>
 8000a40:	019b      	lsls	r3, r3, #6
 8000a42:	099e      	lsrs	r6, r3, #6
 8000a44:	0030      	movs	r0, r6
 8000a46:	f002 f849 	bl	8002adc <__clzsi2>
 8000a4a:	3805      	subs	r0, #5
 8000a4c:	4086      	lsls	r6, r0
 8000a4e:	4284      	cmp	r4, r0
 8000a50:	dd00      	ble.n	8000a54 <__aeabi_fsub+0x94>
 8000a52:	e0f7      	b.n	8000c44 <__aeabi_fsub+0x284>
 8000a54:	0032      	movs	r2, r6
 8000a56:	1b04      	subs	r4, r0, r4
 8000a58:	2020      	movs	r0, #32
 8000a5a:	3401      	adds	r4, #1
 8000a5c:	40e2      	lsrs	r2, r4
 8000a5e:	1b04      	subs	r4, r0, r4
 8000a60:	40a6      	lsls	r6, r4
 8000a62:	0033      	movs	r3, r6
 8000a64:	1e5e      	subs	r6, r3, #1
 8000a66:	41b3      	sbcs	r3, r6
 8000a68:	2400      	movs	r4, #0
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	075a      	lsls	r2, r3, #29
 8000a6e:	d004      	beq.n	8000a7a <__aeabi_fsub+0xba>
 8000a70:	220f      	movs	r2, #15
 8000a72:	401a      	ands	r2, r3
 8000a74:	2a04      	cmp	r2, #4
 8000a76:	d000      	beq.n	8000a7a <__aeabi_fsub+0xba>
 8000a78:	3304      	adds	r3, #4
 8000a7a:	015a      	lsls	r2, r3, #5
 8000a7c:	d400      	bmi.n	8000a80 <__aeabi_fsub+0xc0>
 8000a7e:	e0d6      	b.n	8000c2e <__aeabi_fsub+0x26e>
 8000a80:	1c62      	adds	r2, r4, #1
 8000a82:	2cfe      	cmp	r4, #254	; 0xfe
 8000a84:	d100      	bne.n	8000a88 <__aeabi_fsub+0xc8>
 8000a86:	e0da      	b.n	8000c3e <__aeabi_fsub+0x27e>
 8000a88:	019b      	lsls	r3, r3, #6
 8000a8a:	0a5f      	lsrs	r7, r3, #9
 8000a8c:	b2d0      	uxtb	r0, r2
 8000a8e:	05c0      	lsls	r0, r0, #23
 8000a90:	4338      	orrs	r0, r7
 8000a92:	07ed      	lsls	r5, r5, #31
 8000a94:	4328      	orrs	r0, r5
 8000a96:	bce0      	pop	{r5, r6, r7}
 8000a98:	46ba      	mov	sl, r7
 8000a9a:	46b1      	mov	r9, r6
 8000a9c:	46a8      	mov	r8, r5
 8000a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa0:	1ba2      	subs	r2, r4, r6
 8000aa2:	4691      	mov	r9, r2
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	dd63      	ble.n	8000b70 <__aeabi_fsub+0x1b0>
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d100      	bne.n	8000aae <__aeabi_fsub+0xee>
 8000aac:	e099      	b.n	8000be2 <__aeabi_fsub+0x222>
 8000aae:	2cff      	cmp	r4, #255	; 0xff
 8000ab0:	d03c      	beq.n	8000b2c <__aeabi_fsub+0x16c>
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	4652      	mov	r2, sl
 8000ab6:	04db      	lsls	r3, r3, #19
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	4692      	mov	sl, r2
 8000abc:	464a      	mov	r2, r9
 8000abe:	2301      	movs	r3, #1
 8000ac0:	2a1b      	cmp	r2, #27
 8000ac2:	dc08      	bgt.n	8000ad6 <__aeabi_fsub+0x116>
 8000ac4:	4653      	mov	r3, sl
 8000ac6:	2120      	movs	r1, #32
 8000ac8:	40d3      	lsrs	r3, r2
 8000aca:	1a89      	subs	r1, r1, r2
 8000acc:	4652      	mov	r2, sl
 8000ace:	408a      	lsls	r2, r1
 8000ad0:	1e51      	subs	r1, r2, #1
 8000ad2:	418a      	sbcs	r2, r1
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	015a      	lsls	r2, r3, #5
 8000ada:	d400      	bmi.n	8000ade <__aeabi_fsub+0x11e>
 8000adc:	e0a4      	b.n	8000c28 <__aeabi_fsub+0x268>
 8000ade:	3401      	adds	r4, #1
 8000ae0:	2cff      	cmp	r4, #255	; 0xff
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_fsub+0x126>
 8000ae4:	e0ab      	b.n	8000c3e <__aeabi_fsub+0x27e>
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	4997      	ldr	r1, [pc, #604]	; (8000d48 <__aeabi_fsub+0x388>)
 8000aea:	401a      	ands	r2, r3
 8000aec:	085b      	lsrs	r3, r3, #1
 8000aee:	400b      	ands	r3, r1
 8000af0:	4313      	orrs	r3, r2
 8000af2:	e7bb      	b.n	8000a6c <__aeabi_fsub+0xac>
 8000af4:	2a00      	cmp	r2, #0
 8000af6:	d032      	beq.n	8000b5e <__aeabi_fsub+0x19e>
 8000af8:	428d      	cmp	r5, r1
 8000afa:	d035      	beq.n	8000b68 <__aeabi_fsub+0x1a8>
 8000afc:	22ff      	movs	r2, #255	; 0xff
 8000afe:	4252      	negs	r2, r2
 8000b00:	4691      	mov	r9, r2
 8000b02:	44a1      	add	r9, r4
 8000b04:	464a      	mov	r2, r9
 8000b06:	2a00      	cmp	r2, #0
 8000b08:	d051      	beq.n	8000bae <__aeabi_fsub+0x1ee>
 8000b0a:	1b30      	subs	r0, r6, r4
 8000b0c:	2c00      	cmp	r4, #0
 8000b0e:	d000      	beq.n	8000b12 <__aeabi_fsub+0x152>
 8000b10:	e09c      	b.n	8000c4c <__aeabi_fsub+0x28c>
 8000b12:	4663      	mov	r3, ip
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d100      	bne.n	8000b1a <__aeabi_fsub+0x15a>
 8000b18:	e0df      	b.n	8000cda <__aeabi_fsub+0x31a>
 8000b1a:	3801      	subs	r0, #1
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_fsub+0x162>
 8000b20:	e0f7      	b.n	8000d12 <__aeabi_fsub+0x352>
 8000b22:	2eff      	cmp	r6, #255	; 0xff
 8000b24:	d000      	beq.n	8000b28 <__aeabi_fsub+0x168>
 8000b26:	e099      	b.n	8000c5c <__aeabi_fsub+0x29c>
 8000b28:	000d      	movs	r5, r1
 8000b2a:	4643      	mov	r3, r8
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_fsub+0x172>
 8000b30:	e085      	b.n	8000c3e <__aeabi_fsub+0x27e>
 8000b32:	2780      	movs	r7, #128	; 0x80
 8000b34:	03ff      	lsls	r7, r7, #15
 8000b36:	431f      	orrs	r7, r3
 8000b38:	027f      	lsls	r7, r7, #9
 8000b3a:	20ff      	movs	r0, #255	; 0xff
 8000b3c:	0a7f      	lsrs	r7, r7, #9
 8000b3e:	e7a6      	b.n	8000a8e <__aeabi_fsub+0xce>
 8000b40:	4652      	mov	r2, sl
 8000b42:	2a00      	cmp	r2, #0
 8000b44:	d074      	beq.n	8000c30 <__aeabi_fsub+0x270>
 8000b46:	2201      	movs	r2, #1
 8000b48:	4252      	negs	r2, r2
 8000b4a:	4690      	mov	r8, r2
 8000b4c:	44c1      	add	r9, r8
 8000b4e:	464a      	mov	r2, r9
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	d100      	bne.n	8000b56 <__aeabi_fsub+0x196>
 8000b54:	e0c8      	b.n	8000ce8 <__aeabi_fsub+0x328>
 8000b56:	2cff      	cmp	r4, #255	; 0xff
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fsub+0x19c>
 8000b5a:	e75f      	b.n	8000a1c <__aeabi_fsub+0x5c>
 8000b5c:	e7e6      	b.n	8000b2c <__aeabi_fsub+0x16c>
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4051      	eors	r1, r2
 8000b62:	42a9      	cmp	r1, r5
 8000b64:	d000      	beq.n	8000b68 <__aeabi_fsub+0x1a8>
 8000b66:	e749      	b.n	80009fc <__aeabi_fsub+0x3c>
 8000b68:	22ff      	movs	r2, #255	; 0xff
 8000b6a:	4252      	negs	r2, r2
 8000b6c:	4691      	mov	r9, r2
 8000b6e:	44a1      	add	r9, r4
 8000b70:	464a      	mov	r2, r9
 8000b72:	2a00      	cmp	r2, #0
 8000b74:	d043      	beq.n	8000bfe <__aeabi_fsub+0x23e>
 8000b76:	1b31      	subs	r1, r6, r4
 8000b78:	2c00      	cmp	r4, #0
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_fsub+0x1be>
 8000b7c:	e08c      	b.n	8000c98 <__aeabi_fsub+0x2d8>
 8000b7e:	2eff      	cmp	r6, #255	; 0xff
 8000b80:	d100      	bne.n	8000b84 <__aeabi_fsub+0x1c4>
 8000b82:	e092      	b.n	8000caa <__aeabi_fsub+0x2ea>
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	4662      	mov	r2, ip
 8000b88:	04db      	lsls	r3, r3, #19
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	4694      	mov	ip, r2
 8000b8e:	2301      	movs	r3, #1
 8000b90:	291b      	cmp	r1, #27
 8000b92:	dc09      	bgt.n	8000ba8 <__aeabi_fsub+0x1e8>
 8000b94:	2020      	movs	r0, #32
 8000b96:	4663      	mov	r3, ip
 8000b98:	4662      	mov	r2, ip
 8000b9a:	40cb      	lsrs	r3, r1
 8000b9c:	1a41      	subs	r1, r0, r1
 8000b9e:	408a      	lsls	r2, r1
 8000ba0:	0011      	movs	r1, r2
 8000ba2:	1e48      	subs	r0, r1, #1
 8000ba4:	4181      	sbcs	r1, r0
 8000ba6:	430b      	orrs	r3, r1
 8000ba8:	0034      	movs	r4, r6
 8000baa:	4453      	add	r3, sl
 8000bac:	e794      	b.n	8000ad8 <__aeabi_fsub+0x118>
 8000bae:	22fe      	movs	r2, #254	; 0xfe
 8000bb0:	1c66      	adds	r6, r4, #1
 8000bb2:	4232      	tst	r2, r6
 8000bb4:	d164      	bne.n	8000c80 <__aeabi_fsub+0x2c0>
 8000bb6:	2c00      	cmp	r4, #0
 8000bb8:	d000      	beq.n	8000bbc <__aeabi_fsub+0x1fc>
 8000bba:	e082      	b.n	8000cc2 <__aeabi_fsub+0x302>
 8000bbc:	4663      	mov	r3, ip
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fsub+0x204>
 8000bc2:	e0ab      	b.n	8000d1c <__aeabi_fsub+0x35c>
 8000bc4:	4653      	mov	r3, sl
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_fsub+0x20c>
 8000bca:	e760      	b.n	8000a8e <__aeabi_fsub+0xce>
 8000bcc:	4663      	mov	r3, ip
 8000bce:	4652      	mov	r2, sl
 8000bd0:	1a9b      	subs	r3, r3, r2
 8000bd2:	015a      	lsls	r2, r3, #5
 8000bd4:	d400      	bmi.n	8000bd8 <__aeabi_fsub+0x218>
 8000bd6:	e0aa      	b.n	8000d2e <__aeabi_fsub+0x36e>
 8000bd8:	4663      	mov	r3, ip
 8000bda:	4652      	mov	r2, sl
 8000bdc:	000d      	movs	r5, r1
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	e744      	b.n	8000a6c <__aeabi_fsub+0xac>
 8000be2:	4652      	mov	r2, sl
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	d023      	beq.n	8000c30 <__aeabi_fsub+0x270>
 8000be8:	2201      	movs	r2, #1
 8000bea:	4252      	negs	r2, r2
 8000bec:	4690      	mov	r8, r2
 8000bee:	44c1      	add	r9, r8
 8000bf0:	464a      	mov	r2, r9
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	d075      	beq.n	8000ce2 <__aeabi_fsub+0x322>
 8000bf6:	2cff      	cmp	r4, #255	; 0xff
 8000bf8:	d000      	beq.n	8000bfc <__aeabi_fsub+0x23c>
 8000bfa:	e75f      	b.n	8000abc <__aeabi_fsub+0xfc>
 8000bfc:	e796      	b.n	8000b2c <__aeabi_fsub+0x16c>
 8000bfe:	26fe      	movs	r6, #254	; 0xfe
 8000c00:	3401      	adds	r4, #1
 8000c02:	4226      	tst	r6, r4
 8000c04:	d153      	bne.n	8000cae <__aeabi_fsub+0x2ee>
 8000c06:	2800      	cmp	r0, #0
 8000c08:	d172      	bne.n	8000cf0 <__aeabi_fsub+0x330>
 8000c0a:	4663      	mov	r3, ip
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_fsub+0x252>
 8000c10:	e093      	b.n	8000d3a <__aeabi_fsub+0x37a>
 8000c12:	4653      	mov	r3, sl
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d100      	bne.n	8000c1a <__aeabi_fsub+0x25a>
 8000c18:	e739      	b.n	8000a8e <__aeabi_fsub+0xce>
 8000c1a:	4463      	add	r3, ip
 8000c1c:	2400      	movs	r4, #0
 8000c1e:	015a      	lsls	r2, r3, #5
 8000c20:	d502      	bpl.n	8000c28 <__aeabi_fsub+0x268>
 8000c22:	4a4a      	ldr	r2, [pc, #296]	; (8000d4c <__aeabi_fsub+0x38c>)
 8000c24:	3401      	adds	r4, #1
 8000c26:	4013      	ands	r3, r2
 8000c28:	075a      	lsls	r2, r3, #29
 8000c2a:	d000      	beq.n	8000c2e <__aeabi_fsub+0x26e>
 8000c2c:	e720      	b.n	8000a70 <__aeabi_fsub+0xb0>
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	2cff      	cmp	r4, #255	; 0xff
 8000c32:	d100      	bne.n	8000c36 <__aeabi_fsub+0x276>
 8000c34:	e77a      	b.n	8000b2c <__aeabi_fsub+0x16c>
 8000c36:	025b      	lsls	r3, r3, #9
 8000c38:	0a5f      	lsrs	r7, r3, #9
 8000c3a:	b2e0      	uxtb	r0, r4
 8000c3c:	e727      	b.n	8000a8e <__aeabi_fsub+0xce>
 8000c3e:	20ff      	movs	r0, #255	; 0xff
 8000c40:	2700      	movs	r7, #0
 8000c42:	e724      	b.n	8000a8e <__aeabi_fsub+0xce>
 8000c44:	4b41      	ldr	r3, [pc, #260]	; (8000d4c <__aeabi_fsub+0x38c>)
 8000c46:	1a24      	subs	r4, r4, r0
 8000c48:	4033      	ands	r3, r6
 8000c4a:	e70f      	b.n	8000a6c <__aeabi_fsub+0xac>
 8000c4c:	2eff      	cmp	r6, #255	; 0xff
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_fsub+0x292>
 8000c50:	e76a      	b.n	8000b28 <__aeabi_fsub+0x168>
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	4662      	mov	r2, ip
 8000c56:	04db      	lsls	r3, r3, #19
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	4694      	mov	ip, r2
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	281b      	cmp	r0, #27
 8000c60:	dc09      	bgt.n	8000c76 <__aeabi_fsub+0x2b6>
 8000c62:	2420      	movs	r4, #32
 8000c64:	4663      	mov	r3, ip
 8000c66:	4662      	mov	r2, ip
 8000c68:	40c3      	lsrs	r3, r0
 8000c6a:	1a20      	subs	r0, r4, r0
 8000c6c:	4082      	lsls	r2, r0
 8000c6e:	0010      	movs	r0, r2
 8000c70:	1e44      	subs	r4, r0, #1
 8000c72:	41a0      	sbcs	r0, r4
 8000c74:	4303      	orrs	r3, r0
 8000c76:	4652      	mov	r2, sl
 8000c78:	000d      	movs	r5, r1
 8000c7a:	0034      	movs	r4, r6
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	e6dc      	b.n	8000a3a <__aeabi_fsub+0x7a>
 8000c80:	4663      	mov	r3, ip
 8000c82:	4652      	mov	r2, sl
 8000c84:	1a9e      	subs	r6, r3, r2
 8000c86:	0173      	lsls	r3, r6, #5
 8000c88:	d417      	bmi.n	8000cba <__aeabi_fsub+0x2fa>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	d000      	beq.n	8000c90 <__aeabi_fsub+0x2d0>
 8000c8e:	e6d9      	b.n	8000a44 <__aeabi_fsub+0x84>
 8000c90:	2500      	movs	r5, #0
 8000c92:	2000      	movs	r0, #0
 8000c94:	2700      	movs	r7, #0
 8000c96:	e6fa      	b.n	8000a8e <__aeabi_fsub+0xce>
 8000c98:	4663      	mov	r3, ip
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d044      	beq.n	8000d28 <__aeabi_fsub+0x368>
 8000c9e:	3901      	subs	r1, #1
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	d04c      	beq.n	8000d3e <__aeabi_fsub+0x37e>
 8000ca4:	2eff      	cmp	r6, #255	; 0xff
 8000ca6:	d000      	beq.n	8000caa <__aeabi_fsub+0x2ea>
 8000ca8:	e771      	b.n	8000b8e <__aeabi_fsub+0x1ce>
 8000caa:	4643      	mov	r3, r8
 8000cac:	e73e      	b.n	8000b2c <__aeabi_fsub+0x16c>
 8000cae:	2cff      	cmp	r4, #255	; 0xff
 8000cb0:	d0c5      	beq.n	8000c3e <__aeabi_fsub+0x27e>
 8000cb2:	4652      	mov	r2, sl
 8000cb4:	4462      	add	r2, ip
 8000cb6:	0853      	lsrs	r3, r2, #1
 8000cb8:	e7b6      	b.n	8000c28 <__aeabi_fsub+0x268>
 8000cba:	4663      	mov	r3, ip
 8000cbc:	000d      	movs	r5, r1
 8000cbe:	1ad6      	subs	r6, r2, r3
 8000cc0:	e6c0      	b.n	8000a44 <__aeabi_fsub+0x84>
 8000cc2:	4662      	mov	r2, ip
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d116      	bne.n	8000cf6 <__aeabi_fsub+0x336>
 8000cc8:	4653      	mov	r3, sl
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d000      	beq.n	8000cd0 <__aeabi_fsub+0x310>
 8000cce:	e72b      	b.n	8000b28 <__aeabi_fsub+0x168>
 8000cd0:	2780      	movs	r7, #128	; 0x80
 8000cd2:	2500      	movs	r5, #0
 8000cd4:	20ff      	movs	r0, #255	; 0xff
 8000cd6:	03ff      	lsls	r7, r7, #15
 8000cd8:	e6d9      	b.n	8000a8e <__aeabi_fsub+0xce>
 8000cda:	000d      	movs	r5, r1
 8000cdc:	4643      	mov	r3, r8
 8000cde:	0034      	movs	r4, r6
 8000ce0:	e7a6      	b.n	8000c30 <__aeabi_fsub+0x270>
 8000ce2:	4653      	mov	r3, sl
 8000ce4:	4463      	add	r3, ip
 8000ce6:	e6f7      	b.n	8000ad8 <__aeabi_fsub+0x118>
 8000ce8:	4663      	mov	r3, ip
 8000cea:	4652      	mov	r2, sl
 8000cec:	1a9b      	subs	r3, r3, r2
 8000cee:	e6a4      	b.n	8000a3a <__aeabi_fsub+0x7a>
 8000cf0:	4662      	mov	r2, ip
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	d0d9      	beq.n	8000caa <__aeabi_fsub+0x2ea>
 8000cf6:	4652      	mov	r2, sl
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_fsub+0x33e>
 8000cfc:	e716      	b.n	8000b2c <__aeabi_fsub+0x16c>
 8000cfe:	2280      	movs	r2, #128	; 0x80
 8000d00:	03d2      	lsls	r2, r2, #15
 8000d02:	4213      	tst	r3, r2
 8000d04:	d100      	bne.n	8000d08 <__aeabi_fsub+0x348>
 8000d06:	e711      	b.n	8000b2c <__aeabi_fsub+0x16c>
 8000d08:	4640      	mov	r0, r8
 8000d0a:	4210      	tst	r0, r2
 8000d0c:	d000      	beq.n	8000d10 <__aeabi_fsub+0x350>
 8000d0e:	e70d      	b.n	8000b2c <__aeabi_fsub+0x16c>
 8000d10:	e70a      	b.n	8000b28 <__aeabi_fsub+0x168>
 8000d12:	4652      	mov	r2, sl
 8000d14:	000d      	movs	r5, r1
 8000d16:	0034      	movs	r4, r6
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	e68e      	b.n	8000a3a <__aeabi_fsub+0x7a>
 8000d1c:	4653      	mov	r3, sl
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d008      	beq.n	8000d34 <__aeabi_fsub+0x374>
 8000d22:	000d      	movs	r5, r1
 8000d24:	4647      	mov	r7, r8
 8000d26:	e6b2      	b.n	8000a8e <__aeabi_fsub+0xce>
 8000d28:	4643      	mov	r3, r8
 8000d2a:	0034      	movs	r4, r6
 8000d2c:	e780      	b.n	8000c30 <__aeabi_fsub+0x270>
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d000      	beq.n	8000d34 <__aeabi_fsub+0x374>
 8000d32:	e779      	b.n	8000c28 <__aeabi_fsub+0x268>
 8000d34:	2500      	movs	r5, #0
 8000d36:	2700      	movs	r7, #0
 8000d38:	e6a9      	b.n	8000a8e <__aeabi_fsub+0xce>
 8000d3a:	4647      	mov	r7, r8
 8000d3c:	e6a7      	b.n	8000a8e <__aeabi_fsub+0xce>
 8000d3e:	4653      	mov	r3, sl
 8000d40:	0034      	movs	r4, r6
 8000d42:	4463      	add	r3, ip
 8000d44:	e6c8      	b.n	8000ad8 <__aeabi_fsub+0x118>
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	7dffffff 	.word	0x7dffffff
 8000d4c:	fbffffff 	.word	0xfbffffff

08000d50 <__aeabi_f2iz>:
 8000d50:	0241      	lsls	r1, r0, #9
 8000d52:	0042      	lsls	r2, r0, #1
 8000d54:	0fc3      	lsrs	r3, r0, #31
 8000d56:	0a49      	lsrs	r1, r1, #9
 8000d58:	2000      	movs	r0, #0
 8000d5a:	0e12      	lsrs	r2, r2, #24
 8000d5c:	2a7e      	cmp	r2, #126	; 0x7e
 8000d5e:	d903      	bls.n	8000d68 <__aeabi_f2iz+0x18>
 8000d60:	2a9d      	cmp	r2, #157	; 0x9d
 8000d62:	d902      	bls.n	8000d6a <__aeabi_f2iz+0x1a>
 8000d64:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <__aeabi_f2iz+0x3c>)
 8000d66:	1898      	adds	r0, r3, r2
 8000d68:	4770      	bx	lr
 8000d6a:	2080      	movs	r0, #128	; 0x80
 8000d6c:	0400      	lsls	r0, r0, #16
 8000d6e:	4301      	orrs	r1, r0
 8000d70:	2a95      	cmp	r2, #149	; 0x95
 8000d72:	dc07      	bgt.n	8000d84 <__aeabi_f2iz+0x34>
 8000d74:	2096      	movs	r0, #150	; 0x96
 8000d76:	1a82      	subs	r2, r0, r2
 8000d78:	40d1      	lsrs	r1, r2
 8000d7a:	4248      	negs	r0, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d1f3      	bne.n	8000d68 <__aeabi_f2iz+0x18>
 8000d80:	0008      	movs	r0, r1
 8000d82:	e7f1      	b.n	8000d68 <__aeabi_f2iz+0x18>
 8000d84:	3a96      	subs	r2, #150	; 0x96
 8000d86:	4091      	lsls	r1, r2
 8000d88:	e7f7      	b.n	8000d7a <__aeabi_f2iz+0x2a>
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	7fffffff 	.word	0x7fffffff

08000d90 <__aeabi_i2f>:
 8000d90:	b570      	push	{r4, r5, r6, lr}
 8000d92:	2800      	cmp	r0, #0
 8000d94:	d013      	beq.n	8000dbe <__aeabi_i2f+0x2e>
 8000d96:	17c3      	asrs	r3, r0, #31
 8000d98:	18c5      	adds	r5, r0, r3
 8000d9a:	405d      	eors	r5, r3
 8000d9c:	0fc4      	lsrs	r4, r0, #31
 8000d9e:	0028      	movs	r0, r5
 8000da0:	f001 fe9c 	bl	8002adc <__clzsi2>
 8000da4:	239e      	movs	r3, #158	; 0x9e
 8000da6:	0001      	movs	r1, r0
 8000da8:	1a1b      	subs	r3, r3, r0
 8000daa:	2b96      	cmp	r3, #150	; 0x96
 8000dac:	dc0f      	bgt.n	8000dce <__aeabi_i2f+0x3e>
 8000dae:	2808      	cmp	r0, #8
 8000db0:	dd01      	ble.n	8000db6 <__aeabi_i2f+0x26>
 8000db2:	3908      	subs	r1, #8
 8000db4:	408d      	lsls	r5, r1
 8000db6:	026d      	lsls	r5, r5, #9
 8000db8:	0a6d      	lsrs	r5, r5, #9
 8000dba:	b2d8      	uxtb	r0, r3
 8000dbc:	e002      	b.n	8000dc4 <__aeabi_i2f+0x34>
 8000dbe:	2400      	movs	r4, #0
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	2500      	movs	r5, #0
 8000dc4:	05c0      	lsls	r0, r0, #23
 8000dc6:	4328      	orrs	r0, r5
 8000dc8:	07e4      	lsls	r4, r4, #31
 8000dca:	4320      	orrs	r0, r4
 8000dcc:	bd70      	pop	{r4, r5, r6, pc}
 8000dce:	2b99      	cmp	r3, #153	; 0x99
 8000dd0:	dd0b      	ble.n	8000dea <__aeabi_i2f+0x5a>
 8000dd2:	2205      	movs	r2, #5
 8000dd4:	002e      	movs	r6, r5
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	40d6      	lsrs	r6, r2
 8000dda:	0002      	movs	r2, r0
 8000ddc:	321b      	adds	r2, #27
 8000dde:	4095      	lsls	r5, r2
 8000de0:	0028      	movs	r0, r5
 8000de2:	1e45      	subs	r5, r0, #1
 8000de4:	41a8      	sbcs	r0, r5
 8000de6:	0035      	movs	r5, r6
 8000de8:	4305      	orrs	r5, r0
 8000dea:	2905      	cmp	r1, #5
 8000dec:	dd01      	ble.n	8000df2 <__aeabi_i2f+0x62>
 8000dee:	1f4a      	subs	r2, r1, #5
 8000df0:	4095      	lsls	r5, r2
 8000df2:	002a      	movs	r2, r5
 8000df4:	4e08      	ldr	r6, [pc, #32]	; (8000e18 <__aeabi_i2f+0x88>)
 8000df6:	4032      	ands	r2, r6
 8000df8:	0768      	lsls	r0, r5, #29
 8000dfa:	d009      	beq.n	8000e10 <__aeabi_i2f+0x80>
 8000dfc:	200f      	movs	r0, #15
 8000dfe:	4028      	ands	r0, r5
 8000e00:	2804      	cmp	r0, #4
 8000e02:	d005      	beq.n	8000e10 <__aeabi_i2f+0x80>
 8000e04:	3204      	adds	r2, #4
 8000e06:	0150      	lsls	r0, r2, #5
 8000e08:	d502      	bpl.n	8000e10 <__aeabi_i2f+0x80>
 8000e0a:	239f      	movs	r3, #159	; 0x9f
 8000e0c:	4032      	ands	r2, r6
 8000e0e:	1a5b      	subs	r3, r3, r1
 8000e10:	0192      	lsls	r2, r2, #6
 8000e12:	0a55      	lsrs	r5, r2, #9
 8000e14:	b2d8      	uxtb	r0, r3
 8000e16:	e7d5      	b.n	8000dc4 <__aeabi_i2f+0x34>
 8000e18:	fbffffff 	.word	0xfbffffff

08000e1c <__aeabi_dadd>:
 8000e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1e:	464f      	mov	r7, r9
 8000e20:	46d6      	mov	lr, sl
 8000e22:	4646      	mov	r6, r8
 8000e24:	000d      	movs	r5, r1
 8000e26:	0001      	movs	r1, r0
 8000e28:	0018      	movs	r0, r3
 8000e2a:	b5c0      	push	{r6, r7, lr}
 8000e2c:	0017      	movs	r7, r2
 8000e2e:	032b      	lsls	r3, r5, #12
 8000e30:	0a5a      	lsrs	r2, r3, #9
 8000e32:	0f4b      	lsrs	r3, r1, #29
 8000e34:	4313      	orrs	r3, r2
 8000e36:	00ca      	lsls	r2, r1, #3
 8000e38:	4691      	mov	r9, r2
 8000e3a:	0302      	lsls	r2, r0, #12
 8000e3c:	006e      	lsls	r6, r5, #1
 8000e3e:	0041      	lsls	r1, r0, #1
 8000e40:	0a52      	lsrs	r2, r2, #9
 8000e42:	0fec      	lsrs	r4, r5, #31
 8000e44:	0f7d      	lsrs	r5, r7, #29
 8000e46:	4315      	orrs	r5, r2
 8000e48:	0d76      	lsrs	r6, r6, #21
 8000e4a:	0d49      	lsrs	r1, r1, #21
 8000e4c:	0fc0      	lsrs	r0, r0, #31
 8000e4e:	4682      	mov	sl, r0
 8000e50:	46ac      	mov	ip, r5
 8000e52:	00ff      	lsls	r7, r7, #3
 8000e54:	1a72      	subs	r2, r6, r1
 8000e56:	4284      	cmp	r4, r0
 8000e58:	d100      	bne.n	8000e5c <__aeabi_dadd+0x40>
 8000e5a:	e098      	b.n	8000f8e <__aeabi_dadd+0x172>
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	dc00      	bgt.n	8000e62 <__aeabi_dadd+0x46>
 8000e60:	e081      	b.n	8000f66 <__aeabi_dadd+0x14a>
 8000e62:	2900      	cmp	r1, #0
 8000e64:	d100      	bne.n	8000e68 <__aeabi_dadd+0x4c>
 8000e66:	e0b6      	b.n	8000fd6 <__aeabi_dadd+0x1ba>
 8000e68:	49c9      	ldr	r1, [pc, #804]	; (8001190 <__aeabi_dadd+0x374>)
 8000e6a:	428e      	cmp	r6, r1
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_dadd+0x54>
 8000e6e:	e172      	b.n	8001156 <__aeabi_dadd+0x33a>
 8000e70:	2180      	movs	r1, #128	; 0x80
 8000e72:	0028      	movs	r0, r5
 8000e74:	0409      	lsls	r1, r1, #16
 8000e76:	4308      	orrs	r0, r1
 8000e78:	4684      	mov	ip, r0
 8000e7a:	2a38      	cmp	r2, #56	; 0x38
 8000e7c:	dd00      	ble.n	8000e80 <__aeabi_dadd+0x64>
 8000e7e:	e15e      	b.n	800113e <__aeabi_dadd+0x322>
 8000e80:	2a1f      	cmp	r2, #31
 8000e82:	dd00      	ble.n	8000e86 <__aeabi_dadd+0x6a>
 8000e84:	e1ee      	b.n	8001264 <__aeabi_dadd+0x448>
 8000e86:	2020      	movs	r0, #32
 8000e88:	0039      	movs	r1, r7
 8000e8a:	4665      	mov	r5, ip
 8000e8c:	1a80      	subs	r0, r0, r2
 8000e8e:	4087      	lsls	r7, r0
 8000e90:	40d1      	lsrs	r1, r2
 8000e92:	4085      	lsls	r5, r0
 8000e94:	430d      	orrs	r5, r1
 8000e96:	0039      	movs	r1, r7
 8000e98:	1e4f      	subs	r7, r1, #1
 8000e9a:	41b9      	sbcs	r1, r7
 8000e9c:	4667      	mov	r7, ip
 8000e9e:	40d7      	lsrs	r7, r2
 8000ea0:	4329      	orrs	r1, r5
 8000ea2:	1bdb      	subs	r3, r3, r7
 8000ea4:	464a      	mov	r2, r9
 8000ea6:	1a55      	subs	r5, r2, r1
 8000ea8:	45a9      	cmp	r9, r5
 8000eaa:	4189      	sbcs	r1, r1
 8000eac:	4249      	negs	r1, r1
 8000eae:	1a5b      	subs	r3, r3, r1
 8000eb0:	4698      	mov	r8, r3
 8000eb2:	4643      	mov	r3, r8
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	d400      	bmi.n	8000eba <__aeabi_dadd+0x9e>
 8000eb8:	e0cc      	b.n	8001054 <__aeabi_dadd+0x238>
 8000eba:	4643      	mov	r3, r8
 8000ebc:	025b      	lsls	r3, r3, #9
 8000ebe:	0a5b      	lsrs	r3, r3, #9
 8000ec0:	4698      	mov	r8, r3
 8000ec2:	4643      	mov	r3, r8
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d100      	bne.n	8000eca <__aeabi_dadd+0xae>
 8000ec8:	e12c      	b.n	8001124 <__aeabi_dadd+0x308>
 8000eca:	4640      	mov	r0, r8
 8000ecc:	f001 fe06 	bl	8002adc <__clzsi2>
 8000ed0:	0001      	movs	r1, r0
 8000ed2:	3908      	subs	r1, #8
 8000ed4:	2220      	movs	r2, #32
 8000ed6:	0028      	movs	r0, r5
 8000ed8:	4643      	mov	r3, r8
 8000eda:	1a52      	subs	r2, r2, r1
 8000edc:	408b      	lsls	r3, r1
 8000ede:	40d0      	lsrs	r0, r2
 8000ee0:	408d      	lsls	r5, r1
 8000ee2:	4303      	orrs	r3, r0
 8000ee4:	428e      	cmp	r6, r1
 8000ee6:	dd00      	ble.n	8000eea <__aeabi_dadd+0xce>
 8000ee8:	e117      	b.n	800111a <__aeabi_dadd+0x2fe>
 8000eea:	1b8e      	subs	r6, r1, r6
 8000eec:	1c72      	adds	r2, r6, #1
 8000eee:	2a1f      	cmp	r2, #31
 8000ef0:	dd00      	ble.n	8000ef4 <__aeabi_dadd+0xd8>
 8000ef2:	e1a7      	b.n	8001244 <__aeabi_dadd+0x428>
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	002e      	movs	r6, r5
 8000efa:	1a89      	subs	r1, r1, r2
 8000efc:	408d      	lsls	r5, r1
 8000efe:	4088      	lsls	r0, r1
 8000f00:	40d6      	lsrs	r6, r2
 8000f02:	40d3      	lsrs	r3, r2
 8000f04:	1e69      	subs	r1, r5, #1
 8000f06:	418d      	sbcs	r5, r1
 8000f08:	4330      	orrs	r0, r6
 8000f0a:	4698      	mov	r8, r3
 8000f0c:	2600      	movs	r6, #0
 8000f0e:	4305      	orrs	r5, r0
 8000f10:	076b      	lsls	r3, r5, #29
 8000f12:	d009      	beq.n	8000f28 <__aeabi_dadd+0x10c>
 8000f14:	230f      	movs	r3, #15
 8000f16:	402b      	ands	r3, r5
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	d005      	beq.n	8000f28 <__aeabi_dadd+0x10c>
 8000f1c:	1d2b      	adds	r3, r5, #4
 8000f1e:	42ab      	cmp	r3, r5
 8000f20:	41ad      	sbcs	r5, r5
 8000f22:	426d      	negs	r5, r5
 8000f24:	44a8      	add	r8, r5
 8000f26:	001d      	movs	r5, r3
 8000f28:	4643      	mov	r3, r8
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	d400      	bmi.n	8000f30 <__aeabi_dadd+0x114>
 8000f2e:	e094      	b.n	800105a <__aeabi_dadd+0x23e>
 8000f30:	4b97      	ldr	r3, [pc, #604]	; (8001190 <__aeabi_dadd+0x374>)
 8000f32:	1c72      	adds	r2, r6, #1
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d100      	bne.n	8000f3a <__aeabi_dadd+0x11e>
 8000f38:	e09d      	b.n	8001076 <__aeabi_dadd+0x25a>
 8000f3a:	4641      	mov	r1, r8
 8000f3c:	4b95      	ldr	r3, [pc, #596]	; (8001194 <__aeabi_dadd+0x378>)
 8000f3e:	08ed      	lsrs	r5, r5, #3
 8000f40:	4019      	ands	r1, r3
 8000f42:	000b      	movs	r3, r1
 8000f44:	0552      	lsls	r2, r2, #21
 8000f46:	0749      	lsls	r1, r1, #29
 8000f48:	025b      	lsls	r3, r3, #9
 8000f4a:	4329      	orrs	r1, r5
 8000f4c:	0b1b      	lsrs	r3, r3, #12
 8000f4e:	0d52      	lsrs	r2, r2, #21
 8000f50:	0512      	lsls	r2, r2, #20
 8000f52:	4313      	orrs	r3, r2
 8000f54:	07e4      	lsls	r4, r4, #31
 8000f56:	4323      	orrs	r3, r4
 8000f58:	0008      	movs	r0, r1
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	bce0      	pop	{r5, r6, r7}
 8000f5e:	46ba      	mov	sl, r7
 8000f60:	46b1      	mov	r9, r6
 8000f62:	46a8      	mov	r8, r5
 8000f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f66:	2a00      	cmp	r2, #0
 8000f68:	d043      	beq.n	8000ff2 <__aeabi_dadd+0x1d6>
 8000f6a:	1b8a      	subs	r2, r1, r6
 8000f6c:	2e00      	cmp	r6, #0
 8000f6e:	d000      	beq.n	8000f72 <__aeabi_dadd+0x156>
 8000f70:	e12a      	b.n	80011c8 <__aeabi_dadd+0x3ac>
 8000f72:	464c      	mov	r4, r9
 8000f74:	431c      	orrs	r4, r3
 8000f76:	d100      	bne.n	8000f7a <__aeabi_dadd+0x15e>
 8000f78:	e1d1      	b.n	800131e <__aeabi_dadd+0x502>
 8000f7a:	1e54      	subs	r4, r2, #1
 8000f7c:	2a01      	cmp	r2, #1
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dadd+0x166>
 8000f80:	e21f      	b.n	80013c2 <__aeabi_dadd+0x5a6>
 8000f82:	4d83      	ldr	r5, [pc, #524]	; (8001190 <__aeabi_dadd+0x374>)
 8000f84:	42aa      	cmp	r2, r5
 8000f86:	d100      	bne.n	8000f8a <__aeabi_dadd+0x16e>
 8000f88:	e272      	b.n	8001470 <__aeabi_dadd+0x654>
 8000f8a:	0022      	movs	r2, r4
 8000f8c:	e123      	b.n	80011d6 <__aeabi_dadd+0x3ba>
 8000f8e:	2a00      	cmp	r2, #0
 8000f90:	dc00      	bgt.n	8000f94 <__aeabi_dadd+0x178>
 8000f92:	e098      	b.n	80010c6 <__aeabi_dadd+0x2aa>
 8000f94:	2900      	cmp	r1, #0
 8000f96:	d042      	beq.n	800101e <__aeabi_dadd+0x202>
 8000f98:	497d      	ldr	r1, [pc, #500]	; (8001190 <__aeabi_dadd+0x374>)
 8000f9a:	428e      	cmp	r6, r1
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_dadd+0x184>
 8000f9e:	e0da      	b.n	8001156 <__aeabi_dadd+0x33a>
 8000fa0:	2180      	movs	r1, #128	; 0x80
 8000fa2:	0028      	movs	r0, r5
 8000fa4:	0409      	lsls	r1, r1, #16
 8000fa6:	4308      	orrs	r0, r1
 8000fa8:	4684      	mov	ip, r0
 8000faa:	2a38      	cmp	r2, #56	; 0x38
 8000fac:	dd00      	ble.n	8000fb0 <__aeabi_dadd+0x194>
 8000fae:	e129      	b.n	8001204 <__aeabi_dadd+0x3e8>
 8000fb0:	2a1f      	cmp	r2, #31
 8000fb2:	dc00      	bgt.n	8000fb6 <__aeabi_dadd+0x19a>
 8000fb4:	e187      	b.n	80012c6 <__aeabi_dadd+0x4aa>
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	4665      	mov	r5, ip
 8000fba:	3920      	subs	r1, #32
 8000fbc:	40cd      	lsrs	r5, r1
 8000fbe:	2a20      	cmp	r2, #32
 8000fc0:	d004      	beq.n	8000fcc <__aeabi_dadd+0x1b0>
 8000fc2:	2040      	movs	r0, #64	; 0x40
 8000fc4:	4661      	mov	r1, ip
 8000fc6:	1a82      	subs	r2, r0, r2
 8000fc8:	4091      	lsls	r1, r2
 8000fca:	430f      	orrs	r7, r1
 8000fcc:	0039      	movs	r1, r7
 8000fce:	1e4f      	subs	r7, r1, #1
 8000fd0:	41b9      	sbcs	r1, r7
 8000fd2:	430d      	orrs	r5, r1
 8000fd4:	e11b      	b.n	800120e <__aeabi_dadd+0x3f2>
 8000fd6:	0029      	movs	r1, r5
 8000fd8:	4339      	orrs	r1, r7
 8000fda:	d100      	bne.n	8000fde <__aeabi_dadd+0x1c2>
 8000fdc:	e0b5      	b.n	800114a <__aeabi_dadd+0x32e>
 8000fde:	1e51      	subs	r1, r2, #1
 8000fe0:	2a01      	cmp	r2, #1
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_dadd+0x1ca>
 8000fe4:	e1ab      	b.n	800133e <__aeabi_dadd+0x522>
 8000fe6:	486a      	ldr	r0, [pc, #424]	; (8001190 <__aeabi_dadd+0x374>)
 8000fe8:	4282      	cmp	r2, r0
 8000fea:	d100      	bne.n	8000fee <__aeabi_dadd+0x1d2>
 8000fec:	e1b2      	b.n	8001354 <__aeabi_dadd+0x538>
 8000fee:	000a      	movs	r2, r1
 8000ff0:	e743      	b.n	8000e7a <__aeabi_dadd+0x5e>
 8000ff2:	4969      	ldr	r1, [pc, #420]	; (8001198 <__aeabi_dadd+0x37c>)
 8000ff4:	1c75      	adds	r5, r6, #1
 8000ff6:	420d      	tst	r5, r1
 8000ff8:	d000      	beq.n	8000ffc <__aeabi_dadd+0x1e0>
 8000ffa:	e0cf      	b.n	800119c <__aeabi_dadd+0x380>
 8000ffc:	2e00      	cmp	r6, #0
 8000ffe:	d000      	beq.n	8001002 <__aeabi_dadd+0x1e6>
 8001000:	e193      	b.n	800132a <__aeabi_dadd+0x50e>
 8001002:	4649      	mov	r1, r9
 8001004:	4319      	orrs	r1, r3
 8001006:	d100      	bne.n	800100a <__aeabi_dadd+0x1ee>
 8001008:	e1d1      	b.n	80013ae <__aeabi_dadd+0x592>
 800100a:	4661      	mov	r1, ip
 800100c:	4339      	orrs	r1, r7
 800100e:	d000      	beq.n	8001012 <__aeabi_dadd+0x1f6>
 8001010:	e1e3      	b.n	80013da <__aeabi_dadd+0x5be>
 8001012:	4649      	mov	r1, r9
 8001014:	0758      	lsls	r0, r3, #29
 8001016:	08c9      	lsrs	r1, r1, #3
 8001018:	4301      	orrs	r1, r0
 800101a:	08db      	lsrs	r3, r3, #3
 800101c:	e026      	b.n	800106c <__aeabi_dadd+0x250>
 800101e:	0029      	movs	r1, r5
 8001020:	4339      	orrs	r1, r7
 8001022:	d100      	bne.n	8001026 <__aeabi_dadd+0x20a>
 8001024:	e091      	b.n	800114a <__aeabi_dadd+0x32e>
 8001026:	1e51      	subs	r1, r2, #1
 8001028:	2a01      	cmp	r2, #1
 800102a:	d005      	beq.n	8001038 <__aeabi_dadd+0x21c>
 800102c:	4858      	ldr	r0, [pc, #352]	; (8001190 <__aeabi_dadd+0x374>)
 800102e:	4282      	cmp	r2, r0
 8001030:	d100      	bne.n	8001034 <__aeabi_dadd+0x218>
 8001032:	e18f      	b.n	8001354 <__aeabi_dadd+0x538>
 8001034:	000a      	movs	r2, r1
 8001036:	e7b8      	b.n	8000faa <__aeabi_dadd+0x18e>
 8001038:	003d      	movs	r5, r7
 800103a:	444d      	add	r5, r9
 800103c:	454d      	cmp	r5, r9
 800103e:	4189      	sbcs	r1, r1
 8001040:	4463      	add	r3, ip
 8001042:	4698      	mov	r8, r3
 8001044:	4249      	negs	r1, r1
 8001046:	4488      	add	r8, r1
 8001048:	4643      	mov	r3, r8
 800104a:	2602      	movs	r6, #2
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	d500      	bpl.n	8001052 <__aeabi_dadd+0x236>
 8001050:	e0eb      	b.n	800122a <__aeabi_dadd+0x40e>
 8001052:	3e01      	subs	r6, #1
 8001054:	076b      	lsls	r3, r5, #29
 8001056:	d000      	beq.n	800105a <__aeabi_dadd+0x23e>
 8001058:	e75c      	b.n	8000f14 <__aeabi_dadd+0xf8>
 800105a:	4643      	mov	r3, r8
 800105c:	08e9      	lsrs	r1, r5, #3
 800105e:	075a      	lsls	r2, r3, #29
 8001060:	4311      	orrs	r1, r2
 8001062:	0032      	movs	r2, r6
 8001064:	08db      	lsrs	r3, r3, #3
 8001066:	484a      	ldr	r0, [pc, #296]	; (8001190 <__aeabi_dadd+0x374>)
 8001068:	4282      	cmp	r2, r0
 800106a:	d021      	beq.n	80010b0 <__aeabi_dadd+0x294>
 800106c:	031b      	lsls	r3, r3, #12
 800106e:	0552      	lsls	r2, r2, #21
 8001070:	0b1b      	lsrs	r3, r3, #12
 8001072:	0d52      	lsrs	r2, r2, #21
 8001074:	e76c      	b.n	8000f50 <__aeabi_dadd+0x134>
 8001076:	2300      	movs	r3, #0
 8001078:	2100      	movs	r1, #0
 800107a:	e769      	b.n	8000f50 <__aeabi_dadd+0x134>
 800107c:	002a      	movs	r2, r5
 800107e:	433a      	orrs	r2, r7
 8001080:	d069      	beq.n	8001156 <__aeabi_dadd+0x33a>
 8001082:	464a      	mov	r2, r9
 8001084:	0758      	lsls	r0, r3, #29
 8001086:	08d1      	lsrs	r1, r2, #3
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	031b      	lsls	r3, r3, #12
 800108e:	4308      	orrs	r0, r1
 8001090:	421a      	tst	r2, r3
 8001092:	d007      	beq.n	80010a4 <__aeabi_dadd+0x288>
 8001094:	0029      	movs	r1, r5
 8001096:	08ed      	lsrs	r5, r5, #3
 8001098:	421d      	tst	r5, r3
 800109a:	d103      	bne.n	80010a4 <__aeabi_dadd+0x288>
 800109c:	002a      	movs	r2, r5
 800109e:	08ff      	lsrs	r7, r7, #3
 80010a0:	0748      	lsls	r0, r1, #29
 80010a2:	4338      	orrs	r0, r7
 80010a4:	0f43      	lsrs	r3, r0, #29
 80010a6:	00c1      	lsls	r1, r0, #3
 80010a8:	075b      	lsls	r3, r3, #29
 80010aa:	08c9      	lsrs	r1, r1, #3
 80010ac:	4319      	orrs	r1, r3
 80010ae:	0013      	movs	r3, r2
 80010b0:	000a      	movs	r2, r1
 80010b2:	431a      	orrs	r2, r3
 80010b4:	d100      	bne.n	80010b8 <__aeabi_dadd+0x29c>
 80010b6:	e213      	b.n	80014e0 <__aeabi_dadd+0x6c4>
 80010b8:	2280      	movs	r2, #128	; 0x80
 80010ba:	0312      	lsls	r2, r2, #12
 80010bc:	4313      	orrs	r3, r2
 80010be:	031b      	lsls	r3, r3, #12
 80010c0:	4a33      	ldr	r2, [pc, #204]	; (8001190 <__aeabi_dadd+0x374>)
 80010c2:	0b1b      	lsrs	r3, r3, #12
 80010c4:	e744      	b.n	8000f50 <__aeabi_dadd+0x134>
 80010c6:	2a00      	cmp	r2, #0
 80010c8:	d04b      	beq.n	8001162 <__aeabi_dadd+0x346>
 80010ca:	1b8a      	subs	r2, r1, r6
 80010cc:	2e00      	cmp	r6, #0
 80010ce:	d100      	bne.n	80010d2 <__aeabi_dadd+0x2b6>
 80010d0:	e0e7      	b.n	80012a2 <__aeabi_dadd+0x486>
 80010d2:	482f      	ldr	r0, [pc, #188]	; (8001190 <__aeabi_dadd+0x374>)
 80010d4:	4281      	cmp	r1, r0
 80010d6:	d100      	bne.n	80010da <__aeabi_dadd+0x2be>
 80010d8:	e195      	b.n	8001406 <__aeabi_dadd+0x5ea>
 80010da:	2080      	movs	r0, #128	; 0x80
 80010dc:	0400      	lsls	r0, r0, #16
 80010de:	4303      	orrs	r3, r0
 80010e0:	2a38      	cmp	r2, #56	; 0x38
 80010e2:	dd00      	ble.n	80010e6 <__aeabi_dadd+0x2ca>
 80010e4:	e143      	b.n	800136e <__aeabi_dadd+0x552>
 80010e6:	2a1f      	cmp	r2, #31
 80010e8:	dd00      	ble.n	80010ec <__aeabi_dadd+0x2d0>
 80010ea:	e1db      	b.n	80014a4 <__aeabi_dadd+0x688>
 80010ec:	2020      	movs	r0, #32
 80010ee:	001d      	movs	r5, r3
 80010f0:	464e      	mov	r6, r9
 80010f2:	1a80      	subs	r0, r0, r2
 80010f4:	4085      	lsls	r5, r0
 80010f6:	40d6      	lsrs	r6, r2
 80010f8:	4335      	orrs	r5, r6
 80010fa:	464e      	mov	r6, r9
 80010fc:	4086      	lsls	r6, r0
 80010fe:	0030      	movs	r0, r6
 8001100:	40d3      	lsrs	r3, r2
 8001102:	1e46      	subs	r6, r0, #1
 8001104:	41b0      	sbcs	r0, r6
 8001106:	449c      	add	ip, r3
 8001108:	4305      	orrs	r5, r0
 800110a:	19ed      	adds	r5, r5, r7
 800110c:	42bd      	cmp	r5, r7
 800110e:	419b      	sbcs	r3, r3
 8001110:	425b      	negs	r3, r3
 8001112:	4463      	add	r3, ip
 8001114:	4698      	mov	r8, r3
 8001116:	000e      	movs	r6, r1
 8001118:	e07f      	b.n	800121a <__aeabi_dadd+0x3fe>
 800111a:	4a1e      	ldr	r2, [pc, #120]	; (8001194 <__aeabi_dadd+0x378>)
 800111c:	1a76      	subs	r6, r6, r1
 800111e:	4013      	ands	r3, r2
 8001120:	4698      	mov	r8, r3
 8001122:	e6f5      	b.n	8000f10 <__aeabi_dadd+0xf4>
 8001124:	0028      	movs	r0, r5
 8001126:	f001 fcd9 	bl	8002adc <__clzsi2>
 800112a:	0001      	movs	r1, r0
 800112c:	3118      	adds	r1, #24
 800112e:	291f      	cmp	r1, #31
 8001130:	dc00      	bgt.n	8001134 <__aeabi_dadd+0x318>
 8001132:	e6cf      	b.n	8000ed4 <__aeabi_dadd+0xb8>
 8001134:	002b      	movs	r3, r5
 8001136:	3808      	subs	r0, #8
 8001138:	4083      	lsls	r3, r0
 800113a:	2500      	movs	r5, #0
 800113c:	e6d2      	b.n	8000ee4 <__aeabi_dadd+0xc8>
 800113e:	4662      	mov	r2, ip
 8001140:	433a      	orrs	r2, r7
 8001142:	0011      	movs	r1, r2
 8001144:	1e4f      	subs	r7, r1, #1
 8001146:	41b9      	sbcs	r1, r7
 8001148:	e6ac      	b.n	8000ea4 <__aeabi_dadd+0x88>
 800114a:	4649      	mov	r1, r9
 800114c:	0758      	lsls	r0, r3, #29
 800114e:	08c9      	lsrs	r1, r1, #3
 8001150:	4301      	orrs	r1, r0
 8001152:	08db      	lsrs	r3, r3, #3
 8001154:	e787      	b.n	8001066 <__aeabi_dadd+0x24a>
 8001156:	4649      	mov	r1, r9
 8001158:	075a      	lsls	r2, r3, #29
 800115a:	08c9      	lsrs	r1, r1, #3
 800115c:	4311      	orrs	r1, r2
 800115e:	08db      	lsrs	r3, r3, #3
 8001160:	e7a6      	b.n	80010b0 <__aeabi_dadd+0x294>
 8001162:	490d      	ldr	r1, [pc, #52]	; (8001198 <__aeabi_dadd+0x37c>)
 8001164:	1c70      	adds	r0, r6, #1
 8001166:	4208      	tst	r0, r1
 8001168:	d000      	beq.n	800116c <__aeabi_dadd+0x350>
 800116a:	e0bb      	b.n	80012e4 <__aeabi_dadd+0x4c8>
 800116c:	2e00      	cmp	r6, #0
 800116e:	d000      	beq.n	8001172 <__aeabi_dadd+0x356>
 8001170:	e114      	b.n	800139c <__aeabi_dadd+0x580>
 8001172:	4649      	mov	r1, r9
 8001174:	4319      	orrs	r1, r3
 8001176:	d100      	bne.n	800117a <__aeabi_dadd+0x35e>
 8001178:	e175      	b.n	8001466 <__aeabi_dadd+0x64a>
 800117a:	0029      	movs	r1, r5
 800117c:	4339      	orrs	r1, r7
 800117e:	d000      	beq.n	8001182 <__aeabi_dadd+0x366>
 8001180:	e17e      	b.n	8001480 <__aeabi_dadd+0x664>
 8001182:	4649      	mov	r1, r9
 8001184:	0758      	lsls	r0, r3, #29
 8001186:	08c9      	lsrs	r1, r1, #3
 8001188:	4301      	orrs	r1, r0
 800118a:	08db      	lsrs	r3, r3, #3
 800118c:	e76e      	b.n	800106c <__aeabi_dadd+0x250>
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	000007ff 	.word	0x000007ff
 8001194:	ff7fffff 	.word	0xff7fffff
 8001198:	000007fe 	.word	0x000007fe
 800119c:	4649      	mov	r1, r9
 800119e:	1bcd      	subs	r5, r1, r7
 80011a0:	4661      	mov	r1, ip
 80011a2:	1a58      	subs	r0, r3, r1
 80011a4:	45a9      	cmp	r9, r5
 80011a6:	4189      	sbcs	r1, r1
 80011a8:	4249      	negs	r1, r1
 80011aa:	4688      	mov	r8, r1
 80011ac:	0001      	movs	r1, r0
 80011ae:	4640      	mov	r0, r8
 80011b0:	1a09      	subs	r1, r1, r0
 80011b2:	4688      	mov	r8, r1
 80011b4:	0209      	lsls	r1, r1, #8
 80011b6:	d500      	bpl.n	80011ba <__aeabi_dadd+0x39e>
 80011b8:	e0a6      	b.n	8001308 <__aeabi_dadd+0x4ec>
 80011ba:	4641      	mov	r1, r8
 80011bc:	4329      	orrs	r1, r5
 80011be:	d000      	beq.n	80011c2 <__aeabi_dadd+0x3a6>
 80011c0:	e67f      	b.n	8000ec2 <__aeabi_dadd+0xa6>
 80011c2:	2300      	movs	r3, #0
 80011c4:	2400      	movs	r4, #0
 80011c6:	e751      	b.n	800106c <__aeabi_dadd+0x250>
 80011c8:	4cc7      	ldr	r4, [pc, #796]	; (80014e8 <__aeabi_dadd+0x6cc>)
 80011ca:	42a1      	cmp	r1, r4
 80011cc:	d100      	bne.n	80011d0 <__aeabi_dadd+0x3b4>
 80011ce:	e0c7      	b.n	8001360 <__aeabi_dadd+0x544>
 80011d0:	2480      	movs	r4, #128	; 0x80
 80011d2:	0424      	lsls	r4, r4, #16
 80011d4:	4323      	orrs	r3, r4
 80011d6:	2a38      	cmp	r2, #56	; 0x38
 80011d8:	dc54      	bgt.n	8001284 <__aeabi_dadd+0x468>
 80011da:	2a1f      	cmp	r2, #31
 80011dc:	dd00      	ble.n	80011e0 <__aeabi_dadd+0x3c4>
 80011de:	e0cc      	b.n	800137a <__aeabi_dadd+0x55e>
 80011e0:	2420      	movs	r4, #32
 80011e2:	4648      	mov	r0, r9
 80011e4:	1aa4      	subs	r4, r4, r2
 80011e6:	001d      	movs	r5, r3
 80011e8:	464e      	mov	r6, r9
 80011ea:	40a0      	lsls	r0, r4
 80011ec:	40d6      	lsrs	r6, r2
 80011ee:	40a5      	lsls	r5, r4
 80011f0:	0004      	movs	r4, r0
 80011f2:	40d3      	lsrs	r3, r2
 80011f4:	4662      	mov	r2, ip
 80011f6:	4335      	orrs	r5, r6
 80011f8:	1e66      	subs	r6, r4, #1
 80011fa:	41b4      	sbcs	r4, r6
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	469c      	mov	ip, r3
 8001200:	4325      	orrs	r5, r4
 8001202:	e044      	b.n	800128e <__aeabi_dadd+0x472>
 8001204:	4662      	mov	r2, ip
 8001206:	433a      	orrs	r2, r7
 8001208:	0015      	movs	r5, r2
 800120a:	1e6f      	subs	r7, r5, #1
 800120c:	41bd      	sbcs	r5, r7
 800120e:	444d      	add	r5, r9
 8001210:	454d      	cmp	r5, r9
 8001212:	4189      	sbcs	r1, r1
 8001214:	4249      	negs	r1, r1
 8001216:	4688      	mov	r8, r1
 8001218:	4498      	add	r8, r3
 800121a:	4643      	mov	r3, r8
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	d400      	bmi.n	8001222 <__aeabi_dadd+0x406>
 8001220:	e718      	b.n	8001054 <__aeabi_dadd+0x238>
 8001222:	4bb1      	ldr	r3, [pc, #708]	; (80014e8 <__aeabi_dadd+0x6cc>)
 8001224:	3601      	adds	r6, #1
 8001226:	429e      	cmp	r6, r3
 8001228:	d049      	beq.n	80012be <__aeabi_dadd+0x4a2>
 800122a:	4642      	mov	r2, r8
 800122c:	4baf      	ldr	r3, [pc, #700]	; (80014ec <__aeabi_dadd+0x6d0>)
 800122e:	2101      	movs	r1, #1
 8001230:	401a      	ands	r2, r3
 8001232:	0013      	movs	r3, r2
 8001234:	086a      	lsrs	r2, r5, #1
 8001236:	400d      	ands	r5, r1
 8001238:	4315      	orrs	r5, r2
 800123a:	07d9      	lsls	r1, r3, #31
 800123c:	085b      	lsrs	r3, r3, #1
 800123e:	4698      	mov	r8, r3
 8001240:	430d      	orrs	r5, r1
 8001242:	e665      	b.n	8000f10 <__aeabi_dadd+0xf4>
 8001244:	0018      	movs	r0, r3
 8001246:	3e1f      	subs	r6, #31
 8001248:	40f0      	lsrs	r0, r6
 800124a:	2a20      	cmp	r2, #32
 800124c:	d003      	beq.n	8001256 <__aeabi_dadd+0x43a>
 800124e:	2140      	movs	r1, #64	; 0x40
 8001250:	1a8a      	subs	r2, r1, r2
 8001252:	4093      	lsls	r3, r2
 8001254:	431d      	orrs	r5, r3
 8001256:	1e69      	subs	r1, r5, #1
 8001258:	418d      	sbcs	r5, r1
 800125a:	2300      	movs	r3, #0
 800125c:	2600      	movs	r6, #0
 800125e:	4698      	mov	r8, r3
 8001260:	4305      	orrs	r5, r0
 8001262:	e6f7      	b.n	8001054 <__aeabi_dadd+0x238>
 8001264:	0011      	movs	r1, r2
 8001266:	4665      	mov	r5, ip
 8001268:	3920      	subs	r1, #32
 800126a:	40cd      	lsrs	r5, r1
 800126c:	2a20      	cmp	r2, #32
 800126e:	d004      	beq.n	800127a <__aeabi_dadd+0x45e>
 8001270:	2040      	movs	r0, #64	; 0x40
 8001272:	4661      	mov	r1, ip
 8001274:	1a82      	subs	r2, r0, r2
 8001276:	4091      	lsls	r1, r2
 8001278:	430f      	orrs	r7, r1
 800127a:	0039      	movs	r1, r7
 800127c:	1e4f      	subs	r7, r1, #1
 800127e:	41b9      	sbcs	r1, r7
 8001280:	4329      	orrs	r1, r5
 8001282:	e60f      	b.n	8000ea4 <__aeabi_dadd+0x88>
 8001284:	464a      	mov	r2, r9
 8001286:	4313      	orrs	r3, r2
 8001288:	001d      	movs	r5, r3
 800128a:	1e6b      	subs	r3, r5, #1
 800128c:	419d      	sbcs	r5, r3
 800128e:	1b7d      	subs	r5, r7, r5
 8001290:	42af      	cmp	r7, r5
 8001292:	419b      	sbcs	r3, r3
 8001294:	4662      	mov	r2, ip
 8001296:	425b      	negs	r3, r3
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	4698      	mov	r8, r3
 800129c:	4654      	mov	r4, sl
 800129e:	000e      	movs	r6, r1
 80012a0:	e607      	b.n	8000eb2 <__aeabi_dadd+0x96>
 80012a2:	4648      	mov	r0, r9
 80012a4:	4318      	orrs	r0, r3
 80012a6:	d100      	bne.n	80012aa <__aeabi_dadd+0x48e>
 80012a8:	e0b3      	b.n	8001412 <__aeabi_dadd+0x5f6>
 80012aa:	1e50      	subs	r0, r2, #1
 80012ac:	2a01      	cmp	r2, #1
 80012ae:	d100      	bne.n	80012b2 <__aeabi_dadd+0x496>
 80012b0:	e10d      	b.n	80014ce <__aeabi_dadd+0x6b2>
 80012b2:	4d8d      	ldr	r5, [pc, #564]	; (80014e8 <__aeabi_dadd+0x6cc>)
 80012b4:	42aa      	cmp	r2, r5
 80012b6:	d100      	bne.n	80012ba <__aeabi_dadd+0x49e>
 80012b8:	e0a5      	b.n	8001406 <__aeabi_dadd+0x5ea>
 80012ba:	0002      	movs	r2, r0
 80012bc:	e710      	b.n	80010e0 <__aeabi_dadd+0x2c4>
 80012be:	0032      	movs	r2, r6
 80012c0:	2300      	movs	r3, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	e644      	b.n	8000f50 <__aeabi_dadd+0x134>
 80012c6:	2120      	movs	r1, #32
 80012c8:	0038      	movs	r0, r7
 80012ca:	1a89      	subs	r1, r1, r2
 80012cc:	4665      	mov	r5, ip
 80012ce:	408f      	lsls	r7, r1
 80012d0:	408d      	lsls	r5, r1
 80012d2:	40d0      	lsrs	r0, r2
 80012d4:	1e79      	subs	r1, r7, #1
 80012d6:	418f      	sbcs	r7, r1
 80012d8:	4305      	orrs	r5, r0
 80012da:	433d      	orrs	r5, r7
 80012dc:	4667      	mov	r7, ip
 80012de:	40d7      	lsrs	r7, r2
 80012e0:	19db      	adds	r3, r3, r7
 80012e2:	e794      	b.n	800120e <__aeabi_dadd+0x3f2>
 80012e4:	4a80      	ldr	r2, [pc, #512]	; (80014e8 <__aeabi_dadd+0x6cc>)
 80012e6:	4290      	cmp	r0, r2
 80012e8:	d100      	bne.n	80012ec <__aeabi_dadd+0x4d0>
 80012ea:	e0ec      	b.n	80014c6 <__aeabi_dadd+0x6aa>
 80012ec:	0039      	movs	r1, r7
 80012ee:	4449      	add	r1, r9
 80012f0:	4549      	cmp	r1, r9
 80012f2:	4192      	sbcs	r2, r2
 80012f4:	4463      	add	r3, ip
 80012f6:	4252      	negs	r2, r2
 80012f8:	189b      	adds	r3, r3, r2
 80012fa:	07dd      	lsls	r5, r3, #31
 80012fc:	0849      	lsrs	r1, r1, #1
 80012fe:	085b      	lsrs	r3, r3, #1
 8001300:	4698      	mov	r8, r3
 8001302:	0006      	movs	r6, r0
 8001304:	430d      	orrs	r5, r1
 8001306:	e6a5      	b.n	8001054 <__aeabi_dadd+0x238>
 8001308:	464a      	mov	r2, r9
 800130a:	1abd      	subs	r5, r7, r2
 800130c:	42af      	cmp	r7, r5
 800130e:	4189      	sbcs	r1, r1
 8001310:	4662      	mov	r2, ip
 8001312:	4249      	negs	r1, r1
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	1a5b      	subs	r3, r3, r1
 8001318:	4698      	mov	r8, r3
 800131a:	4654      	mov	r4, sl
 800131c:	e5d1      	b.n	8000ec2 <__aeabi_dadd+0xa6>
 800131e:	076c      	lsls	r4, r5, #29
 8001320:	08f9      	lsrs	r1, r7, #3
 8001322:	4321      	orrs	r1, r4
 8001324:	08eb      	lsrs	r3, r5, #3
 8001326:	0004      	movs	r4, r0
 8001328:	e69d      	b.n	8001066 <__aeabi_dadd+0x24a>
 800132a:	464a      	mov	r2, r9
 800132c:	431a      	orrs	r2, r3
 800132e:	d175      	bne.n	800141c <__aeabi_dadd+0x600>
 8001330:	4661      	mov	r1, ip
 8001332:	4339      	orrs	r1, r7
 8001334:	d114      	bne.n	8001360 <__aeabi_dadd+0x544>
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	2400      	movs	r4, #0
 800133a:	031b      	lsls	r3, r3, #12
 800133c:	e6bc      	b.n	80010b8 <__aeabi_dadd+0x29c>
 800133e:	464a      	mov	r2, r9
 8001340:	1bd5      	subs	r5, r2, r7
 8001342:	45a9      	cmp	r9, r5
 8001344:	4189      	sbcs	r1, r1
 8001346:	4662      	mov	r2, ip
 8001348:	4249      	negs	r1, r1
 800134a:	1a9b      	subs	r3, r3, r2
 800134c:	1a5b      	subs	r3, r3, r1
 800134e:	4698      	mov	r8, r3
 8001350:	2601      	movs	r6, #1
 8001352:	e5ae      	b.n	8000eb2 <__aeabi_dadd+0x96>
 8001354:	464a      	mov	r2, r9
 8001356:	08d1      	lsrs	r1, r2, #3
 8001358:	075a      	lsls	r2, r3, #29
 800135a:	4311      	orrs	r1, r2
 800135c:	08db      	lsrs	r3, r3, #3
 800135e:	e6a7      	b.n	80010b0 <__aeabi_dadd+0x294>
 8001360:	4663      	mov	r3, ip
 8001362:	08f9      	lsrs	r1, r7, #3
 8001364:	075a      	lsls	r2, r3, #29
 8001366:	4654      	mov	r4, sl
 8001368:	4311      	orrs	r1, r2
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	e6a0      	b.n	80010b0 <__aeabi_dadd+0x294>
 800136e:	464a      	mov	r2, r9
 8001370:	4313      	orrs	r3, r2
 8001372:	001d      	movs	r5, r3
 8001374:	1e6b      	subs	r3, r5, #1
 8001376:	419d      	sbcs	r5, r3
 8001378:	e6c7      	b.n	800110a <__aeabi_dadd+0x2ee>
 800137a:	0014      	movs	r4, r2
 800137c:	001e      	movs	r6, r3
 800137e:	3c20      	subs	r4, #32
 8001380:	40e6      	lsrs	r6, r4
 8001382:	2a20      	cmp	r2, #32
 8001384:	d005      	beq.n	8001392 <__aeabi_dadd+0x576>
 8001386:	2440      	movs	r4, #64	; 0x40
 8001388:	1aa2      	subs	r2, r4, r2
 800138a:	4093      	lsls	r3, r2
 800138c:	464a      	mov	r2, r9
 800138e:	431a      	orrs	r2, r3
 8001390:	4691      	mov	r9, r2
 8001392:	464d      	mov	r5, r9
 8001394:	1e6b      	subs	r3, r5, #1
 8001396:	419d      	sbcs	r5, r3
 8001398:	4335      	orrs	r5, r6
 800139a:	e778      	b.n	800128e <__aeabi_dadd+0x472>
 800139c:	464a      	mov	r2, r9
 800139e:	431a      	orrs	r2, r3
 80013a0:	d000      	beq.n	80013a4 <__aeabi_dadd+0x588>
 80013a2:	e66b      	b.n	800107c <__aeabi_dadd+0x260>
 80013a4:	076b      	lsls	r3, r5, #29
 80013a6:	08f9      	lsrs	r1, r7, #3
 80013a8:	4319      	orrs	r1, r3
 80013aa:	08eb      	lsrs	r3, r5, #3
 80013ac:	e680      	b.n	80010b0 <__aeabi_dadd+0x294>
 80013ae:	4661      	mov	r1, ip
 80013b0:	4339      	orrs	r1, r7
 80013b2:	d054      	beq.n	800145e <__aeabi_dadd+0x642>
 80013b4:	4663      	mov	r3, ip
 80013b6:	08f9      	lsrs	r1, r7, #3
 80013b8:	075c      	lsls	r4, r3, #29
 80013ba:	4321      	orrs	r1, r4
 80013bc:	08db      	lsrs	r3, r3, #3
 80013be:	0004      	movs	r4, r0
 80013c0:	e654      	b.n	800106c <__aeabi_dadd+0x250>
 80013c2:	464a      	mov	r2, r9
 80013c4:	1abd      	subs	r5, r7, r2
 80013c6:	42af      	cmp	r7, r5
 80013c8:	4189      	sbcs	r1, r1
 80013ca:	4662      	mov	r2, ip
 80013cc:	4249      	negs	r1, r1
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	1a5b      	subs	r3, r3, r1
 80013d2:	4698      	mov	r8, r3
 80013d4:	0004      	movs	r4, r0
 80013d6:	2601      	movs	r6, #1
 80013d8:	e56b      	b.n	8000eb2 <__aeabi_dadd+0x96>
 80013da:	464a      	mov	r2, r9
 80013dc:	1bd5      	subs	r5, r2, r7
 80013de:	45a9      	cmp	r9, r5
 80013e0:	4189      	sbcs	r1, r1
 80013e2:	4662      	mov	r2, ip
 80013e4:	4249      	negs	r1, r1
 80013e6:	1a9a      	subs	r2, r3, r2
 80013e8:	1a52      	subs	r2, r2, r1
 80013ea:	4690      	mov	r8, r2
 80013ec:	0212      	lsls	r2, r2, #8
 80013ee:	d532      	bpl.n	8001456 <__aeabi_dadd+0x63a>
 80013f0:	464a      	mov	r2, r9
 80013f2:	1abd      	subs	r5, r7, r2
 80013f4:	42af      	cmp	r7, r5
 80013f6:	4189      	sbcs	r1, r1
 80013f8:	4662      	mov	r2, ip
 80013fa:	4249      	negs	r1, r1
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	1a5b      	subs	r3, r3, r1
 8001400:	4698      	mov	r8, r3
 8001402:	0004      	movs	r4, r0
 8001404:	e584      	b.n	8000f10 <__aeabi_dadd+0xf4>
 8001406:	4663      	mov	r3, ip
 8001408:	08f9      	lsrs	r1, r7, #3
 800140a:	075a      	lsls	r2, r3, #29
 800140c:	4311      	orrs	r1, r2
 800140e:	08db      	lsrs	r3, r3, #3
 8001410:	e64e      	b.n	80010b0 <__aeabi_dadd+0x294>
 8001412:	08f9      	lsrs	r1, r7, #3
 8001414:	0768      	lsls	r0, r5, #29
 8001416:	4301      	orrs	r1, r0
 8001418:	08eb      	lsrs	r3, r5, #3
 800141a:	e624      	b.n	8001066 <__aeabi_dadd+0x24a>
 800141c:	4662      	mov	r2, ip
 800141e:	433a      	orrs	r2, r7
 8001420:	d100      	bne.n	8001424 <__aeabi_dadd+0x608>
 8001422:	e698      	b.n	8001156 <__aeabi_dadd+0x33a>
 8001424:	464a      	mov	r2, r9
 8001426:	08d1      	lsrs	r1, r2, #3
 8001428:	075a      	lsls	r2, r3, #29
 800142a:	4311      	orrs	r1, r2
 800142c:	08da      	lsrs	r2, r3, #3
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	031b      	lsls	r3, r3, #12
 8001432:	421a      	tst	r2, r3
 8001434:	d008      	beq.n	8001448 <__aeabi_dadd+0x62c>
 8001436:	4660      	mov	r0, ip
 8001438:	08c5      	lsrs	r5, r0, #3
 800143a:	421d      	tst	r5, r3
 800143c:	d104      	bne.n	8001448 <__aeabi_dadd+0x62c>
 800143e:	4654      	mov	r4, sl
 8001440:	002a      	movs	r2, r5
 8001442:	08f9      	lsrs	r1, r7, #3
 8001444:	0743      	lsls	r3, r0, #29
 8001446:	4319      	orrs	r1, r3
 8001448:	0f4b      	lsrs	r3, r1, #29
 800144a:	00c9      	lsls	r1, r1, #3
 800144c:	075b      	lsls	r3, r3, #29
 800144e:	08c9      	lsrs	r1, r1, #3
 8001450:	4319      	orrs	r1, r3
 8001452:	0013      	movs	r3, r2
 8001454:	e62c      	b.n	80010b0 <__aeabi_dadd+0x294>
 8001456:	4641      	mov	r1, r8
 8001458:	4329      	orrs	r1, r5
 800145a:	d000      	beq.n	800145e <__aeabi_dadd+0x642>
 800145c:	e5fa      	b.n	8001054 <__aeabi_dadd+0x238>
 800145e:	2300      	movs	r3, #0
 8001460:	000a      	movs	r2, r1
 8001462:	2400      	movs	r4, #0
 8001464:	e602      	b.n	800106c <__aeabi_dadd+0x250>
 8001466:	076b      	lsls	r3, r5, #29
 8001468:	08f9      	lsrs	r1, r7, #3
 800146a:	4319      	orrs	r1, r3
 800146c:	08eb      	lsrs	r3, r5, #3
 800146e:	e5fd      	b.n	800106c <__aeabi_dadd+0x250>
 8001470:	4663      	mov	r3, ip
 8001472:	08f9      	lsrs	r1, r7, #3
 8001474:	075b      	lsls	r3, r3, #29
 8001476:	4319      	orrs	r1, r3
 8001478:	4663      	mov	r3, ip
 800147a:	0004      	movs	r4, r0
 800147c:	08db      	lsrs	r3, r3, #3
 800147e:	e617      	b.n	80010b0 <__aeabi_dadd+0x294>
 8001480:	003d      	movs	r5, r7
 8001482:	444d      	add	r5, r9
 8001484:	4463      	add	r3, ip
 8001486:	454d      	cmp	r5, r9
 8001488:	4189      	sbcs	r1, r1
 800148a:	4698      	mov	r8, r3
 800148c:	4249      	negs	r1, r1
 800148e:	4488      	add	r8, r1
 8001490:	4643      	mov	r3, r8
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	d400      	bmi.n	8001498 <__aeabi_dadd+0x67c>
 8001496:	e5dd      	b.n	8001054 <__aeabi_dadd+0x238>
 8001498:	4642      	mov	r2, r8
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <__aeabi_dadd+0x6d0>)
 800149c:	2601      	movs	r6, #1
 800149e:	401a      	ands	r2, r3
 80014a0:	4690      	mov	r8, r2
 80014a2:	e5d7      	b.n	8001054 <__aeabi_dadd+0x238>
 80014a4:	0010      	movs	r0, r2
 80014a6:	001e      	movs	r6, r3
 80014a8:	3820      	subs	r0, #32
 80014aa:	40c6      	lsrs	r6, r0
 80014ac:	2a20      	cmp	r2, #32
 80014ae:	d005      	beq.n	80014bc <__aeabi_dadd+0x6a0>
 80014b0:	2040      	movs	r0, #64	; 0x40
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	4093      	lsls	r3, r2
 80014b6:	464a      	mov	r2, r9
 80014b8:	431a      	orrs	r2, r3
 80014ba:	4691      	mov	r9, r2
 80014bc:	464d      	mov	r5, r9
 80014be:	1e6b      	subs	r3, r5, #1
 80014c0:	419d      	sbcs	r5, r3
 80014c2:	4335      	orrs	r5, r6
 80014c4:	e621      	b.n	800110a <__aeabi_dadd+0x2ee>
 80014c6:	0002      	movs	r2, r0
 80014c8:	2300      	movs	r3, #0
 80014ca:	2100      	movs	r1, #0
 80014cc:	e540      	b.n	8000f50 <__aeabi_dadd+0x134>
 80014ce:	464a      	mov	r2, r9
 80014d0:	19d5      	adds	r5, r2, r7
 80014d2:	42bd      	cmp	r5, r7
 80014d4:	4189      	sbcs	r1, r1
 80014d6:	4463      	add	r3, ip
 80014d8:	4698      	mov	r8, r3
 80014da:	4249      	negs	r1, r1
 80014dc:	4488      	add	r8, r1
 80014de:	e5b3      	b.n	8001048 <__aeabi_dadd+0x22c>
 80014e0:	2100      	movs	r1, #0
 80014e2:	4a01      	ldr	r2, [pc, #4]	; (80014e8 <__aeabi_dadd+0x6cc>)
 80014e4:	000b      	movs	r3, r1
 80014e6:	e533      	b.n	8000f50 <__aeabi_dadd+0x134>
 80014e8:	000007ff 	.word	0x000007ff
 80014ec:	ff7fffff 	.word	0xff7fffff

080014f0 <__aeabi_ddiv>:
 80014f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f2:	4657      	mov	r7, sl
 80014f4:	464e      	mov	r6, r9
 80014f6:	4645      	mov	r5, r8
 80014f8:	46de      	mov	lr, fp
 80014fa:	b5e0      	push	{r5, r6, r7, lr}
 80014fc:	4681      	mov	r9, r0
 80014fe:	0005      	movs	r5, r0
 8001500:	030c      	lsls	r4, r1, #12
 8001502:	0048      	lsls	r0, r1, #1
 8001504:	4692      	mov	sl, r2
 8001506:	001f      	movs	r7, r3
 8001508:	b085      	sub	sp, #20
 800150a:	0b24      	lsrs	r4, r4, #12
 800150c:	0d40      	lsrs	r0, r0, #21
 800150e:	0fce      	lsrs	r6, r1, #31
 8001510:	2800      	cmp	r0, #0
 8001512:	d059      	beq.n	80015c8 <__aeabi_ddiv+0xd8>
 8001514:	4b87      	ldr	r3, [pc, #540]	; (8001734 <__aeabi_ddiv+0x244>)
 8001516:	4298      	cmp	r0, r3
 8001518:	d100      	bne.n	800151c <__aeabi_ddiv+0x2c>
 800151a:	e098      	b.n	800164e <__aeabi_ddiv+0x15e>
 800151c:	0f6b      	lsrs	r3, r5, #29
 800151e:	00e4      	lsls	r4, r4, #3
 8001520:	431c      	orrs	r4, r3
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	041b      	lsls	r3, r3, #16
 8001526:	4323      	orrs	r3, r4
 8001528:	4698      	mov	r8, r3
 800152a:	4b83      	ldr	r3, [pc, #524]	; (8001738 <__aeabi_ddiv+0x248>)
 800152c:	00ed      	lsls	r5, r5, #3
 800152e:	469b      	mov	fp, r3
 8001530:	2300      	movs	r3, #0
 8001532:	4699      	mov	r9, r3
 8001534:	4483      	add	fp, r0
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	033c      	lsls	r4, r7, #12
 800153a:	007b      	lsls	r3, r7, #1
 800153c:	4650      	mov	r0, sl
 800153e:	0b24      	lsrs	r4, r4, #12
 8001540:	0d5b      	lsrs	r3, r3, #21
 8001542:	0fff      	lsrs	r7, r7, #31
 8001544:	2b00      	cmp	r3, #0
 8001546:	d067      	beq.n	8001618 <__aeabi_ddiv+0x128>
 8001548:	4a7a      	ldr	r2, [pc, #488]	; (8001734 <__aeabi_ddiv+0x244>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d018      	beq.n	8001580 <__aeabi_ddiv+0x90>
 800154e:	497a      	ldr	r1, [pc, #488]	; (8001738 <__aeabi_ddiv+0x248>)
 8001550:	0f42      	lsrs	r2, r0, #29
 8001552:	468c      	mov	ip, r1
 8001554:	00e4      	lsls	r4, r4, #3
 8001556:	4659      	mov	r1, fp
 8001558:	4314      	orrs	r4, r2
 800155a:	2280      	movs	r2, #128	; 0x80
 800155c:	4463      	add	r3, ip
 800155e:	0412      	lsls	r2, r2, #16
 8001560:	1acb      	subs	r3, r1, r3
 8001562:	4314      	orrs	r4, r2
 8001564:	469b      	mov	fp, r3
 8001566:	00c2      	lsls	r2, r0, #3
 8001568:	2000      	movs	r0, #0
 800156a:	0033      	movs	r3, r6
 800156c:	407b      	eors	r3, r7
 800156e:	469a      	mov	sl, r3
 8001570:	464b      	mov	r3, r9
 8001572:	2b0f      	cmp	r3, #15
 8001574:	d900      	bls.n	8001578 <__aeabi_ddiv+0x88>
 8001576:	e0ef      	b.n	8001758 <__aeabi_ddiv+0x268>
 8001578:	4970      	ldr	r1, [pc, #448]	; (800173c <__aeabi_ddiv+0x24c>)
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	58cb      	ldr	r3, [r1, r3]
 800157e:	469f      	mov	pc, r3
 8001580:	4b6f      	ldr	r3, [pc, #444]	; (8001740 <__aeabi_ddiv+0x250>)
 8001582:	4652      	mov	r2, sl
 8001584:	469c      	mov	ip, r3
 8001586:	4322      	orrs	r2, r4
 8001588:	44e3      	add	fp, ip
 800158a:	2a00      	cmp	r2, #0
 800158c:	d000      	beq.n	8001590 <__aeabi_ddiv+0xa0>
 800158e:	e095      	b.n	80016bc <__aeabi_ddiv+0x1cc>
 8001590:	4649      	mov	r1, r9
 8001592:	2302      	movs	r3, #2
 8001594:	4319      	orrs	r1, r3
 8001596:	4689      	mov	r9, r1
 8001598:	2400      	movs	r4, #0
 800159a:	2002      	movs	r0, #2
 800159c:	e7e5      	b.n	800156a <__aeabi_ddiv+0x7a>
 800159e:	2300      	movs	r3, #0
 80015a0:	2400      	movs	r4, #0
 80015a2:	2500      	movs	r5, #0
 80015a4:	4652      	mov	r2, sl
 80015a6:	051b      	lsls	r3, r3, #20
 80015a8:	4323      	orrs	r3, r4
 80015aa:	07d2      	lsls	r2, r2, #31
 80015ac:	4313      	orrs	r3, r2
 80015ae:	0028      	movs	r0, r5
 80015b0:	0019      	movs	r1, r3
 80015b2:	b005      	add	sp, #20
 80015b4:	bcf0      	pop	{r4, r5, r6, r7}
 80015b6:	46bb      	mov	fp, r7
 80015b8:	46b2      	mov	sl, r6
 80015ba:	46a9      	mov	r9, r5
 80015bc:	46a0      	mov	r8, r4
 80015be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c0:	2400      	movs	r4, #0
 80015c2:	2500      	movs	r5, #0
 80015c4:	4b5b      	ldr	r3, [pc, #364]	; (8001734 <__aeabi_ddiv+0x244>)
 80015c6:	e7ed      	b.n	80015a4 <__aeabi_ddiv+0xb4>
 80015c8:	464b      	mov	r3, r9
 80015ca:	4323      	orrs	r3, r4
 80015cc:	4698      	mov	r8, r3
 80015ce:	d100      	bne.n	80015d2 <__aeabi_ddiv+0xe2>
 80015d0:	e089      	b.n	80016e6 <__aeabi_ddiv+0x1f6>
 80015d2:	2c00      	cmp	r4, #0
 80015d4:	d100      	bne.n	80015d8 <__aeabi_ddiv+0xe8>
 80015d6:	e1e0      	b.n	800199a <__aeabi_ddiv+0x4aa>
 80015d8:	0020      	movs	r0, r4
 80015da:	f001 fa7f 	bl	8002adc <__clzsi2>
 80015de:	0001      	movs	r1, r0
 80015e0:	0002      	movs	r2, r0
 80015e2:	390b      	subs	r1, #11
 80015e4:	231d      	movs	r3, #29
 80015e6:	1a5b      	subs	r3, r3, r1
 80015e8:	4649      	mov	r1, r9
 80015ea:	0010      	movs	r0, r2
 80015ec:	40d9      	lsrs	r1, r3
 80015ee:	3808      	subs	r0, #8
 80015f0:	4084      	lsls	r4, r0
 80015f2:	000b      	movs	r3, r1
 80015f4:	464d      	mov	r5, r9
 80015f6:	4323      	orrs	r3, r4
 80015f8:	4698      	mov	r8, r3
 80015fa:	4085      	lsls	r5, r0
 80015fc:	4851      	ldr	r0, [pc, #324]	; (8001744 <__aeabi_ddiv+0x254>)
 80015fe:	033c      	lsls	r4, r7, #12
 8001600:	1a83      	subs	r3, r0, r2
 8001602:	469b      	mov	fp, r3
 8001604:	2300      	movs	r3, #0
 8001606:	4699      	mov	r9, r3
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	007b      	lsls	r3, r7, #1
 800160c:	4650      	mov	r0, sl
 800160e:	0b24      	lsrs	r4, r4, #12
 8001610:	0d5b      	lsrs	r3, r3, #21
 8001612:	0fff      	lsrs	r7, r7, #31
 8001614:	2b00      	cmp	r3, #0
 8001616:	d197      	bne.n	8001548 <__aeabi_ddiv+0x58>
 8001618:	4652      	mov	r2, sl
 800161a:	4322      	orrs	r2, r4
 800161c:	d055      	beq.n	80016ca <__aeabi_ddiv+0x1da>
 800161e:	2c00      	cmp	r4, #0
 8001620:	d100      	bne.n	8001624 <__aeabi_ddiv+0x134>
 8001622:	e1ca      	b.n	80019ba <__aeabi_ddiv+0x4ca>
 8001624:	0020      	movs	r0, r4
 8001626:	f001 fa59 	bl	8002adc <__clzsi2>
 800162a:	0002      	movs	r2, r0
 800162c:	3a0b      	subs	r2, #11
 800162e:	231d      	movs	r3, #29
 8001630:	0001      	movs	r1, r0
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	4652      	mov	r2, sl
 8001636:	3908      	subs	r1, #8
 8001638:	40da      	lsrs	r2, r3
 800163a:	408c      	lsls	r4, r1
 800163c:	4314      	orrs	r4, r2
 800163e:	4652      	mov	r2, sl
 8001640:	408a      	lsls	r2, r1
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <__aeabi_ddiv+0x258>)
 8001644:	4458      	add	r0, fp
 8001646:	469b      	mov	fp, r3
 8001648:	4483      	add	fp, r0
 800164a:	2000      	movs	r0, #0
 800164c:	e78d      	b.n	800156a <__aeabi_ddiv+0x7a>
 800164e:	464b      	mov	r3, r9
 8001650:	4323      	orrs	r3, r4
 8001652:	4698      	mov	r8, r3
 8001654:	d140      	bne.n	80016d8 <__aeabi_ddiv+0x1e8>
 8001656:	2308      	movs	r3, #8
 8001658:	4699      	mov	r9, r3
 800165a:	3b06      	subs	r3, #6
 800165c:	2500      	movs	r5, #0
 800165e:	4683      	mov	fp, r0
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	e769      	b.n	8001538 <__aeabi_ddiv+0x48>
 8001664:	46b2      	mov	sl, r6
 8001666:	9b00      	ldr	r3, [sp, #0]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d0a9      	beq.n	80015c0 <__aeabi_ddiv+0xd0>
 800166c:	2b03      	cmp	r3, #3
 800166e:	d100      	bne.n	8001672 <__aeabi_ddiv+0x182>
 8001670:	e211      	b.n	8001a96 <__aeabi_ddiv+0x5a6>
 8001672:	2b01      	cmp	r3, #1
 8001674:	d093      	beq.n	800159e <__aeabi_ddiv+0xae>
 8001676:	4a35      	ldr	r2, [pc, #212]	; (800174c <__aeabi_ddiv+0x25c>)
 8001678:	445a      	add	r2, fp
 800167a:	2a00      	cmp	r2, #0
 800167c:	dc00      	bgt.n	8001680 <__aeabi_ddiv+0x190>
 800167e:	e13c      	b.n	80018fa <__aeabi_ddiv+0x40a>
 8001680:	076b      	lsls	r3, r5, #29
 8001682:	d000      	beq.n	8001686 <__aeabi_ddiv+0x196>
 8001684:	e1a7      	b.n	80019d6 <__aeabi_ddiv+0x4e6>
 8001686:	08ed      	lsrs	r5, r5, #3
 8001688:	4643      	mov	r3, r8
 800168a:	01db      	lsls	r3, r3, #7
 800168c:	d506      	bpl.n	800169c <__aeabi_ddiv+0x1ac>
 800168e:	4642      	mov	r2, r8
 8001690:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <__aeabi_ddiv+0x260>)
 8001692:	401a      	ands	r2, r3
 8001694:	4690      	mov	r8, r2
 8001696:	2280      	movs	r2, #128	; 0x80
 8001698:	00d2      	lsls	r2, r2, #3
 800169a:	445a      	add	r2, fp
 800169c:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <__aeabi_ddiv+0x264>)
 800169e:	429a      	cmp	r2, r3
 80016a0:	dc8e      	bgt.n	80015c0 <__aeabi_ddiv+0xd0>
 80016a2:	4643      	mov	r3, r8
 80016a4:	0552      	lsls	r2, r2, #21
 80016a6:	0758      	lsls	r0, r3, #29
 80016a8:	025c      	lsls	r4, r3, #9
 80016aa:	4305      	orrs	r5, r0
 80016ac:	0b24      	lsrs	r4, r4, #12
 80016ae:	0d53      	lsrs	r3, r2, #21
 80016b0:	e778      	b.n	80015a4 <__aeabi_ddiv+0xb4>
 80016b2:	46ba      	mov	sl, r7
 80016b4:	46a0      	mov	r8, r4
 80016b6:	0015      	movs	r5, r2
 80016b8:	9000      	str	r0, [sp, #0]
 80016ba:	e7d4      	b.n	8001666 <__aeabi_ddiv+0x176>
 80016bc:	464a      	mov	r2, r9
 80016be:	2303      	movs	r3, #3
 80016c0:	431a      	orrs	r2, r3
 80016c2:	4691      	mov	r9, r2
 80016c4:	2003      	movs	r0, #3
 80016c6:	4652      	mov	r2, sl
 80016c8:	e74f      	b.n	800156a <__aeabi_ddiv+0x7a>
 80016ca:	4649      	mov	r1, r9
 80016cc:	2301      	movs	r3, #1
 80016ce:	4319      	orrs	r1, r3
 80016d0:	4689      	mov	r9, r1
 80016d2:	2400      	movs	r4, #0
 80016d4:	2001      	movs	r0, #1
 80016d6:	e748      	b.n	800156a <__aeabi_ddiv+0x7a>
 80016d8:	230c      	movs	r3, #12
 80016da:	4699      	mov	r9, r3
 80016dc:	3b09      	subs	r3, #9
 80016de:	46a0      	mov	r8, r4
 80016e0:	4683      	mov	fp, r0
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	e728      	b.n	8001538 <__aeabi_ddiv+0x48>
 80016e6:	2304      	movs	r3, #4
 80016e8:	4699      	mov	r9, r3
 80016ea:	2300      	movs	r3, #0
 80016ec:	469b      	mov	fp, r3
 80016ee:	3301      	adds	r3, #1
 80016f0:	2500      	movs	r5, #0
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	e720      	b.n	8001538 <__aeabi_ddiv+0x48>
 80016f6:	2300      	movs	r3, #0
 80016f8:	2480      	movs	r4, #128	; 0x80
 80016fa:	469a      	mov	sl, r3
 80016fc:	2500      	movs	r5, #0
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <__aeabi_ddiv+0x244>)
 8001700:	0324      	lsls	r4, r4, #12
 8001702:	e74f      	b.n	80015a4 <__aeabi_ddiv+0xb4>
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	4641      	mov	r1, r8
 8001708:	031b      	lsls	r3, r3, #12
 800170a:	4219      	tst	r1, r3
 800170c:	d008      	beq.n	8001720 <__aeabi_ddiv+0x230>
 800170e:	421c      	tst	r4, r3
 8001710:	d106      	bne.n	8001720 <__aeabi_ddiv+0x230>
 8001712:	431c      	orrs	r4, r3
 8001714:	0324      	lsls	r4, r4, #12
 8001716:	46ba      	mov	sl, r7
 8001718:	0015      	movs	r5, r2
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <__aeabi_ddiv+0x244>)
 800171c:	0b24      	lsrs	r4, r4, #12
 800171e:	e741      	b.n	80015a4 <__aeabi_ddiv+0xb4>
 8001720:	2480      	movs	r4, #128	; 0x80
 8001722:	4643      	mov	r3, r8
 8001724:	0324      	lsls	r4, r4, #12
 8001726:	431c      	orrs	r4, r3
 8001728:	0324      	lsls	r4, r4, #12
 800172a:	46b2      	mov	sl, r6
 800172c:	4b01      	ldr	r3, [pc, #4]	; (8001734 <__aeabi_ddiv+0x244>)
 800172e:	0b24      	lsrs	r4, r4, #12
 8001730:	e738      	b.n	80015a4 <__aeabi_ddiv+0xb4>
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	000007ff 	.word	0x000007ff
 8001738:	fffffc01 	.word	0xfffffc01
 800173c:	0800aed8 	.word	0x0800aed8
 8001740:	fffff801 	.word	0xfffff801
 8001744:	fffffc0d 	.word	0xfffffc0d
 8001748:	000003f3 	.word	0x000003f3
 800174c:	000003ff 	.word	0x000003ff
 8001750:	feffffff 	.word	0xfeffffff
 8001754:	000007fe 	.word	0x000007fe
 8001758:	4544      	cmp	r4, r8
 800175a:	d200      	bcs.n	800175e <__aeabi_ddiv+0x26e>
 800175c:	e116      	b.n	800198c <__aeabi_ddiv+0x49c>
 800175e:	d100      	bne.n	8001762 <__aeabi_ddiv+0x272>
 8001760:	e111      	b.n	8001986 <__aeabi_ddiv+0x496>
 8001762:	2301      	movs	r3, #1
 8001764:	425b      	negs	r3, r3
 8001766:	469c      	mov	ip, r3
 8001768:	002e      	movs	r6, r5
 800176a:	4640      	mov	r0, r8
 800176c:	2500      	movs	r5, #0
 800176e:	44e3      	add	fp, ip
 8001770:	0223      	lsls	r3, r4, #8
 8001772:	0e14      	lsrs	r4, r2, #24
 8001774:	431c      	orrs	r4, r3
 8001776:	0c1b      	lsrs	r3, r3, #16
 8001778:	4699      	mov	r9, r3
 800177a:	0423      	lsls	r3, r4, #16
 800177c:	0c1f      	lsrs	r7, r3, #16
 800177e:	0212      	lsls	r2, r2, #8
 8001780:	4649      	mov	r1, r9
 8001782:	9200      	str	r2, [sp, #0]
 8001784:	9701      	str	r7, [sp, #4]
 8001786:	f001 f9a3 	bl	8002ad0 <__aeabi_uidivmod>
 800178a:	0002      	movs	r2, r0
 800178c:	437a      	muls	r2, r7
 800178e:	040b      	lsls	r3, r1, #16
 8001790:	0c31      	lsrs	r1, r6, #16
 8001792:	4680      	mov	r8, r0
 8001794:	4319      	orrs	r1, r3
 8001796:	428a      	cmp	r2, r1
 8001798:	d90b      	bls.n	80017b2 <__aeabi_ddiv+0x2c2>
 800179a:	2301      	movs	r3, #1
 800179c:	425b      	negs	r3, r3
 800179e:	469c      	mov	ip, r3
 80017a0:	1909      	adds	r1, r1, r4
 80017a2:	44e0      	add	r8, ip
 80017a4:	428c      	cmp	r4, r1
 80017a6:	d804      	bhi.n	80017b2 <__aeabi_ddiv+0x2c2>
 80017a8:	428a      	cmp	r2, r1
 80017aa:	d902      	bls.n	80017b2 <__aeabi_ddiv+0x2c2>
 80017ac:	1e83      	subs	r3, r0, #2
 80017ae:	4698      	mov	r8, r3
 80017b0:	1909      	adds	r1, r1, r4
 80017b2:	1a88      	subs	r0, r1, r2
 80017b4:	4649      	mov	r1, r9
 80017b6:	f001 f98b 	bl	8002ad0 <__aeabi_uidivmod>
 80017ba:	0409      	lsls	r1, r1, #16
 80017bc:	468c      	mov	ip, r1
 80017be:	0431      	lsls	r1, r6, #16
 80017c0:	4666      	mov	r6, ip
 80017c2:	9a01      	ldr	r2, [sp, #4]
 80017c4:	0c09      	lsrs	r1, r1, #16
 80017c6:	4342      	muls	r2, r0
 80017c8:	0003      	movs	r3, r0
 80017ca:	4331      	orrs	r1, r6
 80017cc:	428a      	cmp	r2, r1
 80017ce:	d904      	bls.n	80017da <__aeabi_ddiv+0x2ea>
 80017d0:	1909      	adds	r1, r1, r4
 80017d2:	3b01      	subs	r3, #1
 80017d4:	428c      	cmp	r4, r1
 80017d6:	d800      	bhi.n	80017da <__aeabi_ddiv+0x2ea>
 80017d8:	e111      	b.n	80019fe <__aeabi_ddiv+0x50e>
 80017da:	1a89      	subs	r1, r1, r2
 80017dc:	4642      	mov	r2, r8
 80017de:	9e00      	ldr	r6, [sp, #0]
 80017e0:	0412      	lsls	r2, r2, #16
 80017e2:	431a      	orrs	r2, r3
 80017e4:	0c33      	lsrs	r3, r6, #16
 80017e6:	001f      	movs	r7, r3
 80017e8:	0c10      	lsrs	r0, r2, #16
 80017ea:	4690      	mov	r8, r2
 80017ec:	9302      	str	r3, [sp, #8]
 80017ee:	0413      	lsls	r3, r2, #16
 80017f0:	0432      	lsls	r2, r6, #16
 80017f2:	0c16      	lsrs	r6, r2, #16
 80017f4:	0032      	movs	r2, r6
 80017f6:	0c1b      	lsrs	r3, r3, #16
 80017f8:	435a      	muls	r2, r3
 80017fa:	9603      	str	r6, [sp, #12]
 80017fc:	437b      	muls	r3, r7
 80017fe:	4346      	muls	r6, r0
 8001800:	4378      	muls	r0, r7
 8001802:	0c17      	lsrs	r7, r2, #16
 8001804:	46bc      	mov	ip, r7
 8001806:	199b      	adds	r3, r3, r6
 8001808:	4463      	add	r3, ip
 800180a:	429e      	cmp	r6, r3
 800180c:	d903      	bls.n	8001816 <__aeabi_ddiv+0x326>
 800180e:	2680      	movs	r6, #128	; 0x80
 8001810:	0276      	lsls	r6, r6, #9
 8001812:	46b4      	mov	ip, r6
 8001814:	4460      	add	r0, ip
 8001816:	0c1e      	lsrs	r6, r3, #16
 8001818:	1830      	adds	r0, r6, r0
 800181a:	0416      	lsls	r6, r2, #16
 800181c:	041b      	lsls	r3, r3, #16
 800181e:	0c36      	lsrs	r6, r6, #16
 8001820:	199e      	adds	r6, r3, r6
 8001822:	4281      	cmp	r1, r0
 8001824:	d200      	bcs.n	8001828 <__aeabi_ddiv+0x338>
 8001826:	e09c      	b.n	8001962 <__aeabi_ddiv+0x472>
 8001828:	d100      	bne.n	800182c <__aeabi_ddiv+0x33c>
 800182a:	e097      	b.n	800195c <__aeabi_ddiv+0x46c>
 800182c:	1bae      	subs	r6, r5, r6
 800182e:	1a09      	subs	r1, r1, r0
 8001830:	42b5      	cmp	r5, r6
 8001832:	4180      	sbcs	r0, r0
 8001834:	4240      	negs	r0, r0
 8001836:	1a08      	subs	r0, r1, r0
 8001838:	4284      	cmp	r4, r0
 800183a:	d100      	bne.n	800183e <__aeabi_ddiv+0x34e>
 800183c:	e111      	b.n	8001a62 <__aeabi_ddiv+0x572>
 800183e:	4649      	mov	r1, r9
 8001840:	f001 f946 	bl	8002ad0 <__aeabi_uidivmod>
 8001844:	9a01      	ldr	r2, [sp, #4]
 8001846:	040b      	lsls	r3, r1, #16
 8001848:	4342      	muls	r2, r0
 800184a:	0c31      	lsrs	r1, r6, #16
 800184c:	0005      	movs	r5, r0
 800184e:	4319      	orrs	r1, r3
 8001850:	428a      	cmp	r2, r1
 8001852:	d907      	bls.n	8001864 <__aeabi_ddiv+0x374>
 8001854:	1909      	adds	r1, r1, r4
 8001856:	3d01      	subs	r5, #1
 8001858:	428c      	cmp	r4, r1
 800185a:	d803      	bhi.n	8001864 <__aeabi_ddiv+0x374>
 800185c:	428a      	cmp	r2, r1
 800185e:	d901      	bls.n	8001864 <__aeabi_ddiv+0x374>
 8001860:	1e85      	subs	r5, r0, #2
 8001862:	1909      	adds	r1, r1, r4
 8001864:	1a88      	subs	r0, r1, r2
 8001866:	4649      	mov	r1, r9
 8001868:	f001 f932 	bl	8002ad0 <__aeabi_uidivmod>
 800186c:	0409      	lsls	r1, r1, #16
 800186e:	468c      	mov	ip, r1
 8001870:	0431      	lsls	r1, r6, #16
 8001872:	4666      	mov	r6, ip
 8001874:	9a01      	ldr	r2, [sp, #4]
 8001876:	0c09      	lsrs	r1, r1, #16
 8001878:	4342      	muls	r2, r0
 800187a:	0003      	movs	r3, r0
 800187c:	4331      	orrs	r1, r6
 800187e:	428a      	cmp	r2, r1
 8001880:	d907      	bls.n	8001892 <__aeabi_ddiv+0x3a2>
 8001882:	1909      	adds	r1, r1, r4
 8001884:	3b01      	subs	r3, #1
 8001886:	428c      	cmp	r4, r1
 8001888:	d803      	bhi.n	8001892 <__aeabi_ddiv+0x3a2>
 800188a:	428a      	cmp	r2, r1
 800188c:	d901      	bls.n	8001892 <__aeabi_ddiv+0x3a2>
 800188e:	1e83      	subs	r3, r0, #2
 8001890:	1909      	adds	r1, r1, r4
 8001892:	9e03      	ldr	r6, [sp, #12]
 8001894:	1a89      	subs	r1, r1, r2
 8001896:	0032      	movs	r2, r6
 8001898:	042d      	lsls	r5, r5, #16
 800189a:	431d      	orrs	r5, r3
 800189c:	9f02      	ldr	r7, [sp, #8]
 800189e:	042b      	lsls	r3, r5, #16
 80018a0:	0c1b      	lsrs	r3, r3, #16
 80018a2:	435a      	muls	r2, r3
 80018a4:	437b      	muls	r3, r7
 80018a6:	469c      	mov	ip, r3
 80018a8:	0c28      	lsrs	r0, r5, #16
 80018aa:	4346      	muls	r6, r0
 80018ac:	0c13      	lsrs	r3, r2, #16
 80018ae:	44b4      	add	ip, r6
 80018b0:	4463      	add	r3, ip
 80018b2:	4378      	muls	r0, r7
 80018b4:	429e      	cmp	r6, r3
 80018b6:	d903      	bls.n	80018c0 <__aeabi_ddiv+0x3d0>
 80018b8:	2680      	movs	r6, #128	; 0x80
 80018ba:	0276      	lsls	r6, r6, #9
 80018bc:	46b4      	mov	ip, r6
 80018be:	4460      	add	r0, ip
 80018c0:	0c1e      	lsrs	r6, r3, #16
 80018c2:	0412      	lsls	r2, r2, #16
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c12      	lsrs	r2, r2, #16
 80018c8:	1830      	adds	r0, r6, r0
 80018ca:	189b      	adds	r3, r3, r2
 80018cc:	4281      	cmp	r1, r0
 80018ce:	d306      	bcc.n	80018de <__aeabi_ddiv+0x3ee>
 80018d0:	d002      	beq.n	80018d8 <__aeabi_ddiv+0x3e8>
 80018d2:	2301      	movs	r3, #1
 80018d4:	431d      	orrs	r5, r3
 80018d6:	e6ce      	b.n	8001676 <__aeabi_ddiv+0x186>
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d100      	bne.n	80018de <__aeabi_ddiv+0x3ee>
 80018dc:	e6cb      	b.n	8001676 <__aeabi_ddiv+0x186>
 80018de:	1861      	adds	r1, r4, r1
 80018e0:	1e6e      	subs	r6, r5, #1
 80018e2:	42a1      	cmp	r1, r4
 80018e4:	d200      	bcs.n	80018e8 <__aeabi_ddiv+0x3f8>
 80018e6:	e0a4      	b.n	8001a32 <__aeabi_ddiv+0x542>
 80018e8:	4281      	cmp	r1, r0
 80018ea:	d200      	bcs.n	80018ee <__aeabi_ddiv+0x3fe>
 80018ec:	e0c9      	b.n	8001a82 <__aeabi_ddiv+0x592>
 80018ee:	d100      	bne.n	80018f2 <__aeabi_ddiv+0x402>
 80018f0:	e0d9      	b.n	8001aa6 <__aeabi_ddiv+0x5b6>
 80018f2:	0035      	movs	r5, r6
 80018f4:	e7ed      	b.n	80018d2 <__aeabi_ddiv+0x3e2>
 80018f6:	2501      	movs	r5, #1
 80018f8:	426d      	negs	r5, r5
 80018fa:	2101      	movs	r1, #1
 80018fc:	1a89      	subs	r1, r1, r2
 80018fe:	2938      	cmp	r1, #56	; 0x38
 8001900:	dd00      	ble.n	8001904 <__aeabi_ddiv+0x414>
 8001902:	e64c      	b.n	800159e <__aeabi_ddiv+0xae>
 8001904:	291f      	cmp	r1, #31
 8001906:	dc00      	bgt.n	800190a <__aeabi_ddiv+0x41a>
 8001908:	e07f      	b.n	8001a0a <__aeabi_ddiv+0x51a>
 800190a:	231f      	movs	r3, #31
 800190c:	425b      	negs	r3, r3
 800190e:	1a9a      	subs	r2, r3, r2
 8001910:	4643      	mov	r3, r8
 8001912:	40d3      	lsrs	r3, r2
 8001914:	2920      	cmp	r1, #32
 8001916:	d004      	beq.n	8001922 <__aeabi_ddiv+0x432>
 8001918:	4644      	mov	r4, r8
 800191a:	4a65      	ldr	r2, [pc, #404]	; (8001ab0 <__aeabi_ddiv+0x5c0>)
 800191c:	445a      	add	r2, fp
 800191e:	4094      	lsls	r4, r2
 8001920:	4325      	orrs	r5, r4
 8001922:	1e6a      	subs	r2, r5, #1
 8001924:	4195      	sbcs	r5, r2
 8001926:	2207      	movs	r2, #7
 8001928:	432b      	orrs	r3, r5
 800192a:	0015      	movs	r5, r2
 800192c:	2400      	movs	r4, #0
 800192e:	401d      	ands	r5, r3
 8001930:	421a      	tst	r2, r3
 8001932:	d100      	bne.n	8001936 <__aeabi_ddiv+0x446>
 8001934:	e0a1      	b.n	8001a7a <__aeabi_ddiv+0x58a>
 8001936:	220f      	movs	r2, #15
 8001938:	2400      	movs	r4, #0
 800193a:	401a      	ands	r2, r3
 800193c:	2a04      	cmp	r2, #4
 800193e:	d100      	bne.n	8001942 <__aeabi_ddiv+0x452>
 8001940:	e098      	b.n	8001a74 <__aeabi_ddiv+0x584>
 8001942:	1d1a      	adds	r2, r3, #4
 8001944:	429a      	cmp	r2, r3
 8001946:	419b      	sbcs	r3, r3
 8001948:	425b      	negs	r3, r3
 800194a:	18e4      	adds	r4, r4, r3
 800194c:	0013      	movs	r3, r2
 800194e:	0222      	lsls	r2, r4, #8
 8001950:	d400      	bmi.n	8001954 <__aeabi_ddiv+0x464>
 8001952:	e08f      	b.n	8001a74 <__aeabi_ddiv+0x584>
 8001954:	2301      	movs	r3, #1
 8001956:	2400      	movs	r4, #0
 8001958:	2500      	movs	r5, #0
 800195a:	e623      	b.n	80015a4 <__aeabi_ddiv+0xb4>
 800195c:	42b5      	cmp	r5, r6
 800195e:	d300      	bcc.n	8001962 <__aeabi_ddiv+0x472>
 8001960:	e764      	b.n	800182c <__aeabi_ddiv+0x33c>
 8001962:	4643      	mov	r3, r8
 8001964:	1e5a      	subs	r2, r3, #1
 8001966:	9b00      	ldr	r3, [sp, #0]
 8001968:	469c      	mov	ip, r3
 800196a:	4465      	add	r5, ip
 800196c:	001f      	movs	r7, r3
 800196e:	429d      	cmp	r5, r3
 8001970:	419b      	sbcs	r3, r3
 8001972:	425b      	negs	r3, r3
 8001974:	191b      	adds	r3, r3, r4
 8001976:	18c9      	adds	r1, r1, r3
 8001978:	428c      	cmp	r4, r1
 800197a:	d23a      	bcs.n	80019f2 <__aeabi_ddiv+0x502>
 800197c:	4288      	cmp	r0, r1
 800197e:	d863      	bhi.n	8001a48 <__aeabi_ddiv+0x558>
 8001980:	d060      	beq.n	8001a44 <__aeabi_ddiv+0x554>
 8001982:	4690      	mov	r8, r2
 8001984:	e752      	b.n	800182c <__aeabi_ddiv+0x33c>
 8001986:	42aa      	cmp	r2, r5
 8001988:	d900      	bls.n	800198c <__aeabi_ddiv+0x49c>
 800198a:	e6ea      	b.n	8001762 <__aeabi_ddiv+0x272>
 800198c:	4643      	mov	r3, r8
 800198e:	07de      	lsls	r6, r3, #31
 8001990:	0858      	lsrs	r0, r3, #1
 8001992:	086b      	lsrs	r3, r5, #1
 8001994:	431e      	orrs	r6, r3
 8001996:	07ed      	lsls	r5, r5, #31
 8001998:	e6ea      	b.n	8001770 <__aeabi_ddiv+0x280>
 800199a:	4648      	mov	r0, r9
 800199c:	f001 f89e 	bl	8002adc <__clzsi2>
 80019a0:	0001      	movs	r1, r0
 80019a2:	0002      	movs	r2, r0
 80019a4:	3115      	adds	r1, #21
 80019a6:	3220      	adds	r2, #32
 80019a8:	291c      	cmp	r1, #28
 80019aa:	dc00      	bgt.n	80019ae <__aeabi_ddiv+0x4be>
 80019ac:	e61a      	b.n	80015e4 <__aeabi_ddiv+0xf4>
 80019ae:	464b      	mov	r3, r9
 80019b0:	3808      	subs	r0, #8
 80019b2:	4083      	lsls	r3, r0
 80019b4:	2500      	movs	r5, #0
 80019b6:	4698      	mov	r8, r3
 80019b8:	e620      	b.n	80015fc <__aeabi_ddiv+0x10c>
 80019ba:	f001 f88f 	bl	8002adc <__clzsi2>
 80019be:	0003      	movs	r3, r0
 80019c0:	001a      	movs	r2, r3
 80019c2:	3215      	adds	r2, #21
 80019c4:	3020      	adds	r0, #32
 80019c6:	2a1c      	cmp	r2, #28
 80019c8:	dc00      	bgt.n	80019cc <__aeabi_ddiv+0x4dc>
 80019ca:	e630      	b.n	800162e <__aeabi_ddiv+0x13e>
 80019cc:	4654      	mov	r4, sl
 80019ce:	3b08      	subs	r3, #8
 80019d0:	2200      	movs	r2, #0
 80019d2:	409c      	lsls	r4, r3
 80019d4:	e635      	b.n	8001642 <__aeabi_ddiv+0x152>
 80019d6:	230f      	movs	r3, #15
 80019d8:	402b      	ands	r3, r5
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d100      	bne.n	80019e0 <__aeabi_ddiv+0x4f0>
 80019de:	e652      	b.n	8001686 <__aeabi_ddiv+0x196>
 80019e0:	2305      	movs	r3, #5
 80019e2:	425b      	negs	r3, r3
 80019e4:	42ab      	cmp	r3, r5
 80019e6:	419b      	sbcs	r3, r3
 80019e8:	3504      	adds	r5, #4
 80019ea:	425b      	negs	r3, r3
 80019ec:	08ed      	lsrs	r5, r5, #3
 80019ee:	4498      	add	r8, r3
 80019f0:	e64a      	b.n	8001688 <__aeabi_ddiv+0x198>
 80019f2:	428c      	cmp	r4, r1
 80019f4:	d1c5      	bne.n	8001982 <__aeabi_ddiv+0x492>
 80019f6:	42af      	cmp	r7, r5
 80019f8:	d9c0      	bls.n	800197c <__aeabi_ddiv+0x48c>
 80019fa:	4690      	mov	r8, r2
 80019fc:	e716      	b.n	800182c <__aeabi_ddiv+0x33c>
 80019fe:	428a      	cmp	r2, r1
 8001a00:	d800      	bhi.n	8001a04 <__aeabi_ddiv+0x514>
 8001a02:	e6ea      	b.n	80017da <__aeabi_ddiv+0x2ea>
 8001a04:	1e83      	subs	r3, r0, #2
 8001a06:	1909      	adds	r1, r1, r4
 8001a08:	e6e7      	b.n	80017da <__aeabi_ddiv+0x2ea>
 8001a0a:	4a2a      	ldr	r2, [pc, #168]	; (8001ab4 <__aeabi_ddiv+0x5c4>)
 8001a0c:	0028      	movs	r0, r5
 8001a0e:	445a      	add	r2, fp
 8001a10:	4643      	mov	r3, r8
 8001a12:	4095      	lsls	r5, r2
 8001a14:	4093      	lsls	r3, r2
 8001a16:	40c8      	lsrs	r0, r1
 8001a18:	1e6a      	subs	r2, r5, #1
 8001a1a:	4195      	sbcs	r5, r2
 8001a1c:	4644      	mov	r4, r8
 8001a1e:	4303      	orrs	r3, r0
 8001a20:	432b      	orrs	r3, r5
 8001a22:	40cc      	lsrs	r4, r1
 8001a24:	075a      	lsls	r2, r3, #29
 8001a26:	d092      	beq.n	800194e <__aeabi_ddiv+0x45e>
 8001a28:	220f      	movs	r2, #15
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	2a04      	cmp	r2, #4
 8001a2e:	d188      	bne.n	8001942 <__aeabi_ddiv+0x452>
 8001a30:	e78d      	b.n	800194e <__aeabi_ddiv+0x45e>
 8001a32:	0035      	movs	r5, r6
 8001a34:	4281      	cmp	r1, r0
 8001a36:	d000      	beq.n	8001a3a <__aeabi_ddiv+0x54a>
 8001a38:	e74b      	b.n	80018d2 <__aeabi_ddiv+0x3e2>
 8001a3a:	9a00      	ldr	r2, [sp, #0]
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d000      	beq.n	8001a42 <__aeabi_ddiv+0x552>
 8001a40:	e747      	b.n	80018d2 <__aeabi_ddiv+0x3e2>
 8001a42:	e618      	b.n	8001676 <__aeabi_ddiv+0x186>
 8001a44:	42ae      	cmp	r6, r5
 8001a46:	d99c      	bls.n	8001982 <__aeabi_ddiv+0x492>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	425b      	negs	r3, r3
 8001a4c:	469c      	mov	ip, r3
 8001a4e:	9b00      	ldr	r3, [sp, #0]
 8001a50:	44e0      	add	r8, ip
 8001a52:	469c      	mov	ip, r3
 8001a54:	4465      	add	r5, ip
 8001a56:	429d      	cmp	r5, r3
 8001a58:	419b      	sbcs	r3, r3
 8001a5a:	425b      	negs	r3, r3
 8001a5c:	191b      	adds	r3, r3, r4
 8001a5e:	18c9      	adds	r1, r1, r3
 8001a60:	e6e4      	b.n	800182c <__aeabi_ddiv+0x33c>
 8001a62:	4a15      	ldr	r2, [pc, #84]	; (8001ab8 <__aeabi_ddiv+0x5c8>)
 8001a64:	445a      	add	r2, fp
 8001a66:	2a00      	cmp	r2, #0
 8001a68:	dc00      	bgt.n	8001a6c <__aeabi_ddiv+0x57c>
 8001a6a:	e744      	b.n	80018f6 <__aeabi_ddiv+0x406>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	2500      	movs	r5, #0
 8001a70:	4498      	add	r8, r3
 8001a72:	e609      	b.n	8001688 <__aeabi_ddiv+0x198>
 8001a74:	0765      	lsls	r5, r4, #29
 8001a76:	0264      	lsls	r4, r4, #9
 8001a78:	0b24      	lsrs	r4, r4, #12
 8001a7a:	08db      	lsrs	r3, r3, #3
 8001a7c:	431d      	orrs	r5, r3
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e590      	b.n	80015a4 <__aeabi_ddiv+0xb4>
 8001a82:	9e00      	ldr	r6, [sp, #0]
 8001a84:	3d02      	subs	r5, #2
 8001a86:	0072      	lsls	r2, r6, #1
 8001a88:	42b2      	cmp	r2, r6
 8001a8a:	41bf      	sbcs	r7, r7
 8001a8c:	427f      	negs	r7, r7
 8001a8e:	193c      	adds	r4, r7, r4
 8001a90:	1909      	adds	r1, r1, r4
 8001a92:	9200      	str	r2, [sp, #0]
 8001a94:	e7ce      	b.n	8001a34 <__aeabi_ddiv+0x544>
 8001a96:	2480      	movs	r4, #128	; 0x80
 8001a98:	4643      	mov	r3, r8
 8001a9a:	0324      	lsls	r4, r4, #12
 8001a9c:	431c      	orrs	r4, r3
 8001a9e:	0324      	lsls	r4, r4, #12
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <__aeabi_ddiv+0x5cc>)
 8001aa2:	0b24      	lsrs	r4, r4, #12
 8001aa4:	e57e      	b.n	80015a4 <__aeabi_ddiv+0xb4>
 8001aa6:	9a00      	ldr	r2, [sp, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d3ea      	bcc.n	8001a82 <__aeabi_ddiv+0x592>
 8001aac:	0035      	movs	r5, r6
 8001aae:	e7c4      	b.n	8001a3a <__aeabi_ddiv+0x54a>
 8001ab0:	0000043e 	.word	0x0000043e
 8001ab4:	0000041e 	.word	0x0000041e
 8001ab8:	000003ff 	.word	0x000003ff
 8001abc:	000007ff 	.word	0x000007ff

08001ac0 <__eqdf2>:
 8001ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac2:	464f      	mov	r7, r9
 8001ac4:	4646      	mov	r6, r8
 8001ac6:	46d6      	mov	lr, sl
 8001ac8:	4694      	mov	ip, r2
 8001aca:	4691      	mov	r9, r2
 8001acc:	031a      	lsls	r2, r3, #12
 8001ace:	0b12      	lsrs	r2, r2, #12
 8001ad0:	4d18      	ldr	r5, [pc, #96]	; (8001b34 <__eqdf2+0x74>)
 8001ad2:	b5c0      	push	{r6, r7, lr}
 8001ad4:	004c      	lsls	r4, r1, #1
 8001ad6:	030f      	lsls	r7, r1, #12
 8001ad8:	4692      	mov	sl, r2
 8001ada:	005a      	lsls	r2, r3, #1
 8001adc:	0006      	movs	r6, r0
 8001ade:	4680      	mov	r8, r0
 8001ae0:	0b3f      	lsrs	r7, r7, #12
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	0d64      	lsrs	r4, r4, #21
 8001ae6:	0fc9      	lsrs	r1, r1, #31
 8001ae8:	0d52      	lsrs	r2, r2, #21
 8001aea:	0fdb      	lsrs	r3, r3, #31
 8001aec:	42ac      	cmp	r4, r5
 8001aee:	d00a      	beq.n	8001b06 <__eqdf2+0x46>
 8001af0:	42aa      	cmp	r2, r5
 8001af2:	d003      	beq.n	8001afc <__eqdf2+0x3c>
 8001af4:	4294      	cmp	r4, r2
 8001af6:	d101      	bne.n	8001afc <__eqdf2+0x3c>
 8001af8:	4557      	cmp	r7, sl
 8001afa:	d00d      	beq.n	8001b18 <__eqdf2+0x58>
 8001afc:	bce0      	pop	{r5, r6, r7}
 8001afe:	46ba      	mov	sl, r7
 8001b00:	46b1      	mov	r9, r6
 8001b02:	46a8      	mov	r8, r5
 8001b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b06:	003d      	movs	r5, r7
 8001b08:	4335      	orrs	r5, r6
 8001b0a:	d1f7      	bne.n	8001afc <__eqdf2+0x3c>
 8001b0c:	42a2      	cmp	r2, r4
 8001b0e:	d1f5      	bne.n	8001afc <__eqdf2+0x3c>
 8001b10:	4652      	mov	r2, sl
 8001b12:	4665      	mov	r5, ip
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d1f1      	bne.n	8001afc <__eqdf2+0x3c>
 8001b18:	2001      	movs	r0, #1
 8001b1a:	45c8      	cmp	r8, r9
 8001b1c:	d1ee      	bne.n	8001afc <__eqdf2+0x3c>
 8001b1e:	4299      	cmp	r1, r3
 8001b20:	d006      	beq.n	8001b30 <__eqdf2+0x70>
 8001b22:	2c00      	cmp	r4, #0
 8001b24:	d1ea      	bne.n	8001afc <__eqdf2+0x3c>
 8001b26:	433e      	orrs	r6, r7
 8001b28:	0030      	movs	r0, r6
 8001b2a:	1e46      	subs	r6, r0, #1
 8001b2c:	41b0      	sbcs	r0, r6
 8001b2e:	e7e5      	b.n	8001afc <__eqdf2+0x3c>
 8001b30:	2000      	movs	r0, #0
 8001b32:	e7e3      	b.n	8001afc <__eqdf2+0x3c>
 8001b34:	000007ff 	.word	0x000007ff

08001b38 <__gedf2>:
 8001b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b3a:	464e      	mov	r6, r9
 8001b3c:	4645      	mov	r5, r8
 8001b3e:	4657      	mov	r7, sl
 8001b40:	46de      	mov	lr, fp
 8001b42:	0004      	movs	r4, r0
 8001b44:	0018      	movs	r0, r3
 8001b46:	b5e0      	push	{r5, r6, r7, lr}
 8001b48:	0016      	movs	r6, r2
 8001b4a:	031b      	lsls	r3, r3, #12
 8001b4c:	0b1b      	lsrs	r3, r3, #12
 8001b4e:	4d32      	ldr	r5, [pc, #200]	; (8001c18 <__gedf2+0xe0>)
 8001b50:	030f      	lsls	r7, r1, #12
 8001b52:	004a      	lsls	r2, r1, #1
 8001b54:	4699      	mov	r9, r3
 8001b56:	0043      	lsls	r3, r0, #1
 8001b58:	46a4      	mov	ip, r4
 8001b5a:	46b0      	mov	r8, r6
 8001b5c:	0b3f      	lsrs	r7, r7, #12
 8001b5e:	0d52      	lsrs	r2, r2, #21
 8001b60:	0fc9      	lsrs	r1, r1, #31
 8001b62:	0d5b      	lsrs	r3, r3, #21
 8001b64:	0fc0      	lsrs	r0, r0, #31
 8001b66:	42aa      	cmp	r2, r5
 8001b68:	d029      	beq.n	8001bbe <__gedf2+0x86>
 8001b6a:	42ab      	cmp	r3, r5
 8001b6c:	d018      	beq.n	8001ba0 <__gedf2+0x68>
 8001b6e:	2a00      	cmp	r2, #0
 8001b70:	d12a      	bne.n	8001bc8 <__gedf2+0x90>
 8001b72:	433c      	orrs	r4, r7
 8001b74:	46a3      	mov	fp, r4
 8001b76:	4265      	negs	r5, r4
 8001b78:	4165      	adcs	r5, r4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <__gedf2+0x4c>
 8001b7e:	464c      	mov	r4, r9
 8001b80:	4326      	orrs	r6, r4
 8001b82:	d027      	beq.n	8001bd4 <__gedf2+0x9c>
 8001b84:	2d00      	cmp	r5, #0
 8001b86:	d115      	bne.n	8001bb4 <__gedf2+0x7c>
 8001b88:	4281      	cmp	r1, r0
 8001b8a:	d028      	beq.n	8001bde <__gedf2+0xa6>
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	3901      	subs	r1, #1
 8001b90:	4008      	ands	r0, r1
 8001b92:	3801      	subs	r0, #1
 8001b94:	bcf0      	pop	{r4, r5, r6, r7}
 8001b96:	46bb      	mov	fp, r7
 8001b98:	46b2      	mov	sl, r6
 8001b9a:	46a9      	mov	r9, r5
 8001b9c:	46a0      	mov	r8, r4
 8001b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba0:	464d      	mov	r5, r9
 8001ba2:	432e      	orrs	r6, r5
 8001ba4:	d12f      	bne.n	8001c06 <__gedf2+0xce>
 8001ba6:	2a00      	cmp	r2, #0
 8001ba8:	d1ee      	bne.n	8001b88 <__gedf2+0x50>
 8001baa:	433c      	orrs	r4, r7
 8001bac:	4265      	negs	r5, r4
 8001bae:	4165      	adcs	r5, r4
 8001bb0:	2d00      	cmp	r5, #0
 8001bb2:	d0e9      	beq.n	8001b88 <__gedf2+0x50>
 8001bb4:	2800      	cmp	r0, #0
 8001bb6:	d1ed      	bne.n	8001b94 <__gedf2+0x5c>
 8001bb8:	2001      	movs	r0, #1
 8001bba:	4240      	negs	r0, r0
 8001bbc:	e7ea      	b.n	8001b94 <__gedf2+0x5c>
 8001bbe:	003d      	movs	r5, r7
 8001bc0:	4325      	orrs	r5, r4
 8001bc2:	d120      	bne.n	8001c06 <__gedf2+0xce>
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d0eb      	beq.n	8001ba0 <__gedf2+0x68>
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1dd      	bne.n	8001b88 <__gedf2+0x50>
 8001bcc:	464c      	mov	r4, r9
 8001bce:	4326      	orrs	r6, r4
 8001bd0:	d1da      	bne.n	8001b88 <__gedf2+0x50>
 8001bd2:	e7db      	b.n	8001b8c <__gedf2+0x54>
 8001bd4:	465b      	mov	r3, fp
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0db      	beq.n	8001b94 <__gedf2+0x5c>
 8001bdc:	e7d6      	b.n	8001b8c <__gedf2+0x54>
 8001bde:	429a      	cmp	r2, r3
 8001be0:	dc0a      	bgt.n	8001bf8 <__gedf2+0xc0>
 8001be2:	dbe7      	blt.n	8001bb4 <__gedf2+0x7c>
 8001be4:	454f      	cmp	r7, r9
 8001be6:	d8d1      	bhi.n	8001b8c <__gedf2+0x54>
 8001be8:	d010      	beq.n	8001c0c <__gedf2+0xd4>
 8001bea:	2000      	movs	r0, #0
 8001bec:	454f      	cmp	r7, r9
 8001bee:	d2d1      	bcs.n	8001b94 <__gedf2+0x5c>
 8001bf0:	2900      	cmp	r1, #0
 8001bf2:	d0e1      	beq.n	8001bb8 <__gedf2+0x80>
 8001bf4:	0008      	movs	r0, r1
 8001bf6:	e7cd      	b.n	8001b94 <__gedf2+0x5c>
 8001bf8:	4243      	negs	r3, r0
 8001bfa:	4158      	adcs	r0, r3
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	4240      	negs	r0, r0
 8001c00:	4018      	ands	r0, r3
 8001c02:	3801      	subs	r0, #1
 8001c04:	e7c6      	b.n	8001b94 <__gedf2+0x5c>
 8001c06:	2002      	movs	r0, #2
 8001c08:	4240      	negs	r0, r0
 8001c0a:	e7c3      	b.n	8001b94 <__gedf2+0x5c>
 8001c0c:	45c4      	cmp	ip, r8
 8001c0e:	d8bd      	bhi.n	8001b8c <__gedf2+0x54>
 8001c10:	2000      	movs	r0, #0
 8001c12:	45c4      	cmp	ip, r8
 8001c14:	d2be      	bcs.n	8001b94 <__gedf2+0x5c>
 8001c16:	e7eb      	b.n	8001bf0 <__gedf2+0xb8>
 8001c18:	000007ff 	.word	0x000007ff

08001c1c <__ledf2>:
 8001c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1e:	464e      	mov	r6, r9
 8001c20:	4645      	mov	r5, r8
 8001c22:	4657      	mov	r7, sl
 8001c24:	46de      	mov	lr, fp
 8001c26:	0004      	movs	r4, r0
 8001c28:	0018      	movs	r0, r3
 8001c2a:	b5e0      	push	{r5, r6, r7, lr}
 8001c2c:	0016      	movs	r6, r2
 8001c2e:	031b      	lsls	r3, r3, #12
 8001c30:	0b1b      	lsrs	r3, r3, #12
 8001c32:	4d31      	ldr	r5, [pc, #196]	; (8001cf8 <__ledf2+0xdc>)
 8001c34:	030f      	lsls	r7, r1, #12
 8001c36:	004a      	lsls	r2, r1, #1
 8001c38:	4699      	mov	r9, r3
 8001c3a:	0043      	lsls	r3, r0, #1
 8001c3c:	46a4      	mov	ip, r4
 8001c3e:	46b0      	mov	r8, r6
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d52      	lsrs	r2, r2, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	0d5b      	lsrs	r3, r3, #21
 8001c48:	0fc0      	lsrs	r0, r0, #31
 8001c4a:	42aa      	cmp	r2, r5
 8001c4c:	d011      	beq.n	8001c72 <__ledf2+0x56>
 8001c4e:	42ab      	cmp	r3, r5
 8001c50:	d014      	beq.n	8001c7c <__ledf2+0x60>
 8001c52:	2a00      	cmp	r2, #0
 8001c54:	d12f      	bne.n	8001cb6 <__ledf2+0x9a>
 8001c56:	433c      	orrs	r4, r7
 8001c58:	46a3      	mov	fp, r4
 8001c5a:	4265      	negs	r5, r4
 8001c5c:	4165      	adcs	r5, r4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d114      	bne.n	8001c8c <__ledf2+0x70>
 8001c62:	464c      	mov	r4, r9
 8001c64:	4326      	orrs	r6, r4
 8001c66:	d111      	bne.n	8001c8c <__ledf2+0x70>
 8001c68:	465b      	mov	r3, fp
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d017      	beq.n	8001ca0 <__ledf2+0x84>
 8001c70:	e010      	b.n	8001c94 <__ledf2+0x78>
 8001c72:	003d      	movs	r5, r7
 8001c74:	4325      	orrs	r5, r4
 8001c76:	d112      	bne.n	8001c9e <__ledf2+0x82>
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d11c      	bne.n	8001cb6 <__ledf2+0x9a>
 8001c7c:	464d      	mov	r5, r9
 8001c7e:	432e      	orrs	r6, r5
 8001c80:	d10d      	bne.n	8001c9e <__ledf2+0x82>
 8001c82:	2a00      	cmp	r2, #0
 8001c84:	d104      	bne.n	8001c90 <__ledf2+0x74>
 8001c86:	433c      	orrs	r4, r7
 8001c88:	4265      	negs	r5, r4
 8001c8a:	4165      	adcs	r5, r4
 8001c8c:	2d00      	cmp	r5, #0
 8001c8e:	d10d      	bne.n	8001cac <__ledf2+0x90>
 8001c90:	4281      	cmp	r1, r0
 8001c92:	d016      	beq.n	8001cc2 <__ledf2+0xa6>
 8001c94:	2002      	movs	r0, #2
 8001c96:	3901      	subs	r1, #1
 8001c98:	4008      	ands	r0, r1
 8001c9a:	3801      	subs	r0, #1
 8001c9c:	e000      	b.n	8001ca0 <__ledf2+0x84>
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ca2:	46bb      	mov	fp, r7
 8001ca4:	46b2      	mov	sl, r6
 8001ca6:	46a9      	mov	r9, r5
 8001ca8:	46a0      	mov	r8, r4
 8001caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cac:	2800      	cmp	r0, #0
 8001cae:	d1f7      	bne.n	8001ca0 <__ledf2+0x84>
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	4240      	negs	r0, r0
 8001cb4:	e7f4      	b.n	8001ca0 <__ledf2+0x84>
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1ea      	bne.n	8001c90 <__ledf2+0x74>
 8001cba:	464c      	mov	r4, r9
 8001cbc:	4326      	orrs	r6, r4
 8001cbe:	d1e7      	bne.n	8001c90 <__ledf2+0x74>
 8001cc0:	e7e8      	b.n	8001c94 <__ledf2+0x78>
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dd06      	ble.n	8001cd4 <__ledf2+0xb8>
 8001cc6:	4243      	negs	r3, r0
 8001cc8:	4158      	adcs	r0, r3
 8001cca:	2302      	movs	r3, #2
 8001ccc:	4240      	negs	r0, r0
 8001cce:	4018      	ands	r0, r3
 8001cd0:	3801      	subs	r0, #1
 8001cd2:	e7e5      	b.n	8001ca0 <__ledf2+0x84>
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dbe9      	blt.n	8001cac <__ledf2+0x90>
 8001cd8:	454f      	cmp	r7, r9
 8001cda:	d8db      	bhi.n	8001c94 <__ledf2+0x78>
 8001cdc:	d006      	beq.n	8001cec <__ledf2+0xd0>
 8001cde:	2000      	movs	r0, #0
 8001ce0:	454f      	cmp	r7, r9
 8001ce2:	d2dd      	bcs.n	8001ca0 <__ledf2+0x84>
 8001ce4:	2900      	cmp	r1, #0
 8001ce6:	d0e3      	beq.n	8001cb0 <__ledf2+0x94>
 8001ce8:	0008      	movs	r0, r1
 8001cea:	e7d9      	b.n	8001ca0 <__ledf2+0x84>
 8001cec:	45c4      	cmp	ip, r8
 8001cee:	d8d1      	bhi.n	8001c94 <__ledf2+0x78>
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	45c4      	cmp	ip, r8
 8001cf4:	d2d4      	bcs.n	8001ca0 <__ledf2+0x84>
 8001cf6:	e7f5      	b.n	8001ce4 <__ledf2+0xc8>
 8001cf8:	000007ff 	.word	0x000007ff

08001cfc <__aeabi_dmul>:
 8001cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfe:	4657      	mov	r7, sl
 8001d00:	464e      	mov	r6, r9
 8001d02:	4645      	mov	r5, r8
 8001d04:	46de      	mov	lr, fp
 8001d06:	b5e0      	push	{r5, r6, r7, lr}
 8001d08:	4698      	mov	r8, r3
 8001d0a:	030c      	lsls	r4, r1, #12
 8001d0c:	004b      	lsls	r3, r1, #1
 8001d0e:	0006      	movs	r6, r0
 8001d10:	4692      	mov	sl, r2
 8001d12:	b087      	sub	sp, #28
 8001d14:	0b24      	lsrs	r4, r4, #12
 8001d16:	0d5b      	lsrs	r3, r3, #21
 8001d18:	0fcf      	lsrs	r7, r1, #31
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d06c      	beq.n	8001df8 <__aeabi_dmul+0xfc>
 8001d1e:	4add      	ldr	r2, [pc, #884]	; (8002094 <__aeabi_dmul+0x398>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d100      	bne.n	8001d26 <__aeabi_dmul+0x2a>
 8001d24:	e086      	b.n	8001e34 <__aeabi_dmul+0x138>
 8001d26:	0f42      	lsrs	r2, r0, #29
 8001d28:	00e4      	lsls	r4, r4, #3
 8001d2a:	4314      	orrs	r4, r2
 8001d2c:	2280      	movs	r2, #128	; 0x80
 8001d2e:	0412      	lsls	r2, r2, #16
 8001d30:	4314      	orrs	r4, r2
 8001d32:	4ad9      	ldr	r2, [pc, #868]	; (8002098 <__aeabi_dmul+0x39c>)
 8001d34:	00c5      	lsls	r5, r0, #3
 8001d36:	4694      	mov	ip, r2
 8001d38:	4463      	add	r3, ip
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	4699      	mov	r9, r3
 8001d40:	469b      	mov	fp, r3
 8001d42:	4643      	mov	r3, r8
 8001d44:	4642      	mov	r2, r8
 8001d46:	031e      	lsls	r6, r3, #12
 8001d48:	0fd2      	lsrs	r2, r2, #31
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4650      	mov	r0, sl
 8001d4e:	4690      	mov	r8, r2
 8001d50:	0b36      	lsrs	r6, r6, #12
 8001d52:	0d5b      	lsrs	r3, r3, #21
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dmul+0x5c>
 8001d56:	e078      	b.n	8001e4a <__aeabi_dmul+0x14e>
 8001d58:	4ace      	ldr	r2, [pc, #824]	; (8002094 <__aeabi_dmul+0x398>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d01d      	beq.n	8001d9a <__aeabi_dmul+0x9e>
 8001d5e:	49ce      	ldr	r1, [pc, #824]	; (8002098 <__aeabi_dmul+0x39c>)
 8001d60:	0f42      	lsrs	r2, r0, #29
 8001d62:	468c      	mov	ip, r1
 8001d64:	9900      	ldr	r1, [sp, #0]
 8001d66:	4463      	add	r3, ip
 8001d68:	00f6      	lsls	r6, r6, #3
 8001d6a:	468c      	mov	ip, r1
 8001d6c:	4316      	orrs	r6, r2
 8001d6e:	2280      	movs	r2, #128	; 0x80
 8001d70:	449c      	add	ip, r3
 8001d72:	0412      	lsls	r2, r2, #16
 8001d74:	4663      	mov	r3, ip
 8001d76:	4316      	orrs	r6, r2
 8001d78:	00c2      	lsls	r2, r0, #3
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	9900      	ldr	r1, [sp, #0]
 8001d80:	4643      	mov	r3, r8
 8001d82:	3101      	adds	r1, #1
 8001d84:	468c      	mov	ip, r1
 8001d86:	4649      	mov	r1, r9
 8001d88:	407b      	eors	r3, r7
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	290f      	cmp	r1, #15
 8001d8e:	d900      	bls.n	8001d92 <__aeabi_dmul+0x96>
 8001d90:	e07e      	b.n	8001e90 <__aeabi_dmul+0x194>
 8001d92:	4bc2      	ldr	r3, [pc, #776]	; (800209c <__aeabi_dmul+0x3a0>)
 8001d94:	0089      	lsls	r1, r1, #2
 8001d96:	5859      	ldr	r1, [r3, r1]
 8001d98:	468f      	mov	pc, r1
 8001d9a:	4652      	mov	r2, sl
 8001d9c:	9b00      	ldr	r3, [sp, #0]
 8001d9e:	4332      	orrs	r2, r6
 8001da0:	d000      	beq.n	8001da4 <__aeabi_dmul+0xa8>
 8001da2:	e156      	b.n	8002052 <__aeabi_dmul+0x356>
 8001da4:	49bb      	ldr	r1, [pc, #748]	; (8002094 <__aeabi_dmul+0x398>)
 8001da6:	2600      	movs	r6, #0
 8001da8:	468c      	mov	ip, r1
 8001daa:	4463      	add	r3, ip
 8001dac:	4649      	mov	r1, r9
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	2302      	movs	r3, #2
 8001db2:	4319      	orrs	r1, r3
 8001db4:	4689      	mov	r9, r1
 8001db6:	2002      	movs	r0, #2
 8001db8:	e7e1      	b.n	8001d7e <__aeabi_dmul+0x82>
 8001dba:	4643      	mov	r3, r8
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	0034      	movs	r4, r6
 8001dc0:	0015      	movs	r5, r2
 8001dc2:	4683      	mov	fp, r0
 8001dc4:	465b      	mov	r3, fp
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d05e      	beq.n	8001e88 <__aeabi_dmul+0x18c>
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dmul+0xd4>
 8001dce:	e1f3      	b.n	80021b8 <__aeabi_dmul+0x4bc>
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d000      	beq.n	8001dd6 <__aeabi_dmul+0xda>
 8001dd4:	e118      	b.n	8002008 <__aeabi_dmul+0x30c>
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2400      	movs	r4, #0
 8001dda:	2500      	movs	r5, #0
 8001ddc:	9b01      	ldr	r3, [sp, #4]
 8001dde:	0512      	lsls	r2, r2, #20
 8001de0:	4322      	orrs	r2, r4
 8001de2:	07db      	lsls	r3, r3, #31
 8001de4:	431a      	orrs	r2, r3
 8001de6:	0028      	movs	r0, r5
 8001de8:	0011      	movs	r1, r2
 8001dea:	b007      	add	sp, #28
 8001dec:	bcf0      	pop	{r4, r5, r6, r7}
 8001dee:	46bb      	mov	fp, r7
 8001df0:	46b2      	mov	sl, r6
 8001df2:	46a9      	mov	r9, r5
 8001df4:	46a0      	mov	r8, r4
 8001df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df8:	0025      	movs	r5, r4
 8001dfa:	4305      	orrs	r5, r0
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dmul+0x104>
 8001dfe:	e141      	b.n	8002084 <__aeabi_dmul+0x388>
 8001e00:	2c00      	cmp	r4, #0
 8001e02:	d100      	bne.n	8001e06 <__aeabi_dmul+0x10a>
 8001e04:	e1ad      	b.n	8002162 <__aeabi_dmul+0x466>
 8001e06:	0020      	movs	r0, r4
 8001e08:	f000 fe68 	bl	8002adc <__clzsi2>
 8001e0c:	0001      	movs	r1, r0
 8001e0e:	0002      	movs	r2, r0
 8001e10:	390b      	subs	r1, #11
 8001e12:	231d      	movs	r3, #29
 8001e14:	0010      	movs	r0, r2
 8001e16:	1a5b      	subs	r3, r3, r1
 8001e18:	0031      	movs	r1, r6
 8001e1a:	0035      	movs	r5, r6
 8001e1c:	3808      	subs	r0, #8
 8001e1e:	4084      	lsls	r4, r0
 8001e20:	40d9      	lsrs	r1, r3
 8001e22:	4085      	lsls	r5, r0
 8001e24:	430c      	orrs	r4, r1
 8001e26:	489e      	ldr	r0, [pc, #632]	; (80020a0 <__aeabi_dmul+0x3a4>)
 8001e28:	1a83      	subs	r3, r0, r2
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	4699      	mov	r9, r3
 8001e30:	469b      	mov	fp, r3
 8001e32:	e786      	b.n	8001d42 <__aeabi_dmul+0x46>
 8001e34:	0005      	movs	r5, r0
 8001e36:	4325      	orrs	r5, r4
 8001e38:	d000      	beq.n	8001e3c <__aeabi_dmul+0x140>
 8001e3a:	e11c      	b.n	8002076 <__aeabi_dmul+0x37a>
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	2302      	movs	r3, #2
 8001e42:	2400      	movs	r4, #0
 8001e44:	4691      	mov	r9, r2
 8001e46:	469b      	mov	fp, r3
 8001e48:	e77b      	b.n	8001d42 <__aeabi_dmul+0x46>
 8001e4a:	4652      	mov	r2, sl
 8001e4c:	4332      	orrs	r2, r6
 8001e4e:	d100      	bne.n	8001e52 <__aeabi_dmul+0x156>
 8001e50:	e10a      	b.n	8002068 <__aeabi_dmul+0x36c>
 8001e52:	2e00      	cmp	r6, #0
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dmul+0x15c>
 8001e56:	e176      	b.n	8002146 <__aeabi_dmul+0x44a>
 8001e58:	0030      	movs	r0, r6
 8001e5a:	f000 fe3f 	bl	8002adc <__clzsi2>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	3a0b      	subs	r2, #11
 8001e62:	231d      	movs	r3, #29
 8001e64:	0001      	movs	r1, r0
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	4652      	mov	r2, sl
 8001e6a:	3908      	subs	r1, #8
 8001e6c:	40da      	lsrs	r2, r3
 8001e6e:	408e      	lsls	r6, r1
 8001e70:	4316      	orrs	r6, r2
 8001e72:	4652      	mov	r2, sl
 8001e74:	408a      	lsls	r2, r1
 8001e76:	9b00      	ldr	r3, [sp, #0]
 8001e78:	4989      	ldr	r1, [pc, #548]	; (80020a0 <__aeabi_dmul+0x3a4>)
 8001e7a:	1a18      	subs	r0, r3, r0
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	468c      	mov	ip, r1
 8001e80:	4463      	add	r3, ip
 8001e82:	2000      	movs	r0, #0
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	e77a      	b.n	8001d7e <__aeabi_dmul+0x82>
 8001e88:	2400      	movs	r4, #0
 8001e8a:	2500      	movs	r5, #0
 8001e8c:	4a81      	ldr	r2, [pc, #516]	; (8002094 <__aeabi_dmul+0x398>)
 8001e8e:	e7a5      	b.n	8001ddc <__aeabi_dmul+0xe0>
 8001e90:	0c2f      	lsrs	r7, r5, #16
 8001e92:	042d      	lsls	r5, r5, #16
 8001e94:	0c2d      	lsrs	r5, r5, #16
 8001e96:	002b      	movs	r3, r5
 8001e98:	0c11      	lsrs	r1, r2, #16
 8001e9a:	0412      	lsls	r2, r2, #16
 8001e9c:	0c12      	lsrs	r2, r2, #16
 8001e9e:	4353      	muls	r3, r2
 8001ea0:	4698      	mov	r8, r3
 8001ea2:	0013      	movs	r3, r2
 8001ea4:	0028      	movs	r0, r5
 8001ea6:	437b      	muls	r3, r7
 8001ea8:	4699      	mov	r9, r3
 8001eaa:	4348      	muls	r0, r1
 8001eac:	4448      	add	r0, r9
 8001eae:	4683      	mov	fp, r0
 8001eb0:	4640      	mov	r0, r8
 8001eb2:	000b      	movs	r3, r1
 8001eb4:	0c00      	lsrs	r0, r0, #16
 8001eb6:	4682      	mov	sl, r0
 8001eb8:	4658      	mov	r0, fp
 8001eba:	437b      	muls	r3, r7
 8001ebc:	4450      	add	r0, sl
 8001ebe:	9302      	str	r3, [sp, #8]
 8001ec0:	4581      	cmp	r9, r0
 8001ec2:	d906      	bls.n	8001ed2 <__aeabi_dmul+0x1d6>
 8001ec4:	469a      	mov	sl, r3
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	025b      	lsls	r3, r3, #9
 8001eca:	4699      	mov	r9, r3
 8001ecc:	44ca      	add	sl, r9
 8001ece:	4653      	mov	r3, sl
 8001ed0:	9302      	str	r3, [sp, #8]
 8001ed2:	0c03      	lsrs	r3, r0, #16
 8001ed4:	469b      	mov	fp, r3
 8001ed6:	4643      	mov	r3, r8
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	0400      	lsls	r0, r0, #16
 8001edc:	0c1b      	lsrs	r3, r3, #16
 8001ede:	4698      	mov	r8, r3
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	4443      	add	r3, r8
 8001ee4:	9304      	str	r3, [sp, #16]
 8001ee6:	0c33      	lsrs	r3, r6, #16
 8001ee8:	4699      	mov	r9, r3
 8001eea:	002b      	movs	r3, r5
 8001eec:	0436      	lsls	r6, r6, #16
 8001eee:	0c36      	lsrs	r6, r6, #16
 8001ef0:	4373      	muls	r3, r6
 8001ef2:	4698      	mov	r8, r3
 8001ef4:	0033      	movs	r3, r6
 8001ef6:	437b      	muls	r3, r7
 8001ef8:	469a      	mov	sl, r3
 8001efa:	464b      	mov	r3, r9
 8001efc:	435d      	muls	r5, r3
 8001efe:	435f      	muls	r7, r3
 8001f00:	4643      	mov	r3, r8
 8001f02:	4455      	add	r5, sl
 8001f04:	0c18      	lsrs	r0, r3, #16
 8001f06:	1940      	adds	r0, r0, r5
 8001f08:	4582      	cmp	sl, r0
 8001f0a:	d903      	bls.n	8001f14 <__aeabi_dmul+0x218>
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	025b      	lsls	r3, r3, #9
 8001f10:	469a      	mov	sl, r3
 8001f12:	4457      	add	r7, sl
 8001f14:	0c05      	lsrs	r5, r0, #16
 8001f16:	19eb      	adds	r3, r5, r7
 8001f18:	9305      	str	r3, [sp, #20]
 8001f1a:	4643      	mov	r3, r8
 8001f1c:	041d      	lsls	r5, r3, #16
 8001f1e:	0c2d      	lsrs	r5, r5, #16
 8001f20:	0400      	lsls	r0, r0, #16
 8001f22:	1940      	adds	r0, r0, r5
 8001f24:	0c25      	lsrs	r5, r4, #16
 8001f26:	0424      	lsls	r4, r4, #16
 8001f28:	0c24      	lsrs	r4, r4, #16
 8001f2a:	0027      	movs	r7, r4
 8001f2c:	4357      	muls	r7, r2
 8001f2e:	436a      	muls	r2, r5
 8001f30:	4690      	mov	r8, r2
 8001f32:	002a      	movs	r2, r5
 8001f34:	0c3b      	lsrs	r3, r7, #16
 8001f36:	469a      	mov	sl, r3
 8001f38:	434a      	muls	r2, r1
 8001f3a:	4361      	muls	r1, r4
 8001f3c:	4441      	add	r1, r8
 8001f3e:	4451      	add	r1, sl
 8001f40:	4483      	add	fp, r0
 8001f42:	4588      	cmp	r8, r1
 8001f44:	d903      	bls.n	8001f4e <__aeabi_dmul+0x252>
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	025b      	lsls	r3, r3, #9
 8001f4a:	4698      	mov	r8, r3
 8001f4c:	4442      	add	r2, r8
 8001f4e:	043f      	lsls	r7, r7, #16
 8001f50:	0c0b      	lsrs	r3, r1, #16
 8001f52:	0c3f      	lsrs	r7, r7, #16
 8001f54:	0409      	lsls	r1, r1, #16
 8001f56:	19c9      	adds	r1, r1, r7
 8001f58:	0027      	movs	r7, r4
 8001f5a:	4698      	mov	r8, r3
 8001f5c:	464b      	mov	r3, r9
 8001f5e:	4377      	muls	r7, r6
 8001f60:	435c      	muls	r4, r3
 8001f62:	436e      	muls	r6, r5
 8001f64:	435d      	muls	r5, r3
 8001f66:	0c3b      	lsrs	r3, r7, #16
 8001f68:	4699      	mov	r9, r3
 8001f6a:	19a4      	adds	r4, r4, r6
 8001f6c:	444c      	add	r4, r9
 8001f6e:	4442      	add	r2, r8
 8001f70:	9503      	str	r5, [sp, #12]
 8001f72:	42a6      	cmp	r6, r4
 8001f74:	d904      	bls.n	8001f80 <__aeabi_dmul+0x284>
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	025b      	lsls	r3, r3, #9
 8001f7a:	4698      	mov	r8, r3
 8001f7c:	4445      	add	r5, r8
 8001f7e:	9503      	str	r5, [sp, #12]
 8001f80:	9b02      	ldr	r3, [sp, #8]
 8001f82:	043f      	lsls	r7, r7, #16
 8001f84:	445b      	add	r3, fp
 8001f86:	001e      	movs	r6, r3
 8001f88:	4283      	cmp	r3, r0
 8001f8a:	4180      	sbcs	r0, r0
 8001f8c:	0423      	lsls	r3, r4, #16
 8001f8e:	4698      	mov	r8, r3
 8001f90:	9b05      	ldr	r3, [sp, #20]
 8001f92:	0c3f      	lsrs	r7, r7, #16
 8001f94:	4447      	add	r7, r8
 8001f96:	4698      	mov	r8, r3
 8001f98:	1876      	adds	r6, r6, r1
 8001f9a:	428e      	cmp	r6, r1
 8001f9c:	4189      	sbcs	r1, r1
 8001f9e:	4447      	add	r7, r8
 8001fa0:	4240      	negs	r0, r0
 8001fa2:	183d      	adds	r5, r7, r0
 8001fa4:	46a8      	mov	r8, r5
 8001fa6:	4693      	mov	fp, r2
 8001fa8:	4249      	negs	r1, r1
 8001faa:	468a      	mov	sl, r1
 8001fac:	44c3      	add	fp, r8
 8001fae:	429f      	cmp	r7, r3
 8001fb0:	41bf      	sbcs	r7, r7
 8001fb2:	4580      	cmp	r8, r0
 8001fb4:	4180      	sbcs	r0, r0
 8001fb6:	9b03      	ldr	r3, [sp, #12]
 8001fb8:	44da      	add	sl, fp
 8001fba:	4698      	mov	r8, r3
 8001fbc:	4653      	mov	r3, sl
 8001fbe:	4240      	negs	r0, r0
 8001fc0:	427f      	negs	r7, r7
 8001fc2:	4307      	orrs	r7, r0
 8001fc4:	0c24      	lsrs	r4, r4, #16
 8001fc6:	4593      	cmp	fp, r2
 8001fc8:	4192      	sbcs	r2, r2
 8001fca:	458a      	cmp	sl, r1
 8001fcc:	4189      	sbcs	r1, r1
 8001fce:	193f      	adds	r7, r7, r4
 8001fd0:	0ddc      	lsrs	r4, r3, #23
 8001fd2:	9b04      	ldr	r3, [sp, #16]
 8001fd4:	0275      	lsls	r5, r6, #9
 8001fd6:	431d      	orrs	r5, r3
 8001fd8:	1e68      	subs	r0, r5, #1
 8001fda:	4185      	sbcs	r5, r0
 8001fdc:	4653      	mov	r3, sl
 8001fde:	4252      	negs	r2, r2
 8001fe0:	4249      	negs	r1, r1
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	18bf      	adds	r7, r7, r2
 8001fe6:	4447      	add	r7, r8
 8001fe8:	0df6      	lsrs	r6, r6, #23
 8001fea:	027f      	lsls	r7, r7, #9
 8001fec:	4335      	orrs	r5, r6
 8001fee:	025a      	lsls	r2, r3, #9
 8001ff0:	433c      	orrs	r4, r7
 8001ff2:	4315      	orrs	r5, r2
 8001ff4:	01fb      	lsls	r3, r7, #7
 8001ff6:	d400      	bmi.n	8001ffa <__aeabi_dmul+0x2fe>
 8001ff8:	e0c1      	b.n	800217e <__aeabi_dmul+0x482>
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	086a      	lsrs	r2, r5, #1
 8001ffe:	400d      	ands	r5, r1
 8002000:	4315      	orrs	r5, r2
 8002002:	07e2      	lsls	r2, r4, #31
 8002004:	4315      	orrs	r5, r2
 8002006:	0864      	lsrs	r4, r4, #1
 8002008:	4926      	ldr	r1, [pc, #152]	; (80020a4 <__aeabi_dmul+0x3a8>)
 800200a:	4461      	add	r1, ip
 800200c:	2900      	cmp	r1, #0
 800200e:	dd56      	ble.n	80020be <__aeabi_dmul+0x3c2>
 8002010:	076b      	lsls	r3, r5, #29
 8002012:	d009      	beq.n	8002028 <__aeabi_dmul+0x32c>
 8002014:	220f      	movs	r2, #15
 8002016:	402a      	ands	r2, r5
 8002018:	2a04      	cmp	r2, #4
 800201a:	d005      	beq.n	8002028 <__aeabi_dmul+0x32c>
 800201c:	1d2a      	adds	r2, r5, #4
 800201e:	42aa      	cmp	r2, r5
 8002020:	41ad      	sbcs	r5, r5
 8002022:	426d      	negs	r5, r5
 8002024:	1964      	adds	r4, r4, r5
 8002026:	0015      	movs	r5, r2
 8002028:	01e3      	lsls	r3, r4, #7
 800202a:	d504      	bpl.n	8002036 <__aeabi_dmul+0x33a>
 800202c:	2180      	movs	r1, #128	; 0x80
 800202e:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <__aeabi_dmul+0x3ac>)
 8002030:	00c9      	lsls	r1, r1, #3
 8002032:	4014      	ands	r4, r2
 8002034:	4461      	add	r1, ip
 8002036:	4a1d      	ldr	r2, [pc, #116]	; (80020ac <__aeabi_dmul+0x3b0>)
 8002038:	4291      	cmp	r1, r2
 800203a:	dd00      	ble.n	800203e <__aeabi_dmul+0x342>
 800203c:	e724      	b.n	8001e88 <__aeabi_dmul+0x18c>
 800203e:	0762      	lsls	r2, r4, #29
 8002040:	08ed      	lsrs	r5, r5, #3
 8002042:	0264      	lsls	r4, r4, #9
 8002044:	0549      	lsls	r1, r1, #21
 8002046:	4315      	orrs	r5, r2
 8002048:	0b24      	lsrs	r4, r4, #12
 800204a:	0d4a      	lsrs	r2, r1, #21
 800204c:	e6c6      	b.n	8001ddc <__aeabi_dmul+0xe0>
 800204e:	9701      	str	r7, [sp, #4]
 8002050:	e6b8      	b.n	8001dc4 <__aeabi_dmul+0xc8>
 8002052:	4a10      	ldr	r2, [pc, #64]	; (8002094 <__aeabi_dmul+0x398>)
 8002054:	2003      	movs	r0, #3
 8002056:	4694      	mov	ip, r2
 8002058:	4463      	add	r3, ip
 800205a:	464a      	mov	r2, r9
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2303      	movs	r3, #3
 8002060:	431a      	orrs	r2, r3
 8002062:	4691      	mov	r9, r2
 8002064:	4652      	mov	r2, sl
 8002066:	e68a      	b.n	8001d7e <__aeabi_dmul+0x82>
 8002068:	4649      	mov	r1, r9
 800206a:	2301      	movs	r3, #1
 800206c:	4319      	orrs	r1, r3
 800206e:	4689      	mov	r9, r1
 8002070:	2600      	movs	r6, #0
 8002072:	2001      	movs	r0, #1
 8002074:	e683      	b.n	8001d7e <__aeabi_dmul+0x82>
 8002076:	220c      	movs	r2, #12
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2303      	movs	r3, #3
 800207c:	0005      	movs	r5, r0
 800207e:	4691      	mov	r9, r2
 8002080:	469b      	mov	fp, r3
 8002082:	e65e      	b.n	8001d42 <__aeabi_dmul+0x46>
 8002084:	2304      	movs	r3, #4
 8002086:	4699      	mov	r9, r3
 8002088:	2300      	movs	r3, #0
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	3301      	adds	r3, #1
 800208e:	2400      	movs	r4, #0
 8002090:	469b      	mov	fp, r3
 8002092:	e656      	b.n	8001d42 <__aeabi_dmul+0x46>
 8002094:	000007ff 	.word	0x000007ff
 8002098:	fffffc01 	.word	0xfffffc01
 800209c:	0800af18 	.word	0x0800af18
 80020a0:	fffffc0d 	.word	0xfffffc0d
 80020a4:	000003ff 	.word	0x000003ff
 80020a8:	feffffff 	.word	0xfeffffff
 80020ac:	000007fe 	.word	0x000007fe
 80020b0:	2300      	movs	r3, #0
 80020b2:	2480      	movs	r4, #128	; 0x80
 80020b4:	2500      	movs	r5, #0
 80020b6:	4a44      	ldr	r2, [pc, #272]	; (80021c8 <__aeabi_dmul+0x4cc>)
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	0324      	lsls	r4, r4, #12
 80020bc:	e68e      	b.n	8001ddc <__aeabi_dmul+0xe0>
 80020be:	2001      	movs	r0, #1
 80020c0:	1a40      	subs	r0, r0, r1
 80020c2:	2838      	cmp	r0, #56	; 0x38
 80020c4:	dd00      	ble.n	80020c8 <__aeabi_dmul+0x3cc>
 80020c6:	e686      	b.n	8001dd6 <__aeabi_dmul+0xda>
 80020c8:	281f      	cmp	r0, #31
 80020ca:	dd5b      	ble.n	8002184 <__aeabi_dmul+0x488>
 80020cc:	221f      	movs	r2, #31
 80020ce:	0023      	movs	r3, r4
 80020d0:	4252      	negs	r2, r2
 80020d2:	1a51      	subs	r1, r2, r1
 80020d4:	40cb      	lsrs	r3, r1
 80020d6:	0019      	movs	r1, r3
 80020d8:	2820      	cmp	r0, #32
 80020da:	d003      	beq.n	80020e4 <__aeabi_dmul+0x3e8>
 80020dc:	4a3b      	ldr	r2, [pc, #236]	; (80021cc <__aeabi_dmul+0x4d0>)
 80020de:	4462      	add	r2, ip
 80020e0:	4094      	lsls	r4, r2
 80020e2:	4325      	orrs	r5, r4
 80020e4:	1e6a      	subs	r2, r5, #1
 80020e6:	4195      	sbcs	r5, r2
 80020e8:	002a      	movs	r2, r5
 80020ea:	430a      	orrs	r2, r1
 80020ec:	2107      	movs	r1, #7
 80020ee:	000d      	movs	r5, r1
 80020f0:	2400      	movs	r4, #0
 80020f2:	4015      	ands	r5, r2
 80020f4:	4211      	tst	r1, r2
 80020f6:	d05b      	beq.n	80021b0 <__aeabi_dmul+0x4b4>
 80020f8:	210f      	movs	r1, #15
 80020fa:	2400      	movs	r4, #0
 80020fc:	4011      	ands	r1, r2
 80020fe:	2904      	cmp	r1, #4
 8002100:	d053      	beq.n	80021aa <__aeabi_dmul+0x4ae>
 8002102:	1d11      	adds	r1, r2, #4
 8002104:	4291      	cmp	r1, r2
 8002106:	4192      	sbcs	r2, r2
 8002108:	4252      	negs	r2, r2
 800210a:	18a4      	adds	r4, r4, r2
 800210c:	000a      	movs	r2, r1
 800210e:	0223      	lsls	r3, r4, #8
 8002110:	d54b      	bpl.n	80021aa <__aeabi_dmul+0x4ae>
 8002112:	2201      	movs	r2, #1
 8002114:	2400      	movs	r4, #0
 8002116:	2500      	movs	r5, #0
 8002118:	e660      	b.n	8001ddc <__aeabi_dmul+0xe0>
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	031b      	lsls	r3, r3, #12
 800211e:	421c      	tst	r4, r3
 8002120:	d009      	beq.n	8002136 <__aeabi_dmul+0x43a>
 8002122:	421e      	tst	r6, r3
 8002124:	d107      	bne.n	8002136 <__aeabi_dmul+0x43a>
 8002126:	4333      	orrs	r3, r6
 8002128:	031c      	lsls	r4, r3, #12
 800212a:	4643      	mov	r3, r8
 800212c:	0015      	movs	r5, r2
 800212e:	0b24      	lsrs	r4, r4, #12
 8002130:	4a25      	ldr	r2, [pc, #148]	; (80021c8 <__aeabi_dmul+0x4cc>)
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	e652      	b.n	8001ddc <__aeabi_dmul+0xe0>
 8002136:	2280      	movs	r2, #128	; 0x80
 8002138:	0312      	lsls	r2, r2, #12
 800213a:	4314      	orrs	r4, r2
 800213c:	0324      	lsls	r4, r4, #12
 800213e:	4a22      	ldr	r2, [pc, #136]	; (80021c8 <__aeabi_dmul+0x4cc>)
 8002140:	0b24      	lsrs	r4, r4, #12
 8002142:	9701      	str	r7, [sp, #4]
 8002144:	e64a      	b.n	8001ddc <__aeabi_dmul+0xe0>
 8002146:	f000 fcc9 	bl	8002adc <__clzsi2>
 800214a:	0003      	movs	r3, r0
 800214c:	001a      	movs	r2, r3
 800214e:	3215      	adds	r2, #21
 8002150:	3020      	adds	r0, #32
 8002152:	2a1c      	cmp	r2, #28
 8002154:	dc00      	bgt.n	8002158 <__aeabi_dmul+0x45c>
 8002156:	e684      	b.n	8001e62 <__aeabi_dmul+0x166>
 8002158:	4656      	mov	r6, sl
 800215a:	3b08      	subs	r3, #8
 800215c:	2200      	movs	r2, #0
 800215e:	409e      	lsls	r6, r3
 8002160:	e689      	b.n	8001e76 <__aeabi_dmul+0x17a>
 8002162:	f000 fcbb 	bl	8002adc <__clzsi2>
 8002166:	0001      	movs	r1, r0
 8002168:	0002      	movs	r2, r0
 800216a:	3115      	adds	r1, #21
 800216c:	3220      	adds	r2, #32
 800216e:	291c      	cmp	r1, #28
 8002170:	dc00      	bgt.n	8002174 <__aeabi_dmul+0x478>
 8002172:	e64e      	b.n	8001e12 <__aeabi_dmul+0x116>
 8002174:	0034      	movs	r4, r6
 8002176:	3808      	subs	r0, #8
 8002178:	2500      	movs	r5, #0
 800217a:	4084      	lsls	r4, r0
 800217c:	e653      	b.n	8001e26 <__aeabi_dmul+0x12a>
 800217e:	9b00      	ldr	r3, [sp, #0]
 8002180:	469c      	mov	ip, r3
 8002182:	e741      	b.n	8002008 <__aeabi_dmul+0x30c>
 8002184:	4912      	ldr	r1, [pc, #72]	; (80021d0 <__aeabi_dmul+0x4d4>)
 8002186:	0022      	movs	r2, r4
 8002188:	4461      	add	r1, ip
 800218a:	002e      	movs	r6, r5
 800218c:	408d      	lsls	r5, r1
 800218e:	408a      	lsls	r2, r1
 8002190:	40c6      	lsrs	r6, r0
 8002192:	1e69      	subs	r1, r5, #1
 8002194:	418d      	sbcs	r5, r1
 8002196:	4332      	orrs	r2, r6
 8002198:	432a      	orrs	r2, r5
 800219a:	40c4      	lsrs	r4, r0
 800219c:	0753      	lsls	r3, r2, #29
 800219e:	d0b6      	beq.n	800210e <__aeabi_dmul+0x412>
 80021a0:	210f      	movs	r1, #15
 80021a2:	4011      	ands	r1, r2
 80021a4:	2904      	cmp	r1, #4
 80021a6:	d1ac      	bne.n	8002102 <__aeabi_dmul+0x406>
 80021a8:	e7b1      	b.n	800210e <__aeabi_dmul+0x412>
 80021aa:	0765      	lsls	r5, r4, #29
 80021ac:	0264      	lsls	r4, r4, #9
 80021ae:	0b24      	lsrs	r4, r4, #12
 80021b0:	08d2      	lsrs	r2, r2, #3
 80021b2:	4315      	orrs	r5, r2
 80021b4:	2200      	movs	r2, #0
 80021b6:	e611      	b.n	8001ddc <__aeabi_dmul+0xe0>
 80021b8:	2280      	movs	r2, #128	; 0x80
 80021ba:	0312      	lsls	r2, r2, #12
 80021bc:	4314      	orrs	r4, r2
 80021be:	0324      	lsls	r4, r4, #12
 80021c0:	4a01      	ldr	r2, [pc, #4]	; (80021c8 <__aeabi_dmul+0x4cc>)
 80021c2:	0b24      	lsrs	r4, r4, #12
 80021c4:	e60a      	b.n	8001ddc <__aeabi_dmul+0xe0>
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	000007ff 	.word	0x000007ff
 80021cc:	0000043e 	.word	0x0000043e
 80021d0:	0000041e 	.word	0x0000041e

080021d4 <__aeabi_dsub>:
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	4657      	mov	r7, sl
 80021d8:	464e      	mov	r6, r9
 80021da:	4645      	mov	r5, r8
 80021dc:	46de      	mov	lr, fp
 80021de:	0004      	movs	r4, r0
 80021e0:	b5e0      	push	{r5, r6, r7, lr}
 80021e2:	001f      	movs	r7, r3
 80021e4:	0010      	movs	r0, r2
 80021e6:	030b      	lsls	r3, r1, #12
 80021e8:	0f62      	lsrs	r2, r4, #29
 80021ea:	004e      	lsls	r6, r1, #1
 80021ec:	0fcd      	lsrs	r5, r1, #31
 80021ee:	0a5b      	lsrs	r3, r3, #9
 80021f0:	0339      	lsls	r1, r7, #12
 80021f2:	4313      	orrs	r3, r2
 80021f4:	0a49      	lsrs	r1, r1, #9
 80021f6:	00e2      	lsls	r2, r4, #3
 80021f8:	0f44      	lsrs	r4, r0, #29
 80021fa:	4321      	orrs	r1, r4
 80021fc:	4cc2      	ldr	r4, [pc, #776]	; (8002508 <__aeabi_dsub+0x334>)
 80021fe:	4691      	mov	r9, r2
 8002200:	4692      	mov	sl, r2
 8002202:	00c0      	lsls	r0, r0, #3
 8002204:	007a      	lsls	r2, r7, #1
 8002206:	4680      	mov	r8, r0
 8002208:	0d76      	lsrs	r6, r6, #21
 800220a:	0d52      	lsrs	r2, r2, #21
 800220c:	0fff      	lsrs	r7, r7, #31
 800220e:	42a2      	cmp	r2, r4
 8002210:	d100      	bne.n	8002214 <__aeabi_dsub+0x40>
 8002212:	e0b4      	b.n	800237e <__aeabi_dsub+0x1aa>
 8002214:	2401      	movs	r4, #1
 8002216:	4067      	eors	r7, r4
 8002218:	46bb      	mov	fp, r7
 800221a:	42bd      	cmp	r5, r7
 800221c:	d100      	bne.n	8002220 <__aeabi_dsub+0x4c>
 800221e:	e088      	b.n	8002332 <__aeabi_dsub+0x15e>
 8002220:	1ab4      	subs	r4, r6, r2
 8002222:	46a4      	mov	ip, r4
 8002224:	2c00      	cmp	r4, #0
 8002226:	dc00      	bgt.n	800222a <__aeabi_dsub+0x56>
 8002228:	e0b2      	b.n	8002390 <__aeabi_dsub+0x1bc>
 800222a:	2a00      	cmp	r2, #0
 800222c:	d100      	bne.n	8002230 <__aeabi_dsub+0x5c>
 800222e:	e0c5      	b.n	80023bc <__aeabi_dsub+0x1e8>
 8002230:	4ab5      	ldr	r2, [pc, #724]	; (8002508 <__aeabi_dsub+0x334>)
 8002232:	4296      	cmp	r6, r2
 8002234:	d100      	bne.n	8002238 <__aeabi_dsub+0x64>
 8002236:	e28b      	b.n	8002750 <__aeabi_dsub+0x57c>
 8002238:	2280      	movs	r2, #128	; 0x80
 800223a:	0412      	lsls	r2, r2, #16
 800223c:	4311      	orrs	r1, r2
 800223e:	4662      	mov	r2, ip
 8002240:	2a38      	cmp	r2, #56	; 0x38
 8002242:	dd00      	ble.n	8002246 <__aeabi_dsub+0x72>
 8002244:	e1a1      	b.n	800258a <__aeabi_dsub+0x3b6>
 8002246:	2a1f      	cmp	r2, #31
 8002248:	dd00      	ble.n	800224c <__aeabi_dsub+0x78>
 800224a:	e216      	b.n	800267a <__aeabi_dsub+0x4a6>
 800224c:	2720      	movs	r7, #32
 800224e:	000c      	movs	r4, r1
 8002250:	1abf      	subs	r7, r7, r2
 8002252:	40bc      	lsls	r4, r7
 8002254:	0002      	movs	r2, r0
 8002256:	46a0      	mov	r8, r4
 8002258:	4664      	mov	r4, ip
 800225a:	40b8      	lsls	r0, r7
 800225c:	40e2      	lsrs	r2, r4
 800225e:	4644      	mov	r4, r8
 8002260:	4314      	orrs	r4, r2
 8002262:	0002      	movs	r2, r0
 8002264:	1e50      	subs	r0, r2, #1
 8002266:	4182      	sbcs	r2, r0
 8002268:	4660      	mov	r0, ip
 800226a:	40c1      	lsrs	r1, r0
 800226c:	4322      	orrs	r2, r4
 800226e:	1a5b      	subs	r3, r3, r1
 8002270:	4649      	mov	r1, r9
 8002272:	1a8c      	subs	r4, r1, r2
 8002274:	45a1      	cmp	r9, r4
 8002276:	4192      	sbcs	r2, r2
 8002278:	4252      	negs	r2, r2
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	4698      	mov	r8, r3
 800227e:	4643      	mov	r3, r8
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	d400      	bmi.n	8002286 <__aeabi_dsub+0xb2>
 8002284:	e117      	b.n	80024b6 <__aeabi_dsub+0x2e2>
 8002286:	4643      	mov	r3, r8
 8002288:	025b      	lsls	r3, r3, #9
 800228a:	0a5b      	lsrs	r3, r3, #9
 800228c:	4698      	mov	r8, r3
 800228e:	4643      	mov	r3, r8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d100      	bne.n	8002296 <__aeabi_dsub+0xc2>
 8002294:	e16c      	b.n	8002570 <__aeabi_dsub+0x39c>
 8002296:	4640      	mov	r0, r8
 8002298:	f000 fc20 	bl	8002adc <__clzsi2>
 800229c:	0002      	movs	r2, r0
 800229e:	3a08      	subs	r2, #8
 80022a0:	2120      	movs	r1, #32
 80022a2:	0020      	movs	r0, r4
 80022a4:	4643      	mov	r3, r8
 80022a6:	1a89      	subs	r1, r1, r2
 80022a8:	4093      	lsls	r3, r2
 80022aa:	40c8      	lsrs	r0, r1
 80022ac:	4094      	lsls	r4, r2
 80022ae:	4303      	orrs	r3, r0
 80022b0:	4296      	cmp	r6, r2
 80022b2:	dd00      	ble.n	80022b6 <__aeabi_dsub+0xe2>
 80022b4:	e157      	b.n	8002566 <__aeabi_dsub+0x392>
 80022b6:	1b96      	subs	r6, r2, r6
 80022b8:	1c71      	adds	r1, r6, #1
 80022ba:	291f      	cmp	r1, #31
 80022bc:	dd00      	ble.n	80022c0 <__aeabi_dsub+0xec>
 80022be:	e1cb      	b.n	8002658 <__aeabi_dsub+0x484>
 80022c0:	2220      	movs	r2, #32
 80022c2:	0018      	movs	r0, r3
 80022c4:	0026      	movs	r6, r4
 80022c6:	1a52      	subs	r2, r2, r1
 80022c8:	4094      	lsls	r4, r2
 80022ca:	4090      	lsls	r0, r2
 80022cc:	40ce      	lsrs	r6, r1
 80022ce:	40cb      	lsrs	r3, r1
 80022d0:	1e62      	subs	r2, r4, #1
 80022d2:	4194      	sbcs	r4, r2
 80022d4:	4330      	orrs	r0, r6
 80022d6:	4698      	mov	r8, r3
 80022d8:	2600      	movs	r6, #0
 80022da:	4304      	orrs	r4, r0
 80022dc:	0763      	lsls	r3, r4, #29
 80022de:	d009      	beq.n	80022f4 <__aeabi_dsub+0x120>
 80022e0:	230f      	movs	r3, #15
 80022e2:	4023      	ands	r3, r4
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d005      	beq.n	80022f4 <__aeabi_dsub+0x120>
 80022e8:	1d23      	adds	r3, r4, #4
 80022ea:	42a3      	cmp	r3, r4
 80022ec:	41a4      	sbcs	r4, r4
 80022ee:	4264      	negs	r4, r4
 80022f0:	44a0      	add	r8, r4
 80022f2:	001c      	movs	r4, r3
 80022f4:	4643      	mov	r3, r8
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	d400      	bmi.n	80022fc <__aeabi_dsub+0x128>
 80022fa:	e0df      	b.n	80024bc <__aeabi_dsub+0x2e8>
 80022fc:	4b82      	ldr	r3, [pc, #520]	; (8002508 <__aeabi_dsub+0x334>)
 80022fe:	3601      	adds	r6, #1
 8002300:	429e      	cmp	r6, r3
 8002302:	d100      	bne.n	8002306 <__aeabi_dsub+0x132>
 8002304:	e0fb      	b.n	80024fe <__aeabi_dsub+0x32a>
 8002306:	4642      	mov	r2, r8
 8002308:	4b80      	ldr	r3, [pc, #512]	; (800250c <__aeabi_dsub+0x338>)
 800230a:	08e4      	lsrs	r4, r4, #3
 800230c:	401a      	ands	r2, r3
 800230e:	0013      	movs	r3, r2
 8002310:	0571      	lsls	r1, r6, #21
 8002312:	0752      	lsls	r2, r2, #29
 8002314:	025b      	lsls	r3, r3, #9
 8002316:	4322      	orrs	r2, r4
 8002318:	0b1b      	lsrs	r3, r3, #12
 800231a:	0d49      	lsrs	r1, r1, #21
 800231c:	0509      	lsls	r1, r1, #20
 800231e:	07ed      	lsls	r5, r5, #31
 8002320:	4319      	orrs	r1, r3
 8002322:	4329      	orrs	r1, r5
 8002324:	0010      	movs	r0, r2
 8002326:	bcf0      	pop	{r4, r5, r6, r7}
 8002328:	46bb      	mov	fp, r7
 800232a:	46b2      	mov	sl, r6
 800232c:	46a9      	mov	r9, r5
 800232e:	46a0      	mov	r8, r4
 8002330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002332:	1ab4      	subs	r4, r6, r2
 8002334:	46a4      	mov	ip, r4
 8002336:	2c00      	cmp	r4, #0
 8002338:	dd58      	ble.n	80023ec <__aeabi_dsub+0x218>
 800233a:	2a00      	cmp	r2, #0
 800233c:	d100      	bne.n	8002340 <__aeabi_dsub+0x16c>
 800233e:	e09e      	b.n	800247e <__aeabi_dsub+0x2aa>
 8002340:	4a71      	ldr	r2, [pc, #452]	; (8002508 <__aeabi_dsub+0x334>)
 8002342:	4296      	cmp	r6, r2
 8002344:	d100      	bne.n	8002348 <__aeabi_dsub+0x174>
 8002346:	e13b      	b.n	80025c0 <__aeabi_dsub+0x3ec>
 8002348:	2280      	movs	r2, #128	; 0x80
 800234a:	0412      	lsls	r2, r2, #16
 800234c:	4311      	orrs	r1, r2
 800234e:	4662      	mov	r2, ip
 8002350:	2a38      	cmp	r2, #56	; 0x38
 8002352:	dd00      	ble.n	8002356 <__aeabi_dsub+0x182>
 8002354:	e0c1      	b.n	80024da <__aeabi_dsub+0x306>
 8002356:	2a1f      	cmp	r2, #31
 8002358:	dc00      	bgt.n	800235c <__aeabi_dsub+0x188>
 800235a:	e1bb      	b.n	80026d4 <__aeabi_dsub+0x500>
 800235c:	000c      	movs	r4, r1
 800235e:	3a20      	subs	r2, #32
 8002360:	40d4      	lsrs	r4, r2
 8002362:	0022      	movs	r2, r4
 8002364:	4664      	mov	r4, ip
 8002366:	2c20      	cmp	r4, #32
 8002368:	d004      	beq.n	8002374 <__aeabi_dsub+0x1a0>
 800236a:	2740      	movs	r7, #64	; 0x40
 800236c:	1b3f      	subs	r7, r7, r4
 800236e:	40b9      	lsls	r1, r7
 8002370:	4308      	orrs	r0, r1
 8002372:	4680      	mov	r8, r0
 8002374:	4644      	mov	r4, r8
 8002376:	1e61      	subs	r1, r4, #1
 8002378:	418c      	sbcs	r4, r1
 800237a:	4314      	orrs	r4, r2
 800237c:	e0b1      	b.n	80024e2 <__aeabi_dsub+0x30e>
 800237e:	000c      	movs	r4, r1
 8002380:	4304      	orrs	r4, r0
 8002382:	d02a      	beq.n	80023da <__aeabi_dsub+0x206>
 8002384:	46bb      	mov	fp, r7
 8002386:	42bd      	cmp	r5, r7
 8002388:	d02d      	beq.n	80023e6 <__aeabi_dsub+0x212>
 800238a:	4c61      	ldr	r4, [pc, #388]	; (8002510 <__aeabi_dsub+0x33c>)
 800238c:	46a4      	mov	ip, r4
 800238e:	44b4      	add	ip, r6
 8002390:	4664      	mov	r4, ip
 8002392:	2c00      	cmp	r4, #0
 8002394:	d05c      	beq.n	8002450 <__aeabi_dsub+0x27c>
 8002396:	1b94      	subs	r4, r2, r6
 8002398:	46a4      	mov	ip, r4
 800239a:	2e00      	cmp	r6, #0
 800239c:	d000      	beq.n	80023a0 <__aeabi_dsub+0x1cc>
 800239e:	e115      	b.n	80025cc <__aeabi_dsub+0x3f8>
 80023a0:	464d      	mov	r5, r9
 80023a2:	431d      	orrs	r5, r3
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x1d4>
 80023a6:	e1c3      	b.n	8002730 <__aeabi_dsub+0x55c>
 80023a8:	1e65      	subs	r5, r4, #1
 80023aa:	2c01      	cmp	r4, #1
 80023ac:	d100      	bne.n	80023b0 <__aeabi_dsub+0x1dc>
 80023ae:	e20c      	b.n	80027ca <__aeabi_dsub+0x5f6>
 80023b0:	4e55      	ldr	r6, [pc, #340]	; (8002508 <__aeabi_dsub+0x334>)
 80023b2:	42b4      	cmp	r4, r6
 80023b4:	d100      	bne.n	80023b8 <__aeabi_dsub+0x1e4>
 80023b6:	e1f8      	b.n	80027aa <__aeabi_dsub+0x5d6>
 80023b8:	46ac      	mov	ip, r5
 80023ba:	e10e      	b.n	80025da <__aeabi_dsub+0x406>
 80023bc:	000a      	movs	r2, r1
 80023be:	4302      	orrs	r2, r0
 80023c0:	d100      	bne.n	80023c4 <__aeabi_dsub+0x1f0>
 80023c2:	e136      	b.n	8002632 <__aeabi_dsub+0x45e>
 80023c4:	0022      	movs	r2, r4
 80023c6:	3a01      	subs	r2, #1
 80023c8:	2c01      	cmp	r4, #1
 80023ca:	d100      	bne.n	80023ce <__aeabi_dsub+0x1fa>
 80023cc:	e1c6      	b.n	800275c <__aeabi_dsub+0x588>
 80023ce:	4c4e      	ldr	r4, [pc, #312]	; (8002508 <__aeabi_dsub+0x334>)
 80023d0:	45a4      	cmp	ip, r4
 80023d2:	d100      	bne.n	80023d6 <__aeabi_dsub+0x202>
 80023d4:	e0f4      	b.n	80025c0 <__aeabi_dsub+0x3ec>
 80023d6:	4694      	mov	ip, r2
 80023d8:	e731      	b.n	800223e <__aeabi_dsub+0x6a>
 80023da:	2401      	movs	r4, #1
 80023dc:	4067      	eors	r7, r4
 80023de:	46bb      	mov	fp, r7
 80023e0:	42bd      	cmp	r5, r7
 80023e2:	d000      	beq.n	80023e6 <__aeabi_dsub+0x212>
 80023e4:	e71c      	b.n	8002220 <__aeabi_dsub+0x4c>
 80023e6:	4c4a      	ldr	r4, [pc, #296]	; (8002510 <__aeabi_dsub+0x33c>)
 80023e8:	46a4      	mov	ip, r4
 80023ea:	44b4      	add	ip, r6
 80023ec:	4664      	mov	r4, ip
 80023ee:	2c00      	cmp	r4, #0
 80023f0:	d100      	bne.n	80023f4 <__aeabi_dsub+0x220>
 80023f2:	e0cf      	b.n	8002594 <__aeabi_dsub+0x3c0>
 80023f4:	1b94      	subs	r4, r2, r6
 80023f6:	46a4      	mov	ip, r4
 80023f8:	2e00      	cmp	r6, #0
 80023fa:	d100      	bne.n	80023fe <__aeabi_dsub+0x22a>
 80023fc:	e15c      	b.n	80026b8 <__aeabi_dsub+0x4e4>
 80023fe:	4e42      	ldr	r6, [pc, #264]	; (8002508 <__aeabi_dsub+0x334>)
 8002400:	42b2      	cmp	r2, r6
 8002402:	d100      	bne.n	8002406 <__aeabi_dsub+0x232>
 8002404:	e1ec      	b.n	80027e0 <__aeabi_dsub+0x60c>
 8002406:	2680      	movs	r6, #128	; 0x80
 8002408:	0436      	lsls	r6, r6, #16
 800240a:	4333      	orrs	r3, r6
 800240c:	4664      	mov	r4, ip
 800240e:	2c38      	cmp	r4, #56	; 0x38
 8002410:	dd00      	ble.n	8002414 <__aeabi_dsub+0x240>
 8002412:	e1b3      	b.n	800277c <__aeabi_dsub+0x5a8>
 8002414:	2c1f      	cmp	r4, #31
 8002416:	dd00      	ble.n	800241a <__aeabi_dsub+0x246>
 8002418:	e238      	b.n	800288c <__aeabi_dsub+0x6b8>
 800241a:	2620      	movs	r6, #32
 800241c:	1b36      	subs	r6, r6, r4
 800241e:	001c      	movs	r4, r3
 8002420:	40b4      	lsls	r4, r6
 8002422:	464f      	mov	r7, r9
 8002424:	46a0      	mov	r8, r4
 8002426:	4664      	mov	r4, ip
 8002428:	40e7      	lsrs	r7, r4
 800242a:	4644      	mov	r4, r8
 800242c:	433c      	orrs	r4, r7
 800242e:	464f      	mov	r7, r9
 8002430:	40b7      	lsls	r7, r6
 8002432:	003e      	movs	r6, r7
 8002434:	1e77      	subs	r7, r6, #1
 8002436:	41be      	sbcs	r6, r7
 8002438:	4334      	orrs	r4, r6
 800243a:	4666      	mov	r6, ip
 800243c:	40f3      	lsrs	r3, r6
 800243e:	18c9      	adds	r1, r1, r3
 8002440:	1824      	adds	r4, r4, r0
 8002442:	4284      	cmp	r4, r0
 8002444:	419b      	sbcs	r3, r3
 8002446:	425b      	negs	r3, r3
 8002448:	4698      	mov	r8, r3
 800244a:	0016      	movs	r6, r2
 800244c:	4488      	add	r8, r1
 800244e:	e04e      	b.n	80024ee <__aeabi_dsub+0x31a>
 8002450:	4a30      	ldr	r2, [pc, #192]	; (8002514 <__aeabi_dsub+0x340>)
 8002452:	1c74      	adds	r4, r6, #1
 8002454:	4214      	tst	r4, r2
 8002456:	d000      	beq.n	800245a <__aeabi_dsub+0x286>
 8002458:	e0d6      	b.n	8002608 <__aeabi_dsub+0x434>
 800245a:	464a      	mov	r2, r9
 800245c:	431a      	orrs	r2, r3
 800245e:	2e00      	cmp	r6, #0
 8002460:	d000      	beq.n	8002464 <__aeabi_dsub+0x290>
 8002462:	e15b      	b.n	800271c <__aeabi_dsub+0x548>
 8002464:	2a00      	cmp	r2, #0
 8002466:	d100      	bne.n	800246a <__aeabi_dsub+0x296>
 8002468:	e1a5      	b.n	80027b6 <__aeabi_dsub+0x5e2>
 800246a:	000a      	movs	r2, r1
 800246c:	4302      	orrs	r2, r0
 800246e:	d000      	beq.n	8002472 <__aeabi_dsub+0x29e>
 8002470:	e1bb      	b.n	80027ea <__aeabi_dsub+0x616>
 8002472:	464a      	mov	r2, r9
 8002474:	0759      	lsls	r1, r3, #29
 8002476:	08d2      	lsrs	r2, r2, #3
 8002478:	430a      	orrs	r2, r1
 800247a:	08db      	lsrs	r3, r3, #3
 800247c:	e027      	b.n	80024ce <__aeabi_dsub+0x2fa>
 800247e:	000a      	movs	r2, r1
 8002480:	4302      	orrs	r2, r0
 8002482:	d100      	bne.n	8002486 <__aeabi_dsub+0x2b2>
 8002484:	e174      	b.n	8002770 <__aeabi_dsub+0x59c>
 8002486:	0022      	movs	r2, r4
 8002488:	3a01      	subs	r2, #1
 800248a:	2c01      	cmp	r4, #1
 800248c:	d005      	beq.n	800249a <__aeabi_dsub+0x2c6>
 800248e:	4c1e      	ldr	r4, [pc, #120]	; (8002508 <__aeabi_dsub+0x334>)
 8002490:	45a4      	cmp	ip, r4
 8002492:	d100      	bne.n	8002496 <__aeabi_dsub+0x2c2>
 8002494:	e094      	b.n	80025c0 <__aeabi_dsub+0x3ec>
 8002496:	4694      	mov	ip, r2
 8002498:	e759      	b.n	800234e <__aeabi_dsub+0x17a>
 800249a:	4448      	add	r0, r9
 800249c:	4548      	cmp	r0, r9
 800249e:	4192      	sbcs	r2, r2
 80024a0:	185b      	adds	r3, r3, r1
 80024a2:	4698      	mov	r8, r3
 80024a4:	0004      	movs	r4, r0
 80024a6:	4252      	negs	r2, r2
 80024a8:	4490      	add	r8, r2
 80024aa:	4643      	mov	r3, r8
 80024ac:	2602      	movs	r6, #2
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	d500      	bpl.n	80024b4 <__aeabi_dsub+0x2e0>
 80024b2:	e0c4      	b.n	800263e <__aeabi_dsub+0x46a>
 80024b4:	3e01      	subs	r6, #1
 80024b6:	0763      	lsls	r3, r4, #29
 80024b8:	d000      	beq.n	80024bc <__aeabi_dsub+0x2e8>
 80024ba:	e711      	b.n	80022e0 <__aeabi_dsub+0x10c>
 80024bc:	4643      	mov	r3, r8
 80024be:	46b4      	mov	ip, r6
 80024c0:	0759      	lsls	r1, r3, #29
 80024c2:	08e2      	lsrs	r2, r4, #3
 80024c4:	430a      	orrs	r2, r1
 80024c6:	08db      	lsrs	r3, r3, #3
 80024c8:	490f      	ldr	r1, [pc, #60]	; (8002508 <__aeabi_dsub+0x334>)
 80024ca:	458c      	cmp	ip, r1
 80024cc:	d040      	beq.n	8002550 <__aeabi_dsub+0x37c>
 80024ce:	4661      	mov	r1, ip
 80024d0:	031b      	lsls	r3, r3, #12
 80024d2:	0549      	lsls	r1, r1, #21
 80024d4:	0b1b      	lsrs	r3, r3, #12
 80024d6:	0d49      	lsrs	r1, r1, #21
 80024d8:	e720      	b.n	800231c <__aeabi_dsub+0x148>
 80024da:	4301      	orrs	r1, r0
 80024dc:	000c      	movs	r4, r1
 80024de:	1e61      	subs	r1, r4, #1
 80024e0:	418c      	sbcs	r4, r1
 80024e2:	444c      	add	r4, r9
 80024e4:	454c      	cmp	r4, r9
 80024e6:	4192      	sbcs	r2, r2
 80024e8:	4252      	negs	r2, r2
 80024ea:	4690      	mov	r8, r2
 80024ec:	4498      	add	r8, r3
 80024ee:	4643      	mov	r3, r8
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	d5e0      	bpl.n	80024b6 <__aeabi_dsub+0x2e2>
 80024f4:	4b04      	ldr	r3, [pc, #16]	; (8002508 <__aeabi_dsub+0x334>)
 80024f6:	3601      	adds	r6, #1
 80024f8:	429e      	cmp	r6, r3
 80024fa:	d000      	beq.n	80024fe <__aeabi_dsub+0x32a>
 80024fc:	e09f      	b.n	800263e <__aeabi_dsub+0x46a>
 80024fe:	0031      	movs	r1, r6
 8002500:	2300      	movs	r3, #0
 8002502:	2200      	movs	r2, #0
 8002504:	e70a      	b.n	800231c <__aeabi_dsub+0x148>
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	000007ff 	.word	0x000007ff
 800250c:	ff7fffff 	.word	0xff7fffff
 8002510:	fffff801 	.word	0xfffff801
 8002514:	000007fe 	.word	0x000007fe
 8002518:	2a00      	cmp	r2, #0
 800251a:	d100      	bne.n	800251e <__aeabi_dsub+0x34a>
 800251c:	e160      	b.n	80027e0 <__aeabi_dsub+0x60c>
 800251e:	000a      	movs	r2, r1
 8002520:	4302      	orrs	r2, r0
 8002522:	d04d      	beq.n	80025c0 <__aeabi_dsub+0x3ec>
 8002524:	464a      	mov	r2, r9
 8002526:	075c      	lsls	r4, r3, #29
 8002528:	08d2      	lsrs	r2, r2, #3
 800252a:	4322      	orrs	r2, r4
 800252c:	2480      	movs	r4, #128	; 0x80
 800252e:	08db      	lsrs	r3, r3, #3
 8002530:	0324      	lsls	r4, r4, #12
 8002532:	4223      	tst	r3, r4
 8002534:	d007      	beq.n	8002546 <__aeabi_dsub+0x372>
 8002536:	08ce      	lsrs	r6, r1, #3
 8002538:	4226      	tst	r6, r4
 800253a:	d104      	bne.n	8002546 <__aeabi_dsub+0x372>
 800253c:	465d      	mov	r5, fp
 800253e:	0033      	movs	r3, r6
 8002540:	08c2      	lsrs	r2, r0, #3
 8002542:	0749      	lsls	r1, r1, #29
 8002544:	430a      	orrs	r2, r1
 8002546:	0f51      	lsrs	r1, r2, #29
 8002548:	00d2      	lsls	r2, r2, #3
 800254a:	08d2      	lsrs	r2, r2, #3
 800254c:	0749      	lsls	r1, r1, #29
 800254e:	430a      	orrs	r2, r1
 8002550:	0011      	movs	r1, r2
 8002552:	4319      	orrs	r1, r3
 8002554:	d100      	bne.n	8002558 <__aeabi_dsub+0x384>
 8002556:	e1c8      	b.n	80028ea <__aeabi_dsub+0x716>
 8002558:	2180      	movs	r1, #128	; 0x80
 800255a:	0309      	lsls	r1, r1, #12
 800255c:	430b      	orrs	r3, r1
 800255e:	031b      	lsls	r3, r3, #12
 8002560:	49d5      	ldr	r1, [pc, #852]	; (80028b8 <__aeabi_dsub+0x6e4>)
 8002562:	0b1b      	lsrs	r3, r3, #12
 8002564:	e6da      	b.n	800231c <__aeabi_dsub+0x148>
 8002566:	49d5      	ldr	r1, [pc, #852]	; (80028bc <__aeabi_dsub+0x6e8>)
 8002568:	1ab6      	subs	r6, r6, r2
 800256a:	400b      	ands	r3, r1
 800256c:	4698      	mov	r8, r3
 800256e:	e6b5      	b.n	80022dc <__aeabi_dsub+0x108>
 8002570:	0020      	movs	r0, r4
 8002572:	f000 fab3 	bl	8002adc <__clzsi2>
 8002576:	0002      	movs	r2, r0
 8002578:	3218      	adds	r2, #24
 800257a:	2a1f      	cmp	r2, #31
 800257c:	dc00      	bgt.n	8002580 <__aeabi_dsub+0x3ac>
 800257e:	e68f      	b.n	80022a0 <__aeabi_dsub+0xcc>
 8002580:	0023      	movs	r3, r4
 8002582:	3808      	subs	r0, #8
 8002584:	4083      	lsls	r3, r0
 8002586:	2400      	movs	r4, #0
 8002588:	e692      	b.n	80022b0 <__aeabi_dsub+0xdc>
 800258a:	4308      	orrs	r0, r1
 800258c:	0002      	movs	r2, r0
 800258e:	1e50      	subs	r0, r2, #1
 8002590:	4182      	sbcs	r2, r0
 8002592:	e66d      	b.n	8002270 <__aeabi_dsub+0x9c>
 8002594:	4cca      	ldr	r4, [pc, #808]	; (80028c0 <__aeabi_dsub+0x6ec>)
 8002596:	1c72      	adds	r2, r6, #1
 8002598:	4222      	tst	r2, r4
 800259a:	d000      	beq.n	800259e <__aeabi_dsub+0x3ca>
 800259c:	e0ad      	b.n	80026fa <__aeabi_dsub+0x526>
 800259e:	464a      	mov	r2, r9
 80025a0:	431a      	orrs	r2, r3
 80025a2:	2e00      	cmp	r6, #0
 80025a4:	d1b8      	bne.n	8002518 <__aeabi_dsub+0x344>
 80025a6:	2a00      	cmp	r2, #0
 80025a8:	d100      	bne.n	80025ac <__aeabi_dsub+0x3d8>
 80025aa:	e158      	b.n	800285e <__aeabi_dsub+0x68a>
 80025ac:	000a      	movs	r2, r1
 80025ae:	4302      	orrs	r2, r0
 80025b0:	d000      	beq.n	80025b4 <__aeabi_dsub+0x3e0>
 80025b2:	e159      	b.n	8002868 <__aeabi_dsub+0x694>
 80025b4:	464a      	mov	r2, r9
 80025b6:	0759      	lsls	r1, r3, #29
 80025b8:	08d2      	lsrs	r2, r2, #3
 80025ba:	430a      	orrs	r2, r1
 80025bc:	08db      	lsrs	r3, r3, #3
 80025be:	e786      	b.n	80024ce <__aeabi_dsub+0x2fa>
 80025c0:	464a      	mov	r2, r9
 80025c2:	0759      	lsls	r1, r3, #29
 80025c4:	08d2      	lsrs	r2, r2, #3
 80025c6:	430a      	orrs	r2, r1
 80025c8:	08db      	lsrs	r3, r3, #3
 80025ca:	e7c1      	b.n	8002550 <__aeabi_dsub+0x37c>
 80025cc:	4dba      	ldr	r5, [pc, #744]	; (80028b8 <__aeabi_dsub+0x6e4>)
 80025ce:	42aa      	cmp	r2, r5
 80025d0:	d100      	bne.n	80025d4 <__aeabi_dsub+0x400>
 80025d2:	e11e      	b.n	8002812 <__aeabi_dsub+0x63e>
 80025d4:	2580      	movs	r5, #128	; 0x80
 80025d6:	042d      	lsls	r5, r5, #16
 80025d8:	432b      	orrs	r3, r5
 80025da:	4664      	mov	r4, ip
 80025dc:	2c38      	cmp	r4, #56	; 0x38
 80025de:	dc5d      	bgt.n	800269c <__aeabi_dsub+0x4c8>
 80025e0:	2c1f      	cmp	r4, #31
 80025e2:	dd00      	ble.n	80025e6 <__aeabi_dsub+0x412>
 80025e4:	e0d0      	b.n	8002788 <__aeabi_dsub+0x5b4>
 80025e6:	2520      	movs	r5, #32
 80025e8:	4667      	mov	r7, ip
 80025ea:	1b2d      	subs	r5, r5, r4
 80025ec:	464e      	mov	r6, r9
 80025ee:	001c      	movs	r4, r3
 80025f0:	40fe      	lsrs	r6, r7
 80025f2:	40ac      	lsls	r4, r5
 80025f4:	4334      	orrs	r4, r6
 80025f6:	464e      	mov	r6, r9
 80025f8:	40ae      	lsls	r6, r5
 80025fa:	0035      	movs	r5, r6
 80025fc:	40fb      	lsrs	r3, r7
 80025fe:	1e6e      	subs	r6, r5, #1
 8002600:	41b5      	sbcs	r5, r6
 8002602:	1ac9      	subs	r1, r1, r3
 8002604:	432c      	orrs	r4, r5
 8002606:	e04e      	b.n	80026a6 <__aeabi_dsub+0x4d2>
 8002608:	464a      	mov	r2, r9
 800260a:	1a14      	subs	r4, r2, r0
 800260c:	45a1      	cmp	r9, r4
 800260e:	4192      	sbcs	r2, r2
 8002610:	4252      	negs	r2, r2
 8002612:	4690      	mov	r8, r2
 8002614:	1a5f      	subs	r7, r3, r1
 8002616:	003a      	movs	r2, r7
 8002618:	4647      	mov	r7, r8
 800261a:	1bd2      	subs	r2, r2, r7
 800261c:	4690      	mov	r8, r2
 800261e:	0212      	lsls	r2, r2, #8
 8002620:	d500      	bpl.n	8002624 <__aeabi_dsub+0x450>
 8002622:	e08b      	b.n	800273c <__aeabi_dsub+0x568>
 8002624:	4642      	mov	r2, r8
 8002626:	4322      	orrs	r2, r4
 8002628:	d000      	beq.n	800262c <__aeabi_dsub+0x458>
 800262a:	e630      	b.n	800228e <__aeabi_dsub+0xba>
 800262c:	2300      	movs	r3, #0
 800262e:	2500      	movs	r5, #0
 8002630:	e74d      	b.n	80024ce <__aeabi_dsub+0x2fa>
 8002632:	464a      	mov	r2, r9
 8002634:	0759      	lsls	r1, r3, #29
 8002636:	08d2      	lsrs	r2, r2, #3
 8002638:	430a      	orrs	r2, r1
 800263a:	08db      	lsrs	r3, r3, #3
 800263c:	e744      	b.n	80024c8 <__aeabi_dsub+0x2f4>
 800263e:	4642      	mov	r2, r8
 8002640:	4b9e      	ldr	r3, [pc, #632]	; (80028bc <__aeabi_dsub+0x6e8>)
 8002642:	0861      	lsrs	r1, r4, #1
 8002644:	401a      	ands	r2, r3
 8002646:	0013      	movs	r3, r2
 8002648:	2201      	movs	r2, #1
 800264a:	4014      	ands	r4, r2
 800264c:	430c      	orrs	r4, r1
 800264e:	07da      	lsls	r2, r3, #31
 8002650:	085b      	lsrs	r3, r3, #1
 8002652:	4698      	mov	r8, r3
 8002654:	4314      	orrs	r4, r2
 8002656:	e641      	b.n	80022dc <__aeabi_dsub+0x108>
 8002658:	001a      	movs	r2, r3
 800265a:	3e1f      	subs	r6, #31
 800265c:	40f2      	lsrs	r2, r6
 800265e:	0016      	movs	r6, r2
 8002660:	2920      	cmp	r1, #32
 8002662:	d003      	beq.n	800266c <__aeabi_dsub+0x498>
 8002664:	2240      	movs	r2, #64	; 0x40
 8002666:	1a51      	subs	r1, r2, r1
 8002668:	408b      	lsls	r3, r1
 800266a:	431c      	orrs	r4, r3
 800266c:	1e62      	subs	r2, r4, #1
 800266e:	4194      	sbcs	r4, r2
 8002670:	2300      	movs	r3, #0
 8002672:	4334      	orrs	r4, r6
 8002674:	4698      	mov	r8, r3
 8002676:	2600      	movs	r6, #0
 8002678:	e71d      	b.n	80024b6 <__aeabi_dsub+0x2e2>
 800267a:	000c      	movs	r4, r1
 800267c:	3a20      	subs	r2, #32
 800267e:	40d4      	lsrs	r4, r2
 8002680:	0022      	movs	r2, r4
 8002682:	4664      	mov	r4, ip
 8002684:	2c20      	cmp	r4, #32
 8002686:	d004      	beq.n	8002692 <__aeabi_dsub+0x4be>
 8002688:	2740      	movs	r7, #64	; 0x40
 800268a:	1b3f      	subs	r7, r7, r4
 800268c:	40b9      	lsls	r1, r7
 800268e:	4308      	orrs	r0, r1
 8002690:	4680      	mov	r8, r0
 8002692:	4644      	mov	r4, r8
 8002694:	1e61      	subs	r1, r4, #1
 8002696:	418c      	sbcs	r4, r1
 8002698:	4322      	orrs	r2, r4
 800269a:	e5e9      	b.n	8002270 <__aeabi_dsub+0x9c>
 800269c:	464c      	mov	r4, r9
 800269e:	4323      	orrs	r3, r4
 80026a0:	001c      	movs	r4, r3
 80026a2:	1e63      	subs	r3, r4, #1
 80026a4:	419c      	sbcs	r4, r3
 80026a6:	1b04      	subs	r4, r0, r4
 80026a8:	42a0      	cmp	r0, r4
 80026aa:	419b      	sbcs	r3, r3
 80026ac:	425b      	negs	r3, r3
 80026ae:	1acb      	subs	r3, r1, r3
 80026b0:	4698      	mov	r8, r3
 80026b2:	465d      	mov	r5, fp
 80026b4:	0016      	movs	r6, r2
 80026b6:	e5e2      	b.n	800227e <__aeabi_dsub+0xaa>
 80026b8:	464e      	mov	r6, r9
 80026ba:	431e      	orrs	r6, r3
 80026bc:	d100      	bne.n	80026c0 <__aeabi_dsub+0x4ec>
 80026be:	e0ae      	b.n	800281e <__aeabi_dsub+0x64a>
 80026c0:	1e66      	subs	r6, r4, #1
 80026c2:	2c01      	cmp	r4, #1
 80026c4:	d100      	bne.n	80026c8 <__aeabi_dsub+0x4f4>
 80026c6:	e0fd      	b.n	80028c4 <__aeabi_dsub+0x6f0>
 80026c8:	4f7b      	ldr	r7, [pc, #492]	; (80028b8 <__aeabi_dsub+0x6e4>)
 80026ca:	42bc      	cmp	r4, r7
 80026cc:	d100      	bne.n	80026d0 <__aeabi_dsub+0x4fc>
 80026ce:	e107      	b.n	80028e0 <__aeabi_dsub+0x70c>
 80026d0:	46b4      	mov	ip, r6
 80026d2:	e69b      	b.n	800240c <__aeabi_dsub+0x238>
 80026d4:	4664      	mov	r4, ip
 80026d6:	2220      	movs	r2, #32
 80026d8:	1b12      	subs	r2, r2, r4
 80026da:	000c      	movs	r4, r1
 80026dc:	4094      	lsls	r4, r2
 80026de:	0007      	movs	r7, r0
 80026e0:	4090      	lsls	r0, r2
 80026e2:	46a0      	mov	r8, r4
 80026e4:	4664      	mov	r4, ip
 80026e6:	1e42      	subs	r2, r0, #1
 80026e8:	4190      	sbcs	r0, r2
 80026ea:	4662      	mov	r2, ip
 80026ec:	40e7      	lsrs	r7, r4
 80026ee:	4644      	mov	r4, r8
 80026f0:	40d1      	lsrs	r1, r2
 80026f2:	433c      	orrs	r4, r7
 80026f4:	4304      	orrs	r4, r0
 80026f6:	185b      	adds	r3, r3, r1
 80026f8:	e6f3      	b.n	80024e2 <__aeabi_dsub+0x30e>
 80026fa:	4c6f      	ldr	r4, [pc, #444]	; (80028b8 <__aeabi_dsub+0x6e4>)
 80026fc:	42a2      	cmp	r2, r4
 80026fe:	d100      	bne.n	8002702 <__aeabi_dsub+0x52e>
 8002700:	e0d5      	b.n	80028ae <__aeabi_dsub+0x6da>
 8002702:	4448      	add	r0, r9
 8002704:	185b      	adds	r3, r3, r1
 8002706:	4548      	cmp	r0, r9
 8002708:	4189      	sbcs	r1, r1
 800270a:	4249      	negs	r1, r1
 800270c:	185b      	adds	r3, r3, r1
 800270e:	07dc      	lsls	r4, r3, #31
 8002710:	0840      	lsrs	r0, r0, #1
 8002712:	085b      	lsrs	r3, r3, #1
 8002714:	4698      	mov	r8, r3
 8002716:	0016      	movs	r6, r2
 8002718:	4304      	orrs	r4, r0
 800271a:	e6cc      	b.n	80024b6 <__aeabi_dsub+0x2e2>
 800271c:	2a00      	cmp	r2, #0
 800271e:	d000      	beq.n	8002722 <__aeabi_dsub+0x54e>
 8002720:	e082      	b.n	8002828 <__aeabi_dsub+0x654>
 8002722:	000a      	movs	r2, r1
 8002724:	4302      	orrs	r2, r0
 8002726:	d140      	bne.n	80027aa <__aeabi_dsub+0x5d6>
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	2500      	movs	r5, #0
 800272c:	031b      	lsls	r3, r3, #12
 800272e:	e713      	b.n	8002558 <__aeabi_dsub+0x384>
 8002730:	074b      	lsls	r3, r1, #29
 8002732:	08c2      	lsrs	r2, r0, #3
 8002734:	431a      	orrs	r2, r3
 8002736:	465d      	mov	r5, fp
 8002738:	08cb      	lsrs	r3, r1, #3
 800273a:	e6c5      	b.n	80024c8 <__aeabi_dsub+0x2f4>
 800273c:	464a      	mov	r2, r9
 800273e:	1a84      	subs	r4, r0, r2
 8002740:	42a0      	cmp	r0, r4
 8002742:	4192      	sbcs	r2, r2
 8002744:	1acb      	subs	r3, r1, r3
 8002746:	4252      	negs	r2, r2
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	4698      	mov	r8, r3
 800274c:	465d      	mov	r5, fp
 800274e:	e59e      	b.n	800228e <__aeabi_dsub+0xba>
 8002750:	464a      	mov	r2, r9
 8002752:	0759      	lsls	r1, r3, #29
 8002754:	08d2      	lsrs	r2, r2, #3
 8002756:	430a      	orrs	r2, r1
 8002758:	08db      	lsrs	r3, r3, #3
 800275a:	e6f9      	b.n	8002550 <__aeabi_dsub+0x37c>
 800275c:	464a      	mov	r2, r9
 800275e:	1a14      	subs	r4, r2, r0
 8002760:	45a1      	cmp	r9, r4
 8002762:	4192      	sbcs	r2, r2
 8002764:	1a5b      	subs	r3, r3, r1
 8002766:	4252      	negs	r2, r2
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	4698      	mov	r8, r3
 800276c:	2601      	movs	r6, #1
 800276e:	e586      	b.n	800227e <__aeabi_dsub+0xaa>
 8002770:	464a      	mov	r2, r9
 8002772:	0759      	lsls	r1, r3, #29
 8002774:	08d2      	lsrs	r2, r2, #3
 8002776:	430a      	orrs	r2, r1
 8002778:	08db      	lsrs	r3, r3, #3
 800277a:	e6a5      	b.n	80024c8 <__aeabi_dsub+0x2f4>
 800277c:	464c      	mov	r4, r9
 800277e:	4323      	orrs	r3, r4
 8002780:	001c      	movs	r4, r3
 8002782:	1e63      	subs	r3, r4, #1
 8002784:	419c      	sbcs	r4, r3
 8002786:	e65b      	b.n	8002440 <__aeabi_dsub+0x26c>
 8002788:	4665      	mov	r5, ip
 800278a:	001e      	movs	r6, r3
 800278c:	3d20      	subs	r5, #32
 800278e:	40ee      	lsrs	r6, r5
 8002790:	2c20      	cmp	r4, #32
 8002792:	d005      	beq.n	80027a0 <__aeabi_dsub+0x5cc>
 8002794:	2540      	movs	r5, #64	; 0x40
 8002796:	1b2d      	subs	r5, r5, r4
 8002798:	40ab      	lsls	r3, r5
 800279a:	464c      	mov	r4, r9
 800279c:	431c      	orrs	r4, r3
 800279e:	46a2      	mov	sl, r4
 80027a0:	4654      	mov	r4, sl
 80027a2:	1e63      	subs	r3, r4, #1
 80027a4:	419c      	sbcs	r4, r3
 80027a6:	4334      	orrs	r4, r6
 80027a8:	e77d      	b.n	80026a6 <__aeabi_dsub+0x4d2>
 80027aa:	074b      	lsls	r3, r1, #29
 80027ac:	08c2      	lsrs	r2, r0, #3
 80027ae:	431a      	orrs	r2, r3
 80027b0:	465d      	mov	r5, fp
 80027b2:	08cb      	lsrs	r3, r1, #3
 80027b4:	e6cc      	b.n	8002550 <__aeabi_dsub+0x37c>
 80027b6:	000a      	movs	r2, r1
 80027b8:	4302      	orrs	r2, r0
 80027ba:	d100      	bne.n	80027be <__aeabi_dsub+0x5ea>
 80027bc:	e736      	b.n	800262c <__aeabi_dsub+0x458>
 80027be:	074b      	lsls	r3, r1, #29
 80027c0:	08c2      	lsrs	r2, r0, #3
 80027c2:	431a      	orrs	r2, r3
 80027c4:	465d      	mov	r5, fp
 80027c6:	08cb      	lsrs	r3, r1, #3
 80027c8:	e681      	b.n	80024ce <__aeabi_dsub+0x2fa>
 80027ca:	464a      	mov	r2, r9
 80027cc:	1a84      	subs	r4, r0, r2
 80027ce:	42a0      	cmp	r0, r4
 80027d0:	4192      	sbcs	r2, r2
 80027d2:	1acb      	subs	r3, r1, r3
 80027d4:	4252      	negs	r2, r2
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	4698      	mov	r8, r3
 80027da:	465d      	mov	r5, fp
 80027dc:	2601      	movs	r6, #1
 80027de:	e54e      	b.n	800227e <__aeabi_dsub+0xaa>
 80027e0:	074b      	lsls	r3, r1, #29
 80027e2:	08c2      	lsrs	r2, r0, #3
 80027e4:	431a      	orrs	r2, r3
 80027e6:	08cb      	lsrs	r3, r1, #3
 80027e8:	e6b2      	b.n	8002550 <__aeabi_dsub+0x37c>
 80027ea:	464a      	mov	r2, r9
 80027ec:	1a14      	subs	r4, r2, r0
 80027ee:	45a1      	cmp	r9, r4
 80027f0:	4192      	sbcs	r2, r2
 80027f2:	1a5f      	subs	r7, r3, r1
 80027f4:	4252      	negs	r2, r2
 80027f6:	1aba      	subs	r2, r7, r2
 80027f8:	4690      	mov	r8, r2
 80027fa:	0212      	lsls	r2, r2, #8
 80027fc:	d56b      	bpl.n	80028d6 <__aeabi_dsub+0x702>
 80027fe:	464a      	mov	r2, r9
 8002800:	1a84      	subs	r4, r0, r2
 8002802:	42a0      	cmp	r0, r4
 8002804:	4192      	sbcs	r2, r2
 8002806:	1acb      	subs	r3, r1, r3
 8002808:	4252      	negs	r2, r2
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	4698      	mov	r8, r3
 800280e:	465d      	mov	r5, fp
 8002810:	e564      	b.n	80022dc <__aeabi_dsub+0x108>
 8002812:	074b      	lsls	r3, r1, #29
 8002814:	08c2      	lsrs	r2, r0, #3
 8002816:	431a      	orrs	r2, r3
 8002818:	465d      	mov	r5, fp
 800281a:	08cb      	lsrs	r3, r1, #3
 800281c:	e698      	b.n	8002550 <__aeabi_dsub+0x37c>
 800281e:	074b      	lsls	r3, r1, #29
 8002820:	08c2      	lsrs	r2, r0, #3
 8002822:	431a      	orrs	r2, r3
 8002824:	08cb      	lsrs	r3, r1, #3
 8002826:	e64f      	b.n	80024c8 <__aeabi_dsub+0x2f4>
 8002828:	000a      	movs	r2, r1
 800282a:	4302      	orrs	r2, r0
 800282c:	d090      	beq.n	8002750 <__aeabi_dsub+0x57c>
 800282e:	464a      	mov	r2, r9
 8002830:	075c      	lsls	r4, r3, #29
 8002832:	08d2      	lsrs	r2, r2, #3
 8002834:	4314      	orrs	r4, r2
 8002836:	2280      	movs	r2, #128	; 0x80
 8002838:	08db      	lsrs	r3, r3, #3
 800283a:	0312      	lsls	r2, r2, #12
 800283c:	4213      	tst	r3, r2
 800283e:	d008      	beq.n	8002852 <__aeabi_dsub+0x67e>
 8002840:	08ce      	lsrs	r6, r1, #3
 8002842:	4216      	tst	r6, r2
 8002844:	d105      	bne.n	8002852 <__aeabi_dsub+0x67e>
 8002846:	08c0      	lsrs	r0, r0, #3
 8002848:	0749      	lsls	r1, r1, #29
 800284a:	4308      	orrs	r0, r1
 800284c:	0004      	movs	r4, r0
 800284e:	465d      	mov	r5, fp
 8002850:	0033      	movs	r3, r6
 8002852:	0f61      	lsrs	r1, r4, #29
 8002854:	00e2      	lsls	r2, r4, #3
 8002856:	0749      	lsls	r1, r1, #29
 8002858:	08d2      	lsrs	r2, r2, #3
 800285a:	430a      	orrs	r2, r1
 800285c:	e678      	b.n	8002550 <__aeabi_dsub+0x37c>
 800285e:	074b      	lsls	r3, r1, #29
 8002860:	08c2      	lsrs	r2, r0, #3
 8002862:	431a      	orrs	r2, r3
 8002864:	08cb      	lsrs	r3, r1, #3
 8002866:	e632      	b.n	80024ce <__aeabi_dsub+0x2fa>
 8002868:	4448      	add	r0, r9
 800286a:	185b      	adds	r3, r3, r1
 800286c:	4548      	cmp	r0, r9
 800286e:	4192      	sbcs	r2, r2
 8002870:	4698      	mov	r8, r3
 8002872:	4252      	negs	r2, r2
 8002874:	4490      	add	r8, r2
 8002876:	4643      	mov	r3, r8
 8002878:	0004      	movs	r4, r0
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	d400      	bmi.n	8002880 <__aeabi_dsub+0x6ac>
 800287e:	e61a      	b.n	80024b6 <__aeabi_dsub+0x2e2>
 8002880:	4642      	mov	r2, r8
 8002882:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <__aeabi_dsub+0x6e8>)
 8002884:	2601      	movs	r6, #1
 8002886:	401a      	ands	r2, r3
 8002888:	4690      	mov	r8, r2
 800288a:	e614      	b.n	80024b6 <__aeabi_dsub+0x2e2>
 800288c:	4666      	mov	r6, ip
 800288e:	001f      	movs	r7, r3
 8002890:	3e20      	subs	r6, #32
 8002892:	40f7      	lsrs	r7, r6
 8002894:	2c20      	cmp	r4, #32
 8002896:	d005      	beq.n	80028a4 <__aeabi_dsub+0x6d0>
 8002898:	2640      	movs	r6, #64	; 0x40
 800289a:	1b36      	subs	r6, r6, r4
 800289c:	40b3      	lsls	r3, r6
 800289e:	464c      	mov	r4, r9
 80028a0:	431c      	orrs	r4, r3
 80028a2:	46a2      	mov	sl, r4
 80028a4:	4654      	mov	r4, sl
 80028a6:	1e63      	subs	r3, r4, #1
 80028a8:	419c      	sbcs	r4, r3
 80028aa:	433c      	orrs	r4, r7
 80028ac:	e5c8      	b.n	8002440 <__aeabi_dsub+0x26c>
 80028ae:	0011      	movs	r1, r2
 80028b0:	2300      	movs	r3, #0
 80028b2:	2200      	movs	r2, #0
 80028b4:	e532      	b.n	800231c <__aeabi_dsub+0x148>
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	000007ff 	.word	0x000007ff
 80028bc:	ff7fffff 	.word	0xff7fffff
 80028c0:	000007fe 	.word	0x000007fe
 80028c4:	464a      	mov	r2, r9
 80028c6:	1814      	adds	r4, r2, r0
 80028c8:	4284      	cmp	r4, r0
 80028ca:	4192      	sbcs	r2, r2
 80028cc:	185b      	adds	r3, r3, r1
 80028ce:	4698      	mov	r8, r3
 80028d0:	4252      	negs	r2, r2
 80028d2:	4490      	add	r8, r2
 80028d4:	e5e9      	b.n	80024aa <__aeabi_dsub+0x2d6>
 80028d6:	4642      	mov	r2, r8
 80028d8:	4322      	orrs	r2, r4
 80028da:	d100      	bne.n	80028de <__aeabi_dsub+0x70a>
 80028dc:	e6a6      	b.n	800262c <__aeabi_dsub+0x458>
 80028de:	e5ea      	b.n	80024b6 <__aeabi_dsub+0x2e2>
 80028e0:	074b      	lsls	r3, r1, #29
 80028e2:	08c2      	lsrs	r2, r0, #3
 80028e4:	431a      	orrs	r2, r3
 80028e6:	08cb      	lsrs	r3, r1, #3
 80028e8:	e632      	b.n	8002550 <__aeabi_dsub+0x37c>
 80028ea:	2200      	movs	r2, #0
 80028ec:	4901      	ldr	r1, [pc, #4]	; (80028f4 <__aeabi_dsub+0x720>)
 80028ee:	0013      	movs	r3, r2
 80028f0:	e514      	b.n	800231c <__aeabi_dsub+0x148>
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	000007ff 	.word	0x000007ff

080028f8 <__aeabi_d2iz>:
 80028f8:	000a      	movs	r2, r1
 80028fa:	b530      	push	{r4, r5, lr}
 80028fc:	4c13      	ldr	r4, [pc, #76]	; (800294c <__aeabi_d2iz+0x54>)
 80028fe:	0053      	lsls	r3, r2, #1
 8002900:	0309      	lsls	r1, r1, #12
 8002902:	0005      	movs	r5, r0
 8002904:	0b09      	lsrs	r1, r1, #12
 8002906:	2000      	movs	r0, #0
 8002908:	0d5b      	lsrs	r3, r3, #21
 800290a:	0fd2      	lsrs	r2, r2, #31
 800290c:	42a3      	cmp	r3, r4
 800290e:	dd04      	ble.n	800291a <__aeabi_d2iz+0x22>
 8002910:	480f      	ldr	r0, [pc, #60]	; (8002950 <__aeabi_d2iz+0x58>)
 8002912:	4283      	cmp	r3, r0
 8002914:	dd02      	ble.n	800291c <__aeabi_d2iz+0x24>
 8002916:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <__aeabi_d2iz+0x5c>)
 8002918:	18d0      	adds	r0, r2, r3
 800291a:	bd30      	pop	{r4, r5, pc}
 800291c:	2080      	movs	r0, #128	; 0x80
 800291e:	0340      	lsls	r0, r0, #13
 8002920:	4301      	orrs	r1, r0
 8002922:	480d      	ldr	r0, [pc, #52]	; (8002958 <__aeabi_d2iz+0x60>)
 8002924:	1ac0      	subs	r0, r0, r3
 8002926:	281f      	cmp	r0, #31
 8002928:	dd08      	ble.n	800293c <__aeabi_d2iz+0x44>
 800292a:	480c      	ldr	r0, [pc, #48]	; (800295c <__aeabi_d2iz+0x64>)
 800292c:	1ac3      	subs	r3, r0, r3
 800292e:	40d9      	lsrs	r1, r3
 8002930:	000b      	movs	r3, r1
 8002932:	4258      	negs	r0, r3
 8002934:	2a00      	cmp	r2, #0
 8002936:	d1f0      	bne.n	800291a <__aeabi_d2iz+0x22>
 8002938:	0018      	movs	r0, r3
 800293a:	e7ee      	b.n	800291a <__aeabi_d2iz+0x22>
 800293c:	4c08      	ldr	r4, [pc, #32]	; (8002960 <__aeabi_d2iz+0x68>)
 800293e:	40c5      	lsrs	r5, r0
 8002940:	46a4      	mov	ip, r4
 8002942:	4463      	add	r3, ip
 8002944:	4099      	lsls	r1, r3
 8002946:	000b      	movs	r3, r1
 8002948:	432b      	orrs	r3, r5
 800294a:	e7f2      	b.n	8002932 <__aeabi_d2iz+0x3a>
 800294c:	000003fe 	.word	0x000003fe
 8002950:	0000041d 	.word	0x0000041d
 8002954:	7fffffff 	.word	0x7fffffff
 8002958:	00000433 	.word	0x00000433
 800295c:	00000413 	.word	0x00000413
 8002960:	fffffbed 	.word	0xfffffbed

08002964 <__aeabi_i2d>:
 8002964:	b570      	push	{r4, r5, r6, lr}
 8002966:	2800      	cmp	r0, #0
 8002968:	d016      	beq.n	8002998 <__aeabi_i2d+0x34>
 800296a:	17c3      	asrs	r3, r0, #31
 800296c:	18c5      	adds	r5, r0, r3
 800296e:	405d      	eors	r5, r3
 8002970:	0fc4      	lsrs	r4, r0, #31
 8002972:	0028      	movs	r0, r5
 8002974:	f000 f8b2 	bl	8002adc <__clzsi2>
 8002978:	4a11      	ldr	r2, [pc, #68]	; (80029c0 <__aeabi_i2d+0x5c>)
 800297a:	1a12      	subs	r2, r2, r0
 800297c:	280a      	cmp	r0, #10
 800297e:	dc16      	bgt.n	80029ae <__aeabi_i2d+0x4a>
 8002980:	0003      	movs	r3, r0
 8002982:	002e      	movs	r6, r5
 8002984:	3315      	adds	r3, #21
 8002986:	409e      	lsls	r6, r3
 8002988:	230b      	movs	r3, #11
 800298a:	1a18      	subs	r0, r3, r0
 800298c:	40c5      	lsrs	r5, r0
 800298e:	0553      	lsls	r3, r2, #21
 8002990:	032d      	lsls	r5, r5, #12
 8002992:	0b2d      	lsrs	r5, r5, #12
 8002994:	0d5b      	lsrs	r3, r3, #21
 8002996:	e003      	b.n	80029a0 <__aeabi_i2d+0x3c>
 8002998:	2400      	movs	r4, #0
 800299a:	2300      	movs	r3, #0
 800299c:	2500      	movs	r5, #0
 800299e:	2600      	movs	r6, #0
 80029a0:	051b      	lsls	r3, r3, #20
 80029a2:	432b      	orrs	r3, r5
 80029a4:	07e4      	lsls	r4, r4, #31
 80029a6:	4323      	orrs	r3, r4
 80029a8:	0030      	movs	r0, r6
 80029aa:	0019      	movs	r1, r3
 80029ac:	bd70      	pop	{r4, r5, r6, pc}
 80029ae:	380b      	subs	r0, #11
 80029b0:	4085      	lsls	r5, r0
 80029b2:	0553      	lsls	r3, r2, #21
 80029b4:	032d      	lsls	r5, r5, #12
 80029b6:	2600      	movs	r6, #0
 80029b8:	0b2d      	lsrs	r5, r5, #12
 80029ba:	0d5b      	lsrs	r3, r3, #21
 80029bc:	e7f0      	b.n	80029a0 <__aeabi_i2d+0x3c>
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	0000041e 	.word	0x0000041e

080029c4 <__udivsi3>:
 80029c4:	2200      	movs	r2, #0
 80029c6:	0843      	lsrs	r3, r0, #1
 80029c8:	428b      	cmp	r3, r1
 80029ca:	d374      	bcc.n	8002ab6 <__udivsi3+0xf2>
 80029cc:	0903      	lsrs	r3, r0, #4
 80029ce:	428b      	cmp	r3, r1
 80029d0:	d35f      	bcc.n	8002a92 <__udivsi3+0xce>
 80029d2:	0a03      	lsrs	r3, r0, #8
 80029d4:	428b      	cmp	r3, r1
 80029d6:	d344      	bcc.n	8002a62 <__udivsi3+0x9e>
 80029d8:	0b03      	lsrs	r3, r0, #12
 80029da:	428b      	cmp	r3, r1
 80029dc:	d328      	bcc.n	8002a30 <__udivsi3+0x6c>
 80029de:	0c03      	lsrs	r3, r0, #16
 80029e0:	428b      	cmp	r3, r1
 80029e2:	d30d      	bcc.n	8002a00 <__udivsi3+0x3c>
 80029e4:	22ff      	movs	r2, #255	; 0xff
 80029e6:	0209      	lsls	r1, r1, #8
 80029e8:	ba12      	rev	r2, r2
 80029ea:	0c03      	lsrs	r3, r0, #16
 80029ec:	428b      	cmp	r3, r1
 80029ee:	d302      	bcc.n	80029f6 <__udivsi3+0x32>
 80029f0:	1212      	asrs	r2, r2, #8
 80029f2:	0209      	lsls	r1, r1, #8
 80029f4:	d065      	beq.n	8002ac2 <__udivsi3+0xfe>
 80029f6:	0b03      	lsrs	r3, r0, #12
 80029f8:	428b      	cmp	r3, r1
 80029fa:	d319      	bcc.n	8002a30 <__udivsi3+0x6c>
 80029fc:	e000      	b.n	8002a00 <__udivsi3+0x3c>
 80029fe:	0a09      	lsrs	r1, r1, #8
 8002a00:	0bc3      	lsrs	r3, r0, #15
 8002a02:	428b      	cmp	r3, r1
 8002a04:	d301      	bcc.n	8002a0a <__udivsi3+0x46>
 8002a06:	03cb      	lsls	r3, r1, #15
 8002a08:	1ac0      	subs	r0, r0, r3
 8002a0a:	4152      	adcs	r2, r2
 8002a0c:	0b83      	lsrs	r3, r0, #14
 8002a0e:	428b      	cmp	r3, r1
 8002a10:	d301      	bcc.n	8002a16 <__udivsi3+0x52>
 8002a12:	038b      	lsls	r3, r1, #14
 8002a14:	1ac0      	subs	r0, r0, r3
 8002a16:	4152      	adcs	r2, r2
 8002a18:	0b43      	lsrs	r3, r0, #13
 8002a1a:	428b      	cmp	r3, r1
 8002a1c:	d301      	bcc.n	8002a22 <__udivsi3+0x5e>
 8002a1e:	034b      	lsls	r3, r1, #13
 8002a20:	1ac0      	subs	r0, r0, r3
 8002a22:	4152      	adcs	r2, r2
 8002a24:	0b03      	lsrs	r3, r0, #12
 8002a26:	428b      	cmp	r3, r1
 8002a28:	d301      	bcc.n	8002a2e <__udivsi3+0x6a>
 8002a2a:	030b      	lsls	r3, r1, #12
 8002a2c:	1ac0      	subs	r0, r0, r3
 8002a2e:	4152      	adcs	r2, r2
 8002a30:	0ac3      	lsrs	r3, r0, #11
 8002a32:	428b      	cmp	r3, r1
 8002a34:	d301      	bcc.n	8002a3a <__udivsi3+0x76>
 8002a36:	02cb      	lsls	r3, r1, #11
 8002a38:	1ac0      	subs	r0, r0, r3
 8002a3a:	4152      	adcs	r2, r2
 8002a3c:	0a83      	lsrs	r3, r0, #10
 8002a3e:	428b      	cmp	r3, r1
 8002a40:	d301      	bcc.n	8002a46 <__udivsi3+0x82>
 8002a42:	028b      	lsls	r3, r1, #10
 8002a44:	1ac0      	subs	r0, r0, r3
 8002a46:	4152      	adcs	r2, r2
 8002a48:	0a43      	lsrs	r3, r0, #9
 8002a4a:	428b      	cmp	r3, r1
 8002a4c:	d301      	bcc.n	8002a52 <__udivsi3+0x8e>
 8002a4e:	024b      	lsls	r3, r1, #9
 8002a50:	1ac0      	subs	r0, r0, r3
 8002a52:	4152      	adcs	r2, r2
 8002a54:	0a03      	lsrs	r3, r0, #8
 8002a56:	428b      	cmp	r3, r1
 8002a58:	d301      	bcc.n	8002a5e <__udivsi3+0x9a>
 8002a5a:	020b      	lsls	r3, r1, #8
 8002a5c:	1ac0      	subs	r0, r0, r3
 8002a5e:	4152      	adcs	r2, r2
 8002a60:	d2cd      	bcs.n	80029fe <__udivsi3+0x3a>
 8002a62:	09c3      	lsrs	r3, r0, #7
 8002a64:	428b      	cmp	r3, r1
 8002a66:	d301      	bcc.n	8002a6c <__udivsi3+0xa8>
 8002a68:	01cb      	lsls	r3, r1, #7
 8002a6a:	1ac0      	subs	r0, r0, r3
 8002a6c:	4152      	adcs	r2, r2
 8002a6e:	0983      	lsrs	r3, r0, #6
 8002a70:	428b      	cmp	r3, r1
 8002a72:	d301      	bcc.n	8002a78 <__udivsi3+0xb4>
 8002a74:	018b      	lsls	r3, r1, #6
 8002a76:	1ac0      	subs	r0, r0, r3
 8002a78:	4152      	adcs	r2, r2
 8002a7a:	0943      	lsrs	r3, r0, #5
 8002a7c:	428b      	cmp	r3, r1
 8002a7e:	d301      	bcc.n	8002a84 <__udivsi3+0xc0>
 8002a80:	014b      	lsls	r3, r1, #5
 8002a82:	1ac0      	subs	r0, r0, r3
 8002a84:	4152      	adcs	r2, r2
 8002a86:	0903      	lsrs	r3, r0, #4
 8002a88:	428b      	cmp	r3, r1
 8002a8a:	d301      	bcc.n	8002a90 <__udivsi3+0xcc>
 8002a8c:	010b      	lsls	r3, r1, #4
 8002a8e:	1ac0      	subs	r0, r0, r3
 8002a90:	4152      	adcs	r2, r2
 8002a92:	08c3      	lsrs	r3, r0, #3
 8002a94:	428b      	cmp	r3, r1
 8002a96:	d301      	bcc.n	8002a9c <__udivsi3+0xd8>
 8002a98:	00cb      	lsls	r3, r1, #3
 8002a9a:	1ac0      	subs	r0, r0, r3
 8002a9c:	4152      	adcs	r2, r2
 8002a9e:	0883      	lsrs	r3, r0, #2
 8002aa0:	428b      	cmp	r3, r1
 8002aa2:	d301      	bcc.n	8002aa8 <__udivsi3+0xe4>
 8002aa4:	008b      	lsls	r3, r1, #2
 8002aa6:	1ac0      	subs	r0, r0, r3
 8002aa8:	4152      	adcs	r2, r2
 8002aaa:	0843      	lsrs	r3, r0, #1
 8002aac:	428b      	cmp	r3, r1
 8002aae:	d301      	bcc.n	8002ab4 <__udivsi3+0xf0>
 8002ab0:	004b      	lsls	r3, r1, #1
 8002ab2:	1ac0      	subs	r0, r0, r3
 8002ab4:	4152      	adcs	r2, r2
 8002ab6:	1a41      	subs	r1, r0, r1
 8002ab8:	d200      	bcs.n	8002abc <__udivsi3+0xf8>
 8002aba:	4601      	mov	r1, r0
 8002abc:	4152      	adcs	r2, r2
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4770      	bx	lr
 8002ac2:	e7ff      	b.n	8002ac4 <__udivsi3+0x100>
 8002ac4:	b501      	push	{r0, lr}
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f000 f806 	bl	8002ad8 <__aeabi_idiv0>
 8002acc:	bd02      	pop	{r1, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)

08002ad0 <__aeabi_uidivmod>:
 8002ad0:	2900      	cmp	r1, #0
 8002ad2:	d0f7      	beq.n	8002ac4 <__udivsi3+0x100>
 8002ad4:	e776      	b.n	80029c4 <__udivsi3>
 8002ad6:	4770      	bx	lr

08002ad8 <__aeabi_idiv0>:
 8002ad8:	4770      	bx	lr
 8002ada:	46c0      	nop			; (mov r8, r8)

08002adc <__clzsi2>:
 8002adc:	211c      	movs	r1, #28
 8002ade:	2301      	movs	r3, #1
 8002ae0:	041b      	lsls	r3, r3, #16
 8002ae2:	4298      	cmp	r0, r3
 8002ae4:	d301      	bcc.n	8002aea <__clzsi2+0xe>
 8002ae6:	0c00      	lsrs	r0, r0, #16
 8002ae8:	3910      	subs	r1, #16
 8002aea:	0a1b      	lsrs	r3, r3, #8
 8002aec:	4298      	cmp	r0, r3
 8002aee:	d301      	bcc.n	8002af4 <__clzsi2+0x18>
 8002af0:	0a00      	lsrs	r0, r0, #8
 8002af2:	3908      	subs	r1, #8
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	4298      	cmp	r0, r3
 8002af8:	d301      	bcc.n	8002afe <__clzsi2+0x22>
 8002afa:	0900      	lsrs	r0, r0, #4
 8002afc:	3904      	subs	r1, #4
 8002afe:	a202      	add	r2, pc, #8	; (adr r2, 8002b08 <__clzsi2+0x2c>)
 8002b00:	5c10      	ldrb	r0, [r2, r0]
 8002b02:	1840      	adds	r0, r0, r1
 8002b04:	4770      	bx	lr
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	02020304 	.word	0x02020304
 8002b0c:	01010101 	.word	0x01010101
	...

08002b18 <__aeabi_f2uiz>:
 8002b18:	219e      	movs	r1, #158	; 0x9e
 8002b1a:	b510      	push	{r4, lr}
 8002b1c:	05c9      	lsls	r1, r1, #23
 8002b1e:	1c04      	adds	r4, r0, #0
 8002b20:	f7fd fbd0 	bl	80002c4 <__aeabi_fcmpge>
 8002b24:	2800      	cmp	r0, #0
 8002b26:	d103      	bne.n	8002b30 <__aeabi_f2uiz+0x18>
 8002b28:	1c20      	adds	r0, r4, #0
 8002b2a:	f7fe f911 	bl	8000d50 <__aeabi_f2iz>
 8002b2e:	bd10      	pop	{r4, pc}
 8002b30:	219e      	movs	r1, #158	; 0x9e
 8002b32:	1c20      	adds	r0, r4, #0
 8002b34:	05c9      	lsls	r1, r1, #23
 8002b36:	f7fd ff43 	bl	80009c0 <__aeabi_fsub>
 8002b3a:	f7fe f909 	bl	8000d50 <__aeabi_f2iz>
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	061b      	lsls	r3, r3, #24
 8002b42:	469c      	mov	ip, r3
 8002b44:	4460      	add	r0, ip
 8002b46:	e7f2      	b.n	8002b2e <__aeabi_f2uiz+0x16>

08002b48 <__aeabi_fdiv>:
 8002b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b4a:	464f      	mov	r7, r9
 8002b4c:	4646      	mov	r6, r8
 8002b4e:	46d6      	mov	lr, sl
 8002b50:	0245      	lsls	r5, r0, #9
 8002b52:	b5c0      	push	{r6, r7, lr}
 8002b54:	0047      	lsls	r7, r0, #1
 8002b56:	1c0c      	adds	r4, r1, #0
 8002b58:	0a6d      	lsrs	r5, r5, #9
 8002b5a:	0e3f      	lsrs	r7, r7, #24
 8002b5c:	0fc6      	lsrs	r6, r0, #31
 8002b5e:	2f00      	cmp	r7, #0
 8002b60:	d066      	beq.n	8002c30 <__aeabi_fdiv+0xe8>
 8002b62:	2fff      	cmp	r7, #255	; 0xff
 8002b64:	d06c      	beq.n	8002c40 <__aeabi_fdiv+0xf8>
 8002b66:	2300      	movs	r3, #0
 8002b68:	00ea      	lsls	r2, r5, #3
 8002b6a:	2580      	movs	r5, #128	; 0x80
 8002b6c:	4699      	mov	r9, r3
 8002b6e:	469a      	mov	sl, r3
 8002b70:	04ed      	lsls	r5, r5, #19
 8002b72:	4315      	orrs	r5, r2
 8002b74:	3f7f      	subs	r7, #127	; 0x7f
 8002b76:	0260      	lsls	r0, r4, #9
 8002b78:	0061      	lsls	r1, r4, #1
 8002b7a:	0a43      	lsrs	r3, r0, #9
 8002b7c:	4698      	mov	r8, r3
 8002b7e:	0e09      	lsrs	r1, r1, #24
 8002b80:	0fe4      	lsrs	r4, r4, #31
 8002b82:	2900      	cmp	r1, #0
 8002b84:	d048      	beq.n	8002c18 <__aeabi_fdiv+0xd0>
 8002b86:	29ff      	cmp	r1, #255	; 0xff
 8002b88:	d010      	beq.n	8002bac <__aeabi_fdiv+0x64>
 8002b8a:	2280      	movs	r2, #128	; 0x80
 8002b8c:	00d8      	lsls	r0, r3, #3
 8002b8e:	04d2      	lsls	r2, r2, #19
 8002b90:	4302      	orrs	r2, r0
 8002b92:	4690      	mov	r8, r2
 8002b94:	2000      	movs	r0, #0
 8002b96:	397f      	subs	r1, #127	; 0x7f
 8002b98:	464a      	mov	r2, r9
 8002b9a:	0033      	movs	r3, r6
 8002b9c:	1a7f      	subs	r7, r7, r1
 8002b9e:	4302      	orrs	r2, r0
 8002ba0:	496c      	ldr	r1, [pc, #432]	; (8002d54 <__aeabi_fdiv+0x20c>)
 8002ba2:	0092      	lsls	r2, r2, #2
 8002ba4:	588a      	ldr	r2, [r1, r2]
 8002ba6:	4063      	eors	r3, r4
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	4697      	mov	pc, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d16d      	bne.n	8002c8c <__aeabi_fdiv+0x144>
 8002bb0:	2002      	movs	r0, #2
 8002bb2:	3fff      	subs	r7, #255	; 0xff
 8002bb4:	e033      	b.n	8002c1e <__aeabi_fdiv+0xd6>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	4698      	mov	r8, r3
 8002bba:	0026      	movs	r6, r4
 8002bbc:	4645      	mov	r5, r8
 8002bbe:	4682      	mov	sl, r0
 8002bc0:	4653      	mov	r3, sl
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d100      	bne.n	8002bc8 <__aeabi_fdiv+0x80>
 8002bc6:	e07f      	b.n	8002cc8 <__aeabi_fdiv+0x180>
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d100      	bne.n	8002bce <__aeabi_fdiv+0x86>
 8002bcc:	e094      	b.n	8002cf8 <__aeabi_fdiv+0x1b0>
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d017      	beq.n	8002c02 <__aeabi_fdiv+0xba>
 8002bd2:	0038      	movs	r0, r7
 8002bd4:	307f      	adds	r0, #127	; 0x7f
 8002bd6:	2800      	cmp	r0, #0
 8002bd8:	dd5f      	ble.n	8002c9a <__aeabi_fdiv+0x152>
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d004      	beq.n	8002be8 <__aeabi_fdiv+0xa0>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d000      	beq.n	8002be8 <__aeabi_fdiv+0xa0>
 8002be6:	3504      	adds	r5, #4
 8002be8:	012b      	lsls	r3, r5, #4
 8002bea:	d503      	bpl.n	8002bf4 <__aeabi_fdiv+0xac>
 8002bec:	0038      	movs	r0, r7
 8002bee:	4b5a      	ldr	r3, [pc, #360]	; (8002d58 <__aeabi_fdiv+0x210>)
 8002bf0:	3080      	adds	r0, #128	; 0x80
 8002bf2:	401d      	ands	r5, r3
 8002bf4:	28fe      	cmp	r0, #254	; 0xfe
 8002bf6:	dc67      	bgt.n	8002cc8 <__aeabi_fdiv+0x180>
 8002bf8:	01ad      	lsls	r5, r5, #6
 8002bfa:	0a6d      	lsrs	r5, r5, #9
 8002bfc:	b2c0      	uxtb	r0, r0
 8002bfe:	e002      	b.n	8002c06 <__aeabi_fdiv+0xbe>
 8002c00:	001e      	movs	r6, r3
 8002c02:	2000      	movs	r0, #0
 8002c04:	2500      	movs	r5, #0
 8002c06:	05c0      	lsls	r0, r0, #23
 8002c08:	4328      	orrs	r0, r5
 8002c0a:	07f6      	lsls	r6, r6, #31
 8002c0c:	4330      	orrs	r0, r6
 8002c0e:	bce0      	pop	{r5, r6, r7}
 8002c10:	46ba      	mov	sl, r7
 8002c12:	46b1      	mov	r9, r6
 8002c14:	46a8      	mov	r8, r5
 8002c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d12b      	bne.n	8002c74 <__aeabi_fdiv+0x12c>
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	464a      	mov	r2, r9
 8002c20:	0033      	movs	r3, r6
 8002c22:	494e      	ldr	r1, [pc, #312]	; (8002d5c <__aeabi_fdiv+0x214>)
 8002c24:	4302      	orrs	r2, r0
 8002c26:	0092      	lsls	r2, r2, #2
 8002c28:	588a      	ldr	r2, [r1, r2]
 8002c2a:	4063      	eors	r3, r4
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	4697      	mov	pc, r2
 8002c30:	2d00      	cmp	r5, #0
 8002c32:	d113      	bne.n	8002c5c <__aeabi_fdiv+0x114>
 8002c34:	2304      	movs	r3, #4
 8002c36:	4699      	mov	r9, r3
 8002c38:	3b03      	subs	r3, #3
 8002c3a:	2700      	movs	r7, #0
 8002c3c:	469a      	mov	sl, r3
 8002c3e:	e79a      	b.n	8002b76 <__aeabi_fdiv+0x2e>
 8002c40:	2d00      	cmp	r5, #0
 8002c42:	d105      	bne.n	8002c50 <__aeabi_fdiv+0x108>
 8002c44:	2308      	movs	r3, #8
 8002c46:	4699      	mov	r9, r3
 8002c48:	3b06      	subs	r3, #6
 8002c4a:	27ff      	movs	r7, #255	; 0xff
 8002c4c:	469a      	mov	sl, r3
 8002c4e:	e792      	b.n	8002b76 <__aeabi_fdiv+0x2e>
 8002c50:	230c      	movs	r3, #12
 8002c52:	4699      	mov	r9, r3
 8002c54:	3b09      	subs	r3, #9
 8002c56:	27ff      	movs	r7, #255	; 0xff
 8002c58:	469a      	mov	sl, r3
 8002c5a:	e78c      	b.n	8002b76 <__aeabi_fdiv+0x2e>
 8002c5c:	0028      	movs	r0, r5
 8002c5e:	f7ff ff3d 	bl	8002adc <__clzsi2>
 8002c62:	2776      	movs	r7, #118	; 0x76
 8002c64:	1f43      	subs	r3, r0, #5
 8002c66:	409d      	lsls	r5, r3
 8002c68:	2300      	movs	r3, #0
 8002c6a:	427f      	negs	r7, r7
 8002c6c:	4699      	mov	r9, r3
 8002c6e:	469a      	mov	sl, r3
 8002c70:	1a3f      	subs	r7, r7, r0
 8002c72:	e780      	b.n	8002b76 <__aeabi_fdiv+0x2e>
 8002c74:	0018      	movs	r0, r3
 8002c76:	f7ff ff31 	bl	8002adc <__clzsi2>
 8002c7a:	4642      	mov	r2, r8
 8002c7c:	1f43      	subs	r3, r0, #5
 8002c7e:	2176      	movs	r1, #118	; 0x76
 8002c80:	409a      	lsls	r2, r3
 8002c82:	4249      	negs	r1, r1
 8002c84:	1a09      	subs	r1, r1, r0
 8002c86:	4690      	mov	r8, r2
 8002c88:	2000      	movs	r0, #0
 8002c8a:	e785      	b.n	8002b98 <__aeabi_fdiv+0x50>
 8002c8c:	21ff      	movs	r1, #255	; 0xff
 8002c8e:	2003      	movs	r0, #3
 8002c90:	e782      	b.n	8002b98 <__aeabi_fdiv+0x50>
 8002c92:	001e      	movs	r6, r3
 8002c94:	20ff      	movs	r0, #255	; 0xff
 8002c96:	2500      	movs	r5, #0
 8002c98:	e7b5      	b.n	8002c06 <__aeabi_fdiv+0xbe>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	1a1b      	subs	r3, r3, r0
 8002c9e:	2b1b      	cmp	r3, #27
 8002ca0:	dcaf      	bgt.n	8002c02 <__aeabi_fdiv+0xba>
 8002ca2:	379e      	adds	r7, #158	; 0x9e
 8002ca4:	0029      	movs	r1, r5
 8002ca6:	40bd      	lsls	r5, r7
 8002ca8:	40d9      	lsrs	r1, r3
 8002caa:	1e6a      	subs	r2, r5, #1
 8002cac:	4195      	sbcs	r5, r2
 8002cae:	430d      	orrs	r5, r1
 8002cb0:	076b      	lsls	r3, r5, #29
 8002cb2:	d004      	beq.n	8002cbe <__aeabi_fdiv+0x176>
 8002cb4:	230f      	movs	r3, #15
 8002cb6:	402b      	ands	r3, r5
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d000      	beq.n	8002cbe <__aeabi_fdiv+0x176>
 8002cbc:	3504      	adds	r5, #4
 8002cbe:	016b      	lsls	r3, r5, #5
 8002cc0:	d544      	bpl.n	8002d4c <__aeabi_fdiv+0x204>
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	2500      	movs	r5, #0
 8002cc6:	e79e      	b.n	8002c06 <__aeabi_fdiv+0xbe>
 8002cc8:	20ff      	movs	r0, #255	; 0xff
 8002cca:	2500      	movs	r5, #0
 8002ccc:	e79b      	b.n	8002c06 <__aeabi_fdiv+0xbe>
 8002cce:	2580      	movs	r5, #128	; 0x80
 8002cd0:	2600      	movs	r6, #0
 8002cd2:	20ff      	movs	r0, #255	; 0xff
 8002cd4:	03ed      	lsls	r5, r5, #15
 8002cd6:	e796      	b.n	8002c06 <__aeabi_fdiv+0xbe>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	4698      	mov	r8, r3
 8002cdc:	2080      	movs	r0, #128	; 0x80
 8002cde:	03c0      	lsls	r0, r0, #15
 8002ce0:	4205      	tst	r5, r0
 8002ce2:	d009      	beq.n	8002cf8 <__aeabi_fdiv+0x1b0>
 8002ce4:	4643      	mov	r3, r8
 8002ce6:	4203      	tst	r3, r0
 8002ce8:	d106      	bne.n	8002cf8 <__aeabi_fdiv+0x1b0>
 8002cea:	4645      	mov	r5, r8
 8002cec:	4305      	orrs	r5, r0
 8002cee:	026d      	lsls	r5, r5, #9
 8002cf0:	0026      	movs	r6, r4
 8002cf2:	20ff      	movs	r0, #255	; 0xff
 8002cf4:	0a6d      	lsrs	r5, r5, #9
 8002cf6:	e786      	b.n	8002c06 <__aeabi_fdiv+0xbe>
 8002cf8:	2080      	movs	r0, #128	; 0x80
 8002cfa:	03c0      	lsls	r0, r0, #15
 8002cfc:	4305      	orrs	r5, r0
 8002cfe:	026d      	lsls	r5, r5, #9
 8002d00:	20ff      	movs	r0, #255	; 0xff
 8002d02:	0a6d      	lsrs	r5, r5, #9
 8002d04:	e77f      	b.n	8002c06 <__aeabi_fdiv+0xbe>
 8002d06:	4641      	mov	r1, r8
 8002d08:	016a      	lsls	r2, r5, #5
 8002d0a:	0148      	lsls	r0, r1, #5
 8002d0c:	4282      	cmp	r2, r0
 8002d0e:	d219      	bcs.n	8002d44 <__aeabi_fdiv+0x1fc>
 8002d10:	211b      	movs	r1, #27
 8002d12:	2500      	movs	r5, #0
 8002d14:	3f01      	subs	r7, #1
 8002d16:	2601      	movs	r6, #1
 8002d18:	0014      	movs	r4, r2
 8002d1a:	006d      	lsls	r5, r5, #1
 8002d1c:	0052      	lsls	r2, r2, #1
 8002d1e:	2c00      	cmp	r4, #0
 8002d20:	db01      	blt.n	8002d26 <__aeabi_fdiv+0x1de>
 8002d22:	4290      	cmp	r0, r2
 8002d24:	d801      	bhi.n	8002d2a <__aeabi_fdiv+0x1e2>
 8002d26:	1a12      	subs	r2, r2, r0
 8002d28:	4335      	orrs	r5, r6
 8002d2a:	3901      	subs	r1, #1
 8002d2c:	2900      	cmp	r1, #0
 8002d2e:	d1f3      	bne.n	8002d18 <__aeabi_fdiv+0x1d0>
 8002d30:	1e50      	subs	r0, r2, #1
 8002d32:	4182      	sbcs	r2, r0
 8002d34:	0038      	movs	r0, r7
 8002d36:	307f      	adds	r0, #127	; 0x7f
 8002d38:	001e      	movs	r6, r3
 8002d3a:	4315      	orrs	r5, r2
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	dd00      	ble.n	8002d42 <__aeabi_fdiv+0x1fa>
 8002d40:	e74b      	b.n	8002bda <__aeabi_fdiv+0x92>
 8002d42:	e7aa      	b.n	8002c9a <__aeabi_fdiv+0x152>
 8002d44:	211a      	movs	r1, #26
 8002d46:	2501      	movs	r5, #1
 8002d48:	1a12      	subs	r2, r2, r0
 8002d4a:	e7e4      	b.n	8002d16 <__aeabi_fdiv+0x1ce>
 8002d4c:	01ad      	lsls	r5, r5, #6
 8002d4e:	2000      	movs	r0, #0
 8002d50:	0a6d      	lsrs	r5, r5, #9
 8002d52:	e758      	b.n	8002c06 <__aeabi_fdiv+0xbe>
 8002d54:	0800af58 	.word	0x0800af58
 8002d58:	f7ffffff 	.word	0xf7ffffff
 8002d5c:	0800af98 	.word	0x0800af98

08002d60 <__aeabi_ui2f>:
 8002d60:	b570      	push	{r4, r5, r6, lr}
 8002d62:	1e05      	subs	r5, r0, #0
 8002d64:	d00e      	beq.n	8002d84 <__aeabi_ui2f+0x24>
 8002d66:	f7ff feb9 	bl	8002adc <__clzsi2>
 8002d6a:	239e      	movs	r3, #158	; 0x9e
 8002d6c:	0004      	movs	r4, r0
 8002d6e:	1a1b      	subs	r3, r3, r0
 8002d70:	2b96      	cmp	r3, #150	; 0x96
 8002d72:	dc0c      	bgt.n	8002d8e <__aeabi_ui2f+0x2e>
 8002d74:	2808      	cmp	r0, #8
 8002d76:	dd01      	ble.n	8002d7c <__aeabi_ui2f+0x1c>
 8002d78:	3c08      	subs	r4, #8
 8002d7a:	40a5      	lsls	r5, r4
 8002d7c:	026d      	lsls	r5, r5, #9
 8002d7e:	0a6d      	lsrs	r5, r5, #9
 8002d80:	b2d8      	uxtb	r0, r3
 8002d82:	e001      	b.n	8002d88 <__aeabi_ui2f+0x28>
 8002d84:	2000      	movs	r0, #0
 8002d86:	2500      	movs	r5, #0
 8002d88:	05c0      	lsls	r0, r0, #23
 8002d8a:	4328      	orrs	r0, r5
 8002d8c:	bd70      	pop	{r4, r5, r6, pc}
 8002d8e:	2b99      	cmp	r3, #153	; 0x99
 8002d90:	dd09      	ble.n	8002da6 <__aeabi_ui2f+0x46>
 8002d92:	0002      	movs	r2, r0
 8002d94:	0029      	movs	r1, r5
 8002d96:	321b      	adds	r2, #27
 8002d98:	4091      	lsls	r1, r2
 8002d9a:	1e4a      	subs	r2, r1, #1
 8002d9c:	4191      	sbcs	r1, r2
 8002d9e:	2205      	movs	r2, #5
 8002da0:	1a12      	subs	r2, r2, r0
 8002da2:	40d5      	lsrs	r5, r2
 8002da4:	430d      	orrs	r5, r1
 8002da6:	2c05      	cmp	r4, #5
 8002da8:	dd01      	ble.n	8002dae <__aeabi_ui2f+0x4e>
 8002daa:	1f62      	subs	r2, r4, #5
 8002dac:	4095      	lsls	r5, r2
 8002dae:	0029      	movs	r1, r5
 8002db0:	4e08      	ldr	r6, [pc, #32]	; (8002dd4 <__aeabi_ui2f+0x74>)
 8002db2:	4031      	ands	r1, r6
 8002db4:	076a      	lsls	r2, r5, #29
 8002db6:	d009      	beq.n	8002dcc <__aeabi_ui2f+0x6c>
 8002db8:	200f      	movs	r0, #15
 8002dba:	4028      	ands	r0, r5
 8002dbc:	2804      	cmp	r0, #4
 8002dbe:	d005      	beq.n	8002dcc <__aeabi_ui2f+0x6c>
 8002dc0:	3104      	adds	r1, #4
 8002dc2:	014a      	lsls	r2, r1, #5
 8002dc4:	d502      	bpl.n	8002dcc <__aeabi_ui2f+0x6c>
 8002dc6:	239f      	movs	r3, #159	; 0x9f
 8002dc8:	4031      	ands	r1, r6
 8002dca:	1b1b      	subs	r3, r3, r4
 8002dcc:	0189      	lsls	r1, r1, #6
 8002dce:	0a4d      	lsrs	r5, r1, #9
 8002dd0:	b2d8      	uxtb	r0, r3
 8002dd2:	e7d9      	b.n	8002d88 <__aeabi_ui2f+0x28>
 8002dd4:	fbffffff 	.word	0xfbffffff

08002dd8 <__aeabi_f2d>:
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	0043      	lsls	r3, r0, #1
 8002ddc:	0246      	lsls	r6, r0, #9
 8002dde:	0fc4      	lsrs	r4, r0, #31
 8002de0:	20fe      	movs	r0, #254	; 0xfe
 8002de2:	0e1b      	lsrs	r3, r3, #24
 8002de4:	1c59      	adds	r1, r3, #1
 8002de6:	0a75      	lsrs	r5, r6, #9
 8002de8:	4208      	tst	r0, r1
 8002dea:	d00c      	beq.n	8002e06 <__aeabi_f2d+0x2e>
 8002dec:	22e0      	movs	r2, #224	; 0xe0
 8002dee:	0092      	lsls	r2, r2, #2
 8002df0:	4694      	mov	ip, r2
 8002df2:	076d      	lsls	r5, r5, #29
 8002df4:	0b36      	lsrs	r6, r6, #12
 8002df6:	4463      	add	r3, ip
 8002df8:	051b      	lsls	r3, r3, #20
 8002dfa:	4333      	orrs	r3, r6
 8002dfc:	07e4      	lsls	r4, r4, #31
 8002dfe:	4323      	orrs	r3, r4
 8002e00:	0028      	movs	r0, r5
 8002e02:	0019      	movs	r1, r3
 8002e04:	bd70      	pop	{r4, r5, r6, pc}
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d114      	bne.n	8002e34 <__aeabi_f2d+0x5c>
 8002e0a:	2d00      	cmp	r5, #0
 8002e0c:	d01b      	beq.n	8002e46 <__aeabi_f2d+0x6e>
 8002e0e:	0028      	movs	r0, r5
 8002e10:	f7ff fe64 	bl	8002adc <__clzsi2>
 8002e14:	280a      	cmp	r0, #10
 8002e16:	dc1c      	bgt.n	8002e52 <__aeabi_f2d+0x7a>
 8002e18:	230b      	movs	r3, #11
 8002e1a:	002a      	movs	r2, r5
 8002e1c:	1a1b      	subs	r3, r3, r0
 8002e1e:	40da      	lsrs	r2, r3
 8002e20:	0003      	movs	r3, r0
 8002e22:	3315      	adds	r3, #21
 8002e24:	409d      	lsls	r5, r3
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <__aeabi_f2d+0x88>)
 8002e28:	0312      	lsls	r2, r2, #12
 8002e2a:	1a1b      	subs	r3, r3, r0
 8002e2c:	055b      	lsls	r3, r3, #21
 8002e2e:	0b16      	lsrs	r6, r2, #12
 8002e30:	0d5b      	lsrs	r3, r3, #21
 8002e32:	e7e1      	b.n	8002df8 <__aeabi_f2d+0x20>
 8002e34:	2d00      	cmp	r5, #0
 8002e36:	d009      	beq.n	8002e4c <__aeabi_f2d+0x74>
 8002e38:	0b32      	lsrs	r2, r6, #12
 8002e3a:	2680      	movs	r6, #128	; 0x80
 8002e3c:	0336      	lsls	r6, r6, #12
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <__aeabi_f2d+0x8c>)
 8002e40:	076d      	lsls	r5, r5, #29
 8002e42:	4316      	orrs	r6, r2
 8002e44:	e7d8      	b.n	8002df8 <__aeabi_f2d+0x20>
 8002e46:	2300      	movs	r3, #0
 8002e48:	2600      	movs	r6, #0
 8002e4a:	e7d5      	b.n	8002df8 <__aeabi_f2d+0x20>
 8002e4c:	2600      	movs	r6, #0
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <__aeabi_f2d+0x8c>)
 8002e50:	e7d2      	b.n	8002df8 <__aeabi_f2d+0x20>
 8002e52:	0003      	movs	r3, r0
 8002e54:	002a      	movs	r2, r5
 8002e56:	3b0b      	subs	r3, #11
 8002e58:	409a      	lsls	r2, r3
 8002e5a:	2500      	movs	r5, #0
 8002e5c:	e7e3      	b.n	8002e26 <__aeabi_f2d+0x4e>
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	00000389 	.word	0x00000389
 8002e64:	000007ff 	.word	0x000007ff

08002e68 <__aeabi_d2f>:
 8002e68:	0002      	movs	r2, r0
 8002e6a:	004b      	lsls	r3, r1, #1
 8002e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e6e:	0308      	lsls	r0, r1, #12
 8002e70:	0d5b      	lsrs	r3, r3, #21
 8002e72:	4e3d      	ldr	r6, [pc, #244]	; (8002f68 <__aeabi_d2f+0x100>)
 8002e74:	0fcc      	lsrs	r4, r1, #31
 8002e76:	0a40      	lsrs	r0, r0, #9
 8002e78:	0f51      	lsrs	r1, r2, #29
 8002e7a:	1c5f      	adds	r7, r3, #1
 8002e7c:	4308      	orrs	r0, r1
 8002e7e:	00d5      	lsls	r5, r2, #3
 8002e80:	4237      	tst	r7, r6
 8002e82:	d00a      	beq.n	8002e9a <__aeabi_d2f+0x32>
 8002e84:	4939      	ldr	r1, [pc, #228]	; (8002f6c <__aeabi_d2f+0x104>)
 8002e86:	185e      	adds	r6, r3, r1
 8002e88:	2efe      	cmp	r6, #254	; 0xfe
 8002e8a:	dd16      	ble.n	8002eba <__aeabi_d2f+0x52>
 8002e8c:	23ff      	movs	r3, #255	; 0xff
 8002e8e:	2100      	movs	r1, #0
 8002e90:	05db      	lsls	r3, r3, #23
 8002e92:	430b      	orrs	r3, r1
 8002e94:	07e0      	lsls	r0, r4, #31
 8002e96:	4318      	orrs	r0, r3
 8002e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <__aeabi_d2f+0x44>
 8002e9e:	4328      	orrs	r0, r5
 8002ea0:	d027      	beq.n	8002ef2 <__aeabi_d2f+0x8a>
 8002ea2:	2105      	movs	r1, #5
 8002ea4:	0189      	lsls	r1, r1, #6
 8002ea6:	0a49      	lsrs	r1, r1, #9
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	e7f1      	b.n	8002e90 <__aeabi_d2f+0x28>
 8002eac:	4305      	orrs	r5, r0
 8002eae:	d0ed      	beq.n	8002e8c <__aeabi_d2f+0x24>
 8002eb0:	2180      	movs	r1, #128	; 0x80
 8002eb2:	03c9      	lsls	r1, r1, #15
 8002eb4:	23ff      	movs	r3, #255	; 0xff
 8002eb6:	4301      	orrs	r1, r0
 8002eb8:	e7ea      	b.n	8002e90 <__aeabi_d2f+0x28>
 8002eba:	2e00      	cmp	r6, #0
 8002ebc:	dd1c      	ble.n	8002ef8 <__aeabi_d2f+0x90>
 8002ebe:	0192      	lsls	r2, r2, #6
 8002ec0:	0011      	movs	r1, r2
 8002ec2:	1e4a      	subs	r2, r1, #1
 8002ec4:	4191      	sbcs	r1, r2
 8002ec6:	00c0      	lsls	r0, r0, #3
 8002ec8:	0f6d      	lsrs	r5, r5, #29
 8002eca:	4301      	orrs	r1, r0
 8002ecc:	4329      	orrs	r1, r5
 8002ece:	074b      	lsls	r3, r1, #29
 8002ed0:	d048      	beq.n	8002f64 <__aeabi_d2f+0xfc>
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	400b      	ands	r3, r1
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d000      	beq.n	8002edc <__aeabi_d2f+0x74>
 8002eda:	3104      	adds	r1, #4
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	04db      	lsls	r3, r3, #19
 8002ee0:	400b      	ands	r3, r1
 8002ee2:	d03f      	beq.n	8002f64 <__aeabi_d2f+0xfc>
 8002ee4:	1c72      	adds	r2, r6, #1
 8002ee6:	2efe      	cmp	r6, #254	; 0xfe
 8002ee8:	d0d0      	beq.n	8002e8c <__aeabi_d2f+0x24>
 8002eea:	0189      	lsls	r1, r1, #6
 8002eec:	0a49      	lsrs	r1, r1, #9
 8002eee:	b2d3      	uxtb	r3, r2
 8002ef0:	e7ce      	b.n	8002e90 <__aeabi_d2f+0x28>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	e7cb      	b.n	8002e90 <__aeabi_d2f+0x28>
 8002ef8:	0032      	movs	r2, r6
 8002efa:	3217      	adds	r2, #23
 8002efc:	db22      	blt.n	8002f44 <__aeabi_d2f+0xdc>
 8002efe:	2180      	movs	r1, #128	; 0x80
 8002f00:	221e      	movs	r2, #30
 8002f02:	0409      	lsls	r1, r1, #16
 8002f04:	4308      	orrs	r0, r1
 8002f06:	1b92      	subs	r2, r2, r6
 8002f08:	2a1f      	cmp	r2, #31
 8002f0a:	dd1d      	ble.n	8002f48 <__aeabi_d2f+0xe0>
 8002f0c:	2102      	movs	r1, #2
 8002f0e:	4249      	negs	r1, r1
 8002f10:	1b8e      	subs	r6, r1, r6
 8002f12:	0001      	movs	r1, r0
 8002f14:	40f1      	lsrs	r1, r6
 8002f16:	000e      	movs	r6, r1
 8002f18:	2a20      	cmp	r2, #32
 8002f1a:	d004      	beq.n	8002f26 <__aeabi_d2f+0xbe>
 8002f1c:	4a14      	ldr	r2, [pc, #80]	; (8002f70 <__aeabi_d2f+0x108>)
 8002f1e:	4694      	mov	ip, r2
 8002f20:	4463      	add	r3, ip
 8002f22:	4098      	lsls	r0, r3
 8002f24:	4305      	orrs	r5, r0
 8002f26:	0029      	movs	r1, r5
 8002f28:	1e4d      	subs	r5, r1, #1
 8002f2a:	41a9      	sbcs	r1, r5
 8002f2c:	4331      	orrs	r1, r6
 8002f2e:	2600      	movs	r6, #0
 8002f30:	074b      	lsls	r3, r1, #29
 8002f32:	d1ce      	bne.n	8002ed2 <__aeabi_d2f+0x6a>
 8002f34:	2080      	movs	r0, #128	; 0x80
 8002f36:	000b      	movs	r3, r1
 8002f38:	04c0      	lsls	r0, r0, #19
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4003      	ands	r3, r0
 8002f3e:	4201      	tst	r1, r0
 8002f40:	d1d3      	bne.n	8002eea <__aeabi_d2f+0x82>
 8002f42:	e7af      	b.n	8002ea4 <__aeabi_d2f+0x3c>
 8002f44:	2300      	movs	r3, #0
 8002f46:	e7ac      	b.n	8002ea2 <__aeabi_d2f+0x3a>
 8002f48:	490a      	ldr	r1, [pc, #40]	; (8002f74 <__aeabi_d2f+0x10c>)
 8002f4a:	468c      	mov	ip, r1
 8002f4c:	0029      	movs	r1, r5
 8002f4e:	4463      	add	r3, ip
 8002f50:	40d1      	lsrs	r1, r2
 8002f52:	409d      	lsls	r5, r3
 8002f54:	000a      	movs	r2, r1
 8002f56:	0029      	movs	r1, r5
 8002f58:	4098      	lsls	r0, r3
 8002f5a:	1e4d      	subs	r5, r1, #1
 8002f5c:	41a9      	sbcs	r1, r5
 8002f5e:	4301      	orrs	r1, r0
 8002f60:	4311      	orrs	r1, r2
 8002f62:	e7e4      	b.n	8002f2e <__aeabi_d2f+0xc6>
 8002f64:	0033      	movs	r3, r6
 8002f66:	e79d      	b.n	8002ea4 <__aeabi_d2f+0x3c>
 8002f68:	000007fe 	.word	0x000007fe
 8002f6c:	fffffc80 	.word	0xfffffc80
 8002f70:	fffffca2 	.word	0xfffffca2
 8002f74:	fffffc82 	.word	0xfffffc82

08002f78 <strcmp>:
 8002f78:	4602      	mov	r2, r0
 8002f7a:	b570      	push	{r4, r5, r6, lr}
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	0792      	lsls	r2, r2, #30
 8002f80:	d12a      	bne.n	8002fd8 <strcmp+0x60>
 8002f82:	4d1e      	ldr	r5, [pc, #120]	; (8002ffc <strcmp+0x84>)
 8002f84:	01ee      	lsls	r6, r5, #7
 8002f86:	c804      	ldmia	r0!, {r2}
 8002f88:	c908      	ldmia	r1!, {r3}
 8002f8a:	1b54      	subs	r4, r2, r5
 8002f8c:	4394      	bics	r4, r2
 8002f8e:	4034      	ands	r4, r6
 8002f90:	d017      	beq.n	8002fc2 <strcmp+0x4a>
 8002f92:	b2d0      	uxtb	r0, r2
 8002f94:	b2d9      	uxtb	r1, r3
 8002f96:	1a40      	subs	r0, r0, r1
 8002f98:	0621      	lsls	r1, r4, #24
 8002f9a:	4301      	orrs	r1, r0
 8002f9c:	d110      	bne.n	8002fc0 <strcmp+0x48>
 8002f9e:	b290      	uxth	r0, r2
 8002fa0:	b299      	uxth	r1, r3
 8002fa2:	1a40      	subs	r0, r0, r1
 8002fa4:	0421      	lsls	r1, r4, #16
 8002fa6:	4301      	orrs	r1, r0
 8002fa8:	d10a      	bne.n	8002fc0 <strcmp+0x48>
 8002faa:	0210      	lsls	r0, r2, #8
 8002fac:	0219      	lsls	r1, r3, #8
 8002fae:	0a00      	lsrs	r0, r0, #8
 8002fb0:	0a09      	lsrs	r1, r1, #8
 8002fb2:	1a40      	subs	r0, r0, r1
 8002fb4:	0221      	lsls	r1, r4, #8
 8002fb6:	4301      	orrs	r1, r0
 8002fb8:	d102      	bne.n	8002fc0 <strcmp+0x48>
 8002fba:	0e10      	lsrs	r0, r2, #24
 8002fbc:	0e19      	lsrs	r1, r3, #24
 8002fbe:	1a40      	subs	r0, r0, r1
 8002fc0:	bd70      	pop	{r4, r5, r6, pc}
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d0df      	beq.n	8002f86 <strcmp+0xe>
 8002fc6:	ba10      	rev	r0, r2
 8002fc8:	ba19      	rev	r1, r3
 8002fca:	4288      	cmp	r0, r1
 8002fcc:	d901      	bls.n	8002fd2 <strcmp+0x5a>
 8002fce:	2001      	movs	r0, #1
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	43c0      	mvns	r0, r0
 8002fd6:	bd70      	pop	{r4, r5, r6, pc}
 8002fd8:	7802      	ldrb	r2, [r0, #0]
 8002fda:	780b      	ldrb	r3, [r1, #0]
 8002fdc:	3001      	adds	r0, #1
 8002fde:	3101      	adds	r1, #1
 8002fe0:	2a00      	cmp	r2, #0
 8002fe2:	d009      	beq.n	8002ff8 <strcmp+0x80>
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d107      	bne.n	8002ff8 <strcmp+0x80>
 8002fe8:	7802      	ldrb	r2, [r0, #0]
 8002fea:	780b      	ldrb	r3, [r1, #0]
 8002fec:	3001      	adds	r0, #1
 8002fee:	3101      	adds	r1, #1
 8002ff0:	2a00      	cmp	r2, #0
 8002ff2:	d001      	beq.n	8002ff8 <strcmp+0x80>
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d0ef      	beq.n	8002fd8 <strcmp+0x60>
 8002ff8:	1ad0      	subs	r0, r2, r3
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	01010101 	.word	0x01010101

08003000 <__cpu_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8003000:	4770      	bx	lr
 8003002:	46c0      	nop			; (mov r8, r8)
	...

08003010 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8003010:	4770      	bx	lr
 8003012:	46c0      	nop			; (mov r8, r8)
	...

08003020 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8003020:	e7fe      	b.n	8003020 <__default_exit>
 8003022:	46c0      	nop			; (mov r8, r8)
	...

08003030 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8003030:	b084      	sub	sp, #16
#if CRT0_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8003032:	4b16      	ldr	r3, [pc, #88]	; (800308c <__init_ram_areas+0x5c>)
 8003034:	9303      	str	r3, [sp, #12]

  do {
    uint32_t *tp = rap->init_text_area;
 8003036:	9b03      	ldr	r3, [sp, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	9302      	str	r3, [sp, #8]
    uint32_t *p = rap->init_area;
 800303c:	9b03      	ldr	r3, [sp, #12]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	9301      	str	r3, [sp, #4]
 8003042:	e009      	b.n	8003058 <__init_ram_areas+0x28>

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
      *p = *tp;
 8003044:	9b02      	ldr	r3, [sp, #8]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	9b01      	ldr	r3, [sp, #4]
 800304a:	601a      	str	r2, [r3, #0]
      p++;
 800304c:	9b01      	ldr	r3, [sp, #4]
 800304e:	3304      	adds	r3, #4
 8003050:	9301      	str	r3, [sp, #4]
      tp++;
 8003052:	9b02      	ldr	r3, [sp, #8]
 8003054:	3304      	adds	r3, #4
 8003056:	9302      	str	r3, [sp, #8]
    while (p < rap->clear_area) {
 8003058:	9b03      	ldr	r3, [sp, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	9a01      	ldr	r2, [sp, #4]
 800305e:	429a      	cmp	r2, r3
 8003060:	d3f0      	bcc.n	8003044 <__init_ram_areas+0x14>
 8003062:	e005      	b.n	8003070 <__init_ram_areas+0x40>
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8003064:	9b01      	ldr	r3, [sp, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
      p++;
 800306a:	9b01      	ldr	r3, [sp, #4]
 800306c:	3304      	adds	r3, #4
 800306e:	9301      	str	r3, [sp, #4]
    while (p < rap->no_init_area) {
 8003070:	9b03      	ldr	r3, [sp, #12]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	9a01      	ldr	r2, [sp, #4]
 8003076:	429a      	cmp	r2, r3
 8003078:	d3f4      	bcc.n	8003064 <__init_ram_areas+0x34>
    }
    rap++;
 800307a:	9b03      	ldr	r3, [sp, #12]
 800307c:	3310      	adds	r3, #16
 800307e:	9303      	str	r3, [sp, #12]
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 8003080:	9a03      	ldr	r2, [sp, #12]
 8003082:	4b03      	ldr	r3, [pc, #12]	; (8003090 <__init_ram_areas+0x60>)
 8003084:	429a      	cmp	r2, r3
 8003086:	d3d6      	bcc.n	8003036 <__init_ram_areas+0x6>
#endif
}
 8003088:	b004      	add	sp, #16
 800308a:	4770      	bx	lr
 800308c:	0800afd8 	.word	0x0800afd8
 8003090:	0800b058 	.word	0x0800b058
	...

080030a0 <osalInit>:
 *
 * @api
 */
static inline void osalInit(void) {

}
 80030a0:	4770      	bx	lr
 80030a2:	46c0      	nop			; (mov r8, r8)
	...

080030b0 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 80030b0:	b510      	push	{r4, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
 80030b2:	f7ff fff5 	bl	80030a0 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
 80030b6:	f000 ffbb 	bl	8004030 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
 80030ba:	f001 f869 	bl	8004190 <_pal_lld_init>
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
 80030be:	f000 fc57 	bl	8003970 <pwmInit>
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 80030c2:	f000 fe55 	bl	8003d70 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 80030c6:	f001 fe2b 	bl	8004d20 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 80030ca:	f000 f849 	bl	8003160 <stInit>
#endif
}
 80030ce:	bd10      	pop	{r4, pc}

080030d0 <st_lld_get_counter>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80030d0:	4b02      	ldr	r3, [pc, #8]	; (80030dc <st_lld_get_counter+0xc>)
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	b29b      	uxth	r3, r3
}
 80030d6:	0018      	movs	r0, r3
 80030d8:	4770      	bx	lr
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	40002000 	.word	0x40002000

080030e0 <st_lld_start_alarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t abstime) {
 80030e0:	b082      	sub	sp, #8
 80030e2:	0002      	movs	r2, r0
 80030e4:	466b      	mov	r3, sp
 80030e6:	3306      	adds	r3, #6
 80030e8:	801a      	strh	r2, [r3, #0]

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <st_lld_start_alarm+0x24>)
 80030ec:	466a      	mov	r2, sp
 80030ee:	3206      	adds	r2, #6
 80030f0:	8812      	ldrh	r2, [r2, #0]
 80030f2:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80030f4:	4b03      	ldr	r3, [pc, #12]	; (8003104 <st_lld_start_alarm+0x24>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	611a      	str	r2, [r3, #16]
#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80030fa:	4b02      	ldr	r3, [pc, #8]	; (8003104 <st_lld_start_alarm+0x24>)
 80030fc:	2202      	movs	r2, #2
 80030fe:	60da      	str	r2, [r3, #12]
#else
  STM32_ST_TIM->DIER  |= STM32_TIM_DIER_CC1IE;
#endif
}
 8003100:	b002      	add	sp, #8
 8003102:	4770      	bx	lr
 8003104:	40002000 	.word	0x40002000
	...

08003110 <st_lld_stop_alarm>:
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER = 0U;
 8003110:	4b01      	ldr	r3, [pc, #4]	; (8003118 <st_lld_stop_alarm+0x8>)
 8003112:	2200      	movs	r2, #0
 8003114:	60da      	str	r2, [r3, #12]
#else
 STM32_ST_TIM->DIER &= ~STM32_TIM_DIER_CC1IE;
#endif
}
 8003116:	4770      	bx	lr
 8003118:	40002000 	.word	0x40002000
 800311c:	00000000 	.word	0x00000000

08003120 <st_lld_set_alarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {
 8003120:	b082      	sub	sp, #8
 8003122:	0002      	movs	r2, r0
 8003124:	466b      	mov	r3, sp
 8003126:	3306      	adds	r3, #6
 8003128:	801a      	strh	r2, [r3, #0]

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800312a:	4b03      	ldr	r3, [pc, #12]	; (8003138 <st_lld_set_alarm+0x18>)
 800312c:	466a      	mov	r2, sp
 800312e:	3206      	adds	r2, #6
 8003130:	8812      	ldrh	r2, [r2, #0]
 8003132:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003134:	b002      	add	sp, #8
 8003136:	4770      	bx	lr
 8003138:	40002000 	.word	0x40002000
 800313c:	00000000 	.word	0x00000000

08003140 <st_lld_is_alarm_active>:
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8003140:	4b04      	ldr	r3, [pc, #16]	; (8003154 <st_lld_is_alarm_active+0x14>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2202      	movs	r2, #2
 8003146:	4013      	ands	r3, r2
 8003148:	1e5a      	subs	r2, r3, #1
 800314a:	4193      	sbcs	r3, r2
 800314c:	b2db      	uxtb	r3, r3
}
 800314e:	0018      	movs	r0, r3
 8003150:	4770      	bx	lr
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	40002000 	.word	0x40002000
	...

08003160 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
 8003160:	b510      	push	{r4, lr}

  for (i = 0U; i < (unsigned)ST_LLD_NUM_ALARMS; i++) {
    st_callbacks[i] = NULL;
  }
#endif
  st_lld_init();
 8003162:	f001 f875 	bl	8004250 <st_lld_init>
}
 8003166:	bd10      	pop	{r4, pc}
	...

08003170 <stGetCounter>:
 *
 * @return              The counter value.
 *
 * @api
 */
systime_t stGetCounter(void) {
 8003170:	b510      	push	{r4, lr}

  return st_lld_get_counter();
 8003172:	f7ff ffad 	bl	80030d0 <st_lld_get_counter>
 8003176:	0003      	movs	r3, r0
}
 8003178:	0018      	movs	r0, r3
 800317a:	bd10      	pop	{r4, pc}
 800317c:	0000      	movs	r0, r0
	...

08003180 <stStartAlarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
 8003180:	b500      	push	{lr}
 8003182:	b083      	sub	sp, #12
 8003184:	0002      	movs	r2, r0
 8003186:	466b      	mov	r3, sp
 8003188:	3306      	adds	r3, #6
 800318a:	801a      	strh	r2, [r3, #0]

  osalDbgAssert(stIsAlarmActive() == false, "already active");
 800318c:	f000 f838 	bl	8003200 <stIsAlarmActive>
 8003190:	1e03      	subs	r3, r0, #0
 8003192:	d003      	beq.n	800319c <stStartAlarm+0x1c>
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <stStartAlarm+0x2c>)
 8003196:	0018      	movs	r0, r3
 8003198:	f001 fe3a 	bl	8004e10 <chSysHalt>

  st_lld_start_alarm(abstime);
 800319c:	466b      	mov	r3, sp
 800319e:	3306      	adds	r3, #6
 80031a0:	881b      	ldrh	r3, [r3, #0]
 80031a2:	0018      	movs	r0, r3
 80031a4:	f7ff ff9c 	bl	80030e0 <st_lld_start_alarm>
}
 80031a8:	b003      	add	sp, #12
 80031aa:	bd00      	pop	{pc}
 80031ac:	0800b058 	.word	0x0800b058

080031b0 <stStopAlarm>:
 * @note    This functionality is only available in free running mode, the
 *          behavior in periodic mode is undefined.
 *
 * @api
 */
void stStopAlarm(void) {
 80031b0:	b510      	push	{r4, lr}

  st_lld_stop_alarm();
 80031b2:	f7ff ffad 	bl	8003110 <st_lld_stop_alarm>
}
 80031b6:	bd10      	pop	{r4, pc}
	...

080031c0 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 80031c0:	b500      	push	{lr}
 80031c2:	b083      	sub	sp, #12
 80031c4:	0002      	movs	r2, r0
 80031c6:	466b      	mov	r3, sp
 80031c8:	3306      	adds	r3, #6
 80031ca:	801a      	strh	r2, [r3, #0]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 80031cc:	f000 f818 	bl	8003200 <stIsAlarmActive>
 80031d0:	0003      	movs	r3, r0
 80031d2:	001a      	movs	r2, r3
 80031d4:	2301      	movs	r3, #1
 80031d6:	4053      	eors	r3, r2
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <stSetAlarm+0x26>
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <stSetAlarm+0x38>)
 80031e0:	0018      	movs	r0, r3
 80031e2:	f001 fe15 	bl	8004e10 <chSysHalt>

  st_lld_set_alarm(abstime);
 80031e6:	466b      	mov	r3, sp
 80031e8:	3306      	adds	r3, #6
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	0018      	movs	r0, r3
 80031ee:	f7ff ff97 	bl	8003120 <st_lld_set_alarm>
}
 80031f2:	b003      	add	sp, #12
 80031f4:	bd00      	pop	{pc}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	0800b068 	.word	0x0800b068
 80031fc:	00000000 	.word	0x00000000

08003200 <stIsAlarmActive>:
 * @retval false        if the alarm is not active.
 * @retval true         is the alarm is active
 *
 * @api
 */
bool stIsAlarmActive(void) {
 8003200:	b510      	push	{r4, lr}

  return st_lld_is_alarm_active();
 8003202:	f7ff ff9d 	bl	8003140 <st_lld_is_alarm_active>
 8003206:	0003      	movs	r3, r0
}
 8003208:	0018      	movs	r0, r3
 800320a:	bd10      	pop	{r4, pc}
 800320c:	0000      	movs	r0, r0
	...

08003210 <port_lock.lto_priv.1>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003210:	b672      	cpsid	i
 * @details In this port this function disables interrupts globally.
 */
static inline void port_lock(void) {

  __disable_irq();
}
 8003212:	4770      	bx	lr
	...

08003220 <port_unlock.lto_priv.1>:
  __ASM volatile ("cpsie i" : : : "memory");
 8003220:	b662      	cpsie	i
 * @details In this port this function enables interrupts globally.
 */
static inline void port_unlock(void) {

  __enable_irq();
}
 8003222:	4770      	bx	lr
	...

08003230 <chSysLock.lto_priv.1>:
 * @note    The exact behavior of this function is port-dependent and could
 *          not be limited to disabling interrupts.
 *
 * @special
 */
static inline void chSysLock(void) {
 8003230:	b510      	push	{r4, lr}

  port_lock();
 8003232:	f7ff ffed 	bl	8003210 <port_lock.lto_priv.1>
  __stats_start_measure_crit_thd();
  __dbg_check_lock();
 8003236:	f001 fe5b 	bl	8004ef0 <__dbg_check_lock>
}
 800323a:	bd10      	pop	{r4, pc}
 800323c:	0000      	movs	r0, r0
	...

08003240 <chSysUnlock.lto_priv.1>:
 * @note    The exact behavior of this function is port-dependent and could
 *          not be limited to enabling interrupts.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8003240:	b510      	push	{r4, lr}

  __dbg_check_unlock();
 8003242:	f001 fe7d 	bl	8004f40 <__dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
 8003246:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <chSysUnlock.lto_priv.1+0x40>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <chSysUnlock.lto_priv.1+0x40>)
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	1e5a      	subs	r2, r3, #1
 8003250:	4193      	sbcs	r3, r2
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00f      	beq.n	8003278 <chSysUnlock.lto_priv.1+0x38>
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <chSysUnlock.lto_priv.1+0x40>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	4b08      	ldr	r3, [pc, #32]	; (8003280 <chSysUnlock.lto_priv.1+0x40>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	429a      	cmp	r2, r3
 8003266:	419b      	sbcs	r3, r3
 8003268:	425b      	negs	r3, r3
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <chSysUnlock.lto_priv.1+0x38>
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <chSysUnlock.lto_priv.1+0x44>)
 8003272:	0018      	movs	r0, r3
 8003274:	f001 fdcc 	bl	8004e10 <chSysHalt>
              (currcore->rlist.current->hdr.pqueue.prio >= currcore->rlist.pqueue.next->prio),
              "priority order violation");

  port_unlock();
 8003278:	f7ff ffd2 	bl	8003220 <port_unlock.lto_priv.1>
}
 800327c:	bd10      	pop	{r4, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	20000a28 	.word	0x20000a28
 8003284:	0800b088 	.word	0x0800b088
	...

08003290 <osalSysLock.lto_priv.1>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 8003290:	b510      	push	{r4, lr}

  chSysLock();
 8003292:	f7ff ffcd 	bl	8003230 <chSysLock.lto_priv.1>
}
 8003296:	bd10      	pop	{r4, pc}
	...

080032a0 <osalSysUnlock.lto_priv.1>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 80032a0:	b510      	push	{r4, lr}

  chSysUnlock();
 80032a2:	f7ff ffcd 	bl	8003240 <chSysUnlock.lto_priv.1>
}
 80032a6:	bd10      	pop	{r4, pc}
	...

080032b0 <osalThreadQueueObjectInit.lto_priv.1>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 80032b0:	b500      	push	{lr}
 80032b2:	b083      	sub	sp, #12
 80032b4:	9001      	str	r0, [sp, #4]

  chThdQueueObjectInit(tqp);
 80032b6:	9b01      	ldr	r3, [sp, #4]
 80032b8:	0018      	movs	r0, r3
 80032ba:	f003 fad1 	bl	8006860 <chThdQueueObjectInit>
}
 80032be:	b003      	add	sp, #12
 80032c0:	bd00      	pop	{pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
	...

080032d0 <osalThreadEnqueueTimeoutS.lto_priv.1>:
 *                      specification.
 *
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {
 80032d0:	b500      	push	{lr}
 80032d2:	b083      	sub	sp, #12
 80032d4:	9001      	str	r0, [sp, #4]
 80032d6:	9100      	str	r1, [sp, #0]

  return chThdEnqueueTimeoutS(tqp, timeout);
 80032d8:	9a00      	ldr	r2, [sp, #0]
 80032da:	9b01      	ldr	r3, [sp, #4]
 80032dc:	0011      	movs	r1, r2
 80032de:	0018      	movs	r0, r3
 80032e0:	f003 fad6 	bl	8006890 <chThdEnqueueTimeoutS>
 80032e4:	0003      	movs	r3, r0
}
 80032e6:	0018      	movs	r0, r3
 80032e8:	b003      	add	sp, #12
 80032ea:	bd00      	pop	{pc}
 80032ec:	0000      	movs	r0, r0
	...

080032f0 <osalThreadDequeueNextI.lto_priv.1>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 80032f0:	b500      	push	{lr}
 80032f2:	b083      	sub	sp, #12
 80032f4:	9001      	str	r0, [sp, #4]
 80032f6:	9100      	str	r1, [sp, #0]

  chThdDequeueNextI(tqp, msg);
 80032f8:	9a00      	ldr	r2, [sp, #0]
 80032fa:	9b01      	ldr	r3, [sp, #4]
 80032fc:	0011      	movs	r1, r2
 80032fe:	0018      	movs	r0, r3
 8003300:	f003 fae6 	bl	80068d0 <chThdDequeueNextI>
}
 8003304:	b003      	add	sp, #12
 8003306:	bd00      	pop	{pc}
	...

08003310 <iq_read>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
 8003310:	b500      	push	{lr}
 8003312:	b087      	sub	sp, #28
 8003314:	9003      	str	r0, [sp, #12]
 8003316:	9102      	str	r1, [sp, #8]
 8003318:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);
 800331a:	9b01      	ldr	r3, [sp, #4]
 800331c:	425a      	negs	r2, r3
 800331e:	4153      	adcs	r3, r2
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <iq_read+0x1e>
 8003326:	4b2d      	ldr	r3, [pc, #180]	; (80033dc <iq_read+0xcc>)
 8003328:	0018      	movs	r0, r3
 800332a:	f001 fd71 	bl	8004e10 <chSysHalt>

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
 800332e:	9b03      	ldr	r3, [sp, #12]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	9a01      	ldr	r2, [sp, #4]
 8003334:	429a      	cmp	r2, r3
 8003336:	d902      	bls.n	800333e <iq_read+0x2e>
    n = iqGetFullI(iqp);
 8003338:	9b03      	ldr	r3, [sp, #12]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800333e:	9b03      	ldr	r3, [sp, #12]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	9b03      	ldr	r3, [sp, #12]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 800334a:	9a01      	ldr	r2, [sp, #4]
 800334c:	9b05      	ldr	r3, [sp, #20]
 800334e:	429a      	cmp	r2, r3
 8003350:	d20d      	bcs.n	800336e <iq_read+0x5e>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8003352:	9b03      	ldr	r3, [sp, #12]
 8003354:	6999      	ldr	r1, [r3, #24]
 8003356:	9a01      	ldr	r2, [sp, #4]
 8003358:	9b02      	ldr	r3, [sp, #8]
 800335a:	0018      	movs	r0, r3
 800335c:	f007 fc60 	bl	800ac20 <memcpy>
    iqp->q_rdptr += n;
 8003360:	9b03      	ldr	r3, [sp, #12]
 8003362:	699a      	ldr	r2, [r3, #24]
 8003364:	9b01      	ldr	r3, [sp, #4]
 8003366:	18d2      	adds	r2, r2, r3
 8003368:	9b03      	ldr	r3, [sp, #12]
 800336a:	619a      	str	r2, [r3, #24]
 800336c:	e02b      	b.n	80033c6 <iq_read+0xb6>
  }
  else if (n > s1) {
 800336e:	9a01      	ldr	r2, [sp, #4]
 8003370:	9b05      	ldr	r3, [sp, #20]
 8003372:	429a      	cmp	r2, r3
 8003374:	d91c      	bls.n	80033b0 <iq_read+0xa0>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8003376:	9b03      	ldr	r3, [sp, #12]
 8003378:	6999      	ldr	r1, [r3, #24]
 800337a:	9a05      	ldr	r2, [sp, #20]
 800337c:	9b02      	ldr	r3, [sp, #8]
 800337e:	0018      	movs	r0, r3
 8003380:	f007 fc4e 	bl	800ac20 <memcpy>
    bp += s1;
 8003384:	9a02      	ldr	r2, [sp, #8]
 8003386:	9b05      	ldr	r3, [sp, #20]
 8003388:	18d3      	adds	r3, r2, r3
 800338a:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 800338c:	9a01      	ldr	r2, [sp, #4]
 800338e:	9b05      	ldr	r3, [sp, #20]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	9304      	str	r3, [sp, #16]
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8003394:	9b03      	ldr	r3, [sp, #12]
 8003396:	68d9      	ldr	r1, [r3, #12]
 8003398:	9a04      	ldr	r2, [sp, #16]
 800339a:	9b02      	ldr	r3, [sp, #8]
 800339c:	0018      	movs	r0, r3
 800339e:	f007 fc3f 	bl	800ac20 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 80033a2:	9b03      	ldr	r3, [sp, #12]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	9b04      	ldr	r3, [sp, #16]
 80033a8:	18d2      	adds	r2, r2, r3
 80033aa:	9b03      	ldr	r3, [sp, #12]
 80033ac:	619a      	str	r2, [r3, #24]
 80033ae:	e00a      	b.n	80033c6 <iq_read+0xb6>
  }
  else {
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80033b0:	9b03      	ldr	r3, [sp, #12]
 80033b2:	6999      	ldr	r1, [r3, #24]
 80033b4:	9a01      	ldr	r2, [sp, #4]
 80033b6:	9b02      	ldr	r3, [sp, #8]
 80033b8:	0018      	movs	r0, r3
 80033ba:	f007 fc31 	bl	800ac20 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 80033be:	9b03      	ldr	r3, [sp, #12]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	9b03      	ldr	r3, [sp, #12]
 80033c4:	619a      	str	r2, [r3, #24]
  }

  iqp->q_counter -= n;
 80033c6:	9b03      	ldr	r3, [sp, #12]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	9b01      	ldr	r3, [sp, #4]
 80033cc:	1ad2      	subs	r2, r2, r3
 80033ce:	9b03      	ldr	r3, [sp, #12]
 80033d0:	609a      	str	r2, [r3, #8]
  return n;
 80033d2:	9b01      	ldr	r3, [sp, #4]
}
 80033d4:	0018      	movs	r0, r3
 80033d6:	b007      	add	sp, #28
 80033d8:	bd00      	pop	{pc}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	0800b074 	.word	0x0800b074

080033e0 <oq_write>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 80033e0:	b500      	push	{lr}
 80033e2:	b087      	sub	sp, #28
 80033e4:	9003      	str	r0, [sp, #12]
 80033e6:	9102      	str	r1, [sp, #8]
 80033e8:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);
 80033ea:	9b01      	ldr	r3, [sp, #4]
 80033ec:	425a      	negs	r2, r3
 80033ee:	4153      	adcs	r3, r2
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <oq_write+0x1e>
 80033f6:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <oq_write+0xcc>)
 80033f8:	0018      	movs	r0, r3
 80033fa:	f001 fd09 	bl	8004e10 <chSysHalt>

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
 80033fe:	9b03      	ldr	r3, [sp, #12]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	9a01      	ldr	r2, [sp, #4]
 8003404:	429a      	cmp	r2, r3
 8003406:	d902      	bls.n	800340e <oq_write+0x2e>
    n = oqGetEmptyI(oqp);
 8003408:	9b03      	ldr	r3, [sp, #12]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 800340e:	9b03      	ldr	r3, [sp, #12]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	9b03      	ldr	r3, [sp, #12]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 800341a:	9a01      	ldr	r2, [sp, #4]
 800341c:	9b05      	ldr	r3, [sp, #20]
 800341e:	429a      	cmp	r2, r3
 8003420:	d20d      	bcs.n	800343e <oq_write+0x5e>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8003422:	9b03      	ldr	r3, [sp, #12]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	9a01      	ldr	r2, [sp, #4]
 8003428:	9902      	ldr	r1, [sp, #8]
 800342a:	0018      	movs	r0, r3
 800342c:	f007 fbf8 	bl	800ac20 <memcpy>
    oqp->q_wrptr += n;
 8003430:	9b03      	ldr	r3, [sp, #12]
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	9b01      	ldr	r3, [sp, #4]
 8003436:	18d2      	adds	r2, r2, r3
 8003438:	9b03      	ldr	r3, [sp, #12]
 800343a:	615a      	str	r2, [r3, #20]
 800343c:	e02b      	b.n	8003496 <oq_write+0xb6>
  }
  else if (n > s1) {
 800343e:	9a01      	ldr	r2, [sp, #4]
 8003440:	9b05      	ldr	r3, [sp, #20]
 8003442:	429a      	cmp	r2, r3
 8003444:	d91c      	bls.n	8003480 <oq_write+0xa0>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8003446:	9b03      	ldr	r3, [sp, #12]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	9a05      	ldr	r2, [sp, #20]
 800344c:	9902      	ldr	r1, [sp, #8]
 800344e:	0018      	movs	r0, r3
 8003450:	f007 fbe6 	bl	800ac20 <memcpy>
    bp += s1;
 8003454:	9a02      	ldr	r2, [sp, #8]
 8003456:	9b05      	ldr	r3, [sp, #20]
 8003458:	18d3      	adds	r3, r2, r3
 800345a:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 800345c:	9a01      	ldr	r2, [sp, #4]
 800345e:	9b05      	ldr	r3, [sp, #20]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	9304      	str	r3, [sp, #16]
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8003464:	9b03      	ldr	r3, [sp, #12]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	9a04      	ldr	r2, [sp, #16]
 800346a:	9902      	ldr	r1, [sp, #8]
 800346c:	0018      	movs	r0, r3
 800346e:	f007 fbd7 	bl	800ac20 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8003472:	9b03      	ldr	r3, [sp, #12]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	9b04      	ldr	r3, [sp, #16]
 8003478:	18d2      	adds	r2, r2, r3
 800347a:	9b03      	ldr	r3, [sp, #12]
 800347c:	615a      	str	r2, [r3, #20]
 800347e:	e00a      	b.n	8003496 <oq_write+0xb6>
  }
  else {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8003480:	9b03      	ldr	r3, [sp, #12]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	9a01      	ldr	r2, [sp, #4]
 8003486:	9902      	ldr	r1, [sp, #8]
 8003488:	0018      	movs	r0, r3
 800348a:	f007 fbc9 	bl	800ac20 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 800348e:	9b03      	ldr	r3, [sp, #12]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	9b03      	ldr	r3, [sp, #12]
 8003494:	615a      	str	r2, [r3, #20]
  }

  oqp->q_counter -= n;
 8003496:	9b03      	ldr	r3, [sp, #12]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	9b01      	ldr	r3, [sp, #4]
 800349c:	1ad2      	subs	r2, r2, r3
 800349e:	9b03      	ldr	r3, [sp, #12]
 80034a0:	609a      	str	r2, [r3, #8]
  return n;
 80034a2:	9b01      	ldr	r3, [sp, #4]
}
 80034a4:	0018      	movs	r0, r3
 80034a6:	b007      	add	sp, #28
 80034a8:	bd00      	pop	{pc}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	0800b07c 	.word	0x0800b07c

080034b0 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
 80034b0:	b500      	push	{lr}
 80034b2:	b085      	sub	sp, #20
 80034b4:	9003      	str	r0, [sp, #12]
 80034b6:	9102      	str	r1, [sp, #8]
 80034b8:	9201      	str	r2, [sp, #4]
 80034ba:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&iqp->q_waiting);
 80034bc:	9b03      	ldr	r3, [sp, #12]
 80034be:	0018      	movs	r0, r3
 80034c0:	f7ff fef6 	bl	80032b0 <osalThreadQueueObjectInit.lto_priv.1>
  iqp->q_counter = 0;
 80034c4:	9b03      	ldr	r3, [sp, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
 80034ca:	9b03      	ldr	r3, [sp, #12]
 80034cc:	9a02      	ldr	r2, [sp, #8]
 80034ce:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 80034d0:	9b03      	ldr	r3, [sp, #12]
 80034d2:	9a02      	ldr	r2, [sp, #8]
 80034d4:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 80034d6:	9b03      	ldr	r3, [sp, #12]
 80034d8:	9a02      	ldr	r2, [sp, #8]
 80034da:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
 80034dc:	9a02      	ldr	r2, [sp, #8]
 80034de:	9b01      	ldr	r3, [sp, #4]
 80034e0:	18d2      	adds	r2, r2, r3
 80034e2:	9b03      	ldr	r3, [sp, #12]
 80034e4:	611a      	str	r2, [r3, #16]
  iqp->q_notify  = infy;
 80034e6:	9b03      	ldr	r3, [sp, #12]
 80034e8:	9a00      	ldr	r2, [sp, #0]
 80034ea:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 80034ec:	9b03      	ldr	r3, [sp, #12]
 80034ee:	9a06      	ldr	r2, [sp, #24]
 80034f0:	621a      	str	r2, [r3, #32]
}
 80034f2:	b005      	add	sp, #20
 80034f4:	bd00      	pop	{pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
	...

08003500 <iqPutI>:
 * @retval MSG_OK       if the operation has been completed with success.
 * @retval MSG_TIMEOUT  if the queue is full.
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 8003500:	b500      	push	{lr}
 8003502:	b083      	sub	sp, #12
 8003504:	9001      	str	r0, [sp, #4]
 8003506:	000a      	movs	r2, r1
 8003508:	466b      	mov	r3, sp
 800350a:	3303      	adds	r3, #3
 800350c:	701a      	strb	r2, [r3, #0]

  osalDbgCheckClassI();
 800350e:	f001 fde7 	bl	80050e0 <chDbgCheckClassI>

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 8003512:	9b01      	ldr	r3, [sp, #4]
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	9b01      	ldr	r3, [sp, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	429a      	cmp	r2, r3
 800351c:	d105      	bne.n	800352a <iqPutI+0x2a>
 800351e:	9b01      	ldr	r3, [sp, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <iqPutI+0x2a>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <iqPutI+0x2c>
 800352a:	2300      	movs	r3, #0
 800352c:	1c1a      	adds	r2, r3, #0
 800352e:	2301      	movs	r3, #1
 8003530:	4013      	ands	r3, r2
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2201      	movs	r2, #1
 8003536:	4053      	eors	r3, r2
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d01e      	beq.n	800357c <iqPutI+0x7c>
    iqp->q_counter++;
 800353e:	9b01      	ldr	r3, [sp, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	9b01      	ldr	r3, [sp, #4]
 8003546:	609a      	str	r2, [r3, #8]
    *iqp->q_wrptr++ = b;
 8003548:	9b01      	ldr	r3, [sp, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	1c59      	adds	r1, r3, #1
 800354e:	9a01      	ldr	r2, [sp, #4]
 8003550:	6151      	str	r1, [r2, #20]
 8003552:	466a      	mov	r2, sp
 8003554:	3203      	adds	r2, #3
 8003556:	7812      	ldrb	r2, [r2, #0]
 8003558:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 800355a:	9b01      	ldr	r3, [sp, #4]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	9b01      	ldr	r3, [sp, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	429a      	cmp	r2, r3
 8003564:	d303      	bcc.n	800356e <iqPutI+0x6e>
      iqp->q_wrptr = iqp->q_buffer;
 8003566:	9b01      	ldr	r3, [sp, #4]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	9b01      	ldr	r3, [sp, #4]
 800356c:	615a      	str	r2, [r3, #20]
    }

    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 800356e:	9b01      	ldr	r3, [sp, #4]
 8003570:	2100      	movs	r1, #0
 8003572:	0018      	movs	r0, r3
 8003574:	f7ff febc 	bl	80032f0 <osalThreadDequeueNextI.lto_priv.1>

    return MSG_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	e001      	b.n	8003580 <iqPutI+0x80>
  }

  return MSG_TIMEOUT;
 800357c:	2301      	movs	r3, #1
 800357e:	425b      	negs	r3, r3
}
 8003580:	0018      	movs	r0, r3
 8003582:	b003      	add	sp, #12
 8003584:	bd00      	pop	{pc}
 8003586:	46c0      	nop			; (mov r8, r8)
	...

08003590 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8003590:	b500      	push	{lr}
 8003592:	b085      	sub	sp, #20
 8003594:	9001      	str	r0, [sp, #4]
 8003596:	9100      	str	r1, [sp, #0]
  uint8_t b;

  osalSysLock();
 8003598:	f7ff fe7a 	bl	8003290 <osalSysLock.lto_priv.1>
 800359c:	e00e      	b.n	80035bc <iqGetTimeout+0x2c>

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800359e:	9b01      	ldr	r3, [sp, #4]
 80035a0:	9a00      	ldr	r2, [sp, #0]
 80035a2:	0011      	movs	r1, r2
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7ff fe93 	bl	80032d0 <osalThreadEnqueueTimeoutS.lto_priv.1>
 80035aa:	0003      	movs	r3, r0
 80035ac:	9302      	str	r3, [sp, #8]
    if (msg < MSG_OK) {
 80035ae:	9b02      	ldr	r3, [sp, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	da03      	bge.n	80035bc <iqGetTimeout+0x2c>
      osalSysUnlock();
 80035b4:	f7ff fe74 	bl	80032a0 <osalSysUnlock.lto_priv.1>
      return msg;
 80035b8:	9b02      	ldr	r3, [sp, #8]
 80035ba:	e029      	b.n	8003610 <iqGetTimeout+0x80>
  while (iqIsEmptyI(iqp)) {
 80035bc:	9b01      	ldr	r3, [sp, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0ec      	beq.n	800359e <iqGetTimeout+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 80035c4:	9b01      	ldr	r3, [sp, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	1e5a      	subs	r2, r3, #1
 80035ca:	9b01      	ldr	r3, [sp, #4]
 80035cc:	609a      	str	r2, [r3, #8]
  b = *iqp->q_rdptr++;
 80035ce:	9b01      	ldr	r3, [sp, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	1c59      	adds	r1, r3, #1
 80035d4:	9a01      	ldr	r2, [sp, #4]
 80035d6:	6191      	str	r1, [r2, #24]
 80035d8:	220f      	movs	r2, #15
 80035da:	446a      	add	r2, sp
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	7013      	strb	r3, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
 80035e0:	9b01      	ldr	r3, [sp, #4]
 80035e2:	699a      	ldr	r2, [r3, #24]
 80035e4:	9b01      	ldr	r3, [sp, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d303      	bcc.n	80035f4 <iqGetTimeout+0x64>
    iqp->q_rdptr = iqp->q_buffer;
 80035ec:	9b01      	ldr	r3, [sp, #4]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	9b01      	ldr	r3, [sp, #4]
 80035f2:	619a      	str	r2, [r3, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 80035f4:	9b01      	ldr	r3, [sp, #4]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d004      	beq.n	8003606 <iqGetTimeout+0x76>
    iqp->q_notify(iqp);
 80035fc:	9b01      	ldr	r3, [sp, #4]
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	9a01      	ldr	r2, [sp, #4]
 8003602:	0010      	movs	r0, r2
 8003604:	4798      	blx	r3
  }

  osalSysUnlock();
 8003606:	f7ff fe4b 	bl	80032a0 <osalSysUnlock.lto_priv.1>

  return (msg_t)b;
 800360a:	230f      	movs	r3, #15
 800360c:	446b      	add	r3, sp
 800360e:	781b      	ldrb	r3, [r3, #0]
}
 8003610:	0018      	movs	r0, r3
 8003612:	b005      	add	sp, #20
 8003614:	bd00      	pop	{pc}
 8003616:	46c0      	nop			; (mov r8, r8)
	...

08003620 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 8003620:	b500      	push	{lr}
 8003622:	b089      	sub	sp, #36	; 0x24
 8003624:	9003      	str	r0, [sp, #12]
 8003626:	9102      	str	r1, [sp, #8]
 8003628:	9201      	str	r2, [sp, #4]
 800362a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = iqp->q_notify;
 800362c:	9b03      	ldr	r3, [sp, #12]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	9307      	str	r3, [sp, #28]
  size_t max = n;
 8003632:	9b01      	ldr	r3, [sp, #4]
 8003634:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);
 8003636:	9b01      	ldr	r3, [sp, #4]
 8003638:	425a      	negs	r2, r3
 800363a:	4153      	adcs	r3, r2
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <iqReadTimeout+0x2a>
 8003642:	4b1e      	ldr	r3, [pc, #120]	; (80036bc <iqReadTimeout+0x9c>)
 8003644:	0018      	movs	r0, r3
 8003646:	f001 fbe3 	bl	8004e10 <chSysHalt>

  osalSysLock();
 800364a:	f7ff fe21 	bl	8003290 <osalSysLock.lto_priv.1>
 800364e:	e029      	b.n	80036a4 <iqReadTimeout+0x84>

  while (n > 0U) {
    size_t done;

    done = iq_read(iqp, bp, n);
 8003650:	9a01      	ldr	r2, [sp, #4]
 8003652:	9902      	ldr	r1, [sp, #8]
 8003654:	9b03      	ldr	r3, [sp, #12]
 8003656:	0018      	movs	r0, r3
 8003658:	f7ff fe5a 	bl	8003310 <iq_read>
 800365c:	0003      	movs	r3, r0
 800365e:	9305      	str	r3, [sp, #20]
    if (done == (size_t)0) {
 8003660:	9b05      	ldr	r3, [sp, #20]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10b      	bne.n	800367e <iqReadTimeout+0x5e>
      msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8003666:	9b03      	ldr	r3, [sp, #12]
 8003668:	9a00      	ldr	r2, [sp, #0]
 800366a:	0011      	movs	r1, r2
 800366c:	0018      	movs	r0, r3
 800366e:	f7ff fe2f 	bl	80032d0 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8003672:	0003      	movs	r3, r0
 8003674:	9304      	str	r3, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8003676:	9b04      	ldr	r3, [sp, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d116      	bne.n	80036aa <iqReadTimeout+0x8a>
 800367c:	e012      	b.n	80036a4 <iqReadTimeout+0x84>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 800367e:	9b07      	ldr	r3, [sp, #28]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <iqReadTimeout+0x6c>
        nfy(iqp);
 8003684:	9a03      	ldr	r2, [sp, #12]
 8003686:	9b07      	ldr	r3, [sp, #28]
 8003688:	0010      	movs	r0, r2
 800368a:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 800368c:	f7ff fe08 	bl	80032a0 <osalSysUnlock.lto_priv.1>

      n  -= done;
 8003690:	9a01      	ldr	r2, [sp, #4]
 8003692:	9b05      	ldr	r3, [sp, #20]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	9301      	str	r3, [sp, #4]
      bp += done;
 8003698:	9a02      	ldr	r2, [sp, #8]
 800369a:	9b05      	ldr	r3, [sp, #20]
 800369c:	18d3      	adds	r3, r2, r3
 800369e:	9302      	str	r3, [sp, #8]

      osalSysLock();
 80036a0:	f7ff fdf6 	bl	8003290 <osalSysLock.lto_priv.1>
  while (n > 0U) {
 80036a4:	9b01      	ldr	r3, [sp, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1d2      	bne.n	8003650 <iqReadTimeout+0x30>
    }
  }

  osalSysUnlock();
 80036aa:	f7ff fdf9 	bl	80032a0 <osalSysUnlock.lto_priv.1>
  return max - n;
 80036ae:	9a06      	ldr	r2, [sp, #24]
 80036b0:	9b01      	ldr	r3, [sp, #4]
 80036b2:	1ad3      	subs	r3, r2, r3
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	b009      	add	sp, #36	; 0x24
 80036b8:	bd00      	pop	{pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	0800b094 	.word	0x0800b094

080036c0 <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
 80036c0:	b500      	push	{lr}
 80036c2:	b085      	sub	sp, #20
 80036c4:	9003      	str	r0, [sp, #12]
 80036c6:	9102      	str	r1, [sp, #8]
 80036c8:	9201      	str	r2, [sp, #4]
 80036ca:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&oqp->q_waiting);
 80036cc:	9b03      	ldr	r3, [sp, #12]
 80036ce:	0018      	movs	r0, r3
 80036d0:	f7ff fdee 	bl	80032b0 <osalThreadQueueObjectInit.lto_priv.1>
  oqp->q_counter = size;
 80036d4:	9b03      	ldr	r3, [sp, #12]
 80036d6:	9a01      	ldr	r2, [sp, #4]
 80036d8:	609a      	str	r2, [r3, #8]
  oqp->q_buffer  = bp;
 80036da:	9b03      	ldr	r3, [sp, #12]
 80036dc:	9a02      	ldr	r2, [sp, #8]
 80036de:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 80036e0:	9b03      	ldr	r3, [sp, #12]
 80036e2:	9a02      	ldr	r2, [sp, #8]
 80036e4:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 80036e6:	9b03      	ldr	r3, [sp, #12]
 80036e8:	9a02      	ldr	r2, [sp, #8]
 80036ea:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
 80036ec:	9a02      	ldr	r2, [sp, #8]
 80036ee:	9b01      	ldr	r3, [sp, #4]
 80036f0:	18d2      	adds	r2, r2, r3
 80036f2:	9b03      	ldr	r3, [sp, #12]
 80036f4:	611a      	str	r2, [r3, #16]
  oqp->q_notify  = onfy;
 80036f6:	9b03      	ldr	r3, [sp, #12]
 80036f8:	9a00      	ldr	r2, [sp, #0]
 80036fa:	61da      	str	r2, [r3, #28]
  oqp->q_link    = link;
 80036fc:	9b03      	ldr	r3, [sp, #12]
 80036fe:	9a06      	ldr	r2, [sp, #24]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	b005      	add	sp, #20
 8003704:	bd00      	pop	{pc}
 8003706:	46c0      	nop			; (mov r8, r8)
	...

08003710 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8003710:	b500      	push	{lr}
 8003712:	b087      	sub	sp, #28
 8003714:	9003      	str	r0, [sp, #12]
 8003716:	9201      	str	r2, [sp, #4]
 8003718:	230b      	movs	r3, #11
 800371a:	446b      	add	r3, sp
 800371c:	1c0a      	adds	r2, r1, #0
 800371e:	701a      	strb	r2, [r3, #0]

  osalSysLock();
 8003720:	f7ff fdb6 	bl	8003290 <osalSysLock.lto_priv.1>
 8003724:	e00e      	b.n	8003744 <oqPutTimeout+0x34>

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8003726:	9b03      	ldr	r3, [sp, #12]
 8003728:	9a01      	ldr	r2, [sp, #4]
 800372a:	0011      	movs	r1, r2
 800372c:	0018      	movs	r0, r3
 800372e:	f7ff fdcf 	bl	80032d0 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8003732:	0003      	movs	r3, r0
 8003734:	9305      	str	r3, [sp, #20]
    if (msg < MSG_OK) {
 8003736:	9b05      	ldr	r3, [sp, #20]
 8003738:	2b00      	cmp	r3, #0
 800373a:	da03      	bge.n	8003744 <oqPutTimeout+0x34>
      osalSysUnlock();
 800373c:	f7ff fdb0 	bl	80032a0 <osalSysUnlock.lto_priv.1>
      return msg;
 8003740:	9b05      	ldr	r3, [sp, #20]
 8003742:	e027      	b.n	8003794 <oqPutTimeout+0x84>
  while (oqIsFullI(oqp)) {
 8003744:	9b03      	ldr	r3, [sp, #12]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0ec      	beq.n	8003726 <oqPutTimeout+0x16>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 800374c:	9b03      	ldr	r3, [sp, #12]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	1e5a      	subs	r2, r3, #1
 8003752:	9b03      	ldr	r3, [sp, #12]
 8003754:	609a      	str	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
 8003756:	9b03      	ldr	r3, [sp, #12]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	1c59      	adds	r1, r3, #1
 800375c:	9a03      	ldr	r2, [sp, #12]
 800375e:	6151      	str	r1, [r2, #20]
 8003760:	220b      	movs	r2, #11
 8003762:	446a      	add	r2, sp
 8003764:	7812      	ldrb	r2, [r2, #0]
 8003766:	701a      	strb	r2, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8003768:	9b03      	ldr	r3, [sp, #12]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	9b03      	ldr	r3, [sp, #12]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	429a      	cmp	r2, r3
 8003772:	d303      	bcc.n	800377c <oqPutTimeout+0x6c>
    oqp->q_wrptr = oqp->q_buffer;
 8003774:	9b03      	ldr	r3, [sp, #12]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	9b03      	ldr	r3, [sp, #12]
 800377a:	615a      	str	r2, [r3, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 800377c:	9b03      	ldr	r3, [sp, #12]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d004      	beq.n	800378e <oqPutTimeout+0x7e>
    oqp->q_notify(oqp);
 8003784:	9b03      	ldr	r3, [sp, #12]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	9a03      	ldr	r2, [sp, #12]
 800378a:	0010      	movs	r0, r2
 800378c:	4798      	blx	r3
  }

  osalSysUnlock();
 800378e:	f7ff fd87 	bl	80032a0 <osalSysUnlock.lto_priv.1>

  return MSG_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	0018      	movs	r0, r3
 8003796:	b007      	add	sp, #28
 8003798:	bd00      	pop	{pc}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	0000      	movs	r0, r0
	...

080037a0 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
 80037a0:	b500      	push	{lr}
 80037a2:	b085      	sub	sp, #20
 80037a4:	9001      	str	r0, [sp, #4]

  osalDbgCheckClassI();
 80037a6:	f001 fc9b 	bl	80050e0 <chDbgCheckClassI>

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 80037aa:	9b01      	ldr	r3, [sp, #4]
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	9b01      	ldr	r3, [sp, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d105      	bne.n	80037c2 <oqGetI+0x22>
 80037b6:	9b01      	ldr	r3, [sp, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <oqGetI+0x22>
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <oqGetI+0x24>
 80037c2:	2300      	movs	r3, #0
 80037c4:	1c1a      	adds	r2, r3, #0
 80037c6:	2301      	movs	r3, #1
 80037c8:	4013      	ands	r3, r2
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2201      	movs	r2, #1
 80037ce:	4053      	eors	r3, r2
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d020      	beq.n	8003818 <oqGetI+0x78>
    uint8_t b;

    oqp->q_counter++;
 80037d6:	9b01      	ldr	r3, [sp, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	9b01      	ldr	r3, [sp, #4]
 80037de:	609a      	str	r2, [r3, #8]
    b = *oqp->q_rdptr++;
 80037e0:	9b01      	ldr	r3, [sp, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	1c59      	adds	r1, r3, #1
 80037e6:	9a01      	ldr	r2, [sp, #4]
 80037e8:	6191      	str	r1, [r2, #24]
 80037ea:	220f      	movs	r2, #15
 80037ec:	446a      	add	r2, sp
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	7013      	strb	r3, [r2, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 80037f2:	9b01      	ldr	r3, [sp, #4]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	9b01      	ldr	r3, [sp, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d303      	bcc.n	8003806 <oqGetI+0x66>
      oqp->q_rdptr = oqp->q_buffer;
 80037fe:	9b01      	ldr	r3, [sp, #4]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	9b01      	ldr	r3, [sp, #4]
 8003804:	619a      	str	r2, [r3, #24]
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 8003806:	9b01      	ldr	r3, [sp, #4]
 8003808:	2100      	movs	r1, #0
 800380a:	0018      	movs	r0, r3
 800380c:	f7ff fd70 	bl	80032f0 <osalThreadDequeueNextI.lto_priv.1>

    return (msg_t)b;
 8003810:	230f      	movs	r3, #15
 8003812:	446b      	add	r3, sp
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	e001      	b.n	800381c <oqGetI+0x7c>
  }

  return MSG_TIMEOUT;
 8003818:	2301      	movs	r3, #1
 800381a:	425b      	negs	r3, r3
}
 800381c:	0018      	movs	r0, r3
 800381e:	b005      	add	sp, #20
 8003820:	bd00      	pop	{pc}
 8003822:	46c0      	nop			; (mov r8, r8)
	...

08003830 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8003830:	b500      	push	{lr}
 8003832:	b089      	sub	sp, #36	; 0x24
 8003834:	9003      	str	r0, [sp, #12]
 8003836:	9102      	str	r1, [sp, #8]
 8003838:	9201      	str	r2, [sp, #4]
 800383a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = oqp->q_notify;
 800383c:	9b03      	ldr	r3, [sp, #12]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	9307      	str	r3, [sp, #28]
  size_t max = n;
 8003842:	9b01      	ldr	r3, [sp, #4]
 8003844:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);
 8003846:	9b01      	ldr	r3, [sp, #4]
 8003848:	425a      	negs	r2, r3
 800384a:	4153      	adcs	r3, r2
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <oqWriteTimeout+0x2a>
 8003852:	4b1e      	ldr	r3, [pc, #120]	; (80038cc <oqWriteTimeout+0x9c>)
 8003854:	0018      	movs	r0, r3
 8003856:	f001 fadb 	bl	8004e10 <chSysHalt>

  osalSysLock();
 800385a:	f7ff fd19 	bl	8003290 <osalSysLock.lto_priv.1>
 800385e:	e029      	b.n	80038b4 <oqWriteTimeout+0x84>

  while (n > 0U) {
    size_t done;

    done = oq_write(oqp, bp, n);
 8003860:	9a01      	ldr	r2, [sp, #4]
 8003862:	9902      	ldr	r1, [sp, #8]
 8003864:	9b03      	ldr	r3, [sp, #12]
 8003866:	0018      	movs	r0, r3
 8003868:	f7ff fdba 	bl	80033e0 <oq_write>
 800386c:	0003      	movs	r3, r0
 800386e:	9305      	str	r3, [sp, #20]
    if (done == (size_t)0) {
 8003870:	9b05      	ldr	r3, [sp, #20]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10b      	bne.n	800388e <oqWriteTimeout+0x5e>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8003876:	9b03      	ldr	r3, [sp, #12]
 8003878:	9a00      	ldr	r2, [sp, #0]
 800387a:	0011      	movs	r1, r2
 800387c:	0018      	movs	r0, r3
 800387e:	f7ff fd27 	bl	80032d0 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8003882:	0003      	movs	r3, r0
 8003884:	9304      	str	r3, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8003886:	9b04      	ldr	r3, [sp, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d116      	bne.n	80038ba <oqWriteTimeout+0x8a>
 800388c:	e012      	b.n	80038b4 <oqWriteTimeout+0x84>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 800388e:	9b07      	ldr	r3, [sp, #28]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <oqWriteTimeout+0x6c>
        nfy(oqp);
 8003894:	9a03      	ldr	r2, [sp, #12]
 8003896:	9b07      	ldr	r3, [sp, #28]
 8003898:	0010      	movs	r0, r2
 800389a:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 800389c:	f7ff fd00 	bl	80032a0 <osalSysUnlock.lto_priv.1>

      n  -= done;
 80038a0:	9a01      	ldr	r2, [sp, #4]
 80038a2:	9b05      	ldr	r3, [sp, #20]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	9301      	str	r3, [sp, #4]
      bp += done;
 80038a8:	9a02      	ldr	r2, [sp, #8]
 80038aa:	9b05      	ldr	r3, [sp, #20]
 80038ac:	18d3      	adds	r3, r2, r3
 80038ae:	9302      	str	r3, [sp, #8]

      osalSysLock();
 80038b0:	f7ff fcee 	bl	8003290 <osalSysLock.lto_priv.1>
  while (n > 0U) {
 80038b4:	9b01      	ldr	r3, [sp, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1d2      	bne.n	8003860 <oqWriteTimeout+0x30>
    }
  }

  osalSysUnlock();
 80038ba:	f7ff fcf1 	bl	80032a0 <osalSysUnlock.lto_priv.1>
  return max - n;
 80038be:	9a06      	ldr	r2, [sp, #24]
 80038c0:	9b01      	ldr	r3, [sp, #4]
 80038c2:	1ad3      	subs	r3, r2, r3
}
 80038c4:	0018      	movs	r0, r3
 80038c6:	b009      	add	sp, #36	; 0x24
 80038c8:	bd00      	pop	{pc}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	0800b0a4 	.word	0x0800b0a4

080038d0 <port_lock.lto_priv.2>:
  __ASM volatile ("cpsid i" : : : "memory");
 80038d0:	b672      	cpsid	i
}
 80038d2:	4770      	bx	lr
	...

080038e0 <port_unlock.lto_priv.2>:
  __ASM volatile ("cpsie i" : : : "memory");
 80038e0:	b662      	cpsie	i
}
 80038e2:	4770      	bx	lr
	...

080038f0 <chSysLock.lto_priv.2>:
static inline void chSysLock(void) {
 80038f0:	b510      	push	{r4, lr}
  port_lock();
 80038f2:	f7ff ffed 	bl	80038d0 <port_lock.lto_priv.2>
  __dbg_check_lock();
 80038f6:	f001 fafb 	bl	8004ef0 <__dbg_check_lock>
}
 80038fa:	bd10      	pop	{r4, pc}
 80038fc:	0000      	movs	r0, r0
	...

08003900 <chSysUnlock.lto_priv.2>:
static inline void chSysUnlock(void) {
 8003900:	b510      	push	{r4, lr}
  __dbg_check_unlock();
 8003902:	f001 fb1d 	bl	8004f40 <__dbg_check_unlock>
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
 8003906:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <chSysUnlock.lto_priv.2+0x40>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <chSysUnlock.lto_priv.2+0x40>)
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	1e5a      	subs	r2, r3, #1
 8003910:	4193      	sbcs	r3, r2
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00f      	beq.n	8003938 <chSysUnlock.lto_priv.2+0x38>
 8003918:	4b09      	ldr	r3, [pc, #36]	; (8003940 <chSysUnlock.lto_priv.2+0x40>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	4b08      	ldr	r3, [pc, #32]	; (8003940 <chSysUnlock.lto_priv.2+0x40>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	429a      	cmp	r2, r3
 8003926:	419b      	sbcs	r3, r3
 8003928:	425b      	negs	r3, r3
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <chSysUnlock.lto_priv.2+0x38>
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <chSysUnlock.lto_priv.2+0x44>)
 8003932:	0018      	movs	r0, r3
 8003934:	f001 fa6c 	bl	8004e10 <chSysHalt>
  port_unlock();
 8003938:	f7ff ffd2 	bl	80038e0 <port_unlock.lto_priv.2>
}
 800393c:	bd10      	pop	{r4, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	20000a28 	.word	0x20000a28
 8003944:	0800b0c0 	.word	0x0800b0c0
	...

08003950 <osalSysLock.lto_priv.2>:
static inline void osalSysLock(void) {
 8003950:	b510      	push	{r4, lr}
  chSysLock();
 8003952:	f7ff ffcd 	bl	80038f0 <chSysLock.lto_priv.2>
}
 8003956:	bd10      	pop	{r4, pc}
	...

08003960 <osalSysUnlock.lto_priv.2>:
static inline void osalSysUnlock(void) {
 8003960:	b510      	push	{r4, lr}
  chSysUnlock();
 8003962:	f7ff ffcd 	bl	8003900 <chSysUnlock.lto_priv.2>
}
 8003966:	bd10      	pop	{r4, pc}
	...

08003970 <pwmInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void pwmInit(void) {
 8003970:	b510      	push	{r4, lr}

  pwm_lld_init();
 8003972:	f000 fd0d 	bl	8004390 <pwm_lld_init>
}
 8003976:	bd10      	pop	{r4, pc}
	...

08003980 <pwmObjectInit>:
 *
 * @param[out] pwmp     pointer to a @p PWMDriver object
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {
 8003980:	b082      	sub	sp, #8
 8003982:	9001      	str	r0, [sp, #4]

  pwmp->state    = PWM_STOP;
 8003984:	9b01      	ldr	r3, [sp, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	701a      	strb	r2, [r3, #0]
  pwmp->config   = NULL;
 800398a:	9b01      	ldr	r3, [sp, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	605a      	str	r2, [r3, #4]
  pwmp->enabled  = 0;
 8003990:	9b01      	ldr	r3, [sp, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	60da      	str	r2, [r3, #12]
  pwmp->channels = 0;
 8003996:	9b01      	ldr	r3, [sp, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	741a      	strb	r2, [r3, #16]
#if defined(PWM_DRIVER_EXT_INIT_HOOK)
  PWM_DRIVER_EXT_INIT_HOOK(pwmp);
#endif
}
 800399c:	b002      	add	sp, #8
 800399e:	4770      	bx	lr

080039a0 <pwmStart>:
 * @param[in] config    pointer to a @p PWMConfig object
 * @return              The operation status.
 *
 * @api
 */
msg_t pwmStart(PWMDriver *pwmp, const PWMConfig *config) {
 80039a0:	b500      	push	{lr}
 80039a2:	b085      	sub	sp, #20
 80039a4:	9001      	str	r0, [sp, #4]
 80039a6:	9100      	str	r1, [sp, #0]
  msg_t msg;

  osalDbgCheck((pwmp != NULL) && (config != NULL));
 80039a8:	9b01      	ldr	r3, [sp, #4]
 80039aa:	425a      	negs	r2, r3
 80039ac:	4153      	adcs	r3, r2
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d105      	bne.n	80039c0 <pwmStart+0x20>
 80039b4:	9b00      	ldr	r3, [sp, #0]
 80039b6:	425a      	negs	r2, r3
 80039b8:	4153      	adcs	r3, r2
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <pwmStart+0x28>
 80039c0:	4b1c      	ldr	r3, [pc, #112]	; (8003a34 <pwmStart+0x94>)
 80039c2:	0018      	movs	r0, r3
 80039c4:	f001 fa24 	bl	8004e10 <chSysHalt>

  osalSysLock();
 80039c8:	f7ff ffc2 	bl	8003950 <osalSysLock.lto_priv.2>
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
 80039cc:	9b01      	ldr	r3, [sp, #4]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	1e5a      	subs	r2, r3, #1
 80039d4:	4193      	sbcs	r3, r2
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00b      	beq.n	80039f4 <pwmStart+0x54>
 80039dc:	9b01      	ldr	r3, [sp, #4]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	3b02      	subs	r3, #2
 80039e2:	1e5a      	subs	r2, r3, #1
 80039e4:	4193      	sbcs	r3, r2
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <pwmStart+0x54>
 80039ec:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <pwmStart+0x94>)
 80039ee:	0018      	movs	r0, r3
 80039f0:	f001 fa0e 	bl	8004e10 <chSysHalt>
                "invalid state");

  pwmp->config = config;
 80039f4:	9b01      	ldr	r3, [sp, #4]
 80039f6:	9a00      	ldr	r2, [sp, #0]
 80039f8:	605a      	str	r2, [r3, #4]
  pwmp->period = config->period;
 80039fa:	9b00      	ldr	r3, [sp, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	9b01      	ldr	r3, [sp, #4]
 8003a00:	609a      	str	r2, [r3, #8]
  pwmp->enabled = 0U;
 8003a02:	9b01      	ldr	r3, [sp, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	60da      	str	r2, [r3, #12]

#if defined(PWM_LLD_ENHANCED_API)
  msg = pwm_lld_start(pwmp);
#else
  pwm_lld_start(pwmp);
 8003a08:	9b01      	ldr	r3, [sp, #4]
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f000 fcf8 	bl	8004400 <pwm_lld_start>
  msg = HAL_RET_SUCCESS;
 8003a10:	2300      	movs	r3, #0
 8003a12:	9303      	str	r3, [sp, #12]
#endif
  if (msg == HAL_RET_SUCCESS) {
 8003a14:	9b03      	ldr	r3, [sp, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d103      	bne.n	8003a22 <pwmStart+0x82>
    pwmp->state = PWM_READY;
 8003a1a:	9b01      	ldr	r3, [sp, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	701a      	strb	r2, [r3, #0]
 8003a20:	e002      	b.n	8003a28 <pwmStart+0x88>
  }
  else {
    pwmp->state = PWM_STOP;
 8003a22:	9b01      	ldr	r3, [sp, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
  }

  osalSysUnlock();
 8003a28:	f7ff ff9a 	bl	8003960 <osalSysUnlock.lto_priv.2>

  return msg;
 8003a2c:	9b03      	ldr	r3, [sp, #12]
}
 8003a2e:	0018      	movs	r0, r3
 8003a30:	b005      	add	sp, #20
 8003a32:	bd00      	pop	{pc}
 8003a34:	0800b0b4 	.word	0x0800b0b4
	...

08003a40 <pwmEnableChannel>:
 *
 * @api
 */
void pwmEnableChannel(PWMDriver *pwmp,
                      pwmchannel_t channel,
                      pwmcnt_t width) {
 8003a40:	b500      	push	{lr}
 8003a42:	b085      	sub	sp, #20
 8003a44:	9003      	str	r0, [sp, #12]
 8003a46:	9201      	str	r2, [sp, #4]
 8003a48:	230b      	movs	r3, #11
 8003a4a:	446b      	add	r3, sp
 8003a4c:	1c0a      	adds	r2, r1, #0
 8003a4e:	701a      	strb	r2, [r3, #0]

  osalDbgCheck((pwmp != NULL) && (channel < pwmp->channels));
 8003a50:	9b03      	ldr	r3, [sp, #12]
 8003a52:	425a      	negs	r2, r3
 8003a54:	4153      	adcs	r3, r2
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10a      	bne.n	8003a72 <pwmEnableChannel+0x32>
 8003a5c:	9b03      	ldr	r3, [sp, #12]
 8003a5e:	7c1a      	ldrb	r2, [r3, #16]
 8003a60:	230b      	movs	r3, #11
 8003a62:	446b      	add	r3, sp
 8003a64:	7819      	ldrb	r1, [r3, #0]
 8003a66:	2300      	movs	r3, #0
 8003a68:	4291      	cmp	r1, r2
 8003a6a:	415b      	adcs	r3, r3
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <pwmEnableChannel+0x3a>
 8003a72:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <pwmEnableChannel+0x84>)
 8003a74:	0018      	movs	r0, r3
 8003a76:	f001 f9cb 	bl	8004e10 <chSysHalt>

  osalSysLock();
 8003a7a:	f7ff ff69 	bl	8003950 <osalSysLock.lto_priv.2>

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");
 8003a7e:	9b03      	ldr	r3, [sp, #12]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	3b02      	subs	r3, #2
 8003a84:	1e5a      	subs	r2, r3, #1
 8003a86:	4193      	sbcs	r3, r2
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <pwmEnableChannel+0x56>
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <pwmEnableChannel+0x84>)
 8003a90:	0018      	movs	r0, r3
 8003a92:	f001 f9bd 	bl	8004e10 <chSysHalt>

  pwmEnableChannelI(pwmp, channel, width);
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	230b      	movs	r3, #11
 8003a9c:	446b      	add	r3, sp
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4099      	lsls	r1, r3
 8003aa4:	000b      	movs	r3, r1
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	9b03      	ldr	r3, [sp, #12]
 8003aaa:	60da      	str	r2, [r3, #12]
 8003aac:	9a01      	ldr	r2, [sp, #4]
 8003aae:	230b      	movs	r3, #11
 8003ab0:	446b      	add	r3, sp
 8003ab2:	7819      	ldrb	r1, [r3, #0]
 8003ab4:	9b03      	ldr	r3, [sp, #12]
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f000 fe3a 	bl	8004730 <pwm_lld_enable_channel>

  osalSysUnlock();
 8003abc:	f7ff ff50 	bl	8003960 <osalSysUnlock.lto_priv.2>
}
 8003ac0:	b005      	add	sp, #20
 8003ac2:	bd00      	pop	{pc}
 8003ac4:	0800b0cc 	.word	0x0800b0cc
	...

08003ad0 <port_lock.lto_priv.3>:
  __ASM volatile ("cpsid i" : : : "memory");
 8003ad0:	b672      	cpsid	i
}
 8003ad2:	4770      	bx	lr
	...

08003ae0 <port_unlock.lto_priv.3>:
  __ASM volatile ("cpsie i" : : : "memory");
 8003ae0:	b662      	cpsie	i
}
 8003ae2:	4770      	bx	lr
	...

08003af0 <chSysLock.lto_priv.3>:
static inline void chSysLock(void) {
 8003af0:	b510      	push	{r4, lr}
  port_lock();
 8003af2:	f7ff ffed 	bl	8003ad0 <port_lock.lto_priv.3>
  __dbg_check_lock();
 8003af6:	f001 f9fb 	bl	8004ef0 <__dbg_check_lock>
}
 8003afa:	bd10      	pop	{r4, pc}
 8003afc:	0000      	movs	r0, r0
	...

08003b00 <chSysUnlock.lto_priv.3>:
static inline void chSysUnlock(void) {
 8003b00:	b510      	push	{r4, lr}
  __dbg_check_unlock();
 8003b02:	f001 fa1d 	bl	8004f40 <__dbg_check_unlock>
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
 8003b06:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <chSysUnlock.lto_priv.3+0x40>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <chSysUnlock.lto_priv.3+0x40>)
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	1e5a      	subs	r2, r3, #1
 8003b10:	4193      	sbcs	r3, r2
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00f      	beq.n	8003b38 <chSysUnlock.lto_priv.3+0x38>
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <chSysUnlock.lto_priv.3+0x40>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <chSysUnlock.lto_priv.3+0x40>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	419b      	sbcs	r3, r3
 8003b28:	425b      	negs	r3, r3
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <chSysUnlock.lto_priv.3+0x38>
 8003b30:	4b04      	ldr	r3, [pc, #16]	; (8003b44 <chSysUnlock.lto_priv.3+0x44>)
 8003b32:	0018      	movs	r0, r3
 8003b34:	f001 f96c 	bl	8004e10 <chSysHalt>
  port_unlock();
 8003b38:	f7ff ffd2 	bl	8003ae0 <port_unlock.lto_priv.3>
}
 8003b3c:	bd10      	pop	{r4, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	20000a28 	.word	0x20000a28
 8003b44:	0800b118 	.word	0x0800b118
	...

08003b50 <osalSysLock.lto_priv.3>:
static inline void osalSysLock(void) {
 8003b50:	b510      	push	{r4, lr}
  chSysLock();
 8003b52:	f7ff ffcd 	bl	8003af0 <chSysLock.lto_priv.3>
}
 8003b56:	bd10      	pop	{r4, pc}
	...

08003b60 <osalSysUnlock.lto_priv.3>:
static inline void osalSysUnlock(void) {
 8003b60:	b510      	push	{r4, lr}
  chSysUnlock();
 8003b62:	f7ff ffcd 	bl	8003b00 <chSysUnlock.lto_priv.3>
}
 8003b66:	bd10      	pop	{r4, pc}
	...

08003b70 <osalEventObjectInit>:
 *
 * @param[out] esp      pointer to the event source object
 *
 * @init
 */
static inline void osalEventObjectInit(event_source_t *esp) {
 8003b70:	b500      	push	{lr}
 8003b72:	b083      	sub	sp, #12
 8003b74:	9001      	str	r0, [sp, #4]

  chEvtObjectInit(esp);
 8003b76:	9b01      	ldr	r3, [sp, #4]
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f003 f991 	bl	8006ea0 <chEvtObjectInit>
}
 8003b7e:	b003      	add	sp, #12
 8003b80:	bd00      	pop	{pc}
 8003b82:	46c0      	nop			; (mov r8, r8)
	...

08003b90 <osalEventBroadcastFlagsI.lto_priv.1>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
 8003b90:	b500      	push	{lr}
 8003b92:	b083      	sub	sp, #12
 8003b94:	9001      	str	r0, [sp, #4]
 8003b96:	9100      	str	r1, [sp, #0]

  chEvtBroadcastFlagsI(esp, flags);
 8003b98:	9a00      	ldr	r2, [sp, #0]
 8003b9a:	9b01      	ldr	r3, [sp, #4]
 8003b9c:	0011      	movs	r1, r2
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f003 f9d6 	bl	8006f50 <chEvtBroadcastFlagsI>
}
 8003ba4:	b003      	add	sp, #12
 8003ba6:	bd00      	pop	{pc}
	...

08003bb0 <_write>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8003bb0:	b500      	push	{lr}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	9003      	str	r0, [sp, #12]
 8003bb6:	9102      	str	r1, [sp, #8]
 8003bb8:	9201      	str	r2, [sp, #4]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8003bba:	9b03      	ldr	r3, [sp, #12]
 8003bbc:	3330      	adds	r3, #48	; 0x30
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	425b      	negs	r3, r3
 8003bc4:	9a01      	ldr	r2, [sp, #4]
 8003bc6:	9902      	ldr	r1, [sp, #8]
 8003bc8:	f7ff fe32 	bl	8003830 <oqWriteTimeout>
 8003bcc:	0003      	movs	r3, r0
                        n, TIME_INFINITE);
}
 8003bce:	0018      	movs	r0, r3
 8003bd0:	b005      	add	sp, #20
 8003bd2:	bd00      	pop	{pc}
	...

08003be0 <_read>:

static size_t _read(void *ip, uint8_t *bp, size_t n) {
 8003be0:	b500      	push	{lr}
 8003be2:	b085      	sub	sp, #20
 8003be4:	9003      	str	r0, [sp, #12]
 8003be6:	9102      	str	r1, [sp, #8]
 8003be8:	9201      	str	r2, [sp, #4]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8003bea:	9b03      	ldr	r3, [sp, #12]
 8003bec:	330c      	adds	r3, #12
 8003bee:	0018      	movs	r0, r3
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	425b      	negs	r3, r3
 8003bf4:	9a01      	ldr	r2, [sp, #4]
 8003bf6:	9902      	ldr	r1, [sp, #8]
 8003bf8:	f7ff fd12 	bl	8003620 <iqReadTimeout>
 8003bfc:	0003      	movs	r3, r0
                       n, TIME_INFINITE);
}
 8003bfe:	0018      	movs	r0, r3
 8003c00:	b005      	add	sp, #20
 8003c02:	bd00      	pop	{pc}
	...

08003c10 <_put.lto_priv.0>:

static msg_t _put(void *ip, uint8_t b) {
 8003c10:	b500      	push	{lr}
 8003c12:	b083      	sub	sp, #12
 8003c14:	9001      	str	r0, [sp, #4]
 8003c16:	000a      	movs	r2, r1
 8003c18:	466b      	mov	r3, sp
 8003c1a:	3303      	adds	r3, #3
 8003c1c:	701a      	strb	r2, [r3, #0]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8003c1e:	9b01      	ldr	r3, [sp, #4]
 8003c20:	3330      	adds	r3, #48	; 0x30
 8003c22:	0018      	movs	r0, r3
 8003c24:	2301      	movs	r3, #1
 8003c26:	425a      	negs	r2, r3
 8003c28:	466b      	mov	r3, sp
 8003c2a:	3303      	adds	r3, #3
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	0019      	movs	r1, r3
 8003c30:	f7ff fd6e 	bl	8003710 <oqPutTimeout>
 8003c34:	0003      	movs	r3, r0
}
 8003c36:	0018      	movs	r0, r3
 8003c38:	b003      	add	sp, #12
 8003c3a:	bd00      	pop	{pc}
 8003c3c:	0000      	movs	r0, r0
	...

08003c40 <_get.lto_priv.0>:

static msg_t _get(void *ip) {
 8003c40:	b500      	push	{lr}
 8003c42:	b083      	sub	sp, #12
 8003c44:	9001      	str	r0, [sp, #4]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8003c46:	9b01      	ldr	r3, [sp, #4]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	4252      	negs	r2, r2
 8003c4e:	0011      	movs	r1, r2
 8003c50:	0018      	movs	r0, r3
 8003c52:	f7ff fc9d 	bl	8003590 <iqGetTimeout>
 8003c56:	0003      	movs	r3, r0
}
 8003c58:	0018      	movs	r0, r3
 8003c5a:	b003      	add	sp, #12
 8003c5c:	bd00      	pop	{pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)

08003c60 <_putt>:

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 8003c60:	b500      	push	{lr}
 8003c62:	b085      	sub	sp, #20
 8003c64:	9003      	str	r0, [sp, #12]
 8003c66:	9201      	str	r2, [sp, #4]
 8003c68:	230b      	movs	r3, #11
 8003c6a:	446b      	add	r3, sp
 8003c6c:	1c0a      	adds	r2, r1, #0
 8003c6e:	701a      	strb	r2, [r3, #0]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8003c70:	9b03      	ldr	r3, [sp, #12]
 8003c72:	3330      	adds	r3, #48	; 0x30
 8003c74:	0018      	movs	r0, r3
 8003c76:	9a01      	ldr	r2, [sp, #4]
 8003c78:	230b      	movs	r3, #11
 8003c7a:	446b      	add	r3, sp
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	0019      	movs	r1, r3
 8003c80:	f7ff fd46 	bl	8003710 <oqPutTimeout>
 8003c84:	0003      	movs	r3, r0
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	b005      	add	sp, #20
 8003c8a:	bd00      	pop	{pc}
 8003c8c:	0000      	movs	r0, r0
	...

08003c90 <_gett>:

static msg_t _gett(void *ip, sysinterval_t timeout) {
 8003c90:	b500      	push	{lr}
 8003c92:	b083      	sub	sp, #12
 8003c94:	9001      	str	r0, [sp, #4]
 8003c96:	9100      	str	r1, [sp, #0]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8003c98:	9b01      	ldr	r3, [sp, #4]
 8003c9a:	330c      	adds	r3, #12
 8003c9c:	9a00      	ldr	r2, [sp, #0]
 8003c9e:	0011      	movs	r1, r2
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f7ff fc75 	bl	8003590 <iqGetTimeout>
 8003ca6:	0003      	movs	r3, r0
}
 8003ca8:	0018      	movs	r0, r3
 8003caa:	b003      	add	sp, #12
 8003cac:	bd00      	pop	{pc}
 8003cae:	46c0      	nop			; (mov r8, r8)

08003cb0 <_writet>:

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {
 8003cb0:	b500      	push	{lr}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	9003      	str	r0, [sp, #12]
 8003cb6:	9102      	str	r1, [sp, #8]
 8003cb8:	9201      	str	r2, [sp, #4]
 8003cba:	9300      	str	r3, [sp, #0]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8003cbc:	9b03      	ldr	r3, [sp, #12]
 8003cbe:	3330      	adds	r3, #48	; 0x30
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	9b00      	ldr	r3, [sp, #0]
 8003cc4:	9a01      	ldr	r2, [sp, #4]
 8003cc6:	9902      	ldr	r1, [sp, #8]
 8003cc8:	f7ff fdb2 	bl	8003830 <oqWriteTimeout>
 8003ccc:	0003      	movs	r3, r0
}
 8003cce:	0018      	movs	r0, r3
 8003cd0:	b005      	add	sp, #20
 8003cd2:	bd00      	pop	{pc}
	...

08003ce0 <_readt>:

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {
 8003ce0:	b500      	push	{lr}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	9003      	str	r0, [sp, #12]
 8003ce6:	9102      	str	r1, [sp, #8]
 8003ce8:	9201      	str	r2, [sp, #4]
 8003cea:	9300      	str	r3, [sp, #0]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8003cec:	9b03      	ldr	r3, [sp, #12]
 8003cee:	330c      	adds	r3, #12
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	9b00      	ldr	r3, [sp, #0]
 8003cf4:	9a01      	ldr	r2, [sp, #4]
 8003cf6:	9902      	ldr	r1, [sp, #8]
 8003cf8:	f7ff fc92 	bl	8003620 <iqReadTimeout>
 8003cfc:	0003      	movs	r3, r0
}
 8003cfe:	0018      	movs	r0, r3
 8003d00:	b005      	add	sp, #20
 8003d02:	bd00      	pop	{pc}
	...

08003d10 <_ctl>:

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8003d10:	b500      	push	{lr}
 8003d12:	b087      	sub	sp, #28
 8003d14:	9003      	str	r0, [sp, #12]
 8003d16:	9102      	str	r1, [sp, #8]
 8003d18:	9201      	str	r2, [sp, #4]
  SerialDriver *sdp = (SerialDriver *)ip;
 8003d1a:	9b03      	ldr	r3, [sp, #12]
 8003d1c:	9305      	str	r3, [sp, #20]

  osalDbgCheck(sdp != NULL);
 8003d1e:	9b05      	ldr	r3, [sp, #20]
 8003d20:	425a      	negs	r2, r3
 8003d22:	4153      	adcs	r3, r2
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <_ctl+0x22>
 8003d2a:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <_ctl+0x58>)
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f001 f86f 	bl	8004e10 <chSysHalt>

  switch (operation) {
 8003d32:	9b02      	ldr	r3, [sp, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00e      	beq.n	8003d56 <_ctl+0x46>
 8003d38:	9b02      	ldr	r3, [sp, #8]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d10e      	bne.n	8003d5c <_ctl+0x4c>
  case CHN_CTL_NOP:
    osalDbgCheck(arg == NULL);
 8003d3e:	9b01      	ldr	r3, [sp, #4]
 8003d40:	1e5a      	subs	r2, r3, #1
 8003d42:	4193      	sbcs	r3, r2
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <_ctl+0x42>
 8003d4a:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <_ctl+0x58>)
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f001 f85f 	bl	8004e10 <chSysHalt>
    return sd_lld_control(sdp, operation, arg);
#else
    return HAL_RET_UNKNOWN_CTL;
#endif
  }
  return HAL_RET_SUCCESS;
 8003d52:	2300      	movs	r3, #0
 8003d54:	e004      	b.n	8003d60 <_ctl+0x50>
    return HAL_RET_UNKNOWN_CTL;
 8003d56:	2314      	movs	r3, #20
 8003d58:	425b      	negs	r3, r3
 8003d5a:	e001      	b.n	8003d60 <_ctl+0x50>
    return HAL_RET_UNKNOWN_CTL;
 8003d5c:	2314      	movs	r3, #20
 8003d5e:	425b      	negs	r3, r3
}
 8003d60:	0018      	movs	r0, r3
 8003d62:	b007      	add	sp, #28
 8003d64:	bd00      	pop	{pc}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	0800b108 	.word	0x0800b108
 8003d6c:	00000000 	.word	0x00000000

08003d70 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
 8003d70:	b510      	push	{r4, lr}

  sd_lld_init();
 8003d72:	f000 fe6d 	bl	8004a50 <sd_lld_init>
}
 8003d76:	bd10      	pop	{r4, pc}
	...

08003d80 <sdObjectInit>:
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
#else
void sdObjectInit(SerialDriver *sdp) {
 8003d80:	b500      	push	{lr}
 8003d82:	b083      	sub	sp, #12
 8003d84:	9001      	str	r0, [sp, #4]

  sdp->vmt = &vmt;
 8003d86:	9b01      	ldr	r3, [sp, #4]
 8003d88:	4a05      	ldr	r2, [pc, #20]	; (8003da0 <sdObjectInit+0x20>)
 8003d8a:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdp->event);
 8003d8c:	9b01      	ldr	r3, [sp, #4]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	0018      	movs	r0, r3
 8003d92:	f7ff feed 	bl	8003b70 <osalEventObjectInit>
  sdp->state = SD_STOP;
 8003d96:	9b01      	ldr	r3, [sp, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	721a      	strb	r2, [r3, #8]
}
 8003d9c:	b003      	add	sp, #12
 8003d9e:	bd00      	pop	{pc}
 8003da0:	0800b0e0 	.word	0x0800b0e0
	...

08003db0 <sdStart>:
 *                      configuration is used.
 * @return              The operation status.
 *
 * @api
 */
msg_t sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8003db0:	b500      	push	{lr}
 8003db2:	b085      	sub	sp, #20
 8003db4:	9001      	str	r0, [sp, #4]
 8003db6:	9100      	str	r1, [sp, #0]
  msg_t msg;

  osalDbgCheck(sdp != NULL);
 8003db8:	9b01      	ldr	r3, [sp, #4]
 8003dba:	425a      	negs	r2, r3
 8003dbc:	4153      	adcs	r3, r2
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <sdStart+0x1c>
 8003dc4:	4b18      	ldr	r3, [pc, #96]	; (8003e28 <sdStart+0x78>)
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f001 f822 	bl	8004e10 <chSysHalt>

  osalSysLock();
 8003dcc:	f7ff fec0 	bl	8003b50 <osalSysLock.lto_priv.3>
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 8003dd0:	9b01      	ldr	r3, [sp, #4]
 8003dd2:	7a1b      	ldrb	r3, [r3, #8]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	1e5a      	subs	r2, r3, #1
 8003dd8:	4193      	sbcs	r3, r2
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00b      	beq.n	8003df8 <sdStart+0x48>
 8003de0:	9b01      	ldr	r3, [sp, #4]
 8003de2:	7a1b      	ldrb	r3, [r3, #8]
 8003de4:	3b02      	subs	r3, #2
 8003de6:	1e5a      	subs	r2, r3, #1
 8003de8:	4193      	sbcs	r3, r2
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <sdStart+0x48>
 8003df0:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <sdStart+0x78>)
 8003df2:	0018      	movs	r0, r3
 8003df4:	f001 f80c 	bl	8004e10 <chSysHalt>
                "invalid state");

#if defined(SD_LLD_ENHANCED_API)
  msg = sd_lld_start(sdp, config);
#else
  sd_lld_start(sdp, config);
 8003df8:	9a00      	ldr	r2, [sp, #0]
 8003dfa:	9b01      	ldr	r3, [sp, #4]
 8003dfc:	0011      	movs	r1, r2
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f000 fe56 	bl	8004ab0 <sd_lld_start>
  msg = HAL_RET_SUCCESS;
 8003e04:	2300      	movs	r3, #0
 8003e06:	9303      	str	r3, [sp, #12]
#endif
  if (msg == HAL_RET_SUCCESS) {
 8003e08:	9b03      	ldr	r3, [sp, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d103      	bne.n	8003e16 <sdStart+0x66>
    sdp->state = SD_READY;
 8003e0e:	9b01      	ldr	r3, [sp, #4]
 8003e10:	2202      	movs	r2, #2
 8003e12:	721a      	strb	r2, [r3, #8]
 8003e14:	e002      	b.n	8003e1c <sdStart+0x6c>
  }
  else {
    sdp->state = SD_STOP;
 8003e16:	9b01      	ldr	r3, [sp, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	721a      	strb	r2, [r3, #8]
  }

  osalSysUnlock();
 8003e1c:	f7ff fea0 	bl	8003b60 <osalSysUnlock.lto_priv.3>

  return msg;
 8003e20:	9b03      	ldr	r3, [sp, #12]
}
 8003e22:	0018      	movs	r0, r3
 8003e24:	b005      	add	sp, #20
 8003e26:	bd00      	pop	{pc}
 8003e28:	0800b110 	.word	0x0800b110
 8003e2c:	00000000 	.word	0x00000000

08003e30 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8003e30:	b500      	push	{lr}
 8003e32:	b083      	sub	sp, #12
 8003e34:	9001      	str	r0, [sp, #4]
 8003e36:	000a      	movs	r2, r1
 8003e38:	466b      	mov	r3, sp
 8003e3a:	3303      	adds	r3, #3
 8003e3c:	701a      	strb	r2, [r3, #0]

  osalDbgCheckClassI();
 8003e3e:	f001 f94f 	bl	80050e0 <chDbgCheckClassI>
  osalDbgCheck(sdp != NULL);
 8003e42:	9b01      	ldr	r3, [sp, #4]
 8003e44:	425a      	negs	r2, r3
 8003e46:	4153      	adcs	r3, r2
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <sdIncomingDataI+0x26>
 8003e4e:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <sdIncomingDataI+0x68>)
 8003e50:	0018      	movs	r0, r3
 8003e52:	f000 ffdd 	bl	8004e10 <chSysHalt>

  if (iqIsEmptyI(&sdp->iqueue))
 8003e56:	9b01      	ldr	r3, [sp, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d105      	bne.n	8003e6a <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 8003e5e:	9b01      	ldr	r3, [sp, #4]
 8003e60:	3304      	adds	r3, #4
 8003e62:	2104      	movs	r1, #4
 8003e64:	0018      	movs	r0, r3
 8003e66:	f7ff fe93 	bl	8003b90 <osalEventBroadcastFlagsI.lto_priv.1>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8003e6a:	9b01      	ldr	r3, [sp, #4]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	001a      	movs	r2, r3
 8003e70:	466b      	mov	r3, sp
 8003e72:	3303      	adds	r3, #3
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	0019      	movs	r1, r3
 8003e78:	0010      	movs	r0, r2
 8003e7a:	f7ff fb41 	bl	8003500 <iqPutI>
 8003e7e:	1e03      	subs	r3, r0, #0
 8003e80:	da07      	bge.n	8003e92 <sdIncomingDataI+0x62>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 8003e82:	9b01      	ldr	r3, [sp, #4]
 8003e84:	3304      	adds	r3, #4
 8003e86:	2280      	movs	r2, #128	; 0x80
 8003e88:	0112      	lsls	r2, r2, #4
 8003e8a:	0011      	movs	r1, r2
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f7ff fe7f 	bl	8003b90 <osalEventBroadcastFlagsI.lto_priv.1>
}
 8003e92:	b003      	add	sp, #12
 8003e94:	bd00      	pop	{pc}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	0800b124 	.word	0x0800b124
 8003e9c:	00000000 	.word	0x00000000

08003ea0 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	9001      	str	r0, [sp, #4]
 8003ea4:	9100      	str	r1, [sp, #0]

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8003ea6:	4a1b      	ldr	r2, [pc, #108]	; (8003f14 <nvicEnableVector+0x74>)
 8003ea8:	9b01      	ldr	r3, [sp, #4]
 8003eaa:	089b      	lsrs	r3, r3, #2
 8003eac:	33c0      	adds	r3, #192	; 0xc0
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	589b      	ldr	r3, [r3, r2]
 8003eb2:	9a01      	ldr	r2, [sp, #4]
 8003eb4:	2103      	movs	r1, #3
 8003eb6:	400a      	ands	r2, r1
 8003eb8:	00d2      	lsls	r2, r2, #3
 8003eba:	21ff      	movs	r1, #255	; 0xff
 8003ebc:	4091      	lsls	r1, r2
 8003ebe:	000a      	movs	r2, r1
 8003ec0:	43d2      	mvns	r2, r2
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	0011      	movs	r1, r2
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
 8003ec6:	9b00      	ldr	r3, [sp, #0]
 8003ec8:	019a      	lsls	r2, r3, #6
 8003eca:	9b01      	ldr	r3, [sp, #4]
 8003ecc:	2003      	movs	r0, #3
 8003ece:	4003      	ands	r3, r0
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	409a      	lsls	r2, r3
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8003ed4:	480f      	ldr	r0, [pc, #60]	; (8003f14 <nvicEnableVector+0x74>)
 8003ed6:	9b01      	ldr	r3, [sp, #4]
 8003ed8:	089b      	lsrs	r3, r3, #2
 8003eda:	430a      	orrs	r2, r1
 8003edc:	33c0      	adds	r3, #192	; 0xc0
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	501a      	str	r2, [r3, r0]
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003ee2:	9b01      	ldr	r3, [sp, #4]
 8003ee4:	221f      	movs	r2, #31
 8003ee6:	401a      	ands	r2, r3
 8003ee8:	490a      	ldr	r1, [pc, #40]	; (8003f14 <nvicEnableVector+0x74>)
 8003eea:	9b01      	ldr	r3, [sp, #4]
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	2001      	movs	r0, #1
 8003ef0:	4090      	lsls	r0, r2
 8003ef2:	0002      	movs	r2, r0
 8003ef4:	3360      	adds	r3, #96	; 0x60
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	505a      	str	r2, [r3, r1]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003efa:	9b01      	ldr	r3, [sp, #4]
 8003efc:	221f      	movs	r2, #31
 8003efe:	401a      	ands	r2, r3
 8003f00:	4904      	ldr	r1, [pc, #16]	; (8003f14 <nvicEnableVector+0x74>)
 8003f02:	9b01      	ldr	r3, [sp, #4]
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	2001      	movs	r0, #1
 8003f08:	4090      	lsls	r0, r2
 8003f0a:	0002      	movs	r2, r0
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	505a      	str	r2, [r3, r1]
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3)
  /* If the IRQ is enabled from secure mode then it is marked as secure
     interrupt in ITNS.*/
  NVIC->__ITNS[n >> 5U] &= ~(1U << (n & 0x1FU));
#endif
}
 8003f10:	b002      	add	sp, #8
 8003f12:	4770      	bx	lr
 8003f14:	e000e100 	.word	0xe000e100
	...

08003f20 <VectorAC>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8003f20:	b500      	push	{lr}
 8003f22:	b083      	sub	sp, #12
 8003f24:	4673      	mov	r3, lr

  OSAL_IRQ_PROLOGUE();
 8003f26:	9301      	str	r3, [sp, #4]
 8003f28:	f001 f882 	bl	8005030 <__dbg_check_enter_isr>
#if STM32_UART_USE_USART1
  uart_lld_serve_interrupt(&UARTD1);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
 8003f2c:	f001 f8a8 	bl	8005080 <__dbg_check_leave_isr>
 8003f30:	9b01      	ldr	r3, [sp, #4]
 8003f32:	0018      	movs	r0, r3
 8003f34:	f003 fd74 	bl	8007a20 <__port_irq_epilogue>
}
 8003f38:	b003      	add	sp, #12
 8003f3a:	bd00      	pop	{pc}
 8003f3c:	0000      	movs	r0, r0
	...

08003f40 <VectorB0>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8003f40:	b500      	push	{lr}
 8003f42:	b083      	sub	sp, #12
 8003f44:	4673      	mov	r3, lr

  OSAL_IRQ_PROLOGUE();
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	f001 f872 	bl	8005030 <__dbg_check_enter_isr>

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART2
  sd_lld_serve_interrupt(&SD2);
 8003f4c:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <VectorB0+0x24>)
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f000 fdd6 	bl	8004b00 <sd_lld_serve_interrupt>
#if STM32_UART_USE_USART2
  uart_lld_serve_interrupt(&UARTD2);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
 8003f54:	f001 f894 	bl	8005080 <__dbg_check_leave_isr>
 8003f58:	9b01      	ldr	r3, [sp, #4]
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f003 fd60 	bl	8007a20 <__port_irq_epilogue>
}
 8003f60:	b003      	add	sp, #12
 8003f62:	bd00      	pop	{pc}
 8003f64:	200009a0 	.word	0x200009a0
	...

08003f70 <VectorB4>:
/**
 * @brief   USART3..8 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_8_HANDLER) {
 8003f70:	b500      	push	{lr}
 8003f72:	b083      	sub	sp, #12
 8003f74:	4673      	mov	r3, lr

  OSAL_IRQ_PROLOGUE();
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	f001 f85a 	bl	8005030 <__dbg_check_enter_isr>
#if STM32_UART_USE_UART8
  uart_lld_serve_interrupt(&UARTD8);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
 8003f7c:	f001 f880 	bl	8005080 <__dbg_check_leave_isr>
 8003f80:	9b01      	ldr	r3, [sp, #4]
 8003f82:	0018      	movs	r0, r3
 8003f84:	f003 fd4c 	bl	8007a20 <__port_irq_epilogue>
}
 8003f88:	b003      	add	sp, #12
 8003f8a:	bd00      	pop	{pc}
 8003f8c:	0000      	movs	r0, r0
	...

08003f90 <irqInit>:
/**
 * @brief   Enables IRQ sources.
 *
 * @notapi
 */
void irqInit(void) {
 8003f90:	b510      	push	{r4, lr}

#if HAL_USE_PAL
  nvicEnableVector(EXTI0_1_IRQn, STM32_IRQ_EXTI0_1_PRIORITY);
 8003f92:	2103      	movs	r1, #3
 8003f94:	2005      	movs	r0, #5
 8003f96:	f7ff ff83 	bl	8003ea0 <nvicEnableVector>
  nvicEnableVector(EXTI2_3_IRQn, STM32_IRQ_EXTI2_3_PRIORITY);
 8003f9a:	2103      	movs	r1, #3
 8003f9c:	2006      	movs	r0, #6
 8003f9e:	f7ff ff7f 	bl	8003ea0 <nvicEnableVector>
  nvicEnableVector(EXTI4_15_IRQn, STM32_IRQ_EXTI4_15_PRIORITY);
 8003fa2:	2103      	movs	r1, #3
 8003fa4:	2007      	movs	r0, #7
 8003fa6:	f7ff ff7b 	bl	8003ea0 <nvicEnableVector>
#endif

#if HAL_USE_SERIAL || HAL_USE_UART
  nvicEnableVector(STM32_USART1_NUMBER, STM32_IRQ_USART1_PRIORITY);
 8003faa:	2103      	movs	r1, #3
 8003fac:	201b      	movs	r0, #27
 8003fae:	f7ff ff77 	bl	8003ea0 <nvicEnableVector>
  nvicEnableVector(STM32_USART2_NUMBER, STM32_IRQ_USART2_PRIORITY);
 8003fb2:	2103      	movs	r1, #3
 8003fb4:	201c      	movs	r0, #28
 8003fb6:	f7ff ff73 	bl	8003ea0 <nvicEnableVector>
  nvicEnableVector(STM32_USART3_8_NUMBER, STM32_IRQ_USART3_8_PRIORITY);
 8003fba:	2103      	movs	r1, #3
 8003fbc:	201d      	movs	r0, #29
 8003fbe:	f7ff ff6f 	bl	8003ea0 <nvicEnableVector>
#endif
}
 8003fc2:	bd10      	pop	{r4, pc}
	...

08003fd0 <hal_lld_backup_domain_init>:
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8003fd0:	4b15      	ldr	r3, [pc, #84]	; (8004028 <hal_lld_backup_domain_init+0x58>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4b14      	ldr	r3, [pc, #80]	; (8004028 <hal_lld_backup_domain_init+0x58>)
 8003fd6:	2180      	movs	r1, #128	; 0x80
 8003fd8:	0049      	lsls	r1, r1, #1
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	601a      	str	r2, [r3, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8003fde:	4b13      	ldr	r3, [pc, #76]	; (800402c <hal_lld_backup_domain_init+0x5c>)
 8003fe0:	6a1a      	ldr	r2, [r3, #32]
 8003fe2:	23c0      	movs	r3, #192	; 0xc0
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	401a      	ands	r2, r3
 8003fe8:	2380      	movs	r3, #128	; 0x80
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d006      	beq.n	8003ffe <hal_lld_backup_domain_init+0x2e>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8003ff0:	4b0e      	ldr	r3, [pc, #56]	; (800402c <hal_lld_backup_domain_init+0x5c>)
 8003ff2:	2280      	movs	r2, #128	; 0x80
 8003ff4:	0252      	lsls	r2, r2, #9
 8003ff6:	621a      	str	r2, [r3, #32]
    RCC->BDCR = 0;
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <hal_lld_backup_domain_init+0x5c>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	621a      	str	r2, [r3, #32]
#endif

#if STM32_RTCSEL != STM32_RTCSEL_NOCLOCK
  /* If the backup domain hasn't been initialized yet then proceed with
     initialization.*/
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 8003ffe:	4b0b      	ldr	r3, [pc, #44]	; (800402c <hal_lld_backup_domain_init+0x5c>)
 8004000:	6a1a      	ldr	r2, [r3, #32]
 8004002:	2380      	movs	r3, #128	; 0x80
 8004004:	021b      	lsls	r3, r3, #8
 8004006:	4013      	ands	r3, r2
 8004008:	d10d      	bne.n	8004026 <hal_lld_backup_domain_init+0x56>
    /* Selects clock source.*/
    RCC->BDCR |= STM32_RTCSEL;
 800400a:	4b08      	ldr	r3, [pc, #32]	; (800402c <hal_lld_backup_domain_init+0x5c>)
 800400c:	6a1a      	ldr	r2, [r3, #32]
 800400e:	4b07      	ldr	r3, [pc, #28]	; (800402c <hal_lld_backup_domain_init+0x5c>)
 8004010:	2180      	movs	r1, #128	; 0x80
 8004012:	0089      	lsls	r1, r1, #2
 8004014:	430a      	orrs	r2, r1
 8004016:	621a      	str	r2, [r3, #32]

    /* RTC clock enabled.*/
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8004018:	4b04      	ldr	r3, [pc, #16]	; (800402c <hal_lld_backup_domain_init+0x5c>)
 800401a:	6a1a      	ldr	r2, [r3, #32]
 800401c:	4b03      	ldr	r3, [pc, #12]	; (800402c <hal_lld_backup_domain_init+0x5c>)
 800401e:	2180      	movs	r1, #128	; 0x80
 8004020:	0209      	lsls	r1, r1, #8
 8004022:	430a      	orrs	r2, r1
 8004024:	621a      	str	r2, [r3, #32]
  }
#endif /* STM32_RTCSEL != STM32_RTCSEL_NOCLOCK */
}
 8004026:	4770      	bx	lr
 8004028:	40007000 	.word	0x40007000
 800402c:	40021000 	.word	0x40021000

08004030 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 8004030:	b510      	push	{r4, lr}

  /* Reset of all peripherals.
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB(~STM32_GPIO_EN_MASK);
 8004032:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <hal_lld_init+0x74>)
 8004034:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004036:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <hal_lld_init+0x74>)
 8004038:	491b      	ldr	r1, [pc, #108]	; (80040a8 <hal_lld_init+0x78>)
 800403a:	430a      	orrs	r2, r1
 800403c:	629a      	str	r2, [r3, #40]	; 0x28
 800403e:	4b19      	ldr	r3, [pc, #100]	; (80040a4 <hal_lld_init+0x74>)
 8004040:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004042:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <hal_lld_init+0x74>)
 8004044:	22bc      	movs	r2, #188	; 0xbc
 8004046:	03d2      	lsls	r2, r2, #15
 8004048:	400a      	ands	r2, r1
 800404a:	629a      	str	r2, [r3, #40]	; 0x28
 800404c:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <hal_lld_init+0x74>)
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 8004050:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <hal_lld_init+0x74>)
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <hal_lld_init+0x74>)
 8004056:	2201      	movs	r2, #1
 8004058:	4252      	negs	r2, r2
 800405a:	611a      	str	r2, [r3, #16]
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <hal_lld_init+0x74>)
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <hal_lld_init+0x74>)
 8004062:	2200      	movs	r2, #0
 8004064:	611a      	str	r2, [r3, #16]
 8004066:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <hal_lld_init+0x74>)
 8004068:	691b      	ldr	r3, [r3, #16]
  rccResetAPB2(~RCC_APB2RSTR_DBGMCURST);
 800406a:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <hal_lld_init+0x74>)
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <hal_lld_init+0x74>)
 8004070:	490e      	ldr	r1, [pc, #56]	; (80040ac <hal_lld_init+0x7c>)
 8004072:	430a      	orrs	r2, r1
 8004074:	60da      	str	r2, [r3, #12]
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <hal_lld_init+0x74>)
 8004078:	68d9      	ldr	r1, [r3, #12]
 800407a:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <hal_lld_init+0x74>)
 800407c:	2280      	movs	r2, #128	; 0x80
 800407e:	03d2      	lsls	r2, r2, #15
 8004080:	400a      	ands	r2, r1
 8004082:	60da      	str	r2, [r3, #12]
 8004084:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <hal_lld_init+0x74>)
 8004086:	68db      	ldr	r3, [r3, #12]

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <hal_lld_init+0x74>)
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <hal_lld_init+0x74>)
 800408e:	2180      	movs	r1, #128	; 0x80
 8004090:	0549      	lsls	r1, r1, #21
 8004092:	430a      	orrs	r2, r1
 8004094:	61da      	str	r2, [r3, #28]
 8004096:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <hal_lld_init+0x74>)
 8004098:	69db      	ldr	r3, [r3, #28]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
 800409a:	f7ff ff99 	bl	8003fd0 <hal_lld_backup_domain_init>
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
#endif

  /* IRQ subsystem initialization.*/
  irqInit();
 800409e:	f7ff ff77 	bl	8003f90 <irqInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 80040a2:	bd10      	pop	{r4, pc}
 80040a4:	40021000 	.word	0x40021000
 80040a8:	ffa1ffff 	.word	0xffa1ffff
 80040ac:	ffbfffff 	.word	0xffbfffff

080040b0 <stm32_clock_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80040b0:	4b34      	ldr	r3, [pc, #208]	; (8004184 <stm32_clock_init+0xd4>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4b33      	ldr	r3, [pc, #204]	; (8004184 <stm32_clock_init+0xd4>)
 80040b6:	2101      	movs	r1, #1
 80040b8:	430a      	orrs	r2, r1
 80040ba:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80040bc:	4b31      	ldr	r3, [pc, #196]	; (8004184 <stm32_clock_init+0xd4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2202      	movs	r2, #2
 80040c2:	4013      	ands	r3, r2
 80040c4:	d0fa      	beq.n	80040bc <stm32_clock_init+0xc>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80040c6:	4b2f      	ldr	r3, [pc, #188]	; (8004184 <stm32_clock_init+0xd4>)
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	4b2e      	ldr	r3, [pc, #184]	; (8004184 <stm32_clock_init+0xd4>)
 80040cc:	2103      	movs	r1, #3
 80040ce:	438a      	bics	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80040d2:	4b2c      	ldr	r3, [pc, #176]	; (8004184 <stm32_clock_init+0xd4>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	220c      	movs	r2, #12
 80040d8:	4013      	ands	r3, r2
 80040da:	d1fa      	bne.n	80040d2 <stm32_clock_init+0x22>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80040dc:	4b29      	ldr	r3, [pc, #164]	; (8004184 <stm32_clock_init+0xd4>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4b28      	ldr	r3, [pc, #160]	; (8004184 <stm32_clock_init+0xd4>)
 80040e2:	21f9      	movs	r1, #249	; 0xf9
 80040e4:	400a      	ands	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80040e8:	4b26      	ldr	r3, [pc, #152]	; (8004184 <stm32_clock_init+0xd4>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	605a      	str	r2, [r3, #4]
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_HSI14_ENABLED
  /* HSI14 activation.*/
  RCC->CR2 |= RCC_CR2_HSI14ON;
 80040ee:	4b25      	ldr	r3, [pc, #148]	; (8004184 <stm32_clock_init+0xd4>)
 80040f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f2:	4b24      	ldr	r3, [pc, #144]	; (8004184 <stm32_clock_init+0xd4>)
 80040f4:	2101      	movs	r1, #1
 80040f6:	430a      	orrs	r2, r1
 80040f8:	635a      	str	r2, [r3, #52]	; 0x34
  while (!(RCC->CR2 & RCC_CR2_HSI14RDY))
 80040fa:	4b22      	ldr	r3, [pc, #136]	; (8004184 <stm32_clock_init+0xd4>)
 80040fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fe:	2202      	movs	r2, #2
 8004100:	4013      	ands	r3, r2
 8004102:	d0fa      	beq.n	80040fa <stm32_clock_init+0x4a>
    ;                                       /* Waits until HSI48 is stable. */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8004104:	4b1f      	ldr	r3, [pc, #124]	; (8004184 <stm32_clock_init+0xd4>)
 8004106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004108:	4b1e      	ldr	r3, [pc, #120]	; (8004184 <stm32_clock_init+0xd4>)
 800410a:	2101      	movs	r1, #1
 800410c:	430a      	orrs	r2, r1
 800410e:	625a      	str	r2, [r3, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8004110:	4b1c      	ldr	r3, [pc, #112]	; (8004184 <stm32_clock_init+0xd4>)
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	2202      	movs	r2, #2
 8004116:	4013      	ands	r3, r2
 8004118:	d0fa      	beq.n	8004110 <stm32_clock_init+0x60>
    ;                                       /* Waits until LSI is stable.   */
#endif

  /* Clock settings.*/
  /* CFGR2 must be configured first since CFGR value could change CFGR2 */
  RCC->CFGR2 = STM32_PREDIV;
 800411a:	4b1a      	ldr	r3, [pc, #104]	; (8004184 <stm32_clock_init+0xd4>)
 800411c:	2200      	movs	r2, #0
 800411e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR  = STM32_PLLNODIV | STM32_MCOPRE | STM32_MCOSEL | STM32_PLLMUL |
 8004120:	4b18      	ldr	r3, [pc, #96]	; (8004184 <stm32_clock_init+0xd4>)
 8004122:	22a0      	movs	r2, #160	; 0xa0
 8004124:	0392      	lsls	r2, r2, #14
 8004126:	605a      	str	r2, [r3, #4]
               STM32_PLLSRC   | STM32_PPRE   | STM32_HPRE |
               ((STM32_PREDIV & STM32_PLLXTPRE_MASK) << STM32_PLLXTPRE_OFFSET);
#if STM32_CECSW == STM32_CECSW_OFF
  RCC->CFGR3 = STM32_USBSW  | STM32_I2C1SW | STM32_USART1SW;
#else
  RCC->CFGR3 = STM32_USBSW  | STM32_CECSW  | STM32_I2C1SW | STM32_USART1SW;
 8004128:	4b16      	ldr	r3, [pc, #88]	; (8004184 <stm32_clock_init+0xd4>)
 800412a:	2200      	movs	r2, #0
 800412c:	631a      	str	r2, [r3, #48]	; 0x30
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 800412e:	4b15      	ldr	r3, [pc, #84]	; (8004184 <stm32_clock_init+0xd4>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4b14      	ldr	r3, [pc, #80]	; (8004184 <stm32_clock_init+0xd4>)
 8004134:	2180      	movs	r1, #128	; 0x80
 8004136:	0449      	lsls	r1, r1, #17
 8004138:	430a      	orrs	r2, r1
 800413a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800413c:	4b11      	ldr	r3, [pc, #68]	; (8004184 <stm32_clock_init+0xd4>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	2380      	movs	r3, #128	; 0x80
 8004142:	049b      	lsls	r3, r3, #18
 8004144:	4013      	ands	r3, r2
 8004146:	d0f9      	beq.n	800413c <stm32_clock_init+0x8c>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8004148:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <stm32_clock_init+0xd8>)
 800414a:	2211      	movs	r2, #17
 800414c:	601a      	str	r2, [r3, #0]
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 800414e:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <stm32_clock_init+0xd8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2201      	movs	r2, #1
 8004154:	4013      	ands	r3, r2
 8004156:	2b01      	cmp	r3, #1
 8004158:	d1f9      	bne.n	800414e <stm32_clock_init+0x9e>
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 800415a:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <stm32_clock_init+0xd4>)
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	4b09      	ldr	r3, [pc, #36]	; (8004184 <stm32_clock_init+0xd4>)
 8004160:	2102      	movs	r1, #2
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8004166:	4b07      	ldr	r3, [pc, #28]	; (8004184 <stm32_clock_init+0xd4>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	220c      	movs	r2, #12
 800416c:	4013      	ands	r3, r2
 800416e:	2b08      	cmp	r3, #8
 8004170:	d1f9      	bne.n	8004166 <stm32_clock_init+0xb6>
    ;                                       /* Waits selection complete.    */
#endif

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8004172:	4b04      	ldr	r3, [pc, #16]	; (8004184 <stm32_clock_init+0xd4>)
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	4b03      	ldr	r3, [pc, #12]	; (8004184 <stm32_clock_init+0xd4>)
 8004178:	2101      	movs	r1, #1
 800417a:	430a      	orrs	r2, r1
 800417c:	619a      	str	r2, [r3, #24]
 800417e:	4b01      	ldr	r3, [pc, #4]	; (8004184 <stm32_clock_init+0xd4>)
 8004180:	699b      	ldr	r3, [r3, #24]
#endif /* !STM32_NO_INIT */
}
 8004182:	4770      	bx	lr
 8004184:	40021000 	.word	0x40021000
 8004188:	40022000 	.word	0x40022000
 800418c:	00000000 	.word	0x00000000

08004190 <_pal_lld_init>:

  for (i = 0; i < 16; i++) {
    _pal_init_event(i);
  }
#endif
}
 8004190:	4770      	bx	lr
 8004192:	46c0      	nop			; (mov r8, r8)
	...

080041a0 <port_lock.lto_priv.4>:
  __ASM volatile ("cpsid i" : : : "memory");
 80041a0:	b672      	cpsid	i
}
 80041a2:	4770      	bx	lr
	...

080041b0 <port_unlock.lto_priv.4>:
  __ASM volatile ("cpsie i" : : : "memory");
 80041b0:	b662      	cpsie	i
}
 80041b2:	4770      	bx	lr
	...

080041c0 <port_lock_from_isr.lto_priv.0>:
/**
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function disables interrupts globally.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 80041c0:	b510      	push	{r4, lr}

  port_lock();
 80041c2:	f7ff ffed 	bl	80041a0 <port_lock.lto_priv.4>
}
 80041c6:	bd10      	pop	{r4, pc}
	...

080041d0 <port_unlock_from_isr.lto_priv.0>:
/**
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function enables interrupts globally.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 80041d0:	b510      	push	{r4, lr}

  port_unlock();
 80041d2:	f7ff ffed 	bl	80041b0 <port_unlock.lto_priv.4>
}
 80041d6:	bd10      	pop	{r4, pc}
	...

080041e0 <chSysLockFromISR.lto_priv.0>:
 *          not be limited to disabling interrupts.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 80041e0:	b510      	push	{r4, lr}

  port_lock_from_isr();
 80041e2:	f7ff ffed 	bl	80041c0 <port_lock_from_isr.lto_priv.0>
  __stats_start_measure_crit_isr();
  __dbg_check_lock_from_isr();
 80041e6:	f000 fed3 	bl	8004f90 <__dbg_check_lock_from_isr>
}
 80041ea:	bd10      	pop	{r4, pc}
 80041ec:	0000      	movs	r0, r0
	...

080041f0 <chSysUnlockFromISR.lto_priv.0>:
 *          not be limited to enabling interrupts.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 80041f0:	b510      	push	{r4, lr}

  __dbg_check_unlock_from_isr();
 80041f2:	f000 fef5 	bl	8004fe0 <__dbg_check_unlock_from_isr>
  __stats_stop_measure_crit_isr();
  port_unlock_from_isr();
 80041f6:	f7ff ffeb 	bl	80041d0 <port_unlock_from_isr.lto_priv.0>
}
 80041fa:	bd10      	pop	{r4, pc}
 80041fc:	0000      	movs	r0, r0
	...

08004200 <osalSysLockFromISR.lto_priv.0>:
static inline void osalSysLockFromISR(void) {
 8004200:	b510      	push	{r4, lr}
  chSysLockFromISR();
 8004202:	f7ff ffed 	bl	80041e0 <chSysLockFromISR.lto_priv.0>
}
 8004206:	bd10      	pop	{r4, pc}
	...

08004210 <osalSysUnlockFromISR.lto_priv.0>:
static inline void osalSysUnlockFromISR(void) {
 8004210:	b510      	push	{r4, lr}
  chSysUnlockFromISR();
 8004212:	f7ff ffed 	bl	80041f0 <chSysUnlockFromISR.lto_priv.0>
}
 8004216:	bd10      	pop	{r4, pc}
	...

08004220 <osalOsTimerHandlerI>:
static inline void osalOsTimerHandlerI(void) {
 8004220:	b510      	push	{r4, lr}
  chSysTimerHandlerI();
 8004222:	f000 fe2d 	bl	8004e80 <chSysTimerHandlerI>
}
 8004226:	bd10      	pop	{r4, pc}
	...

08004230 <Vector8C>:
/**
 * @brief   Interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8004230:	b500      	push	{lr}
 8004232:	b083      	sub	sp, #12
 8004234:	4673      	mov	r3, lr

  OSAL_IRQ_PROLOGUE();
 8004236:	9301      	str	r3, [sp, #4]
 8004238:	f000 fefa 	bl	8005030 <__dbg_check_enter_isr>

  st_lld_serve_interrupt();
 800423c:	f000 f840 	bl	80042c0 <st_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8004240:	f000 ff1e 	bl	8005080 <__dbg_check_leave_isr>
 8004244:	9b01      	ldr	r3, [sp, #4]
 8004246:	0018      	movs	r0, r3
 8004248:	f003 fbea 	bl	8007a20 <__port_irq_epilogue>
}
 800424c:	b003      	add	sp, #12
 800424e:	bd00      	pop	{pc}

08004250 <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 8004250:	b510      	push	{r4, lr}
                "clock rounding error");
  osalDbgAssert(((ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1U) < 0x10000,
                "clock prescaler overflow");

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8004252:	4b16      	ldr	r3, [pc, #88]	; (80042ac <st_lld_init+0x5c>)
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	4b15      	ldr	r3, [pc, #84]	; (80042ac <st_lld_init+0x5c>)
 8004258:	2180      	movs	r1, #128	; 0x80
 800425a:	0049      	lsls	r1, r1, #1
 800425c:	430a      	orrs	r2, r1
 800425e:	61da      	str	r2, [r3, #28]
 8004260:	4b12      	ldr	r3, [pc, #72]	; (80042ac <st_lld_init+0x5c>)
 8004262:	69db      	ldr	r3, [r3, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8004264:	4b12      	ldr	r3, [pc, #72]	; (80042b0 <st_lld_init+0x60>)
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	4b11      	ldr	r3, [pc, #68]	; (80042b0 <st_lld_init+0x60>)
 800426a:	2180      	movs	r1, #128	; 0x80
 800426c:	0049      	lsls	r1, r1, #1
 800426e:	430a      	orrs	r2, r1
 8004270:	609a      	str	r2, [r3, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <st_lld_init+0x64>)
 8004274:	4a10      	ldr	r2, [pc, #64]	; (80042b8 <st_lld_init+0x68>)
 8004276:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8004278:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <st_lld_init+0x64>)
 800427a:	4a10      	ldr	r2, [pc, #64]	; (80042bc <st_lld_init+0x6c>)
 800427c:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 800427e:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <st_lld_init+0x64>)
 8004280:	2200      	movs	r2, #0
 8004282:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <st_lld_init+0x64>)
 8004286:	2200      	movs	r2, #0
 8004288:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 800428a:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <st_lld_init+0x64>)
 800428c:	2200      	movs	r2, #0
 800428e:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8004290:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <st_lld_init+0x64>)
 8004292:	2200      	movs	r2, #0
 8004294:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8004296:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <st_lld_init+0x64>)
 8004298:	2201      	movs	r2, #1
 800429a:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800429c:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <st_lld_init+0x64>)
 800429e:	2201      	movs	r2, #1
 80042a0:	601a      	str	r2, [r3, #0]

#if !defined(STM32_SYSTICK_SUPPRESS_ISR)
  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 80042a2:	2102      	movs	r1, #2
 80042a4:	2013      	movs	r0, #19
 80042a6:	f7ff fdfb 	bl	8003ea0 <nvicEnableVector>
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 80042aa:	bd10      	pop	{r4, pc}
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40015800 	.word	0x40015800
 80042b4:	40002000 	.word	0x40002000
 80042b8:	000012bf 	.word	0x000012bf
 80042bc:	0000ffff 	.word	0x0000ffff

080042c0 <st_lld_serve_interrupt>:

/**
 * @brief   IRQ handling code.
 */
void st_lld_serve_interrupt(void) {
 80042c0:	b500      	push	{lr}
 80042c2:	b083      	sub	sp, #12
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;
 80042c4:	4b0d      	ldr	r3, [pc, #52]	; (80042fc <st_lld_serve_interrupt+0x3c>)
 80042c6:	9301      	str	r3, [sp, #4]

  sr  = timp->SR;
 80042c8:	9b01      	ldr	r3, [sp, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	9300      	str	r3, [sp, #0]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 80042ce:	9b01      	ldr	r3, [sp, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	22ff      	movs	r2, #255	; 0xff
 80042d4:	401a      	ands	r2, r3
 80042d6:	9b00      	ldr	r3, [sp, #0]
 80042d8:	4013      	ands	r3, r2
 80042da:	9300      	str	r3, [sp, #0]
  timp->SR = ~sr;
 80042dc:	9b00      	ldr	r3, [sp, #0]
 80042de:	43da      	mvns	r2, r3
 80042e0:	9b01      	ldr	r3, [sp, #4]
 80042e2:	611a      	str	r2, [r3, #16]

  if ((sr & TIM_SR_CC1IF) != 0U)
 80042e4:	9b00      	ldr	r3, [sp, #0]
 80042e6:	2202      	movs	r2, #2
 80042e8:	4013      	ands	r3, r2
 80042ea:	d005      	beq.n	80042f8 <st_lld_serve_interrupt+0x38>
#endif
  {
    osalSysLockFromISR();
 80042ec:	f7ff ff88 	bl	8004200 <osalSysLockFromISR.lto_priv.0>
    osalOsTimerHandlerI();
 80042f0:	f7ff ff96 	bl	8004220 <osalOsTimerHandlerI>
    osalSysUnlockFromISR();
 80042f4:	f7ff ff8c 	bl	8004210 <osalSysUnlockFromISR.lto_priv.0>
      st_callbacks[3](3U);
    }
  }
#endif
#endif
}
 80042f8:	b003      	add	sp, #12
 80042fa:	bd00      	pop	{pc}
 80042fc:	40002000 	.word	0x40002000

08004300 <Vector74>:
 *          pointer is not equal to @p NULL in order to not perform an extra
 *          check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8004300:	b500      	push	{lr}
 8004302:	b083      	sub	sp, #12
 8004304:	4673      	mov	r3, lr

  OSAL_IRQ_PROLOGUE();
 8004306:	9301      	str	r3, [sp, #4]
 8004308:	f000 fe92 	bl	8005030 <__dbg_check_enter_isr>

  pwm_lld_serve_interrupt(&PWMD1);
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <Vector74+0x24>)
 800430e:	0018      	movs	r0, r3
 8004310:	f000 fa26 	bl	8004760 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8004314:	f000 feb4 	bl	8005080 <__dbg_check_leave_isr>
 8004318:	9b01      	ldr	r3, [sp, #4]
 800431a:	0018      	movs	r0, r3
 800431c:	f003 fb80 	bl	8007a20 <__port_irq_epilogue>
}
 8004320:	b003      	add	sp, #12
 8004322:	bd00      	pop	{pc}
 8004324:	20000940 	.word	0x20000940
	...

08004330 <Vector78>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_CC_HANDLER) {
 8004330:	b500      	push	{lr}
 8004332:	b083      	sub	sp, #12
 8004334:	4673      	mov	r3, lr

  OSAL_IRQ_PROLOGUE();
 8004336:	9301      	str	r3, [sp, #4]
 8004338:	f000 fe7a 	bl	8005030 <__dbg_check_enter_isr>

  pwm_lld_serve_interrupt(&PWMD1);
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <Vector78+0x24>)
 800433e:	0018      	movs	r0, r3
 8004340:	f000 fa0e 	bl	8004760 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8004344:	f000 fe9c 	bl	8005080 <__dbg_check_leave_isr>
 8004348:	9b01      	ldr	r3, [sp, #4]
 800434a:	0018      	movs	r0, r3
 800434c:	f003 fb68 	bl	8007a20 <__port_irq_epilogue>
}
 8004350:	b003      	add	sp, #12
 8004352:	bd00      	pop	{pc}
 8004354:	20000940 	.word	0x20000940
	...

08004360 <Vector80>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8004360:	b500      	push	{lr}
 8004362:	b083      	sub	sp, #12
 8004364:	4673      	mov	r3, lr

  OSAL_IRQ_PROLOGUE();
 8004366:	9301      	str	r3, [sp, #4]
 8004368:	f000 fe62 	bl	8005030 <__dbg_check_enter_isr>

  pwm_lld_serve_interrupt(&PWMD3);
 800436c:	4b05      	ldr	r3, [pc, #20]	; (8004384 <Vector80+0x24>)
 800436e:	0018      	movs	r0, r3
 8004370:	f000 f9f6 	bl	8004760 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8004374:	f000 fe84 	bl	8005080 <__dbg_check_leave_isr>
 8004378:	9b01      	ldr	r3, [sp, #4]
 800437a:	0018      	movs	r0, r3
 800437c:	f003 fb50 	bl	8007a20 <__port_irq_epilogue>
}
 8004380:	b003      	add	sp, #12
 8004382:	bd00      	pop	{pc}
 8004384:	20000960 	.word	0x20000960
	...

08004390 <pwm_lld_init>:
/**
 * @brief   Low level PWM driver initialization.
 *
 * @notapi
 */
void pwm_lld_init(void) {
 8004390:	b510      	push	{r4, lr}

#if STM32_PWM_USE_TIM1
  /* Driver initialization.*/
  pwmObjectInit(&PWMD1);
 8004392:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <pwm_lld_init+0x54>)
 8004394:	0018      	movs	r0, r3
 8004396:	f7ff faf3 	bl	8003980 <pwmObjectInit>
  PWMD1.channels = STM32_TIM1_CHANNELS;
 800439a:	4b12      	ldr	r3, [pc, #72]	; (80043e4 <pwm_lld_init+0x54>)
 800439c:	2204      	movs	r2, #4
 800439e:	741a      	strb	r2, [r3, #16]
  PWMD1.tim = STM32_TIM1;
 80043a0:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <pwm_lld_init+0x54>)
 80043a2:	4a11      	ldr	r2, [pc, #68]	; (80043e8 <pwm_lld_init+0x58>)
 80043a4:	61da      	str	r2, [r3, #28]
  PWMD1.has_bdtr = true;
 80043a6:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <pwm_lld_init+0x54>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	761a      	strb	r2, [r3, #24]
  PWMD2.has_bdtr = false;
#endif

#if STM32_PWM_USE_TIM3
  /* Driver initialization.*/
  pwmObjectInit(&PWMD3);
 80043ac:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <pwm_lld_init+0x5c>)
 80043ae:	0018      	movs	r0, r3
 80043b0:	f7ff fae6 	bl	8003980 <pwmObjectInit>
  PWMD3.channels = STM32_TIM3_CHANNELS;
 80043b4:	4b0d      	ldr	r3, [pc, #52]	; (80043ec <pwm_lld_init+0x5c>)
 80043b6:	2204      	movs	r2, #4
 80043b8:	741a      	strb	r2, [r3, #16]
  PWMD3.tim = STM32_TIM3;
 80043ba:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <pwm_lld_init+0x5c>)
 80043bc:	4a0c      	ldr	r2, [pc, #48]	; (80043f0 <pwm_lld_init+0x60>)
 80043be:	61da      	str	r2, [r3, #28]
  PWMD3.has_bdtr = false;
 80043c0:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <pwm_lld_init+0x5c>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	761a      	strb	r2, [r3, #24]
  PWMD14.has_bdtr = false;
#endif

#if STM32_PWM_USE_TIM15
  /* Driver initialization.*/
  pwmObjectInit(&PWMD15);
 80043c6:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <pwm_lld_init+0x64>)
 80043c8:	0018      	movs	r0, r3
 80043ca:	f7ff fad9 	bl	8003980 <pwmObjectInit>
  PWMD15.channels = STM32_TIM15_CHANNELS;
 80043ce:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <pwm_lld_init+0x64>)
 80043d0:	2202      	movs	r2, #2
 80043d2:	741a      	strb	r2, [r3, #16]
  PWMD15.tim = STM32_TIM15;
 80043d4:	4b07      	ldr	r3, [pc, #28]	; (80043f4 <pwm_lld_init+0x64>)
 80043d6:	4a08      	ldr	r2, [pc, #32]	; (80043f8 <pwm_lld_init+0x68>)
 80043d8:	61da      	str	r2, [r3, #28]
  PWMD15.has_bdtr = true;
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <pwm_lld_init+0x64>)
 80043dc:	2201      	movs	r2, #1
 80043de:	761a      	strb	r2, [r3, #24]
  pwmObjectInit(&PWMD22);
  PWMD22.channels = STM32_TIM22_CHANNELS;
  PWMD22.tim = STM32_TIM22;
  PWMD22.has_bdtr = false;
#endif
}
 80043e0:	bd10      	pop	{r4, pc}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	20000940 	.word	0x20000940
 80043e8:	40012c00 	.word	0x40012c00
 80043ec:	20000960 	.word	0x20000960
 80043f0:	40000400 	.word	0x40000400
 80043f4:	20000980 	.word	0x20000980
 80043f8:	40014000 	.word	0x40014000
 80043fc:	00000000 	.word	0x00000000

08004400 <pwm_lld_start>:
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_start(PWMDriver *pwmp) {
 8004400:	b500      	push	{lr}
 8004402:	b085      	sub	sp, #20
 8004404:	9001      	str	r0, [sp, #4]
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 8004406:	9b01      	ldr	r3, [sp, #4]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d16f      	bne.n	80044ee <pwm_lld_start+0xee>
    /* Clock activation and timer reset.*/
#if STM32_PWM_USE_TIM1
    if (&PWMD1 == pwmp) {
 800440e:	9a01      	ldr	r2, [sp, #4]
 8004410:	4bbd      	ldr	r3, [pc, #756]	; (8004708 <pwm_lld_start+0x308>)
 8004412:	429a      	cmp	r2, r3
 8004414:	d122      	bne.n	800445c <pwm_lld_start+0x5c>
      rccEnableTIM1(true);
 8004416:	4bbd      	ldr	r3, [pc, #756]	; (800470c <pwm_lld_start+0x30c>)
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	4bbc      	ldr	r3, [pc, #752]	; (800470c <pwm_lld_start+0x30c>)
 800441c:	2180      	movs	r1, #128	; 0x80
 800441e:	0109      	lsls	r1, r1, #4
 8004420:	430a      	orrs	r2, r1
 8004422:	619a      	str	r2, [r3, #24]
 8004424:	4bb9      	ldr	r3, [pc, #740]	; (800470c <pwm_lld_start+0x30c>)
 8004426:	699b      	ldr	r3, [r3, #24]
      rccResetTIM1();
 8004428:	4bb8      	ldr	r3, [pc, #736]	; (800470c <pwm_lld_start+0x30c>)
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	4bb7      	ldr	r3, [pc, #732]	; (800470c <pwm_lld_start+0x30c>)
 800442e:	2180      	movs	r1, #128	; 0x80
 8004430:	0109      	lsls	r1, r1, #4
 8004432:	430a      	orrs	r2, r1
 8004434:	60da      	str	r2, [r3, #12]
 8004436:	4bb5      	ldr	r3, [pc, #724]	; (800470c <pwm_lld_start+0x30c>)
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	4bb4      	ldr	r3, [pc, #720]	; (800470c <pwm_lld_start+0x30c>)
 800443c:	49b4      	ldr	r1, [pc, #720]	; (8004710 <pwm_lld_start+0x310>)
 800443e:	400a      	ands	r2, r1
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	4bb2      	ldr	r3, [pc, #712]	; (800470c <pwm_lld_start+0x30c>)
 8004444:	68db      	ldr	r3, [r3, #12]
#if !defined(STM32_TIM1_SUPPRESS_ISR)
      nvicEnableVector(STM32_TIM1_UP_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
 8004446:	2103      	movs	r1, #3
 8004448:	200d      	movs	r0, #13
 800444a:	f7ff fd29 	bl	8003ea0 <nvicEnableVector>
      nvicEnableVector(STM32_TIM1_CC_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
 800444e:	2103      	movs	r1, #3
 8004450:	200e      	movs	r0, #14
 8004452:	f7ff fd25 	bl	8003ea0 <nvicEnableVector>
#endif
#if defined(STM32_TIM1CLK)
      pwmp->clock = STM32_TIM1CLK;
#else
      pwmp->clock = STM32_TIMCLK2;
 8004456:	9b01      	ldr	r3, [sp, #4]
 8004458:	4aae      	ldr	r2, [pc, #696]	; (8004714 <pwm_lld_start+0x314>)
 800445a:	615a      	str	r2, [r3, #20]
#endif
    }
#endif

#if STM32_PWM_USE_TIM3
    if (&PWMD3 == pwmp) {
 800445c:	9a01      	ldr	r2, [sp, #4]
 800445e:	4bae      	ldr	r3, [pc, #696]	; (8004718 <pwm_lld_start+0x318>)
 8004460:	429a      	cmp	r2, r3
 8004462:	d11c      	bne.n	800449e <pwm_lld_start+0x9e>
      rccEnableTIM3(true);
 8004464:	4ba9      	ldr	r3, [pc, #676]	; (800470c <pwm_lld_start+0x30c>)
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	4ba8      	ldr	r3, [pc, #672]	; (800470c <pwm_lld_start+0x30c>)
 800446a:	2102      	movs	r1, #2
 800446c:	430a      	orrs	r2, r1
 800446e:	61da      	str	r2, [r3, #28]
 8004470:	4ba6      	ldr	r3, [pc, #664]	; (800470c <pwm_lld_start+0x30c>)
 8004472:	69db      	ldr	r3, [r3, #28]
      rccResetTIM3();
 8004474:	4ba5      	ldr	r3, [pc, #660]	; (800470c <pwm_lld_start+0x30c>)
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	4ba4      	ldr	r3, [pc, #656]	; (800470c <pwm_lld_start+0x30c>)
 800447a:	2102      	movs	r1, #2
 800447c:	430a      	orrs	r2, r1
 800447e:	611a      	str	r2, [r3, #16]
 8004480:	4ba2      	ldr	r3, [pc, #648]	; (800470c <pwm_lld_start+0x30c>)
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	4ba1      	ldr	r3, [pc, #644]	; (800470c <pwm_lld_start+0x30c>)
 8004486:	2102      	movs	r1, #2
 8004488:	438a      	bics	r2, r1
 800448a:	611a      	str	r2, [r3, #16]
 800448c:	4b9f      	ldr	r3, [pc, #636]	; (800470c <pwm_lld_start+0x30c>)
 800448e:	691b      	ldr	r3, [r3, #16]
#if !defined(STM32_TIM3_SUPPRESS_ISR)
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_PWM_TIM3_IRQ_PRIORITY);
 8004490:	2103      	movs	r1, #3
 8004492:	2010      	movs	r0, #16
 8004494:	f7ff fd04 	bl	8003ea0 <nvicEnableVector>
#endif
#if defined(STM32_TIM3CLK)
      pwmp->clock = STM32_TIM3CLK;
#else
      pwmp->clock = STM32_TIMCLK1;
 8004498:	9b01      	ldr	r3, [sp, #4]
 800449a:	4a9e      	ldr	r2, [pc, #632]	; (8004714 <pwm_lld_start+0x314>)
 800449c:	615a      	str	r2, [r3, #20]
#endif
    }
#endif

#if STM32_PWM_USE_TIM15
    if (&PWMD15 == pwmp) {
 800449e:	9a01      	ldr	r2, [sp, #4]
 80044a0:	4b9e      	ldr	r3, [pc, #632]	; (800471c <pwm_lld_start+0x31c>)
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d11a      	bne.n	80044dc <pwm_lld_start+0xdc>
      rccEnableTIM15(true);
 80044a6:	4b99      	ldr	r3, [pc, #612]	; (800470c <pwm_lld_start+0x30c>)
 80044a8:	699a      	ldr	r2, [r3, #24]
 80044aa:	4b98      	ldr	r3, [pc, #608]	; (800470c <pwm_lld_start+0x30c>)
 80044ac:	2180      	movs	r1, #128	; 0x80
 80044ae:	0249      	lsls	r1, r1, #9
 80044b0:	430a      	orrs	r2, r1
 80044b2:	619a      	str	r2, [r3, #24]
 80044b4:	4b95      	ldr	r3, [pc, #596]	; (800470c <pwm_lld_start+0x30c>)
 80044b6:	699b      	ldr	r3, [r3, #24]
      rccResetTIM15();
 80044b8:	4b94      	ldr	r3, [pc, #592]	; (800470c <pwm_lld_start+0x30c>)
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	4b93      	ldr	r3, [pc, #588]	; (800470c <pwm_lld_start+0x30c>)
 80044be:	2180      	movs	r1, #128	; 0x80
 80044c0:	0249      	lsls	r1, r1, #9
 80044c2:	430a      	orrs	r2, r1
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	4b91      	ldr	r3, [pc, #580]	; (800470c <pwm_lld_start+0x30c>)
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	4b90      	ldr	r3, [pc, #576]	; (800470c <pwm_lld_start+0x30c>)
 80044cc:	4994      	ldr	r1, [pc, #592]	; (8004720 <pwm_lld_start+0x320>)
 80044ce:	400a      	ands	r2, r1
 80044d0:	60da      	str	r2, [r3, #12]
 80044d2:	4b8e      	ldr	r3, [pc, #568]	; (800470c <pwm_lld_start+0x30c>)
 80044d4:	68db      	ldr	r3, [r3, #12]
#if defined(STM32_TIM15CLK)
      pwmp->clock = STM32_TIM15CLK;
#else
      pwmp->clock = STM32_TIMCLK2;
 80044d6:	9b01      	ldr	r3, [sp, #4]
 80044d8:	4a8e      	ldr	r2, [pc, #568]	; (8004714 <pwm_lld_start+0x314>)
 80044da:	615a      	str	r2, [r3, #20]
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 80044dc:	9b01      	ldr	r3, [sp, #4]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	4a90      	ldr	r2, [pc, #576]	; (8004724 <pwm_lld_start+0x324>)
 80044e2:	619a      	str	r2, [r3, #24]
                       STM32_TIM_CCMR1_OC2M(6) | STM32_TIM_CCMR1_OC2PE;
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 80044e4:	9b01      	ldr	r3, [sp, #4]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	4a8e      	ldr	r2, [pc, #568]	; (8004724 <pwm_lld_start+0x324>)
 80044ea:	61da      	str	r2, [r3, #28]
 80044ec:	e017      	b.n	800451e <pwm_lld_start+0x11e>
                       STM32_TIM_CCMR3_OC6M(6) | STM32_TIM_CCMR3_OC6PE;
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 80044ee:	9b01      	ldr	r3, [sp, #4]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 80044f6:	9b01      	ldr	r3, [sp, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	2200      	movs	r2, #0
 80044fc:	635a      	str	r2, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 80044fe:	9b01      	ldr	r3, [sp, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	2200      	movs	r2, #0
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 8004506:	9b01      	ldr	r3, [sp, #4]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	2200      	movs	r2, #0
 800450c:	63da      	str	r2, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 800450e:	9b01      	ldr	r3, [sp, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	2200      	movs	r2, #0
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
    if (pwmp->channels > 4) {
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
    }
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8004516:	9b01      	ldr	r3, [sp, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	2200      	movs	r2, #0
 800451c:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 800451e:	9b01      	ldr	r3, [sp, #4]
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	9b01      	ldr	r3, [sp, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	0019      	movs	r1, r3
 800452a:	0010      	movs	r0, r2
 800452c:	f7fe fa4a 	bl	80029c4 <__udivsi3>
 8004530:	0003      	movs	r3, r0
 8004532:	3b01      	subs	r3, #1
 8004534:	9302      	str	r3, [sp, #8]
  osalDbgAssert((psc <= 0xFFFF) &&
 8004536:	9902      	ldr	r1, [sp, #8]
 8004538:	2380      	movs	r3, #128	; 0x80
 800453a:	025a      	lsls	r2, r3, #9
 800453c:	2300      	movs	r3, #0
 800453e:	4291      	cmp	r1, r2
 8004540:	415b      	adcs	r3, r3
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10d      	bne.n	8004564 <pwm_lld_start+0x164>
 8004548:	9b02      	ldr	r3, [sp, #8]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	9b01      	ldr	r3, [sp, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	435a      	muls	r2, r3
 8004554:	9b01      	ldr	r3, [sp, #4]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	1e5a      	subs	r2, r3, #1
 800455c:	4193      	sbcs	r3, r2
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <pwm_lld_start+0x16c>
 8004564:	4b70      	ldr	r3, [pc, #448]	; (8004728 <pwm_lld_start+0x328>)
 8004566:	0018      	movs	r0, r3
 8004568:	f000 fc52 	bl	8004e10 <chSysHalt>
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
 800456c:	9b01      	ldr	r3, [sp, #4]
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	9a02      	ldr	r2, [sp, #8]
 8004572:	629a      	str	r2, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 8004574:	9b01      	ldr	r3, [sp, #4]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	9b01      	ldr	r3, [sp, #4]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	3a01      	subs	r2, #1
 800457e:	62da      	str	r2, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 8004580:	9b01      	ldr	r3, [sp, #4]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	9b01      	ldr	r3, [sp, #4]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800458a:	605a      	str	r2, [r3, #4]

  /* Output enables and polarities setup.*/
  ccer = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	9303      	str	r3, [sp, #12]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8004590:	9b01      	ldr	r3, [sp, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	220f      	movs	r2, #15
 8004598:	4013      	ands	r3, r2
 800459a:	2b01      	cmp	r3, #1
 800459c:	d005      	beq.n	80045aa <pwm_lld_start+0x1aa>
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d107      	bne.n	80045b2 <pwm_lld_start+0x1b2>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC1P;
 80045a2:	9b03      	ldr	r3, [sp, #12]
 80045a4:	2202      	movs	r2, #2
 80045a6:	4313      	orrs	r3, r2
 80045a8:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC1E;
 80045aa:	9b03      	ldr	r3, [sp, #12]
 80045ac:	2201      	movs	r2, #1
 80045ae:	4313      	orrs	r3, r2
 80045b0:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 80045b2:	9b01      	ldr	r3, [sp, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	220f      	movs	r2, #15
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d005      	beq.n	80045cc <pwm_lld_start+0x1cc>
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d107      	bne.n	80045d4 <pwm_lld_start+0x1d4>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC2P;
 80045c4:	9b03      	ldr	r3, [sp, #12]
 80045c6:	2220      	movs	r2, #32
 80045c8:	4313      	orrs	r3, r2
 80045ca:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
 80045cc:	9b03      	ldr	r3, [sp, #12]
 80045ce:	2210      	movs	r2, #16
 80045d0:	4313      	orrs	r3, r2
 80045d2:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 80045d4:	9b01      	ldr	r3, [sp, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	220f      	movs	r2, #15
 80045dc:	4013      	ands	r3, r2
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d006      	beq.n	80045f0 <pwm_lld_start+0x1f0>
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d109      	bne.n	80045fa <pwm_lld_start+0x1fa>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC3P;
 80045e6:	9b03      	ldr	r3, [sp, #12]
 80045e8:	2280      	movs	r2, #128	; 0x80
 80045ea:	0092      	lsls	r2, r2, #2
 80045ec:	4313      	orrs	r3, r2
 80045ee:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
 80045f0:	9b03      	ldr	r3, [sp, #12]
 80045f2:	2280      	movs	r2, #128	; 0x80
 80045f4:	0052      	lsls	r2, r2, #1
 80045f6:	4313      	orrs	r3, r2
 80045f8:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  default:
    ;
  }
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 80045fa:	9b01      	ldr	r3, [sp, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	220f      	movs	r2, #15
 8004602:	4013      	ands	r3, r2
 8004604:	2b01      	cmp	r3, #1
 8004606:	d006      	beq.n	8004616 <pwm_lld_start+0x216>
 8004608:	2b02      	cmp	r3, #2
 800460a:	d109      	bne.n	8004620 <pwm_lld_start+0x220>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC4P;
 800460c:	9b03      	ldr	r3, [sp, #12]
 800460e:	2280      	movs	r2, #128	; 0x80
 8004610:	0192      	lsls	r2, r2, #6
 8004612:	4313      	orrs	r3, r2
 8004614:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC4E;
 8004616:	9b03      	ldr	r3, [sp, #12]
 8004618:	2280      	movs	r2, #128	; 0x80
 800461a:	0152      	lsls	r2, r2, #5
 800461c:	4313      	orrs	r3, r2
 800461e:	9303      	str	r3, [sp, #12]
    /* Falls through.*/
  default:
    ;
  }
  if (pwmp->has_bdtr) {
 8004620:	9b01      	ldr	r3, [sp, #4]
 8004622:	7e1b      	ldrb	r3, [r3, #24]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d047      	beq.n	80046b8 <pwm_lld_start+0x2b8>
    switch (pwmp->config->channels[0].mode & PWM_COMPLEMENTARY_OUTPUT_MASK) {
 8004628:	9b01      	ldr	r3, [sp, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	22f0      	movs	r2, #240	; 0xf0
 8004630:	4013      	ands	r3, r2
 8004632:	2b10      	cmp	r3, #16
 8004634:	d005      	beq.n	8004642 <pwm_lld_start+0x242>
 8004636:	2b20      	cmp	r3, #32
 8004638:	d107      	bne.n	800464a <pwm_lld_start+0x24a>
    case PWM_COMPLEMENTARY_OUTPUT_ACTIVE_LOW:
      ccer |= STM32_TIM_CCER_CC1NP;
 800463a:	9b03      	ldr	r3, [sp, #12]
 800463c:	2208      	movs	r2, #8
 800463e:	4313      	orrs	r3, r2
 8004640:	9303      	str	r3, [sp, #12]
      /* Falls through.*/
    case PWM_COMPLEMENTARY_OUTPUT_ACTIVE_HIGH:
      ccer |= STM32_TIM_CCER_CC1NE;
 8004642:	9b03      	ldr	r3, [sp, #12]
 8004644:	2204      	movs	r2, #4
 8004646:	4313      	orrs	r3, r2
 8004648:	9303      	str	r3, [sp, #12]
      /* Falls through.*/
    default:
      ;
    }
    switch (pwmp->config->channels[1].mode & PWM_COMPLEMENTARY_OUTPUT_MASK) {
 800464a:	9b01      	ldr	r3, [sp, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	22f0      	movs	r2, #240	; 0xf0
 8004652:	4013      	ands	r3, r2
 8004654:	2b10      	cmp	r3, #16
 8004656:	d005      	beq.n	8004664 <pwm_lld_start+0x264>
 8004658:	2b20      	cmp	r3, #32
 800465a:	d107      	bne.n	800466c <pwm_lld_start+0x26c>
    case PWM_COMPLEMENTARY_OUTPUT_ACTIVE_LOW:
      ccer |= STM32_TIM_CCER_CC2NP;
 800465c:	9b03      	ldr	r3, [sp, #12]
 800465e:	2280      	movs	r2, #128	; 0x80
 8004660:	4313      	orrs	r3, r2
 8004662:	9303      	str	r3, [sp, #12]
      /* Falls through.*/
    case PWM_COMPLEMENTARY_OUTPUT_ACTIVE_HIGH:
      ccer |= STM32_TIM_CCER_CC2NE;
 8004664:	9b03      	ldr	r3, [sp, #12]
 8004666:	2240      	movs	r2, #64	; 0x40
 8004668:	4313      	orrs	r3, r2
 800466a:	9303      	str	r3, [sp, #12]
      /* Falls through.*/
    default:
      ;
    }
    switch (pwmp->config->channels[2].mode & PWM_COMPLEMENTARY_OUTPUT_MASK) {
 800466c:	9b01      	ldr	r3, [sp, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	22f0      	movs	r2, #240	; 0xf0
 8004674:	4013      	ands	r3, r2
 8004676:	2b10      	cmp	r3, #16
 8004678:	d006      	beq.n	8004688 <pwm_lld_start+0x288>
 800467a:	2b20      	cmp	r3, #32
 800467c:	d109      	bne.n	8004692 <pwm_lld_start+0x292>
    case PWM_COMPLEMENTARY_OUTPUT_ACTIVE_LOW:
      ccer |= STM32_TIM_CCER_CC3NP;
 800467e:	9b03      	ldr	r3, [sp, #12]
 8004680:	2280      	movs	r2, #128	; 0x80
 8004682:	0112      	lsls	r2, r2, #4
 8004684:	4313      	orrs	r3, r2
 8004686:	9303      	str	r3, [sp, #12]
      /* Falls through.*/
    case PWM_COMPLEMENTARY_OUTPUT_ACTIVE_HIGH:
      ccer |= STM32_TIM_CCER_CC3NE;
 8004688:	9b03      	ldr	r3, [sp, #12]
 800468a:	2280      	movs	r2, #128	; 0x80
 800468c:	00d2      	lsls	r2, r2, #3
 800468e:	4313      	orrs	r3, r2
 8004690:	9303      	str	r3, [sp, #12]
      /* Falls through.*/
    default:
      ;
    }
    switch (pwmp->config->channels[3].mode & PWM_COMPLEMENTARY_OUTPUT_MASK) {
 8004692:	9b01      	ldr	r3, [sp, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	22f0      	movs	r2, #240	; 0xf0
 800469a:	4013      	ands	r3, r2
 800469c:	2b10      	cmp	r3, #16
 800469e:	d006      	beq.n	80046ae <pwm_lld_start+0x2ae>
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d109      	bne.n	80046b8 <pwm_lld_start+0x2b8>
    case PWM_COMPLEMENTARY_OUTPUT_ACTIVE_LOW:
      ccer |= STM32_TIM_CCER_CC4NP;
 80046a4:	9b03      	ldr	r3, [sp, #12]
 80046a6:	2280      	movs	r2, #128	; 0x80
 80046a8:	0212      	lsls	r2, r2, #8
 80046aa:	4313      	orrs	r3, r2
 80046ac:	9303      	str	r3, [sp, #12]
      /* Falls through.*/
    case PWM_COMPLEMENTARY_OUTPUT_ACTIVE_HIGH:
      ccer |= STM32_TIM_CCER_CC4NE;
 80046ae:	9b03      	ldr	r3, [sp, #12]
 80046b0:	2280      	movs	r2, #128	; 0x80
 80046b2:	01d2      	lsls	r2, r2, #7
 80046b4:	4313      	orrs	r3, r2
 80046b6:	9303      	str	r3, [sp, #12]
    default:
      ;
    }
  }

  pwmp->tim->CCER  = ccer;
 80046b8:	9b01      	ldr	r3, [sp, #4]
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	9a03      	ldr	r2, [sp, #12]
 80046be:	621a      	str	r2, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 80046c0:	9b01      	ldr	r3, [sp, #4]
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	2201      	movs	r2, #1
 80046c6:	615a      	str	r2, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 80046c8:	9b01      	ldr	r3, [sp, #4]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	2200      	movs	r2, #0
 80046ce:	611a      	str	r2, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 80046d0:	9b01      	ldr	r3, [sp, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d6:	9b01      	ldr	r3, [sp, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	21ff      	movs	r1, #255	; 0xff
 80046dc:	438a      	bics	r2, r1
 80046de:	60da      	str	r2, [r3, #12]
                     ~STM32_TIM_DIER_IRQ_MASK;
  if (pwmp->has_bdtr) {
 80046e0:	9b01      	ldr	r3, [sp, #4]
 80046e2:	7e1b      	ldrb	r3, [r3, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d008      	beq.n	80046fa <pwm_lld_start+0x2fa>
    pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
 80046e8:	9b01      	ldr	r3, [sp, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ee:	9b01      	ldr	r3, [sp, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	2180      	movs	r1, #128	; 0x80
 80046f4:	0209      	lsls	r1, r1, #8
 80046f6:	430a      	orrs	r2, r1
 80046f8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 80046fa:	9b01      	ldr	r3, [sp, #4]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	2285      	movs	r2, #133	; 0x85
 8004700:	601a      	str	r2, [r3, #0]
                     STM32_TIM_CR1_CEN;
}
 8004702:	b005      	add	sp, #20
 8004704:	bd00      	pop	{pc}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	20000940 	.word	0x20000940
 800470c:	40021000 	.word	0x40021000
 8004710:	fffff7ff 	.word	0xfffff7ff
 8004714:	02dc6c00 	.word	0x02dc6c00
 8004718:	20000960 	.word	0x20000960
 800471c:	20000980 	.word	0x20000980
 8004720:	fffeffff 	.word	0xfffeffff
 8004724:	00006868 	.word	0x00006868
 8004728:	0800b134 	.word	0x0800b134
 800472c:	00000000 	.word	0x00000000

08004730 <pwm_lld_enable_channel>:
 *
 * @notapi
 */
void pwm_lld_enable_channel(PWMDriver *pwmp,
                            pwmchannel_t channel,
                            pwmcnt_t width) {
 8004730:	b084      	sub	sp, #16
 8004732:	9003      	str	r0, [sp, #12]
 8004734:	9201      	str	r2, [sp, #4]
 8004736:	230b      	movs	r3, #11
 8004738:	446b      	add	r3, sp
 800473a:	1c0a      	adds	r2, r1, #0
 800473c:	701a      	strb	r2, [r3, #0]

  /* Changing channel duty cycle on the fly.*/
#if STM32_TIM_MAX_CHANNELS <= 4
  pwmp->tim->CCR[channel] = width;
 800473e:	9b03      	ldr	r3, [sp, #12]
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	230b      	movs	r3, #11
 8004744:	446b      	add	r3, sp
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	330c      	adds	r3, #12
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	18d3      	adds	r3, r2, r3
 800474e:	3304      	adds	r3, #4
 8004750:	9a01      	ldr	r2, [sp, #4]
 8004752:	601a      	str	r2, [r3, #0]
  if (channel < 4)
    pwmp->tim->CCR[channel] = width;
  else
    pwmp->tim->CCXR[channel - 4] = width;
#endif
}
 8004754:	b004      	add	sp, #16
 8004756:	4770      	bx	lr
	...

08004760 <pwm_lld_serve_interrupt>:
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8004760:	b500      	push	{lr}
 8004762:	b085      	sub	sp, #20
 8004764:	9001      	str	r0, [sp, #4]
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8004766:	9b01      	ldr	r3, [sp, #4]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	9303      	str	r3, [sp, #12]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 800476e:	9b01      	ldr	r3, [sp, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	22ff      	movs	r2, #255	; 0xff
 8004776:	401a      	ands	r2, r3
 8004778:	9b03      	ldr	r3, [sp, #12]
 800477a:	4013      	ands	r3, r2
 800477c:	9303      	str	r3, [sp, #12]
  pwmp->tim->SR = ~sr;
 800477e:	9b01      	ldr	r3, [sp, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	9a03      	ldr	r2, [sp, #12]
 8004784:	43d2      	mvns	r2, r2
 8004786:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8004788:	9b03      	ldr	r3, [sp, #12]
 800478a:	2202      	movs	r2, #2
 800478c:	4013      	ands	r3, r2
 800478e:	d00a      	beq.n	80047a6 <pwm_lld_serve_interrupt+0x46>
      (pwmp->config->channels[0].callback != NULL))
 8004790:	9b01      	ldr	r3, [sp, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8004796:	2b00      	cmp	r3, #0
 8004798:	d005      	beq.n	80047a6 <pwm_lld_serve_interrupt+0x46>
    pwmp->config->channels[0].callback(pwmp);
 800479a:	9b01      	ldr	r3, [sp, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	9a01      	ldr	r2, [sp, #4]
 80047a2:	0010      	movs	r0, r2
 80047a4:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80047a6:	9b03      	ldr	r3, [sp, #12]
 80047a8:	2204      	movs	r2, #4
 80047aa:	4013      	ands	r3, r2
 80047ac:	d00a      	beq.n	80047c4 <pwm_lld_serve_interrupt+0x64>
      (pwmp->config->channels[1].callback != NULL))
 80047ae:	9b01      	ldr	r3, [sp, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <pwm_lld_serve_interrupt+0x64>
    pwmp->config->channels[1].callback(pwmp);
 80047b8:	9b01      	ldr	r3, [sp, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	9a01      	ldr	r2, [sp, #4]
 80047c0:	0010      	movs	r0, r2
 80047c2:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80047c4:	9b03      	ldr	r3, [sp, #12]
 80047c6:	2208      	movs	r2, #8
 80047c8:	4013      	ands	r3, r2
 80047ca:	d00a      	beq.n	80047e2 <pwm_lld_serve_interrupt+0x82>
      (pwmp->config->channels[2].callback != NULL))
 80047cc:	9b01      	ldr	r3, [sp, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <pwm_lld_serve_interrupt+0x82>
    pwmp->config->channels[2].callback(pwmp);
 80047d6:	9b01      	ldr	r3, [sp, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	9a01      	ldr	r2, [sp, #4]
 80047de:	0010      	movs	r0, r2
 80047e0:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80047e2:	9b03      	ldr	r3, [sp, #12]
 80047e4:	2210      	movs	r2, #16
 80047e6:	4013      	ands	r3, r2
 80047e8:	d00a      	beq.n	8004800 <pwm_lld_serve_interrupt+0xa0>
      (pwmp->config->channels[3].callback != NULL))
 80047ea:	9b01      	ldr	r3, [sp, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <pwm_lld_serve_interrupt+0xa0>
    pwmp->config->channels[3].callback(pwmp);
 80047f4:	9b01      	ldr	r3, [sp, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	9a01      	ldr	r2, [sp, #4]
 80047fc:	0010      	movs	r0, r2
 80047fe:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 8004800:	9b03      	ldr	r3, [sp, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	4013      	ands	r3, r2
 8004806:	d00a      	beq.n	800481e <pwm_lld_serve_interrupt+0xbe>
 8004808:	9b01      	ldr	r3, [sp, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <pwm_lld_serve_interrupt+0xbe>
    pwmp->config->callback(pwmp);
 8004812:	9b01      	ldr	r3, [sp, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	9a01      	ldr	r2, [sp, #4]
 800481a:	0010      	movs	r0, r2
 800481c:	4798      	blx	r3
}
 800481e:	b005      	add	sp, #20
 8004820:	bd00      	pop	{pc}
 8004822:	46c0      	nop			; (mov r8, r8)
	...

08004830 <port_lock.lto_priv.5>:
  __ASM volatile ("cpsid i" : : : "memory");
 8004830:	b672      	cpsid	i
}
 8004832:	4770      	bx	lr
	...

08004840 <port_unlock.lto_priv.5>:
  __ASM volatile ("cpsie i" : : : "memory");
 8004840:	b662      	cpsie	i
}
 8004842:	4770      	bx	lr
	...

08004850 <port_lock_from_isr.lto_priv.1>:
static inline void port_lock_from_isr(void) {
 8004850:	b510      	push	{r4, lr}
  port_lock();
 8004852:	f7ff ffed 	bl	8004830 <port_lock.lto_priv.5>
}
 8004856:	bd10      	pop	{r4, pc}
	...

08004860 <port_unlock_from_isr.lto_priv.1>:
static inline void port_unlock_from_isr(void) {
 8004860:	b510      	push	{r4, lr}
  port_unlock();
 8004862:	f7ff ffed 	bl	8004840 <port_unlock.lto_priv.5>
}
 8004866:	bd10      	pop	{r4, pc}
	...

08004870 <chSysLockFromISR.lto_priv.1>:
static inline void chSysLockFromISR(void) {
 8004870:	b510      	push	{r4, lr}
  port_lock_from_isr();
 8004872:	f7ff ffed 	bl	8004850 <port_lock_from_isr.lto_priv.1>
  __dbg_check_lock_from_isr();
 8004876:	f000 fb8b 	bl	8004f90 <__dbg_check_lock_from_isr>
}
 800487a:	bd10      	pop	{r4, pc}
 800487c:	0000      	movs	r0, r0
	...

08004880 <chSysUnlockFromISR.lto_priv.1>:
static inline void chSysUnlockFromISR(void) {
 8004880:	b510      	push	{r4, lr}
  __dbg_check_unlock_from_isr();
 8004882:	f000 fbad 	bl	8004fe0 <__dbg_check_unlock_from_isr>
  port_unlock_from_isr();
 8004886:	f7ff ffeb 	bl	8004860 <port_unlock_from_isr.lto_priv.1>
}
 800488a:	bd10      	pop	{r4, pc}
 800488c:	0000      	movs	r0, r0
	...

08004890 <osalSysLockFromISR.lto_priv.1>:
static inline void osalSysLockFromISR(void) {
 8004890:	b510      	push	{r4, lr}
  chSysLockFromISR();
 8004892:	f7ff ffed 	bl	8004870 <chSysLockFromISR.lto_priv.1>
}
 8004896:	bd10      	pop	{r4, pc}
	...

080048a0 <osalSysUnlockFromISR.lto_priv.1>:
static inline void osalSysUnlockFromISR(void) {
 80048a0:	b510      	push	{r4, lr}
  chSysUnlockFromISR();
 80048a2:	f7ff ffed 	bl	8004880 <chSysUnlockFromISR.lto_priv.1>
}
 80048a6:	bd10      	pop	{r4, pc}
	...

080048b0 <osalEventBroadcastFlagsI.lto_priv.2>:
                                            eventflags_t flags) {
 80048b0:	b500      	push	{lr}
 80048b2:	b083      	sub	sp, #12
 80048b4:	9001      	str	r0, [sp, #4]
 80048b6:	9100      	str	r1, [sp, #0]
  chEvtBroadcastFlagsI(esp, flags);
 80048b8:	9a00      	ldr	r2, [sp, #0]
 80048ba:	9b01      	ldr	r3, [sp, #4]
 80048bc:	0011      	movs	r1, r2
 80048be:	0018      	movs	r0, r3
 80048c0:	f002 fb46 	bl	8006f50 <chEvtBroadcastFlagsI>
}
 80048c4:	b003      	add	sp, #12
 80048c6:	bd00      	pop	{pc}
	...

080048d0 <usart_init>:
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp,
                       const SerialConfig *config) {
 80048d0:	b500      	push	{lr}
 80048d2:	b087      	sub	sp, #28
 80048d4:	9001      	str	r0, [sp, #4]
 80048d6:	9100      	str	r1, [sp, #0]
  uint32_t brr, clock;
  USART_TypeDef *u = sdp->usart;
 80048d8:	9b01      	ldr	r3, [sp, #4]
 80048da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048dc:	9304      	str	r3, [sp, #16]

  /* Baud rate setting.*/
  clock = sdp->clock;
 80048de:	9b01      	ldr	r3, [sp, #4]
 80048e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e2:	9303      	str	r3, [sp, #12]
    osalDbgAssert((brr >= 0x300) && (brr < 0x100000), "invalid BRR value");
  }
  else
#endif
  {
    brr = (uint32_t)((clock + config->speed / 2) / config->speed);
 80048e4:	9b00      	ldr	r3, [sp, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	085a      	lsrs	r2, r3, #1
 80048ea:	9b03      	ldr	r3, [sp, #12]
 80048ec:	18d2      	adds	r2, r2, r3
 80048ee:	9b00      	ldr	r3, [sp, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	0019      	movs	r1, r3
 80048f4:	0010      	movs	r0, r2
 80048f6:	f7fe f865 	bl	80029c4 <__udivsi3>
 80048fa:	0003      	movs	r3, r0
 80048fc:	9305      	str	r3, [sp, #20]

    /* Correcting BRR value when oversampling by 8 instead of 16.
       Fraction is still 4 bits wide, but only lower 3 bits used.
       Mantissa is doubled, but Fraction is left the same.*/
    if (config->cr1 & USART_CR1_OVER8)
 80048fe:	9b00      	ldr	r3, [sp, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	2380      	movs	r3, #128	; 0x80
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	4013      	ands	r3, r2
 8004908:	d008      	beq.n	800491c <usart_init+0x4c>
      brr = ((brr & ~7) * 2) | (brr & 7);
 800490a:	9b05      	ldr	r3, [sp, #20]
 800490c:	2207      	movs	r2, #7
 800490e:	4393      	bics	r3, r2
 8004910:	005a      	lsls	r2, r3, #1
 8004912:	9b05      	ldr	r3, [sp, #20]
 8004914:	2107      	movs	r1, #7
 8004916:	400b      	ands	r3, r1
 8004918:	4313      	orrs	r3, r2
 800491a:	9305      	str	r3, [sp, #20]

    osalDbgAssert(brr < 0x10000, "invalid BRR value");
 800491c:	9905      	ldr	r1, [sp, #20]
 800491e:	2380      	movs	r3, #128	; 0x80
 8004920:	025a      	lsls	r2, r3, #9
 8004922:	2300      	movs	r3, #0
 8004924:	4291      	cmp	r1, r2
 8004926:	415b      	adcs	r3, r3
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <usart_init+0x66>
 800492e:	4b20      	ldr	r3, [pc, #128]	; (80049b0 <usart_init+0xe0>)
 8004930:	0018      	movs	r0, r3
 8004932:	f000 fa6d 	bl	8004e10 <chSysHalt>
  }
  u->BRR = brr;
 8004936:	9b04      	ldr	r3, [sp, #16]
 8004938:	9a05      	ldr	r2, [sp, #20]
 800493a:	60da      	str	r2, [r3, #12]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800493c:	9b00      	ldr	r3, [sp, #0]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	9b04      	ldr	r3, [sp, #16]
 8004942:	605a      	str	r2, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8004944:	9b00      	ldr	r3, [sp, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	431a      	orrs	r2, r3
 800494c:	9b04      	ldr	r3, [sp, #16]
 800494e:	609a      	str	r2, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8004950:	9b00      	ldr	r3, [sp, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8004954:	222e      	movs	r2, #46	; 0x2e
 8004956:	32ff      	adds	r2, #255	; 0xff
 8004958:	431a      	orrs	r2, r3
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800495a:	9b04      	ldr	r3, [sp, #16]
 800495c:	601a      	str	r2, [r3, #0]
                         USART_CR1_RE;
  u->ICR = 0xFFFFFFFFU;
 800495e:	9b04      	ldr	r3, [sp, #16]
 8004960:	2201      	movs	r2, #1
 8004962:	4252      	negs	r2, r2
 8004964:	621a      	str	r2, [r3, #32]

  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & USART_CR1_PCE) != 0U) {
 8004966:	9b00      	ldr	r3, [sp, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	2380      	movs	r3, #128	; 0x80
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	4013      	ands	r3, r2
 8004970:	d018      	beq.n	80049a4 <usart_init+0xd4>
    switch (config->cr1 & (USART_CR1_M_1 | USART_CR1_M_0)) {
 8004972:	9b00      	ldr	r3, [sp, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4a0f      	ldr	r2, [pc, #60]	; (80049b4 <usart_init+0xe4>)
 8004978:	4013      	ands	r3, r2
 800497a:	d004      	beq.n	8004986 <usart_init+0xb6>
 800497c:	2280      	movs	r2, #128	; 0x80
 800497e:	0552      	lsls	r2, r2, #21
 8004980:	4293      	cmp	r3, r2
 8004982:	d005      	beq.n	8004990 <usart_init+0xc0>
 8004984:	e009      	b.n	800499a <usart_init+0xca>
    case 0:
      sdp->rxmask = 0x7F;
 8004986:	9b01      	ldr	r3, [sp, #4]
 8004988:	225c      	movs	r2, #92	; 0x5c
 800498a:	217f      	movs	r1, #127	; 0x7f
 800498c:	5499      	strb	r1, [r3, r2]
      break;
    case USART_CR1_M_1:
      sdp->rxmask = 0x3F;
      break;
    default:
      sdp->rxmask = 0xFF;
 800498e:	e00d      	b.n	80049ac <usart_init+0xdc>
      sdp->rxmask = 0x3F;
 8004990:	9b01      	ldr	r3, [sp, #4]
 8004992:	225c      	movs	r2, #92	; 0x5c
 8004994:	213f      	movs	r1, #63	; 0x3f
 8004996:	5499      	strb	r1, [r3, r2]
      sdp->rxmask = 0xFF;
 8004998:	e008      	b.n	80049ac <usart_init+0xdc>
 800499a:	9b01      	ldr	r3, [sp, #4]
 800499c:	225c      	movs	r2, #92	; 0x5c
 800499e:	21ff      	movs	r1, #255	; 0xff
 80049a0:	5499      	strb	r1, [r3, r2]
 80049a2:	e003      	b.n	80049ac <usart_init+0xdc>
    }
  }
  else {
    sdp->rxmask = 0xFF;
 80049a4:	9b01      	ldr	r3, [sp, #4]
 80049a6:	225c      	movs	r2, #92	; 0x5c
 80049a8:	21ff      	movs	r1, #255	; 0xff
 80049aa:	5499      	strb	r1, [r3, r2]
  }
}
 80049ac:	b007      	add	sp, #28
 80049ae:	bd00      	pop	{pc}
 80049b0:	0800b154 	.word	0x0800b154
 80049b4:	10001000 	.word	0x10001000
	...

080049c0 <set_error>:
 * @brief   Error handling routine.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] isr       USART ISR register value
 */
static void set_error(SerialDriver *sdp, uint32_t isr) {
 80049c0:	b500      	push	{lr}
 80049c2:	b085      	sub	sp, #20
 80049c4:	9001      	str	r0, [sp, #4]
 80049c6:	9100      	str	r1, [sp, #0]
  eventflags_t sts = 0;
 80049c8:	2300      	movs	r3, #0
 80049ca:	9303      	str	r3, [sp, #12]

  if (isr & USART_ISR_ORE)
 80049cc:	9b00      	ldr	r3, [sp, #0]
 80049ce:	2208      	movs	r2, #8
 80049d0:	4013      	ands	r3, r2
 80049d2:	d004      	beq.n	80049de <set_error+0x1e>
    sts |= SD_OVERRUN_ERROR;
 80049d4:	9b03      	ldr	r3, [sp, #12]
 80049d6:	2280      	movs	r2, #128	; 0x80
 80049d8:	0052      	lsls	r2, r2, #1
 80049da:	4313      	orrs	r3, r2
 80049dc:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_PE)
 80049de:	9b00      	ldr	r3, [sp, #0]
 80049e0:	2201      	movs	r2, #1
 80049e2:	4013      	ands	r3, r2
 80049e4:	d003      	beq.n	80049ee <set_error+0x2e>
    sts |= SD_PARITY_ERROR;
 80049e6:	9b03      	ldr	r3, [sp, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	4313      	orrs	r3, r2
 80049ec:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_FE)
 80049ee:	9b00      	ldr	r3, [sp, #0]
 80049f0:	2202      	movs	r2, #2
 80049f2:	4013      	ands	r3, r2
 80049f4:	d003      	beq.n	80049fe <set_error+0x3e>
    sts |= SD_FRAMING_ERROR;
 80049f6:	9b03      	ldr	r3, [sp, #12]
 80049f8:	2240      	movs	r2, #64	; 0x40
 80049fa:	4313      	orrs	r3, r2
 80049fc:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_NE)
 80049fe:	9b00      	ldr	r3, [sp, #0]
 8004a00:	2204      	movs	r2, #4
 8004a02:	4013      	ands	r3, r2
 8004a04:	d003      	beq.n	8004a0e <set_error+0x4e>
    sts |= SD_NOISE_ERROR;
 8004a06:	9b03      	ldr	r3, [sp, #12]
 8004a08:	2280      	movs	r2, #128	; 0x80
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	9303      	str	r3, [sp, #12]
  osalSysLockFromISR();
 8004a0e:	f7ff ff3f 	bl	8004890 <osalSysLockFromISR.lto_priv.1>
  chnAddFlagsI(sdp, sts);
 8004a12:	9b01      	ldr	r3, [sp, #4]
 8004a14:	3304      	adds	r3, #4
 8004a16:	9a03      	ldr	r2, [sp, #12]
 8004a18:	0011      	movs	r1, r2
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f7ff ff48 	bl	80048b0 <osalEventBroadcastFlagsI.lto_priv.2>
  osalSysUnlockFromISR();
 8004a20:	f7ff ff3e 	bl	80048a0 <osalSysUnlockFromISR.lto_priv.1>
}
 8004a24:	b005      	add	sp, #20
 8004a26:	bd00      	pop	{pc}
	...

08004a30 <notify2>:
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
}
#endif

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {
 8004a30:	b082      	sub	sp, #8
 8004a32:	9001      	str	r0, [sp, #4]

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8004a34:	4b03      	ldr	r3, [pc, #12]	; (8004a44 <notify2+0x14>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	4b02      	ldr	r3, [pc, #8]	; (8004a44 <notify2+0x14>)
 8004a3a:	21c0      	movs	r1, #192	; 0xc0
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	601a      	str	r2, [r3, #0]
}
 8004a40:	b002      	add	sp, #8
 8004a42:	4770      	bx	lr
 8004a44:	40004400 	.word	0x40004400
	...

08004a50 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 8004a50:	b500      	push	{lr}
 8004a52:	b083      	sub	sp, #12
  nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
#endif
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2);
 8004a54:	4b0e      	ldr	r3, [pc, #56]	; (8004a90 <sd_lld_init+0x40>)
 8004a56:	0018      	movs	r0, r3
 8004a58:	f7ff f992 	bl	8003d80 <sdObjectInit>
  iqObjectInit(&SD2.iqueue, sd_in_buf2, sizeof sd_in_buf2, NULL, &SD2);
 8004a5c:	490d      	ldr	r1, [pc, #52]	; (8004a94 <sd_lld_init+0x44>)
 8004a5e:	480e      	ldr	r0, [pc, #56]	; (8004a98 <sd_lld_init+0x48>)
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <sd_lld_init+0x40>)
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	2300      	movs	r3, #0
 8004a66:	2210      	movs	r2, #16
 8004a68:	f7fe fd22 	bl	80034b0 <iqObjectInit>
  oqObjectInit(&SD2.oqueue, sd_out_buf2, sizeof sd_out_buf2, notify2, &SD2);
 8004a6c:	4a0b      	ldr	r2, [pc, #44]	; (8004a9c <sd_lld_init+0x4c>)
 8004a6e:	490c      	ldr	r1, [pc, #48]	; (8004aa0 <sd_lld_init+0x50>)
 8004a70:	480c      	ldr	r0, [pc, #48]	; (8004aa4 <sd_lld_init+0x54>)
 8004a72:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <sd_lld_init+0x40>)
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	0013      	movs	r3, r2
 8004a78:	2210      	movs	r2, #16
 8004a7a:	f7fe fe21 	bl	80036c0 <oqObjectInit>
  SD2.usart = USART2;
 8004a7e:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <sd_lld_init+0x40>)
 8004a80:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <sd_lld_init+0x58>)
 8004a82:	655a      	str	r2, [r3, #84]	; 0x54
  SD2.clock = STM32_USART2CLK;
 8004a84:	4b02      	ldr	r3, [pc, #8]	; (8004a90 <sd_lld_init+0x40>)
 8004a86:	4a09      	ldr	r2, [pc, #36]	; (8004aac <sd_lld_init+0x5c>)
 8004a88:	659a      	str	r2, [r3, #88]	; 0x58
  LPSD1.clock = STM32_LPUART1CLK;
#if !defined(STM32_LPUART1_SUPPRESS_ISR) && defined(STM32_LPUART1_NUMBER)
  nvicEnableVector(STM32_LPUART1_NUMBER, STM32_SERIAL_LPUART1_PRIORITY);
#endif
#endif
}
 8004a8a:	b003      	add	sp, #12
 8004a8c:	bd00      	pop	{pc}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	200009a0 	.word	0x200009a0
 8004a94:	20000a00 	.word	0x20000a00
 8004a98:	200009ac 	.word	0x200009ac
 8004a9c:	08004a31 	.word	0x08004a31
 8004aa0:	20000a10 	.word	0x20000a10
 8004aa4:	200009d0 	.word	0x200009d0
 8004aa8:	40004400 	.word	0x40004400
 8004aac:	02dc6c00 	.word	0x02dc6c00

08004ab0 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 8004ab0:	b500      	push	{lr}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	9001      	str	r0, [sp, #4]
 8004ab6:	9100      	str	r1, [sp, #0]

  if (config == NULL)
 8004ab8:	9b00      	ldr	r3, [sp, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <sd_lld_start+0x12>
    config = &default_config;
 8004abe:	4b0d      	ldr	r3, [pc, #52]	; (8004af4 <sd_lld_start+0x44>)
 8004ac0:	9300      	str	r3, [sp, #0]

  if (sdp->state == SD_STOP) {
 8004ac2:	9b01      	ldr	r3, [sp, #4]
 8004ac4:	7a1b      	ldrb	r3, [r3, #8]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d10c      	bne.n	8004ae4 <sd_lld_start+0x34>
    if (&SD1 == sdp) {
      rccEnableUSART1(true);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 8004aca:	9a01      	ldr	r2, [sp, #4]
 8004acc:	4b0a      	ldr	r3, [pc, #40]	; (8004af8 <sd_lld_start+0x48>)
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d108      	bne.n	8004ae4 <sd_lld_start+0x34>
      rccEnableUSART2(true);
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <sd_lld_start+0x4c>)
 8004ad4:	69da      	ldr	r2, [r3, #28]
 8004ad6:	4b09      	ldr	r3, [pc, #36]	; (8004afc <sd_lld_start+0x4c>)
 8004ad8:	2180      	movs	r1, #128	; 0x80
 8004ada:	0289      	lsls	r1, r1, #10
 8004adc:	430a      	orrs	r2, r1
 8004ade:	61da      	str	r2, [r3, #28]
 8004ae0:	4b06      	ldr	r3, [pc, #24]	; (8004afc <sd_lld_start+0x4c>)
 8004ae2:	69db      	ldr	r3, [r3, #28]
    if (&LPSD1 == sdp) {
      rccEnableLPUART1(true);
    }
#endif
  }
  usart_init(sdp, config);
 8004ae4:	9a00      	ldr	r2, [sp, #0]
 8004ae6:	9b01      	ldr	r3, [sp, #4]
 8004ae8:	0011      	movs	r1, r2
 8004aea:	0018      	movs	r0, r3
 8004aec:	f7ff fef0 	bl	80048d0 <usart_init>
}
 8004af0:	b003      	add	sp, #12
 8004af2:	bd00      	pop	{pc}
 8004af4:	0800b144 	.word	0x0800b144
 8004af8:	200009a0 	.word	0x200009a0
 8004afc:	40021000 	.word	0x40021000

08004b00 <sd_lld_serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 8004b00:	b500      	push	{lr}
 8004b02:	b087      	sub	sp, #28
 8004b04:	9001      	str	r0, [sp, #4]
  USART_TypeDef *u = sdp->usart;
 8004b06:	9b01      	ldr	r3, [sp, #4]
 8004b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0a:	9304      	str	r3, [sp, #16]
  uint32_t cr1 = u->CR1;
 8004b0c:	9b04      	ldr	r3, [sp, #16]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	9303      	str	r3, [sp, #12]
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
 8004b12:	9b04      	ldr	r3, [sp, #16]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	9305      	str	r3, [sp, #20]
  u->ICR = isr;
 8004b18:	9b04      	ldr	r3, [sp, #16]
 8004b1a:	9a05      	ldr	r2, [sp, #20]
 8004b1c:	621a      	str	r2, [r3, #32]

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 8004b1e:	9b05      	ldr	r3, [sp, #20]
 8004b20:	220f      	movs	r2, #15
 8004b22:	4013      	ands	r3, r2
 8004b24:	d01b      	beq.n	8004b5e <sd_lld_serve_interrupt+0x5e>
    set_error(sdp, isr);
 8004b26:	9a05      	ldr	r2, [sp, #20]
 8004b28:	9b01      	ldr	r3, [sp, #4]
 8004b2a:	0011      	movs	r1, r2
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f7ff ff47 	bl	80049c0 <set_error>
 8004b32:	e014      	b.n	8004b5e <sd_lld_serve_interrupt+0x5e>
     1) Another byte arrived after removing the previous one, this would cause
        an extra interrupt to serve.
     2) FIFO mode is enabled on devices that support it, we need to empty
        the FIFO.*/
  while (isr & USART_ISR_RXNE) {
    osalSysLockFromISR();
 8004b34:	f7ff feac 	bl	8004890 <osalSysLockFromISR.lto_priv.1>
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
 8004b38:	9b04      	ldr	r3, [sp, #16]
 8004b3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	9a01      	ldr	r2, [sp, #4]
 8004b42:	215c      	movs	r1, #92	; 0x5c
 8004b44:	5c52      	ldrb	r2, [r2, r1]
 8004b46:	4013      	ands	r3, r2
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	9b01      	ldr	r3, [sp, #4]
 8004b4c:	0011      	movs	r1, r2
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f7ff f96e 	bl	8003e30 <sdIncomingDataI>
    osalSysUnlockFromISR();
 8004b54:	f7ff fea4 	bl	80048a0 <osalSysUnlockFromISR.lto_priv.1>

    isr = u->ISR;
 8004b58:	9b04      	ldr	r3, [sp, #16]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	9305      	str	r3, [sp, #20]
  while (isr & USART_ISR_RXNE) {
 8004b5e:	9b05      	ldr	r3, [sp, #20]
 8004b60:	2220      	movs	r2, #32
 8004b62:	4013      	ands	r3, r2
 8004b64:	d1e6      	bne.n	8004b34 <sd_lld_serve_interrupt+0x34>
     situations:
     1) The data registers has been emptied immediately after writing it, this
        would cause an extra interrupt to serve.
     2) FIFO mode is enabled on devices that support it, we need to fill
        the FIFO.*/
  if (cr1 & USART_CR1_TXEIE) {
 8004b66:	9b03      	ldr	r3, [sp, #12]
 8004b68:	2280      	movs	r2, #128	; 0x80
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d124      	bne.n	8004bb8 <sd_lld_serve_interrupt+0xb8>
 8004b6e:	e027      	b.n	8004bc0 <sd_lld_serve_interrupt+0xc0>
    while (isr & USART_ISR_TXE) {
      msg_t b;

      osalSysLockFromISR();
 8004b70:	f7ff fe8e 	bl	8004890 <osalSysLockFromISR.lto_priv.1>
      b = oqGetI(&sdp->oqueue);
 8004b74:	9b01      	ldr	r3, [sp, #4]
 8004b76:	3330      	adds	r3, #48	; 0x30
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f7fe fe11 	bl	80037a0 <oqGetI>
 8004b7e:	0003      	movs	r3, r0
 8004b80:	9302      	str	r3, [sp, #8]
      if (b < MSG_OK) {
 8004b82:	9b02      	ldr	r3, [sp, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	da0e      	bge.n	8004ba6 <sd_lld_serve_interrupt+0xa6>
        chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 8004b88:	9b01      	ldr	r3, [sp, #4]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	2108      	movs	r1, #8
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f7ff fe8e 	bl	80048b0 <osalEventBroadcastFlagsI.lto_priv.2>
        u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8004b94:	9b03      	ldr	r3, [sp, #12]
 8004b96:	2280      	movs	r2, #128	; 0x80
 8004b98:	4393      	bics	r3, r2
 8004b9a:	001a      	movs	r2, r3
 8004b9c:	9b04      	ldr	r3, [sp, #16]
 8004b9e:	601a      	str	r2, [r3, #0]
        osalSysUnlockFromISR();
 8004ba0:	f7ff fe7e 	bl	80048a0 <osalSysUnlockFromISR.lto_priv.1>
 8004ba4:	e00c      	b.n	8004bc0 <sd_lld_serve_interrupt+0xc0>
        break;
      }
      u->TDR = b;
 8004ba6:	9b02      	ldr	r3, [sp, #8]
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	9b04      	ldr	r3, [sp, #16]
 8004bac:	851a      	strh	r2, [r3, #40]	; 0x28
      osalSysUnlockFromISR();
 8004bae:	f7ff fe77 	bl	80048a0 <osalSysUnlockFromISR.lto_priv.1>

      isr = u->ISR;
 8004bb2:	9b04      	ldr	r3, [sp, #16]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	9305      	str	r3, [sp, #20]
    while (isr & USART_ISR_TXE) {
 8004bb8:	9b05      	ldr	r3, [sp, #20]
 8004bba:	2280      	movs	r2, #128	; 0x80
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d1d7      	bne.n	8004b70 <sd_lld_serve_interrupt+0x70>
    }
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (isr & USART_ISR_TC)) {
 8004bc0:	9b03      	ldr	r3, [sp, #12]
 8004bc2:	2240      	movs	r2, #64	; 0x40
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d026      	beq.n	8004c16 <sd_lld_serve_interrupt+0x116>
 8004bc8:	9b05      	ldr	r3, [sp, #20]
 8004bca:	2240      	movs	r2, #64	; 0x40
 8004bcc:	4013      	ands	r3, r2
 8004bce:	d022      	beq.n	8004c16 <sd_lld_serve_interrupt+0x116>
    osalSysLockFromISR();
 8004bd0:	f7ff fe5e 	bl	8004890 <osalSysLockFromISR.lto_priv.1>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8004bd4:	9b01      	ldr	r3, [sp, #4]
 8004bd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bd8:	9b01      	ldr	r3, [sp, #4]
 8004bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d105      	bne.n	8004bec <sd_lld_serve_interrupt+0xec>
 8004be0:	9b01      	ldr	r3, [sp, #4]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <sd_lld_serve_interrupt+0xec>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <sd_lld_serve_interrupt+0xee>
 8004bec:	2300      	movs	r3, #0
 8004bee:	1c1a      	adds	r2, r3, #0
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00b      	beq.n	8004c12 <sd_lld_serve_interrupt+0x112>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
 8004bfa:	9b01      	ldr	r3, [sp, #4]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	2110      	movs	r1, #16
 8004c00:	0018      	movs	r0, r3
 8004c02:	f7ff fe55 	bl	80048b0 <osalEventBroadcastFlagsI.lto_priv.2>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004c06:	9b03      	ldr	r3, [sp, #12]
 8004c08:	2240      	movs	r2, #64	; 0x40
 8004c0a:	4393      	bics	r3, r2
 8004c0c:	001a      	movs	r2, r3
 8004c0e:	9b04      	ldr	r3, [sp, #16]
 8004c10:	601a      	str	r2, [r3, #0]
    }
    osalSysUnlockFromISR();
 8004c12:	f7ff fe45 	bl	80048a0 <osalSysUnlockFromISR.lto_priv.1>
  }
}
 8004c16:	b007      	add	sp, #28
 8004c18:	bd00      	pop	{pc}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	0000      	movs	r0, r0
	...

08004c20 <gpio_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {
 8004c20:	b082      	sub	sp, #8
 8004c22:	9001      	str	r0, [sp, #4]
 8004c24:	9100      	str	r1, [sp, #0]

  gpiop->OTYPER  = config->otyper;
 8004c26:	9b00      	ldr	r3, [sp, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	9b01      	ldr	r3, [sp, #4]
 8004c2c:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004c2e:	9b00      	ldr	r3, [sp, #0]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	9b01      	ldr	r3, [sp, #4]
 8004c34:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8004c36:	9b00      	ldr	r3, [sp, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	9b01      	ldr	r3, [sp, #4]
 8004c3c:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 8004c3e:	9b00      	ldr	r3, [sp, #0]
 8004c40:	691a      	ldr	r2, [r3, #16]
 8004c42:	9b01      	ldr	r3, [sp, #4]
 8004c44:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8004c46:	9b00      	ldr	r3, [sp, #0]
 8004c48:	695a      	ldr	r2, [r3, #20]
 8004c4a:	9b01      	ldr	r3, [sp, #4]
 8004c4c:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8004c4e:	9b00      	ldr	r3, [sp, #0]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	9b01      	ldr	r3, [sp, #4]
 8004c54:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004c56:	9b00      	ldr	r3, [sp, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	9b01      	ldr	r3, [sp, #4]
 8004c5c:	601a      	str	r2, [r3, #0]
}
 8004c5e:	b002      	add	sp, #8
 8004c60:	4770      	bx	lr
 8004c62:	46c0      	nop			; (mov r8, r8)
	...

08004c70 <stm32_gpio_init>:

static void stm32_gpio_init(void) {
 8004c70:	b510      	push	{r4, lr}

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB(STM32_GPIO_EN_MASK);
 8004c72:	4b1c      	ldr	r3, [pc, #112]	; (8004ce4 <stm32_gpio_init+0x74>)
 8004c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c76:	4b1b      	ldr	r3, [pc, #108]	; (8004ce4 <stm32_gpio_init+0x74>)
 8004c78:	21bc      	movs	r1, #188	; 0xbc
 8004c7a:	03c9      	lsls	r1, r1, #15
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	629a      	str	r2, [r3, #40]	; 0x28
 8004c80:	4b18      	ldr	r3, [pc, #96]	; (8004ce4 <stm32_gpio_init+0x74>)
 8004c82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c84:	4b17      	ldr	r3, [pc, #92]	; (8004ce4 <stm32_gpio_init+0x74>)
 8004c86:	4918      	ldr	r1, [pc, #96]	; (8004ce8 <stm32_gpio_init+0x78>)
 8004c88:	400a      	ands	r2, r1
 8004c8a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c8c:	4b15      	ldr	r3, [pc, #84]	; (8004ce4 <stm32_gpio_init+0x74>)
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  rccEnableAHB(STM32_GPIO_EN_MASK, true);
 8004c90:	4b14      	ldr	r3, [pc, #80]	; (8004ce4 <stm32_gpio_init+0x74>)
 8004c92:	695a      	ldr	r2, [r3, #20]
 8004c94:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <stm32_gpio_init+0x74>)
 8004c96:	21bc      	movs	r1, #188	; 0xbc
 8004c98:	03c9      	lsls	r1, r1, #15
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	615a      	str	r2, [r3, #20]
 8004c9e:	4b11      	ldr	r3, [pc, #68]	; (8004ce4 <stm32_gpio_init+0x74>)
 8004ca0:	695b      	ldr	r3, [r3, #20]

  /* Initializing all the defined GPIO ports.*/
#if STM32_HAS_GPIOA
  gpio_init(GPIOA, &gpio_default_config.PAData);
 8004ca2:	4a12      	ldr	r2, [pc, #72]	; (8004cec <stm32_gpio_init+0x7c>)
 8004ca4:	2390      	movs	r3, #144	; 0x90
 8004ca6:	05db      	lsls	r3, r3, #23
 8004ca8:	0011      	movs	r1, r2
 8004caa:	0018      	movs	r0, r3
 8004cac:	f7ff ffb8 	bl	8004c20 <gpio_init>
#endif
#if STM32_HAS_GPIOB
  gpio_init(GPIOB, &gpio_default_config.PBData);
 8004cb0:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <stm32_gpio_init+0x80>)
 8004cb2:	4a10      	ldr	r2, [pc, #64]	; (8004cf4 <stm32_gpio_init+0x84>)
 8004cb4:	0019      	movs	r1, r3
 8004cb6:	0010      	movs	r0, r2
 8004cb8:	f7ff ffb2 	bl	8004c20 <gpio_init>
#endif
#if STM32_HAS_GPIOC
  gpio_init(GPIOC, &gpio_default_config.PCData);
 8004cbc:	4b0e      	ldr	r3, [pc, #56]	; (8004cf8 <stm32_gpio_init+0x88>)
 8004cbe:	4a0f      	ldr	r2, [pc, #60]	; (8004cfc <stm32_gpio_init+0x8c>)
 8004cc0:	0019      	movs	r1, r3
 8004cc2:	0010      	movs	r0, r2
 8004cc4:	f7ff ffac 	bl	8004c20 <gpio_init>
#endif
#if STM32_HAS_GPIOD
  gpio_init(GPIOD, &gpio_default_config.PDData);
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <stm32_gpio_init+0x90>)
 8004cca:	4a0e      	ldr	r2, [pc, #56]	; (8004d04 <stm32_gpio_init+0x94>)
 8004ccc:	0019      	movs	r1, r3
 8004cce:	0010      	movs	r0, r2
 8004cd0:	f7ff ffa6 	bl	8004c20 <gpio_init>
#endif
#if STM32_HAS_GPIOE
  gpio_init(GPIOE, &gpio_default_config.PEData);
#endif
#if STM32_HAS_GPIOF
  gpio_init(GPIOF, &gpio_default_config.PFData);
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <stm32_gpio_init+0x98>)
 8004cd6:	4a0d      	ldr	r2, [pc, #52]	; (8004d0c <stm32_gpio_init+0x9c>)
 8004cd8:	0019      	movs	r1, r3
 8004cda:	0010      	movs	r0, r2
 8004cdc:	f7ff ffa0 	bl	8004c20 <gpio_init>
  gpio_init(GPIOJ, &gpio_default_config.PJData);
#endif
#if STM32_HAS_GPIOK
  gpio_init(GPIOK, &gpio_default_config.PKData);
#endif
}
 8004ce0:	bd10      	pop	{r4, pc}
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	ffa1ffff 	.word	0xffa1ffff
 8004cec:	0800b160 	.word	0x0800b160
 8004cf0:	0800b17c 	.word	0x0800b17c
 8004cf4:	48000400 	.word	0x48000400
 8004cf8:	0800b198 	.word	0x0800b198
 8004cfc:	48000800 	.word	0x48000800
 8004d00:	0800b1b4 	.word	0x0800b1b4
 8004d04:	48000c00 	.word	0x48000c00
 8004d08:	0800b1d0 	.word	0x0800b1d0
 8004d0c:	48001400 	.word	0x48001400

08004d10 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8004d10:	b510      	push	{r4, lr}

  stm32_gpio_init();
 8004d12:	f7ff ffad 	bl	8004c70 <stm32_gpio_init>
  stm32_clock_init();
 8004d16:	f7ff f9cb 	bl	80040b0 <stm32_clock_init>
}
 8004d1a:	bd10      	pop	{r4, pc}
 8004d1c:	0000      	movs	r0, r0
	...

08004d20 <boardInit>:
 * @brief   Board-specific initialization code.
 * @note    You can add your board-specific code here.
 */
void boardInit(void) {

}
 8004d20:	4770      	bx	lr
 8004d22:	46c0      	nop			; (mov r8, r8)
	...

08004d30 <port_unlock.lto_priv.6>:
 8004d30:	b662      	cpsie	i
}
 8004d32:	4770      	bx	lr
	...

08004d40 <port_disable>:
  __ASM volatile ("cpsid i" : : : "memory");
 8004d40:	b672      	cpsid	i
 * @brief   Disables all the interrupt sources.
 */
static inline void port_disable(void) {

  __disable_irq();
}
 8004d42:	4770      	bx	lr
	...

08004d50 <chSysUnlock.lto_priv.4>:
static inline void chSysUnlock(void) {
 8004d50:	b510      	push	{r4, lr}
  __dbg_check_unlock();
 8004d52:	f000 f8f5 	bl	8004f40 <__dbg_check_unlock>
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
 8004d56:	4b0e      	ldr	r3, [pc, #56]	; (8004d90 <chSysUnlock.lto_priv.4+0x40>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	; (8004d90 <chSysUnlock.lto_priv.4+0x40>)
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	1e5a      	subs	r2, r3, #1
 8004d60:	4193      	sbcs	r3, r2
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00f      	beq.n	8004d88 <chSysUnlock.lto_priv.4+0x38>
 8004d68:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <chSysUnlock.lto_priv.4+0x40>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	4b08      	ldr	r3, [pc, #32]	; (8004d90 <chSysUnlock.lto_priv.4+0x40>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	419b      	sbcs	r3, r3
 8004d78:	425b      	negs	r3, r3
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <chSysUnlock.lto_priv.4+0x38>
 8004d80:	4b04      	ldr	r3, [pc, #16]	; (8004d94 <chSysUnlock.lto_priv.4+0x44>)
 8004d82:	0018      	movs	r0, r3
 8004d84:	f000 f844 	bl	8004e10 <chSysHalt>
  port_unlock();
 8004d88:	f7ff ffd2 	bl	8004d30 <port_unlock.lto_priv.6>
}
 8004d8c:	bd10      	pop	{r4, pc}
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	20000a28 	.word	0x20000a28
 8004d94:	0800b2a4 	.word	0x0800b2a4
	...

08004da0 <__oslib_init>:
/**
 * @brief   Initialization of all library modules.
 *
 * @notapi
 */
static inline void __oslib_init(void) {
 8004da0:	b510      	push	{r4, lr}

#if CH_CFG_USE_MEMCORE == TRUE
  __core_init();
 8004da2:	f002 f9cd 	bl	8007140 <__core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  __heap_init();
 8004da6:	f002 fa4b 	bl	8007240 <__heap_init>
#endif
#if CH_CFG_USE_FACTORY == TRUE
  __factory_init();
 8004daa:	f002 fd41 	bl	8007830 <__factory_init>
#endif
}
 8004dae:	bd10      	pop	{r4, pc}

08004db0 <chSysInit>:
 *          interrupts are enabled.
 * @post    the system is in @p ch_sys_running state.
 *
 * @special
 */
void chSysInit(void) {
 8004db0:	b500      	push	{lr}
 8004db2:	b083      	sub	sp, #12
  unsigned i;

  /* System object initialization.*/
  ch_system.state = ch_sys_initializing;
 8004db4:	4b10      	ldr	r3, [pc, #64]	; (8004df8 <chSysInit+0x48>)
 8004db6:	2201      	movs	r2, #1
 8004db8:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < (unsigned)PORT_CORES_NUMBER; i++) {
 8004dba:	2300      	movs	r3, #0
 8004dbc:	9301      	str	r3, [sp, #4]
 8004dbe:	e009      	b.n	8004dd4 <chSysInit+0x24>
    ch_system.instances[i] = NULL;
 8004dc0:	4a0d      	ldr	r2, [pc, #52]	; (8004df8 <chSysInit+0x48>)
 8004dc2:	9b01      	ldr	r3, [sp, #4]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	18d3      	adds	r3, r2, r3
 8004dc8:	3304      	adds	r3, #4
 8004dca:	2200      	movs	r2, #0
 8004dcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (unsigned)PORT_CORES_NUMBER; i++) {
 8004dce:	9b01      	ldr	r3, [sp, #4]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	9b01      	ldr	r3, [sp, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0f2      	beq.n	8004dc0 <chSysInit+0x10>

  /* User system initialization hook.*/
  CH_CFG_SYSTEM_INIT_HOOK();

  /* OS library modules.*/
  __oslib_init();
 8004dda:	f7ff ffe1 	bl	8004da0 <__oslib_init>

  /* Initializing default OS instance.*/
  chInstanceObjectInit(&ch0, &ch_core0_cfg);
 8004dde:	4a07      	ldr	r2, [pc, #28]	; (8004dfc <chSysInit+0x4c>)
 8004de0:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <chSysInit+0x50>)
 8004de2:	0011      	movs	r1, r2
 8004de4:	0018      	movs	r0, r3
 8004de6:	f001 f91b 	bl	8006020 <chInstanceObjectInit>

  /* It is alive now.*/
  ch_system.state = ch_sys_running;
 8004dea:	4b03      	ldr	r3, [pc, #12]	; (8004df8 <chSysInit+0x48>)
 8004dec:	2202      	movs	r2, #2
 8004dee:	701a      	strb	r2, [r3, #0]
  chSysUnlock();
 8004df0:	f7ff ffae 	bl	8004d50 <chSysUnlock.lto_priv.4>
}
 8004df4:	b003      	add	sp, #12
 8004df6:	bd00      	pop	{pc}
 8004df8:	20000a20 	.word	0x20000a20
 8004dfc:	0800b290 	.word	0x0800b290
 8004e00:	20000a28 	.word	0x20000a28
	...

08004e10 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 8004e10:	b500      	push	{lr}
 8004e12:	b083      	sub	sp, #12
 8004e14:	9001      	str	r0, [sp, #4]

  port_disable();
 8004e16:	f7ff ff93 	bl	8004d40 <port_disable>

  /* Logging the event.*/
  __trace_halt(reason);

  /* Pointing to the passed message.*/
  currcore->dbg.panic_msg = reason;
 8004e1a:	4b04      	ldr	r3, [pc, #16]	; (8004e2c <chSysHalt+0x1c>)
 8004e1c:	2188      	movs	r1, #136	; 0x88
 8004e1e:	9a01      	ldr	r2, [sp, #4]
 8004e20:	505a      	str	r2, [r3, r1]
     via some inter-core messaging or other means.*/
  PORT_SYSTEM_HALT_HOOK();
#endif

  /* Entering the halted state.*/
  ch_system.state = ch_sys_halted;
 8004e22:	4b03      	ldr	r3, [pc, #12]	; (8004e30 <chSysHalt+0x20>)
 8004e24:	2203      	movs	r2, #3
 8004e26:	701a      	strb	r2, [r3, #0]
 8004e28:	e7fe      	b.n	8004e28 <chSysHalt+0x18>
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	20000a28 	.word	0x20000a28
 8004e30:	20000a20 	.word	0x20000a20
	...

08004e40 <chSysGetIdleThreadX>:
 *
 * @return              Pointer to the idle thread.
 *
 * @xclass
 */
thread_t *chSysGetIdleThreadX(void) {
 8004e40:	b500      	push	{lr}
 8004e42:	b083      	sub	sp, #12
  thread_t *tp = threadref(currcore->rlist.pqueue.prev);
 8004e44:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <chSysGetIdleThreadX+0x2c>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	9301      	str	r3, [sp, #4]

  chDbgAssert(tp->hdr.pqueue.prio == IDLEPRIO, "not idle thread");
 8004e4a:	9b01      	ldr	r3, [sp, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	1e5a      	subs	r2, r3, #1
 8004e52:	4193      	sbcs	r3, r2
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <chSysGetIdleThreadX+0x22>
 8004e5a:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <chSysGetIdleThreadX+0x30>)
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f7ff ffd7 	bl	8004e10 <chSysHalt>

  return tp;
 8004e62:	9b01      	ldr	r3, [sp, #4]
}
 8004e64:	0018      	movs	r0, r3
 8004e66:	b003      	add	sp, #12
 8004e68:	bd00      	pop	{pc}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	20000a28 	.word	0x20000a28
 8004e70:	0800b2b0 	.word	0x0800b2b0
	...

08004e80 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8004e80:	b510      	push	{r4, lr}
#if (CH_CFG_TIME_QUANTUM > 0) || (CH_DBG_THREADS_PROFILING == TRUE)
  thread_t *currtp = chThdGetSelfX();
#endif

  chDbgCheckClassI();
 8004e82:	f000 f92d 	bl	80050e0 <chDbgCheckClassI>
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currtp->time++;
#endif
  chVTDoTickI();
 8004e86:	f000 fca3 	bl	80057d0 <chVTDoTickI>
  CH_CFG_SYSTEM_TICK_HOOK();
}
 8004e8a:	bd10      	pop	{r4, pc}
 8004e8c:	0000      	movs	r0, r0
	...

08004e90 <chRFCUCollectFaultsI>:
/**
 * @brief   Adds fault flags to the current mask.
 *
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {
 8004e90:	b082      	sub	sp, #8
 8004e92:	9001      	str	r0, [sp, #4]

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
 8004e94:	4b03      	ldr	r3, [pc, #12]	; (8004ea4 <chRFCUCollectFaultsI+0x14>)
 8004e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e98:	9b01      	ldr	r3, [sp, #4]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	4b01      	ldr	r3, [pc, #4]	; (8004ea4 <chRFCUCollectFaultsI+0x14>)
 8004e9e:	635a      	str	r2, [r3, #52]	; 0x34
#else
  ch_system.rfcu.mask |= mask;
#endif

  CH_CFG_RUNTIME_FAULTS_HOOK(mask);
}
 8004ea0:	b002      	add	sp, #8
 8004ea2:	4770      	bx	lr
 8004ea4:	20000a28 	.word	0x20000a28
	...

08004eb0 <port_lock.lto_priv.7>:
 8004eb0:	b672      	cpsid	i
}
 8004eb2:	4770      	bx	lr
	...

08004ec0 <port_unlock.lto_priv.7>:
  __ASM volatile ("cpsie i" : : : "memory");
 8004ec0:	b662      	cpsie	i
}
 8004ec2:	4770      	bx	lr
	...

08004ed0 <port_lock_from_isr.lto_priv.3>:
static inline void port_lock_from_isr(void) {
 8004ed0:	b510      	push	{r4, lr}
  port_lock();
 8004ed2:	f7ff ffed 	bl	8004eb0 <port_lock.lto_priv.7>
}
 8004ed6:	bd10      	pop	{r4, pc}
	...

08004ee0 <port_unlock_from_isr.lto_priv.3>:
static inline void port_unlock_from_isr(void) {
 8004ee0:	b510      	push	{r4, lr}
  port_unlock();
 8004ee2:	f7ff ffed 	bl	8004ec0 <port_unlock.lto_priv.7>
}
 8004ee6:	bd10      	pop	{r4, pc}
	...

08004ef0 <__dbg_check_lock>:
/**
 * @brief   Guard code for @p chSysLock().
 *
 * @notapi
 */
void __dbg_check_lock(void) {
 8004ef0:	b500      	push	{lr}
 8004ef2:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
 8004ef4:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <__dbg_check_lock+0x3c>)
 8004ef6:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004ef8:	9b01      	ldr	r3, [sp, #4]
 8004efa:	228c      	movs	r2, #140	; 0x8c
 8004efc:	589b      	ldr	r3, [r3, r2]
 8004efe:	1e5a      	subs	r2, r3, #1
 8004f00:	4193      	sbcs	r3, r2
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d107      	bne.n	8004f18 <__dbg_check_lock+0x28>
 8004f08:	9b01      	ldr	r3, [sp, #4]
 8004f0a:	2290      	movs	r2, #144	; 0x90
 8004f0c:	589b      	ldr	r3, [r3, r2]
 8004f0e:	1e5a      	subs	r2, r3, #1
 8004f10:	4193      	sbcs	r3, r2
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <__dbg_check_lock+0x30>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#4");
 8004f18:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <__dbg_check_lock+0x40>)
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f7ff ff78 	bl	8004e10 <chSysHalt>
  }
  oip->dbg.lock_cnt = (cnt_t)1;
 8004f20:	9b01      	ldr	r3, [sp, #4]
 8004f22:	2290      	movs	r2, #144	; 0x90
 8004f24:	2101      	movs	r1, #1
 8004f26:	5099      	str	r1, [r3, r2]
}
 8004f28:	b003      	add	sp, #12
 8004f2a:	bd00      	pop	{pc}
 8004f2c:	20000a28 	.word	0x20000a28
 8004f30:	0800b2c4 	.word	0x0800b2c4
	...

08004f40 <__dbg_check_unlock>:
/**
 * @brief   Guard code for @p chSysUnlock().
 *
 * @notapi
 */
void __dbg_check_unlock(void) {
 8004f40:	b500      	push	{lr}
 8004f42:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
 8004f44:	4b0e      	ldr	r3, [pc, #56]	; (8004f80 <__dbg_check_unlock+0x40>)
 8004f46:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004f48:	9b01      	ldr	r3, [sp, #4]
 8004f4a:	228c      	movs	r2, #140	; 0x8c
 8004f4c:	589b      	ldr	r3, [r3, r2]
 8004f4e:	1e5a      	subs	r2, r3, #1
 8004f50:	4193      	sbcs	r3, r2
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d108      	bne.n	8004f6a <__dbg_check_unlock+0x2a>
 8004f58:	9b01      	ldr	r3, [sp, #4]
 8004f5a:	2290      	movs	r2, #144	; 0x90
 8004f5c:	589b      	ldr	r3, [r3, r2]
 8004f5e:	1e5a      	subs	r2, r3, #1
 8004f60:	4313      	orrs	r3, r2
 8004f62:	0fdb      	lsrs	r3, r3, #31
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <__dbg_check_unlock+0x32>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#5");
 8004f6a:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <__dbg_check_unlock+0x44>)
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f7ff ff4f 	bl	8004e10 <chSysHalt>
  }
  oip->dbg.lock_cnt = (cnt_t)0;
 8004f72:	9b01      	ldr	r3, [sp, #4]
 8004f74:	2290      	movs	r2, #144	; 0x90
 8004f76:	2100      	movs	r1, #0
 8004f78:	5099      	str	r1, [r3, r2]
}
 8004f7a:	b003      	add	sp, #12
 8004f7c:	bd00      	pop	{pc}
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	20000a28 	.word	0x20000a28
 8004f84:	0800b2cc 	.word	0x0800b2cc
	...

08004f90 <__dbg_check_lock_from_isr>:
/**
 * @brief   Guard code for @p chSysLockFromIsr().
 *
 * @notapi
 */
void __dbg_check_lock_from_isr(void) {
 8004f90:	b500      	push	{lr}
 8004f92:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
 8004f94:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <__dbg_check_lock_from_isr+0x40>)
 8004f96:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8004f98:	9b01      	ldr	r3, [sp, #4]
 8004f9a:	228c      	movs	r2, #140	; 0x8c
 8004f9c:	589b      	ldr	r3, [r3, r2]
 8004f9e:	1e5a      	subs	r2, r3, #1
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	0fdb      	lsrs	r3, r3, #31
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d107      	bne.n	8004fba <__dbg_check_lock_from_isr+0x2a>
 8004faa:	9b01      	ldr	r3, [sp, #4]
 8004fac:	2290      	movs	r2, #144	; 0x90
 8004fae:	589b      	ldr	r3, [r3, r2]
 8004fb0:	1e5a      	subs	r2, r3, #1
 8004fb2:	4193      	sbcs	r3, r2
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <__dbg_check_lock_from_isr+0x32>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#6");
 8004fba:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <__dbg_check_lock_from_isr+0x44>)
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	f7ff ff27 	bl	8004e10 <chSysHalt>
  }
  oip->dbg.lock_cnt = (cnt_t)1;
 8004fc2:	9b01      	ldr	r3, [sp, #4]
 8004fc4:	2290      	movs	r2, #144	; 0x90
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	5099      	str	r1, [r3, r2]
}
 8004fca:	b003      	add	sp, #12
 8004fcc:	bd00      	pop	{pc}
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	20000a28 	.word	0x20000a28
 8004fd4:	0800b2d4 	.word	0x0800b2d4
	...

08004fe0 <__dbg_check_unlock_from_isr>:
/**
 * @brief   Guard code for @p chSysUnlockFromIsr().
 *
 * @notapi
 */
void __dbg_check_unlock_from_isr(void) {
 8004fe0:	b500      	push	{lr}
 8004fe2:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
 8004fe4:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <__dbg_check_unlock_from_isr+0x40>)
 8004fe6:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8004fe8:	9b01      	ldr	r3, [sp, #4]
 8004fea:	228c      	movs	r2, #140	; 0x8c
 8004fec:	589b      	ldr	r3, [r3, r2]
 8004fee:	1e5a      	subs	r2, r3, #1
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	0fdb      	lsrs	r3, r3, #31
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d108      	bne.n	800500c <__dbg_check_unlock_from_isr+0x2c>
 8004ffa:	9b01      	ldr	r3, [sp, #4]
 8004ffc:	2290      	movs	r2, #144	; 0x90
 8004ffe:	589b      	ldr	r3, [r3, r2]
 8005000:	1e5a      	subs	r2, r3, #1
 8005002:	4313      	orrs	r3, r2
 8005004:	0fdb      	lsrs	r3, r3, #31
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <__dbg_check_unlock_from_isr+0x34>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#7");
 800500c:	4b05      	ldr	r3, [pc, #20]	; (8005024 <__dbg_check_unlock_from_isr+0x44>)
 800500e:	0018      	movs	r0, r3
 8005010:	f7ff fefe 	bl	8004e10 <chSysHalt>
  }
  oip->dbg.lock_cnt = (cnt_t)0;
 8005014:	9b01      	ldr	r3, [sp, #4]
 8005016:	2290      	movs	r2, #144	; 0x90
 8005018:	2100      	movs	r1, #0
 800501a:	5099      	str	r1, [r3, r2]
}
 800501c:	b003      	add	sp, #12
 800501e:	bd00      	pop	{pc}
 8005020:	20000a28 	.word	0x20000a28
 8005024:	0800b2dc 	.word	0x0800b2dc
	...

08005030 <__dbg_check_enter_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_PROLOGUE().
 *
 * @notapi
 */
void __dbg_check_enter_isr(void) {
 8005030:	b500      	push	{lr}
 8005032:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
 8005034:	4b10      	ldr	r3, [pc, #64]	; (8005078 <__dbg_check_enter_isr+0x48>)
 8005036:	9301      	str	r3, [sp, #4]

  port_lock_from_isr();
 8005038:	f7ff ff4a 	bl	8004ed0 <port_lock_from_isr.lto_priv.3>
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 800503c:	9b01      	ldr	r3, [sp, #4]
 800503e:	228c      	movs	r2, #140	; 0x8c
 8005040:	589b      	ldr	r3, [r3, r2]
 8005042:	0fdb      	lsrs	r3, r3, #31
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d107      	bne.n	800505a <__dbg_check_enter_isr+0x2a>
 800504a:	9b01      	ldr	r3, [sp, #4]
 800504c:	2290      	movs	r2, #144	; 0x90
 800504e:	589b      	ldr	r3, [r3, r2]
 8005050:	1e5a      	subs	r2, r3, #1
 8005052:	4193      	sbcs	r3, r2
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <__dbg_check_enter_isr+0x32>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#8");
 800505a:	4b08      	ldr	r3, [pc, #32]	; (800507c <__dbg_check_enter_isr+0x4c>)
 800505c:	0018      	movs	r0, r3
 800505e:	f7ff fed7 	bl	8004e10 <chSysHalt>
  }
  oip->dbg.isr_cnt++;
 8005062:	9b01      	ldr	r3, [sp, #4]
 8005064:	228c      	movs	r2, #140	; 0x8c
 8005066:	589b      	ldr	r3, [r3, r2]
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	9b01      	ldr	r3, [sp, #4]
 800506c:	218c      	movs	r1, #140	; 0x8c
 800506e:	505a      	str	r2, [r3, r1]
  port_unlock_from_isr();
 8005070:	f7ff ff36 	bl	8004ee0 <port_unlock_from_isr.lto_priv.3>
}
 8005074:	b003      	add	sp, #12
 8005076:	bd00      	pop	{pc}
 8005078:	20000a28 	.word	0x20000a28
 800507c:	0800b2e4 	.word	0x0800b2e4

08005080 <__dbg_check_leave_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_EPILOGUE().
 *
 * @notapi
 */
void __dbg_check_leave_isr(void) {
 8005080:	b500      	push	{lr}
 8005082:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
 8005084:	4b11      	ldr	r3, [pc, #68]	; (80050cc <__dbg_check_leave_isr+0x4c>)
 8005086:	9301      	str	r3, [sp, #4]

  port_lock_from_isr();
 8005088:	f7ff ff22 	bl	8004ed0 <port_lock_from_isr.lto_priv.3>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800508c:	9b01      	ldr	r3, [sp, #4]
 800508e:	228c      	movs	r2, #140	; 0x8c
 8005090:	589b      	ldr	r3, [r3, r2]
 8005092:	1e5a      	subs	r2, r3, #1
 8005094:	4313      	orrs	r3, r2
 8005096:	0fdb      	lsrs	r3, r3, #31
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d107      	bne.n	80050ae <__dbg_check_leave_isr+0x2e>
 800509e:	9b01      	ldr	r3, [sp, #4]
 80050a0:	2290      	movs	r2, #144	; 0x90
 80050a2:	589b      	ldr	r3, [r3, r2]
 80050a4:	1e5a      	subs	r2, r3, #1
 80050a6:	4193      	sbcs	r3, r2
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <__dbg_check_leave_isr+0x36>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#9");
 80050ae:	4b08      	ldr	r3, [pc, #32]	; (80050d0 <__dbg_check_leave_isr+0x50>)
 80050b0:	0018      	movs	r0, r3
 80050b2:	f7ff fead 	bl	8004e10 <chSysHalt>
  }
  oip->dbg.isr_cnt--;
 80050b6:	9b01      	ldr	r3, [sp, #4]
 80050b8:	228c      	movs	r2, #140	; 0x8c
 80050ba:	589b      	ldr	r3, [r3, r2]
 80050bc:	1e5a      	subs	r2, r3, #1
 80050be:	9b01      	ldr	r3, [sp, #4]
 80050c0:	218c      	movs	r1, #140	; 0x8c
 80050c2:	505a      	str	r2, [r3, r1]
  port_unlock_from_isr();
 80050c4:	f7ff ff0c 	bl	8004ee0 <port_unlock_from_isr.lto_priv.3>
}
 80050c8:	b003      	add	sp, #12
 80050ca:	bd00      	pop	{pc}
 80050cc:	20000a28 	.word	0x20000a28
 80050d0:	0800b2ec 	.word	0x0800b2ec
	...

080050e0 <chDbgCheckClassI>:
 *          an I-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassI(void) {
 80050e0:	b500      	push	{lr}
 80050e2:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
 80050e4:	4b0b      	ldr	r3, [pc, #44]	; (8005114 <chDbgCheckClassI+0x34>)
 80050e6:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80050e8:	9b01      	ldr	r3, [sp, #4]
 80050ea:	228c      	movs	r2, #140	; 0x8c
 80050ec:	589b      	ldr	r3, [r3, r2]
 80050ee:	0fdb      	lsrs	r3, r3, #31
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d108      	bne.n	8005108 <chDbgCheckClassI+0x28>
 80050f6:	9b01      	ldr	r3, [sp, #4]
 80050f8:	2290      	movs	r2, #144	; 0x90
 80050fa:	589b      	ldr	r3, [r3, r2]
 80050fc:	1e5a      	subs	r2, r3, #1
 80050fe:	4313      	orrs	r3, r2
 8005100:	0fdb      	lsrs	r3, r3, #31
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <chDbgCheckClassI+0x30>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#10");
 8005108:	4b03      	ldr	r3, [pc, #12]	; (8005118 <chDbgCheckClassI+0x38>)
 800510a:	0018      	movs	r0, r3
 800510c:	f7ff fe80 	bl	8004e10 <chSysHalt>
  }
}
 8005110:	b003      	add	sp, #12
 8005112:	bd00      	pop	{pc}
 8005114:	20000a28 	.word	0x20000a28
 8005118:	0800b2f4 	.word	0x0800b2f4
 800511c:	00000000 	.word	0x00000000

08005120 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
 8005120:	b500      	push	{lr}
 8005122:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
 8005124:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <chDbgCheckClassS+0x38>)
 8005126:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005128:	9b01      	ldr	r3, [sp, #4]
 800512a:	228c      	movs	r2, #140	; 0x8c
 800512c:	589b      	ldr	r3, [r3, r2]
 800512e:	1e5a      	subs	r2, r3, #1
 8005130:	4193      	sbcs	r3, r2
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d108      	bne.n	800514a <chDbgCheckClassS+0x2a>
 8005138:	9b01      	ldr	r3, [sp, #4]
 800513a:	2290      	movs	r2, #144	; 0x90
 800513c:	589b      	ldr	r3, [r3, r2]
 800513e:	1e5a      	subs	r2, r3, #1
 8005140:	4313      	orrs	r3, r2
 8005142:	0fdb      	lsrs	r3, r3, #31
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <chDbgCheckClassS+0x32>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#11");
 800514a:	4b04      	ldr	r3, [pc, #16]	; (800515c <chDbgCheckClassS+0x3c>)
 800514c:	0018      	movs	r0, r3
 800514e:	f7ff fe5f 	bl	8004e10 <chSysHalt>
  }
}
 8005152:	b003      	add	sp, #12
 8005154:	bd00      	pop	{pc}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	20000a28 	.word	0x20000a28
 800515c:	0800b2fc 	.word	0x0800b2fc

08005160 <chTimeAddX>:
 * @return              The new system time.
 *
 * @xclass
 */
static inline systime_t chTimeAddX(systime_t systime,
                                   sysinterval_t interval) {
 8005160:	b500      	push	{lr}
 8005162:	b083      	sub	sp, #12
 8005164:	0002      	movs	r2, r0
 8005166:	9100      	str	r1, [sp, #0]
 8005168:	466b      	mov	r3, sp
 800516a:	3306      	adds	r3, #6
 800516c:	801a      	strh	r2, [r3, #0]

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 800516e:	9900      	ldr	r1, [sp, #0]
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	025a      	lsls	r2, r3, #9
 8005174:	2300      	movs	r3, #0
 8005176:	4291      	cmp	r1, r2
 8005178:	415b      	adcs	r3, r3
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <chTimeAddX+0x28>
 8005180:	4b06      	ldr	r3, [pc, #24]	; (800519c <chTimeAddX+0x3c>)
 8005182:	0018      	movs	r0, r3
 8005184:	f7ff fe44 	bl	8004e10 <chSysHalt>
#endif

  return systime + (systime_t)interval;
 8005188:	9b00      	ldr	r3, [sp, #0]
 800518a:	b29a      	uxth	r2, r3
 800518c:	466b      	mov	r3, sp
 800518e:	3306      	adds	r3, #6
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	18d3      	adds	r3, r2, r3
 8005194:	b29b      	uxth	r3, r3
}
 8005196:	0018      	movs	r0, r3
 8005198:	b003      	add	sp, #12
 800519a:	bd00      	pop	{pc}
 800519c:	0800b304 	.word	0x0800b304

080051a0 <chTimeDiffX.lto_priv.0>:
 * @param[in] end       second system time
 * @return              The interval representing the time difference.
 *
 * @xclass
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 80051a0:	b082      	sub	sp, #8
 80051a2:	0002      	movs	r2, r0
 80051a4:	466b      	mov	r3, sp
 80051a6:	3306      	adds	r3, #6
 80051a8:	801a      	strh	r2, [r3, #0]
 80051aa:	ab01      	add	r3, sp, #4
 80051ac:	1c0a      	adds	r2, r1, #0
 80051ae:	801a      	strh	r2, [r3, #0]

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 80051b0:	aa01      	add	r2, sp, #4
 80051b2:	466b      	mov	r3, sp
 80051b4:	3306      	adds	r3, #6
 80051b6:	8812      	ldrh	r2, [r2, #0]
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	b29b      	uxth	r3, r3
  /*lint -restore*/
}
 80051be:	0018      	movs	r0, r3
 80051c0:	b002      	add	sp, #8
 80051c2:	4770      	bx	lr
	...

080051d0 <ch_dlist_isempty>:
 * @param[in] dlhp      pointer to the delta list header
 * @return              The status of the delta list.
 *
 * @notapi
 */
static inline bool ch_dlist_isempty(ch_delta_list_t *dlhp) {
 80051d0:	b082      	sub	sp, #8
 80051d2:	9001      	str	r0, [sp, #4]

  return (bool)(dlhp == dlhp->next);
 80051d4:	9b01      	ldr	r3, [sp, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	9a01      	ldr	r2, [sp, #4]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	425a      	negs	r2, r3
 80051de:	4153      	adcs	r3, r2
 80051e0:	b2db      	uxtb	r3, r3
}
 80051e2:	0018      	movs	r0, r3
 80051e4:	b002      	add	sp, #8
 80051e6:	4770      	bx	lr
	...

080051f0 <ch_dlist_isfirst>:
 * @param[in] dlp       pointer to the delta list element
 *
 * @notapi
 */
static inline bool ch_dlist_isfirst(ch_delta_list_t *dlhp,
                                    ch_delta_list_t *dlp) {
 80051f0:	b082      	sub	sp, #8
 80051f2:	9001      	str	r0, [sp, #4]
 80051f4:	9100      	str	r1, [sp, #0]

  return (bool)(dlhp->next == dlp);
 80051f6:	9b01      	ldr	r3, [sp, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	9a00      	ldr	r2, [sp, #0]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	425a      	negs	r2, r3
 8005200:	4153      	adcs	r3, r2
 8005202:	b2db      	uxtb	r3, r3
}
 8005204:	0018      	movs	r0, r3
 8005206:	b002      	add	sp, #8
 8005208:	4770      	bx	lr
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	0000      	movs	r0, r0
	...

08005210 <ch_dlist_insert_after>:
 *
 * @notapi
 */
static inline void ch_dlist_insert_after(ch_delta_list_t *dlhp,
                                         ch_delta_list_t *dlp,
                                         sysinterval_t delta) {
 8005210:	b084      	sub	sp, #16
 8005212:	9003      	str	r0, [sp, #12]
 8005214:	9102      	str	r1, [sp, #8]
 8005216:	9201      	str	r2, [sp, #4]

  dlp->delta      = delta;
 8005218:	9b02      	ldr	r3, [sp, #8]
 800521a:	9a01      	ldr	r2, [sp, #4]
 800521c:	609a      	str	r2, [r3, #8]
  dlp->prev       = dlhp;
 800521e:	9b02      	ldr	r3, [sp, #8]
 8005220:	9a03      	ldr	r2, [sp, #12]
 8005222:	605a      	str	r2, [r3, #4]
  dlp->next       = dlp->prev->next;
 8005224:	9b02      	ldr	r3, [sp, #8]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	9b02      	ldr	r3, [sp, #8]
 800522c:	601a      	str	r2, [r3, #0]
  dlp->next->prev = dlp;
 800522e:	9b02      	ldr	r3, [sp, #8]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	9a02      	ldr	r2, [sp, #8]
 8005234:	605a      	str	r2, [r3, #4]
  dlhp->next      = dlp;
 8005236:	9b03      	ldr	r3, [sp, #12]
 8005238:	9a02      	ldr	r2, [sp, #8]
 800523a:	601a      	str	r2, [r3, #0]
}
 800523c:	b004      	add	sp, #16
 800523e:	4770      	bx	lr

08005240 <ch_dlist_insert_before>:
 *
 * @notapi
 */
static inline void ch_dlist_insert_before(ch_delta_list_t *dlhp,
                                          ch_delta_list_t *dlp,
                                          sysinterval_t delta) {
 8005240:	b084      	sub	sp, #16
 8005242:	9003      	str	r0, [sp, #12]
 8005244:	9102      	str	r1, [sp, #8]
 8005246:	9201      	str	r2, [sp, #4]

  dlp->delta      = delta;
 8005248:	9b02      	ldr	r3, [sp, #8]
 800524a:	9a01      	ldr	r2, [sp, #4]
 800524c:	609a      	str	r2, [r3, #8]
  dlp->next       = dlhp;
 800524e:	9b02      	ldr	r3, [sp, #8]
 8005250:	9a03      	ldr	r2, [sp, #12]
 8005252:	601a      	str	r2, [r3, #0]
  dlp->prev       = dlp->next->prev;
 8005254:	9b02      	ldr	r3, [sp, #8]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	9b02      	ldr	r3, [sp, #8]
 800525c:	605a      	str	r2, [r3, #4]
  dlp->prev->next = dlp;
 800525e:	9b02      	ldr	r3, [sp, #8]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	9a02      	ldr	r2, [sp, #8]
 8005264:	601a      	str	r2, [r3, #0]
  dlhp->prev      = dlp;
 8005266:	9b03      	ldr	r3, [sp, #12]
 8005268:	9a02      	ldr	r2, [sp, #8]
 800526a:	605a      	str	r2, [r3, #4]
}
 800526c:	b004      	add	sp, #16
 800526e:	4770      	bx	lr

08005270 <ch_dlist_insert>:
 *
 * @notapi
 */
static inline void ch_dlist_insert(ch_delta_list_t *dlhp,
                                   ch_delta_list_t *dlep,
                                   sysinterval_t delta) {
 8005270:	b500      	push	{lr}
 8005272:	b087      	sub	sp, #28
 8005274:	9003      	str	r0, [sp, #12]
 8005276:	9102      	str	r1, [sp, #8]
 8005278:	9201      	str	r2, [sp, #4]
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
 800527a:	9b03      	ldr	r3, [sp, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	9305      	str	r3, [sp, #20]
 8005280:	e013      	b.n	80052aa <ch_dlist_insert+0x3a>
  while (likely(dlp->delta < delta)) {
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");
 8005282:	9a05      	ldr	r2, [sp, #20]
 8005284:	9b02      	ldr	r3, [sp, #8]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	425a      	negs	r2, r3
 800528a:	4153      	adcs	r3, r2
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <ch_dlist_insert+0x2a>
 8005292:	4b13      	ldr	r3, [pc, #76]	; (80052e0 <ch_dlist_insert+0x70>)
 8005294:	0018      	movs	r0, r3
 8005296:	f7ff fdbb 	bl	8004e10 <chSysHalt>

    delta -= dlp->delta;
 800529a:	9b05      	ldr	r3, [sp, #20]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	9a01      	ldr	r2, [sp, #4]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	9301      	str	r3, [sp, #4]
    dlp = dlp->next;
 80052a4:	9b05      	ldr	r3, [sp, #20]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	9305      	str	r3, [sp, #20]
  while (likely(dlp->delta < delta)) {
 80052aa:	9b05      	ldr	r3, [sp, #20]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	9b01      	ldr	r3, [sp, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	419b      	sbcs	r3, r3
 80052b4:	425b      	negs	r3, r3
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e2      	bne.n	8005282 <ch_dlist_insert+0x12>
  }

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);
 80052bc:	9a01      	ldr	r2, [sp, #4]
 80052be:	9902      	ldr	r1, [sp, #8]
 80052c0:	9b05      	ldr	r3, [sp, #20]
 80052c2:	0018      	movs	r0, r3
 80052c4:	f7ff ffbc 	bl	8005240 <ch_dlist_insert_before>

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
 80052c8:	9b05      	ldr	r3, [sp, #20]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	9b01      	ldr	r3, [sp, #4]
 80052ce:	1ad2      	subs	r2, r2, r3
 80052d0:	9b05      	ldr	r3, [sp, #20]
 80052d2:	609a      	str	r2, [r3, #8]

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
 80052d4:	9b03      	ldr	r3, [sp, #12]
 80052d6:	2201      	movs	r2, #1
 80052d8:	4252      	negs	r2, r2
 80052da:	609a      	str	r2, [r3, #8]
}
 80052dc:	b007      	add	sp, #28
 80052de:	bd00      	pop	{pc}
 80052e0:	0800b310 	.word	0x0800b310
	...

080052f0 <ch_dlist_remove_first>:
 *
 * @param[in] dlhp      pointer to the delta list header
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_remove_first(ch_delta_list_t *dlhp) {
 80052f0:	b084      	sub	sp, #16
 80052f2:	9001      	str	r0, [sp, #4]
  ch_delta_list_t *dlp = dlhp->next;
 80052f4:	9b01      	ldr	r3, [sp, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	9303      	str	r3, [sp, #12]

  dlhp->next       = dlp->next;
 80052fa:	9b03      	ldr	r3, [sp, #12]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	9b01      	ldr	r3, [sp, #4]
 8005300:	601a      	str	r2, [r3, #0]
  dlhp->next->prev = dlhp;
 8005302:	9b01      	ldr	r3, [sp, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	9a01      	ldr	r2, [sp, #4]
 8005308:	605a      	str	r2, [r3, #4]

  return dlp;
 800530a:	9b03      	ldr	r3, [sp, #12]
}
 800530c:	0018      	movs	r0, r3
 800530e:	b004      	add	sp, #16
 8005310:	4770      	bx	lr
 8005312:	46c0      	nop			; (mov r8, r8)
	...

08005320 <ch_dlist_dequeue>:
 *
 * @param[in] dlp       pointer to the delta list element
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {
 8005320:	b082      	sub	sp, #8
 8005322:	9001      	str	r0, [sp, #4]

  dlp->prev->next = dlp->next;
 8005324:	9b01      	ldr	r3, [sp, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	9a01      	ldr	r2, [sp, #4]
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	601a      	str	r2, [r3, #0]
  dlp->next->prev = dlp->prev;
 800532e:	9b01      	ldr	r3, [sp, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	9a01      	ldr	r2, [sp, #4]
 8005334:	6852      	ldr	r2, [r2, #4]
 8005336:	605a      	str	r2, [r3, #4]

  return dlp;
 8005338:	9b01      	ldr	r3, [sp, #4]
}
 800533a:	0018      	movs	r0, r3
 800533c:	b002      	add	sp, #8
 800533e:	4770      	bx	lr

08005340 <port_lock.lto_priv.8>:
  __ASM volatile ("cpsid i" : : : "memory");
 8005340:	b672      	cpsid	i
}
 8005342:	4770      	bx	lr
	...

08005350 <port_unlock.lto_priv.8>:
  __ASM volatile ("cpsie i" : : : "memory");
 8005350:	b662      	cpsie	i
}
 8005352:	4770      	bx	lr
	...

08005360 <port_lock_from_isr.lto_priv.4>:
static inline void port_lock_from_isr(void) {
 8005360:	b510      	push	{r4, lr}
  port_lock();
 8005362:	f7ff ffed 	bl	8005340 <port_lock.lto_priv.8>
}
 8005366:	bd10      	pop	{r4, pc}
	...

08005370 <port_unlock_from_isr.lto_priv.4>:
static inline void port_unlock_from_isr(void) {
 8005370:	b510      	push	{r4, lr}
  port_unlock();
 8005372:	f7ff ffed 	bl	8005350 <port_unlock.lto_priv.8>
}
 8005376:	bd10      	pop	{r4, pc}
	...

08005380 <port_timer_start_alarm>:
 *
 * @param[in] time      the time to be set for the first alarm
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {
 8005380:	b500      	push	{lr}
 8005382:	b083      	sub	sp, #12
 8005384:	0002      	movs	r2, r0
 8005386:	466b      	mov	r3, sp
 8005388:	3306      	adds	r3, #6
 800538a:	801a      	strh	r2, [r3, #0]

  stStartAlarm(time);
 800538c:	466b      	mov	r3, sp
 800538e:	3306      	adds	r3, #6
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	0018      	movs	r0, r3
 8005394:	f7fd fef4 	bl	8003180 <stStartAlarm>
}
 8005398:	b003      	add	sp, #12
 800539a:	bd00      	pop	{pc}
 800539c:	0000      	movs	r0, r0
	...

080053a0 <port_timer_stop_alarm>:
/**
 * @brief   Stops the alarm interrupt.
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {
 80053a0:	b510      	push	{r4, lr}

  stStopAlarm();
 80053a2:	f7fd ff05 	bl	80031b0 <stStopAlarm>
}
 80053a6:	bd10      	pop	{r4, pc}
	...

080053b0 <port_timer_set_alarm>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {
 80053b0:	b500      	push	{lr}
 80053b2:	b083      	sub	sp, #12
 80053b4:	0002      	movs	r2, r0
 80053b6:	466b      	mov	r3, sp
 80053b8:	3306      	adds	r3, #6
 80053ba:	801a      	strh	r2, [r3, #0]

  stSetAlarm(time);
 80053bc:	466b      	mov	r3, sp
 80053be:	3306      	adds	r3, #6
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	0018      	movs	r0, r3
 80053c4:	f7fd fefc 	bl	80031c0 <stSetAlarm>
}
 80053c8:	b003      	add	sp, #12
 80053ca:	bd00      	pop	{pc}
 80053cc:	0000      	movs	r0, r0
	...

080053d0 <port_timer_get_time.lto_priv.0>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
 80053d0:	b510      	push	{r4, lr}

  return stGetCounter();
 80053d2:	f7fd fecd 	bl	8003170 <stGetCounter>
 80053d6:	0003      	movs	r3, r0
}
 80053d8:	0018      	movs	r0, r3
 80053da:	bd10      	pop	{r4, pc}
 80053dc:	0000      	movs	r0, r0
	...

080053e0 <chSysLockFromISR.lto_priv.3>:
static inline void chSysLockFromISR(void) {
 80053e0:	b510      	push	{r4, lr}
  port_lock_from_isr();
 80053e2:	f7ff ffbd 	bl	8005360 <port_lock_from_isr.lto_priv.4>
  __dbg_check_lock_from_isr();
 80053e6:	f7ff fdd3 	bl	8004f90 <__dbg_check_lock_from_isr>
}
 80053ea:	bd10      	pop	{r4, pc}
 80053ec:	0000      	movs	r0, r0
	...

080053f0 <chSysUnlockFromISR.lto_priv.3>:
static inline void chSysUnlockFromISR(void) {
 80053f0:	b510      	push	{r4, lr}
  __dbg_check_unlock_from_isr();
 80053f2:	f7ff fdf5 	bl	8004fe0 <__dbg_check_unlock_from_isr>
  port_unlock_from_isr();
 80053f6:	f7ff ffbb 	bl	8005370 <port_unlock_from_isr.lto_priv.4>
}
 80053fa:	bd10      	pop	{r4, pc}
 80053fc:	0000      	movs	r0, r0
	...

08005400 <chVTGetSystemTimeX.lto_priv.0>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
 8005400:	b510      	push	{r4, lr}

#if CH_CFG_ST_TIMEDELTA == 0
  return currcore->vtlist.systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
 8005402:	f7ff ffe5 	bl	80053d0 <port_timer_get_time.lto_priv.0>
 8005406:	0003      	movs	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8005408:	0018      	movs	r0, r3
 800540a:	bd10      	pop	{r4, pc}
 800540c:	0000      	movs	r0, r0
	...

08005410 <chVTIsArmedI.lto_priv.0>:
 * @param[in] vtp       pointer to a @p virtual_timer_t structure
 * @return              true if the timer is armed.
 *
 * @iclass
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 8005410:	b500      	push	{lr}
 8005412:	b083      	sub	sp, #12
 8005414:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
 8005416:	f7ff fe63 	bl	80050e0 <chDbgCheckClassI>

  return (bool)(vtp->dlist.next != NULL);
 800541a:	9b01      	ldr	r3, [sp, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	1e5a      	subs	r2, r3, #1
 8005420:	4193      	sbcs	r3, r2
 8005422:	b2db      	uxtb	r3, r3
}
 8005424:	0018      	movs	r0, r3
 8005426:	b003      	add	sp, #12
 8005428:	bd00      	pop	{pc}
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	0000      	movs	r0, r0
	...

08005430 <vt_set_alarm>:
 *          in order to compensate for the event.
 *
 * @param[in] now       last known system time
 * @param[in] delay     delay over @p now
 */
static void vt_set_alarm(systime_t now, sysinterval_t delay) {
 8005430:	b510      	push	{r4, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	0002      	movs	r2, r0
 8005436:	9100      	str	r1, [sp, #0]
 8005438:	466b      	mov	r3, sp
 800543a:	3306      	adds	r3, #6
 800543c:	801a      	strh	r2, [r3, #0]
  sysinterval_t currdelta;

  /* Initial delta is what is configured statically.*/
  currdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 800543e:	2302      	movs	r3, #2
 8005440:	9305      	str	r3, [sp, #20]

  if (delay < currdelta) {
 8005442:	9a00      	ldr	r2, [sp, #0]
 8005444:	9b05      	ldr	r3, [sp, #20]
 8005446:	429a      	cmp	r2, r3
 8005448:	d202      	bcs.n	8005450 <vt_set_alarm+0x20>
    /* We need to avoid that the system time goes past the alarm we are
       going to set before the alarm is actually set.*/
    delay = currdelta;
 800544a:	9b05      	ldr	r3, [sp, #20]
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	e007      	b.n	8005460 <vt_set_alarm+0x30>
  }
#if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
  else if (delay > VT_MAX_DELAY) {
 8005450:	9a00      	ldr	r2, [sp, #0]
 8005452:	23ff      	movs	r3, #255	; 0xff
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	429a      	cmp	r2, r3
 8005458:	d902      	bls.n	8005460 <vt_set_alarm+0x30>
    /* The delta could be too large for the physical timer to handle
       this can happen when: sizeof (systime_t) < sizeof (sysinterval_t).*/
    delay = VT_MAX_DELAY;
 800545a:	23ff      	movs	r3, #255	; 0xff
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	9300      	str	r3, [sp, #0]
  while (true) {
    sysinterval_t nowdelta;
    systime_t newnow;

    /* Setting up the alarm on the next deadline.*/
    port_timer_set_alarm(chTimeAddX(now, delay));
 8005460:	9a00      	ldr	r2, [sp, #0]
 8005462:	466b      	mov	r3, sp
 8005464:	3306      	adds	r3, #6
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	0011      	movs	r1, r2
 800546a:	0018      	movs	r0, r3
 800546c:	f7ff fe78 	bl	8005160 <chTimeAddX>
 8005470:	0003      	movs	r3, r0
 8005472:	0018      	movs	r0, r3
 8005474:	f7ff ff9c 	bl	80053b0 <port_timer_set_alarm>
       current time skipped past the calculated deadline.
       Note that the "<" condition is intentional, we want to make sure
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
 8005478:	2412      	movs	r4, #18
 800547a:	446c      	add	r4, sp
 800547c:	f7ff ffc0 	bl	8005400 <chVTGetSystemTimeX.lto_priv.0>
 8005480:	0003      	movs	r3, r0
 8005482:	8023      	strh	r3, [r4, #0]
    nowdelta = chTimeDiffX(now, newnow);
 8005484:	2312      	movs	r3, #18
 8005486:	446b      	add	r3, sp
 8005488:	881a      	ldrh	r2, [r3, #0]
 800548a:	466b      	mov	r3, sp
 800548c:	3306      	adds	r3, #6
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	0011      	movs	r1, r2
 8005492:	0018      	movs	r0, r3
 8005494:	f7ff fe84 	bl	80051a0 <chTimeDiffX.lto_priv.0>
 8005498:	0003      	movs	r3, r0
 800549a:	9303      	str	r3, [sp, #12]
    if (likely(nowdelta < delay)) {
 800549c:	9a03      	ldr	r2, [sp, #12]
 800549e:	9b00      	ldr	r3, [sp, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	419b      	sbcs	r3, r3
 80054a4:	425b      	negs	r3, r3
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10b      	bne.n	80054c4 <vt_set_alarm+0x94>
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
 80054ac:	9b05      	ldr	r3, [sp, #20]
 80054ae:	3301      	adds	r3, #1
 80054b0:	9305      	str	r3, [sp, #20]

    /* Current time becomes the new "base" time.*/
    now = newnow;
 80054b2:	466b      	mov	r3, sp
 80054b4:	3306      	adds	r3, #6
 80054b6:	2212      	movs	r2, #18
 80054b8:	446a      	add	r2, sp
 80054ba:	8812      	ldrh	r2, [r2, #0]
 80054bc:	801a      	strh	r2, [r3, #0]
    delay = currdelta;
 80054be:	9b05      	ldr	r3, [sp, #20]
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	e7cd      	b.n	8005460 <vt_set_alarm+0x30>
  }

#if !defined(CH_VT_RFCU_DISABLED)
  /* Checking if a skip occurred.*/
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 80054c4:	9b05      	ldr	r3, [sp, #20]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d902      	bls.n	80054d0 <vt_set_alarm+0xa0>
    chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 80054ca:	2001      	movs	r0, #1
 80054cc:	f7ff fce0 	bl	8004e90 <chRFCUCollectFaultsI>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
 80054d0:	b006      	add	sp, #24
 80054d2:	bd10      	pop	{r4, pc}
	...

080054e0 <vt_insert_first>:
 * @note    This is the special case when the delta list is initially empty.
 */
static void vt_insert_first(virtual_timers_list_t *vtlp,
                            virtual_timer_t *vtp,
                            systime_t now,
                            sysinterval_t delay) {
 80054e0:	b510      	push	{r4, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	9003      	str	r0, [sp, #12]
 80054e6:	9102      	str	r1, [sp, #8]
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	466b      	mov	r3, sp
 80054ec:	3306      	adds	r3, #6
 80054ee:	801a      	strh	r2, [r3, #0]
  sysinterval_t currdelta;

  /* The delta list is empty, the current time becomes the new
     delta list base time, the timer is inserted.*/
  vtlp->lasttime = now;
 80054f0:	9b03      	ldr	r3, [sp, #12]
 80054f2:	466a      	mov	r2, sp
 80054f4:	3206      	adds	r2, #6
 80054f6:	8812      	ldrh	r2, [r2, #0]
 80054f8:	819a      	strh	r2, [r3, #12]
  ch_dlist_insert_after(&vtlp->dlist, &vtp->dlist, delay);
 80054fa:	9b03      	ldr	r3, [sp, #12]
 80054fc:	9902      	ldr	r1, [sp, #8]
 80054fe:	9a00      	ldr	r2, [sp, #0]
 8005500:	0018      	movs	r0, r3
 8005502:	f7ff fe85 	bl	8005210 <ch_dlist_insert_after>

  /* Initial delta is what is configured statically.*/
  currdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8005506:	2302      	movs	r3, #2
 8005508:	9305      	str	r3, [sp, #20]

  /* If the requested delay is lower than the minimum safe delta then it
     is raised to the minimum safe value.*/
  if (delay < currdelta) {
 800550a:	9a00      	ldr	r2, [sp, #0]
 800550c:	9b05      	ldr	r3, [sp, #20]
 800550e:	429a      	cmp	r2, r3
 8005510:	d202      	bcs.n	8005518 <vt_insert_first+0x38>
    /* We need to avoid that the system time goes past the alarm we are
       going to set before the alarm is actually set.*/
    delay = currdelta;
 8005512:	9b05      	ldr	r3, [sp, #20]
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	e007      	b.n	8005528 <vt_insert_first+0x48>
  }
#if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
  else if (delay > VT_MAX_DELAY) {
 8005518:	9a00      	ldr	r2, [sp, #0]
 800551a:	23ff      	movs	r3, #255	; 0xff
 800551c:	021b      	lsls	r3, r3, #8
 800551e:	429a      	cmp	r2, r3
 8005520:	d902      	bls.n	8005528 <vt_insert_first+0x48>
    /* The delta could be too large for the physical timer to handle
       this can happen when: sizeof (systime_t) < sizeof (sysinterval_t).*/
    delay = VT_MAX_DELAY;
 8005522:	23ff      	movs	r3, #255	; 0xff
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	9300      	str	r3, [sp, #0]
  }
#endif

  /* Being the first element inserted in the list the alarm timer
     is started.*/
  port_timer_start_alarm(chTimeAddX(vtlp->lasttime, delay));
 8005528:	9b03      	ldr	r3, [sp, #12]
 800552a:	899b      	ldrh	r3, [r3, #12]
 800552c:	9a00      	ldr	r2, [sp, #0]
 800552e:	0011      	movs	r1, r2
 8005530:	0018      	movs	r0, r3
 8005532:	f7ff fe15 	bl	8005160 <chTimeAddX>
 8005536:	0003      	movs	r3, r0
 8005538:	0018      	movs	r0, r3
 800553a:	f7ff ff21 	bl	8005380 <port_timer_start_alarm>
       current time skipped past the calculated deadline.
       Note that the "<" condition is intentional, we want to make sure
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
 800553e:	2412      	movs	r4, #18
 8005540:	446c      	add	r4, sp
 8005542:	f7ff ff5d 	bl	8005400 <chVTGetSystemTimeX.lto_priv.0>
 8005546:	0003      	movs	r3, r0
 8005548:	8023      	strh	r3, [r4, #0]
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 800554a:	2312      	movs	r3, #18
 800554c:	446b      	add	r3, sp
 800554e:	881a      	ldrh	r2, [r3, #0]
 8005550:	466b      	mov	r3, sp
 8005552:	3306      	adds	r3, #6
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	0011      	movs	r1, r2
 8005558:	0018      	movs	r0, r3
 800555a:	f7ff fe21 	bl	80051a0 <chTimeDiffX.lto_priv.0>
 800555e:	0002      	movs	r2, r0
 8005560:	9b00      	ldr	r3, [sp, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	419b      	sbcs	r3, r3
 8005566:	425b      	negs	r3, r3
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d117      	bne.n	800559e <vt_insert_first+0xbe>
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
 800556e:	9b05      	ldr	r3, [sp, #20]
 8005570:	3301      	adds	r3, #1
 8005572:	9305      	str	r3, [sp, #20]

    /* Setting up the alarm on the next deadline.*/
    port_timer_set_alarm(chTimeAddX(now, currdelta));
 8005574:	9a05      	ldr	r2, [sp, #20]
 8005576:	466b      	mov	r3, sp
 8005578:	3306      	adds	r3, #6
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	0011      	movs	r1, r2
 800557e:	0018      	movs	r0, r3
 8005580:	f7ff fdee 	bl	8005160 <chTimeAddX>
 8005584:	0003      	movs	r3, r0
 8005586:	0018      	movs	r0, r3
 8005588:	f7ff ff12 	bl	80053b0 <port_timer_set_alarm>

    /* Current time becomes the new "base" time.*/
    now = newnow;
 800558c:	466b      	mov	r3, sp
 800558e:	3306      	adds	r3, #6
 8005590:	2212      	movs	r2, #18
 8005592:	446a      	add	r2, sp
 8005594:	8812      	ldrh	r2, [r2, #0]
 8005596:	801a      	strh	r2, [r3, #0]
    delay = currdelta;
 8005598:	9b05      	ldr	r3, [sp, #20]
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	e7cf      	b.n	800553e <vt_insert_first+0x5e>
  }

#if !defined(CH_VT_RFCU_DISABLED)
  /* Checking if a skip occurred.*/
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 800559e:	9b05      	ldr	r3, [sp, #20]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d902      	bls.n	80055aa <vt_insert_first+0xca>
    chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 80055a4:	2001      	movs	r0, #1
 80055a6:	f7ff fc73 	bl	8004e90 <chRFCUCollectFaultsI>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
 80055aa:	b006      	add	sp, #24
 80055ac:	bd10      	pop	{r4, pc}
 80055ae:	46c0      	nop			; (mov r8, r8)

080055b0 <vt_enqueue>:
/**
 * @brief   Enqueues a virtual timer in a virtual timers list.
 */
static void vt_enqueue(virtual_timers_list_t *vtlp,
                       virtual_timer_t *vtp,
                       sysinterval_t delay) {
 80055b0:	b510      	push	{r4, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	9003      	str	r0, [sp, #12]
 80055b6:	9102      	str	r1, [sp, #8]
 80055b8:	9201      	str	r2, [sp, #4]
  sysinterval_t delta;

#if CH_CFG_ST_TIMEDELTA > 0
  {
    sysinterval_t nowdelta;
    systime_t now = chVTGetSystemTimeX();
 80055ba:	241a      	movs	r4, #26
 80055bc:	446c      	add	r4, sp
 80055be:	f7ff ff1f 	bl	8005400 <chVTGetSystemTimeX.lto_priv.0>
 80055c2:	0003      	movs	r3, r0
 80055c4:	8023      	strh	r3, [r4, #0]

    /* Special case where the timers list is empty.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 80055c6:	9b03      	ldr	r3, [sp, #12]
 80055c8:	0018      	movs	r0, r3
 80055ca:	f7ff fe01 	bl	80051d0 <ch_dlist_isempty>
 80055ce:	1e03      	subs	r3, r0, #0
 80055d0:	d009      	beq.n	80055e6 <vt_enqueue+0x36>

      vt_insert_first(vtlp, vtp, now, delay);
 80055d2:	9c01      	ldr	r4, [sp, #4]
 80055d4:	231a      	movs	r3, #26
 80055d6:	446b      	add	r3, sp
 80055d8:	881a      	ldrh	r2, [r3, #0]
 80055da:	9902      	ldr	r1, [sp, #8]
 80055dc:	9803      	ldr	r0, [sp, #12]
 80055de:	0023      	movs	r3, r4
 80055e0:	f7ff ff7e 	bl	80054e0 <vt_insert_first>
 80055e4:	e028      	b.n	8005638 <vt_enqueue+0x88>
      return;
    }

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'deltanow'.*/
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 80055e6:	9b03      	ldr	r3, [sp, #12]
 80055e8:	899a      	ldrh	r2, [r3, #12]
 80055ea:	231a      	movs	r3, #26
 80055ec:	446b      	add	r3, sp
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	0019      	movs	r1, r3
 80055f2:	0010      	movs	r0, r2
 80055f4:	f7ff fdd4 	bl	80051a0 <chTimeDiffX.lto_priv.0>
 80055f8:	0003      	movs	r3, r0
 80055fa:	9305      	str	r3, [sp, #20]
    delta    = nowdelta + delay;
 80055fc:	9a05      	ldr	r2, [sp, #20]
 80055fe:	9b01      	ldr	r3, [sp, #4]
 8005600:	18d3      	adds	r3, r2, r3
 8005602:	9307      	str	r3, [sp, #28]

    /* Scenario where a very large delay exceeded the numeric range, the
       delta is shortened to make it fit the numeric range, the timer
       will be triggered "deltanow" cycles earlier.*/
    if (delta < nowdelta) {
 8005604:	9a07      	ldr	r2, [sp, #28]
 8005606:	9b05      	ldr	r3, [sp, #20]
 8005608:	429a      	cmp	r2, r3
 800560a:	d201      	bcs.n	8005610 <vt_enqueue+0x60>
      delta = delay;
 800560c:	9b01      	ldr	r3, [sp, #4]
 800560e:	9307      	str	r3, [sp, #28]
    }

    /* Checking if this timer would become the first in the delta list, this
       requires changing the current alarm setting.*/
    if (delta < vtlp->dlist.next->delta) {
 8005610:	9b03      	ldr	r3, [sp, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	9a07      	ldr	r2, [sp, #28]
 8005618:	429a      	cmp	r2, r3
 800561a:	d207      	bcs.n	800562c <vt_enqueue+0x7c>

      vt_set_alarm(now, delay);
 800561c:	9a01      	ldr	r2, [sp, #4]
 800561e:	231a      	movs	r3, #26
 8005620:	446b      	add	r3, sp
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	0011      	movs	r1, r2
 8005626:	0018      	movs	r0, r3
 8005628:	f7ff ff02 	bl	8005430 <vt_set_alarm>

  /* Delta is initially equal to the specified delay.*/
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
 800562c:	9b03      	ldr	r3, [sp, #12]
 800562e:	9902      	ldr	r1, [sp, #8]
 8005630:	9a07      	ldr	r2, [sp, #28]
 8005632:	0018      	movs	r0, r3
 8005634:	f7ff fe1c 	bl	8005270 <ch_dlist_insert>
}
 8005638:	b008      	add	sp, #32
 800563a:	bd10      	pop	{r4, pc}
 800563c:	0000      	movs	r0, r0
	...

08005640 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 8005640:	b500      	push	{lr}
 8005642:	b087      	sub	sp, #28
 8005644:	9003      	str	r0, [sp, #12]
 8005646:	9102      	str	r1, [sp, #8]
 8005648:	9201      	str	r2, [sp, #4]
 800564a:	9300      	str	r3, [sp, #0]
  virtual_timers_list_t *vtlp = &currcore->vtlist;
 800564c:	4b17      	ldr	r3, [pc, #92]	; (80056ac <chVTDoSetI+0x6c>)
 800564e:	9305      	str	r3, [sp, #20]

  chDbgCheckClassI();
 8005650:	f7ff fd46 	bl	80050e0 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8005654:	9b03      	ldr	r3, [sp, #12]
 8005656:	425a      	negs	r2, r3
 8005658:	4153      	adcs	r3, r2
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d105      	bne.n	800566c <chVTDoSetI+0x2c>
 8005660:	9b01      	ldr	r3, [sp, #4]
 8005662:	425a      	negs	r2, r3
 8005664:	4153      	adcs	r3, r2
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <chVTDoSetI+0x30>
 800566c:	2301      	movs	r3, #1
 800566e:	e000      	b.n	8005672 <chVTDoSetI+0x32>
 8005670:	2300      	movs	r3, #0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d105      	bne.n	8005682 <chVTDoSetI+0x42>
 8005676:	9b02      	ldr	r3, [sp, #8]
 8005678:	425a      	negs	r2, r3
 800567a:	4153      	adcs	r3, r2
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <chVTDoSetI+0x4a>
 8005682:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <chVTDoSetI+0x70>)
 8005684:	0018      	movs	r0, r3
 8005686:	f7ff fbc3 	bl	8004e10 <chSysHalt>

  /* Timer initialization.*/
  vtp->par     = par;
 800568a:	9b03      	ldr	r3, [sp, #12]
 800568c:	9a00      	ldr	r2, [sp, #0]
 800568e:	611a      	str	r2, [r3, #16]
  vtp->func    = vtfunc;
 8005690:	9b03      	ldr	r3, [sp, #12]
 8005692:	9a01      	ldr	r2, [sp, #4]
 8005694:	60da      	str	r2, [r3, #12]
  vtp->reload  = (sysinterval_t)0;
 8005696:	9b03      	ldr	r3, [sp, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	615a      	str	r2, [r3, #20]

  /* Inserting the timer in the delta list.*/
  vt_enqueue(vtlp, vtp, delay);
 800569c:	9a02      	ldr	r2, [sp, #8]
 800569e:	9903      	ldr	r1, [sp, #12]
 80056a0:	9b05      	ldr	r3, [sp, #20]
 80056a2:	0018      	movs	r0, r3
 80056a4:	f7ff ff84 	bl	80055b0 <vt_enqueue>
}
 80056a8:	b007      	add	sp, #28
 80056aa:	bd00      	pop	{pc}
 80056ac:	20000a38 	.word	0x20000a38
 80056b0:	0800b320 	.word	0x0800b320
	...

080056c0 <chVTDoResetI>:
 *
 * @param[in] vtp       pointer to a @p virtual_timer_t structure
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 80056c0:	b510      	push	{r4, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	9001      	str	r0, [sp, #4]
  virtual_timers_list_t *vtlp = &currcore->vtlist;
 80056c6:	4b40      	ldr	r3, [pc, #256]	; (80057c8 <chVTDoResetI+0x108>)
 80056c8:	9305      	str	r3, [sp, #20]

  chDbgCheckClassI();
 80056ca:	f7ff fd09 	bl	80050e0 <chDbgCheckClassI>
  chDbgCheck(vtp != NULL);
 80056ce:	9b01      	ldr	r3, [sp, #4]
 80056d0:	425a      	negs	r2, r3
 80056d2:	4153      	adcs	r3, r2
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <chVTDoResetI+0x22>
 80056da:	4b3c      	ldr	r3, [pc, #240]	; (80057cc <chVTDoResetI+0x10c>)
 80056dc:	0018      	movs	r0, r3
 80056de:	f7ff fb97 	bl	8004e10 <chSysHalt>
  chDbgAssert(chVTIsArmedI(vtp), "timer not armed");
 80056e2:	9b01      	ldr	r3, [sp, #4]
 80056e4:	0018      	movs	r0, r3
 80056e6:	f7ff fe93 	bl	8005410 <chVTIsArmedI.lto_priv.0>
 80056ea:	0003      	movs	r3, r0
 80056ec:	001a      	movs	r2, r3
 80056ee:	2301      	movs	r3, #1
 80056f0:	4053      	eors	r3, r2
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <chVTDoResetI+0x40>
 80056f8:	4b34      	ldr	r3, [pc, #208]	; (80057cc <chVTDoResetI+0x10c>)
 80056fa:	0018      	movs	r0, r3
 80056fc:	f7ff fb88 	bl	8004e10 <chSysHalt>
  systime_t now;
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 8005700:	9b05      	ldr	r3, [sp, #20]
 8005702:	9a01      	ldr	r2, [sp, #4]
 8005704:	0011      	movs	r1, r2
 8005706:	0018      	movs	r0, r3
 8005708:	f7ff fd72 	bl	80051f0 <ch_dlist_isfirst>
 800570c:	0003      	movs	r3, r0
 800570e:	001a      	movs	r2, r3
 8005710:	2301      	movs	r3, #1
 8005712:	4053      	eors	r3, r2
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d014      	beq.n	8005744 <chVTDoResetI+0x84>

    /* Removing the element from the delta list.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
 800571a:	9b01      	ldr	r3, [sp, #4]
 800571c:	0018      	movs	r0, r3
 800571e:	f7ff fdff 	bl	8005320 <ch_dlist_dequeue>

    /* Adding delta to the next element, if it is not the last one.*/
    vtp->dlist.next->delta += vtp->dlist.delta;
 8005722:	9b01      	ldr	r3, [sp, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6899      	ldr	r1, [r3, #8]
 8005728:	9b01      	ldr	r3, [sp, #4]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	9b01      	ldr	r3, [sp, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	188a      	adds	r2, r1, r2
 8005732:	609a      	str	r2, [r3, #8]

    /* Marking timer as not armed.*/
    vtp->dlist.next = NULL;
 8005734:	9b01      	ldr	r3, [sp, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	601a      	str	r2, [r3, #0]

    /* Special case when the removed element from the last position in the list,
       the value in the header must be restored, just doing it is faster than
       checking then doing.*/
    vtlp->dlist.delta = (sysinterval_t)-1;
 800573a:	9b05      	ldr	r3, [sp, #20]
 800573c:	2201      	movs	r2, #1
 800573e:	4252      	negs	r2, r2
 8005740:	609a      	str	r2, [r3, #8]
 8005742:	e03f      	b.n	80057c4 <chVTDoResetI+0x104>

    return;
  }

  /* Removing the first timer from the list, marking it as not armed.*/
  ch_dlist_remove_first(&vtlp->dlist);
 8005744:	9b05      	ldr	r3, [sp, #20]
 8005746:	0018      	movs	r0, r3
 8005748:	f7ff fdd2 	bl	80052f0 <ch_dlist_remove_first>
  vtp->dlist.next = NULL;
 800574c:	9b01      	ldr	r3, [sp, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8005752:	9b05      	ldr	r3, [sp, #20]
 8005754:	0018      	movs	r0, r3
 8005756:	f7ff fd3b 	bl	80051d0 <ch_dlist_isempty>
 800575a:	1e03      	subs	r3, r0, #0
 800575c:	d002      	beq.n	8005764 <chVTDoResetI+0xa4>

    port_timer_stop_alarm();
 800575e:	f7ff fe1f 	bl	80053a0 <port_timer_stop_alarm>
 8005762:	e02f      	b.n	80057c4 <chVTDoResetI+0x104>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  vtlp->dlist.next->delta += vtp->dlist.delta;
 8005764:	9b05      	ldr	r3, [sp, #20]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6899      	ldr	r1, [r3, #8]
 800576a:	9b01      	ldr	r3, [sp, #4]
 800576c:	689a      	ldr	r2, [r3, #8]
 800576e:	9b05      	ldr	r3, [sp, #20]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	188a      	adds	r2, r1, r2
 8005774:	609a      	str	r2, [r3, #8]

  /* Distance in ticks between the last alarm event and current time.*/
  now = chVTGetSystemTimeX();
 8005776:	2412      	movs	r4, #18
 8005778:	446c      	add	r4, sp
 800577a:	f7ff fe41 	bl	8005400 <chVTGetSystemTimeX.lto_priv.0>
 800577e:	0003      	movs	r3, r0
 8005780:	8023      	strh	r3, [r4, #0]
  nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8005782:	9b05      	ldr	r3, [sp, #20]
 8005784:	899a      	ldrh	r2, [r3, #12]
 8005786:	2312      	movs	r3, #18
 8005788:	446b      	add	r3, sp
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	0019      	movs	r1, r3
 800578e:	0010      	movs	r0, r2
 8005790:	f7ff fd06 	bl	80051a0 <chTimeDiffX.lto_priv.0>
 8005794:	0003      	movs	r3, r0
 8005796:	9303      	str	r3, [sp, #12]

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= vtlp->dlist.next->delta) {
 8005798:	9b05      	ldr	r3, [sp, #20]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	9a03      	ldr	r2, [sp, #12]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d20e      	bcs.n	80057c2 <chVTDoResetI+0x102>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = vtlp->dlist.next->delta - nowdelta;
 80057a4:	9b05      	ldr	r3, [sp, #20]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	9b03      	ldr	r3, [sp, #12]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	9302      	str	r3, [sp, #8]

  /* Setting up the alarm.*/
  vt_set_alarm(now, delta);
 80057b0:	9a02      	ldr	r2, [sp, #8]
 80057b2:	2312      	movs	r3, #18
 80057b4:	446b      	add	r3, sp
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	0011      	movs	r1, r2
 80057ba:	0018      	movs	r0, r3
 80057bc:	f7ff fe38 	bl	8005430 <vt_set_alarm>
 80057c0:	e000      	b.n	80057c4 <chVTDoResetI+0x104>
    return;
 80057c2:	46c0      	nop			; (mov r8, r8)
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80057c4:	b006      	add	sp, #24
 80057c6:	bd10      	pop	{r4, pc}
 80057c8:	20000a38 	.word	0x20000a38
 80057cc:	0800b32c 	.word	0x0800b32c

080057d0 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
void chVTDoTickI(void) {
 80057d0:	b510      	push	{r4, lr}
 80057d2:	b088      	sub	sp, #32
  virtual_timers_list_t *vtlp = &currcore->vtlist;
 80057d4:	4b5b      	ldr	r3, [pc, #364]	; (8005944 <chVTDoTickI+0x174>)
 80057d6:	9305      	str	r3, [sp, #20]

  chDbgCheckClassI();
 80057d8:	f7ff fc82 	bl	80050e0 <chDbgCheckClassI>
     than the interval between "now" and "lasttime".*/
  while (true) {
    systime_t lasttime;

    /* First timer in the delta list.*/
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 80057dc:	9b05      	ldr	r3, [sp, #20]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	9304      	str	r3, [sp, #16]

    /* Delta between current time and last execution time.*/
    now = chVTGetSystemTimeX();
 80057e2:	240e      	movs	r4, #14
 80057e4:	446c      	add	r4, sp
 80057e6:	f7ff fe0b 	bl	8005400 <chVTGetSystemTimeX.lto_priv.0>
 80057ea:	0003      	movs	r3, r0
 80057ec:	8023      	strh	r3, [r4, #0]
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 80057ee:	9b05      	ldr	r3, [sp, #20]
 80057f0:	899a      	ldrh	r2, [r3, #12]
 80057f2:	230e      	movs	r3, #14
 80057f4:	446b      	add	r3, sp
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	0019      	movs	r1, r3
 80057fa:	0010      	movs	r0, r2
 80057fc:	f7ff fcd0 	bl	80051a0 <chTimeDiffX.lto_priv.0>
 8005800:	0003      	movs	r3, r0
 8005802:	9302      	str	r3, [sp, #8]

    /* Loop break condition.
       Note that the list scan is limited by the delta list header having
       "vtlp->dlist.delta == (sysinterval_t)-1" which is greater than all
       deltas*/
    if (nowdelta < vtp->dlist.delta) {
 8005804:	9b04      	ldr	r3, [sp, #16]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	9a02      	ldr	r2, [sp, #8]
 800580a:	429a      	cmp	r2, r3
 800580c:	d200      	bcs.n	8005810 <chVTDoTickI+0x40>
 800580e:	e078      	b.n	8005902 <chVTDoTickI+0x132>
      break;
    }

    /* Last time deadline is updated to the next timer's time.*/
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
 8005810:	9b05      	ldr	r3, [sp, #20]
 8005812:	899a      	ldrh	r2, [r3, #12]
 8005814:	9b04      	ldr	r3, [sp, #16]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	4669      	mov	r1, sp
 800581a:	1d8c      	adds	r4, r1, #6
 800581c:	0019      	movs	r1, r3
 800581e:	0010      	movs	r0, r2
 8005820:	f7ff fc9e 	bl	8005160 <chTimeAddX>
 8005824:	0003      	movs	r3, r0
 8005826:	8023      	strh	r3, [r4, #0]
    vtlp->lasttime = lasttime;
 8005828:	9b05      	ldr	r3, [sp, #20]
 800582a:	466a      	mov	r2, sp
 800582c:	3206      	adds	r2, #6
 800582e:	8812      	ldrh	r2, [r2, #0]
 8005830:	819a      	strh	r2, [r3, #12]

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
 8005832:	9b04      	ldr	r3, [sp, #16]
 8005834:	0018      	movs	r0, r3
 8005836:	f7ff fd73 	bl	8005320 <ch_dlist_dequeue>
    vtp->dlist.next = NULL;
 800583a:	9b04      	ldr	r3, [sp, #16]
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 8005840:	9b05      	ldr	r3, [sp, #20]
 8005842:	0018      	movs	r0, r3
 8005844:	f7ff fcc4 	bl	80051d0 <ch_dlist_isempty>
 8005848:	1e03      	subs	r3, r0, #0
 800584a:	d001      	beq.n	8005850 <chVTDoTickI+0x80>
      port_timer_stop_alarm();
 800584c:	f7ff fda8 	bl	80053a0 <port_timer_stop_alarm>
    }

    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();
 8005850:	f7ff fdce 	bl	80053f0 <chSysUnlockFromISR.lto_priv.3>

    vtp->func(vtp, vtp->par);
 8005854:	9b04      	ldr	r3, [sp, #16]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	9b04      	ldr	r3, [sp, #16]
 800585a:	6919      	ldr	r1, [r3, #16]
 800585c:	9b04      	ldr	r3, [sp, #16]
 800585e:	0018      	movs	r0, r3
 8005860:	4790      	blx	r2

    chSysLockFromISR();
 8005862:	f7ff fdbd 	bl	80053e0 <chSysLockFromISR.lto_priv.3>

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
 8005866:	9b04      	ldr	r3, [sp, #16]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	1e5a      	subs	r2, r3, #1
 800586c:	4193      	sbcs	r3, r2
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0b3      	beq.n	80057dc <chVTDoTickI+0xc>
      sysinterval_t delta, delay;

      /* Refreshing the now delta after spending time in the callback for
         a more accurate detection of too fast reloads.*/
      now = chVTGetSystemTimeX();
 8005874:	240e      	movs	r4, #14
 8005876:	446c      	add	r4, sp
 8005878:	f7ff fdc2 	bl	8005400 <chVTGetSystemTimeX.lto_priv.0>
 800587c:	0003      	movs	r3, r0
 800587e:	8023      	strh	r3, [r4, #0]
      nowdelta = chTimeDiffX(lasttime, now);
 8005880:	230e      	movs	r3, #14
 8005882:	446b      	add	r3, sp
 8005884:	881a      	ldrh	r2, [r3, #0]
 8005886:	466b      	mov	r3, sp
 8005888:	3306      	adds	r3, #6
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	0011      	movs	r1, r2
 800588e:	0018      	movs	r0, r3
 8005890:	f7ff fc86 	bl	80051a0 <chTimeDiffX.lto_priv.0>
 8005894:	0003      	movs	r3, r0
 8005896:	9302      	str	r3, [sp, #8]

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
 8005898:	9b04      	ldr	r3, [sp, #16]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	9a02      	ldr	r2, [sp, #8]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d909      	bls.n	80058b6 <chVTDoTickI+0xe6>
        /* System time is already past the deadline, logging the fault and
           proceeding with a minimum delay.*/

        chDbgAssert(false, "skipped deadline");
 80058a2:	4b29      	ldr	r3, [pc, #164]	; (8005948 <chVTDoTickI+0x178>)
 80058a4:	0018      	movs	r0, r3
 80058a6:	f7ff fab3 	bl	8004e10 <chSysHalt>
        chRFCUCollectFaultsI(CH_RFCU_VT_SKIPPED_DEADLINE);
 80058aa:	2002      	movs	r0, #2
 80058ac:	f7ff faf0 	bl	8004e90 <chRFCUCollectFaultsI>

        delay = (sysinterval_t)0;
 80058b0:	2300      	movs	r3, #0
 80058b2:	9306      	str	r3, [sp, #24]
 80058b4:	e004      	b.n	80058c0 <chVTDoTickI+0xf0>
      }
      else {
        /* Enqueuing the timer again using the calculated delta.*/
        delay = vtp->reload - nowdelta;
 80058b6:	9b04      	ldr	r3, [sp, #16]
 80058b8:	695a      	ldr	r2, [r3, #20]
 80058ba:	9b02      	ldr	r3, [sp, #8]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	9306      	str	r3, [sp, #24]
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
 80058c0:	9b05      	ldr	r3, [sp, #20]
 80058c2:	0018      	movs	r0, r3
 80058c4:	f7ff fc84 	bl	80051d0 <ch_dlist_isempty>
 80058c8:	1e03      	subs	r3, r0, #0
 80058ca:	d009      	beq.n	80058e0 <chVTDoTickI+0x110>

        vt_insert_first(vtlp, vtp, now, delay);
 80058cc:	9c06      	ldr	r4, [sp, #24]
 80058ce:	230e      	movs	r3, #14
 80058d0:	446b      	add	r3, sp
 80058d2:	881a      	ldrh	r2, [r3, #0]
 80058d4:	9904      	ldr	r1, [sp, #16]
 80058d6:	9805      	ldr	r0, [sp, #20]
 80058d8:	0023      	movs	r3, r4
 80058da:	f7ff fe01 	bl	80054e0 <vt_insert_first>
 80058de:	e02f      	b.n	8005940 <chVTDoTickI+0x170>

      /* Delay as delta from 'lasttime'. Note, it can overflow and the value
         becomes lower than 'nowdelta'. In that case the delta is shortened
         to make it fit the numeric range and the timer will be triggered
         "nowdelta" cycles earlier.*/
      delta = nowdelta + delay;
 80058e0:	9a02      	ldr	r2, [sp, #8]
 80058e2:	9b06      	ldr	r3, [sp, #24]
 80058e4:	18d3      	adds	r3, r2, r3
 80058e6:	9307      	str	r3, [sp, #28]
      if (delta < nowdelta) {
 80058e8:	9a07      	ldr	r2, [sp, #28]
 80058ea:	9b02      	ldr	r3, [sp, #8]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d201      	bcs.n	80058f4 <chVTDoTickI+0x124>
        delta = delay;
 80058f0:	9b06      	ldr	r3, [sp, #24]
 80058f2:	9307      	str	r3, [sp, #28]
      }

      /* Insert into delta list. */
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
 80058f4:	9b05      	ldr	r3, [sp, #20]
 80058f6:	9904      	ldr	r1, [sp, #16]
 80058f8:	9a07      	ldr	r2, [sp, #28]
 80058fa:	0018      	movs	r0, r3
 80058fc:	f7ff fcb8 	bl	8005270 <ch_dlist_insert>
 8005900:	e76c      	b.n	80057dc <chVTDoTickI+0xc>
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8005902:	9b05      	ldr	r3, [sp, #20]
 8005904:	0018      	movs	r0, r3
 8005906:	f7ff fc63 	bl	80051d0 <ch_dlist_isempty>
 800590a:	1e03      	subs	r3, r0, #0
 800590c:	d117      	bne.n	800593e <chVTDoTickI+0x16e>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
 800590e:	9b05      	ldr	r3, [sp, #20]
 8005910:	899a      	ldrh	r2, [r3, #12]
 8005912:	9b02      	ldr	r3, [sp, #8]
 8005914:	b29b      	uxth	r3, r3
 8005916:	18d3      	adds	r3, r2, r3
 8005918:	b29a      	uxth	r2, r3
 800591a:	9b05      	ldr	r3, [sp, #20]
 800591c:	819a      	strh	r2, [r3, #12]
  vtp->dlist.delta -= nowdelta;
 800591e:	9b04      	ldr	r3, [sp, #16]
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	9b02      	ldr	r3, [sp, #8]
 8005924:	1ad2      	subs	r2, r2, r3
 8005926:	9b04      	ldr	r3, [sp, #16]
 8005928:	609a      	str	r2, [r3, #8]

  /* Update alarm time to next timer.*/
  vt_set_alarm(now, vtp->dlist.delta);
 800592a:	9b04      	ldr	r3, [sp, #16]
 800592c:	689a      	ldr	r2, [r3, #8]
 800592e:	230e      	movs	r3, #14
 8005930:	446b      	add	r3, sp
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	0011      	movs	r1, r2
 8005936:	0018      	movs	r0, r3
 8005938:	f7ff fd7a 	bl	8005430 <vt_set_alarm>
 800593c:	e000      	b.n	8005940 <chVTDoTickI+0x170>
    return;
 800593e:	46c0      	nop			; (mov r8, r8)
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8005940:	b008      	add	sp, #32
 8005942:	bd10      	pop	{r4, pc}
 8005944:	20000a38 	.word	0x20000a38
 8005948:	0800b33c 	.word	0x0800b33c
 800594c:	00000000 	.word	0x00000000

08005950 <ch_queue_dequeue.lto_priv.0>:
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 8005950:	b082      	sub	sp, #8
 8005952:	9001      	str	r0, [sp, #4]
  p->prev->next = p->next;
 8005954:	9b01      	ldr	r3, [sp, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	9a01      	ldr	r2, [sp, #4]
 800595a:	6812      	ldr	r2, [r2, #0]
 800595c:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
 800595e:	9b01      	ldr	r3, [sp, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	9a01      	ldr	r2, [sp, #4]
 8005964:	6852      	ldr	r2, [r2, #4]
 8005966:	605a      	str	r2, [r3, #4]
  return p;
 8005968:	9b01      	ldr	r3, [sp, #4]
}
 800596a:	0018      	movs	r0, r3
 800596c:	b002      	add	sp, #8
 800596e:	4770      	bx	lr

08005970 <ch_pqueue_remove_highest>:
static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
 8005970:	b084      	sub	sp, #16
 8005972:	9001      	str	r0, [sp, #4]
  ch_priority_queue_t *p = pqp->next;
 8005974:	9b01      	ldr	r3, [sp, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	9303      	str	r3, [sp, #12]
  pqp->next       = p->next;
 800597a:	9b03      	ldr	r3, [sp, #12]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	9b01      	ldr	r3, [sp, #4]
 8005980:	601a      	str	r2, [r3, #0]
  pqp->next->prev = pqp;
 8005982:	9b01      	ldr	r3, [sp, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	9a01      	ldr	r2, [sp, #4]
 8005988:	605a      	str	r2, [r3, #4]
  return p;
 800598a:	9b03      	ldr	r3, [sp, #12]
}
 800598c:	0018      	movs	r0, r3
 800598e:	b004      	add	sp, #16
 8005990:	4770      	bx	lr
 8005992:	46c0      	nop			; (mov r8, r8)
	...

080059a0 <ch_pqueue_insert_behind>:
                                                           ch_priority_queue_t *p) {
 80059a0:	b082      	sub	sp, #8
 80059a2:	9001      	str	r0, [sp, #4]
 80059a4:	9100      	str	r1, [sp, #0]
    pqp = pqp->next;
 80059a6:	9b01      	ldr	r3, [sp, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	9301      	str	r3, [sp, #4]
  } while (unlikely(pqp->prio >= p->prio));
 80059ac:	9b01      	ldr	r3, [sp, #4]
 80059ae:	6899      	ldr	r1, [r3, #8]
 80059b0:	9b00      	ldr	r3, [sp, #0]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	2300      	movs	r3, #0
 80059b6:	4291      	cmp	r1, r2
 80059b8:	415b      	adcs	r3, r3
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1f2      	bne.n	80059a6 <ch_pqueue_insert_behind+0x6>
  p->next       = pqp;
 80059c0:	9b00      	ldr	r3, [sp, #0]
 80059c2:	9a01      	ldr	r2, [sp, #4]
 80059c4:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 80059c6:	9b01      	ldr	r3, [sp, #4]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	9b00      	ldr	r3, [sp, #0]
 80059cc:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 80059ce:	9b00      	ldr	r3, [sp, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	9a00      	ldr	r2, [sp, #0]
 80059d4:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 80059d6:	9b01      	ldr	r3, [sp, #4]
 80059d8:	9a00      	ldr	r2, [sp, #0]
 80059da:	605a      	str	r2, [r3, #4]
  return p;
 80059dc:	9b00      	ldr	r3, [sp, #0]
}
 80059de:	0018      	movs	r0, r3
 80059e0:	b002      	add	sp, #8
 80059e2:	4770      	bx	lr
	...

080059f0 <ch_pqueue_insert_ahead>:
                                                          ch_priority_queue_t *p) {
 80059f0:	b082      	sub	sp, #8
 80059f2:	9001      	str	r0, [sp, #4]
 80059f4:	9100      	str	r1, [sp, #0]
    pqp = pqp->next;
 80059f6:	9b01      	ldr	r3, [sp, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	9301      	str	r3, [sp, #4]
  } while (unlikely(pqp->prio > p->prio));
 80059fc:	9b01      	ldr	r3, [sp, #4]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	9b00      	ldr	r3, [sp, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	4293      	cmp	r3, r2
 8005a06:	419b      	sbcs	r3, r3
 8005a08:	425b      	negs	r3, r3
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1f2      	bne.n	80059f6 <ch_pqueue_insert_ahead+0x6>
  p->next       = pqp;
 8005a10:	9b00      	ldr	r3, [sp, #0]
 8005a12:	9a01      	ldr	r2, [sp, #4]
 8005a14:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 8005a16:	9b01      	ldr	r3, [sp, #4]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	9b00      	ldr	r3, [sp, #0]
 8005a1c:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 8005a1e:	9b00      	ldr	r3, [sp, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	9a00      	ldr	r2, [sp, #0]
 8005a24:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 8005a26:	9b01      	ldr	r3, [sp, #4]
 8005a28:	9a00      	ldr	r2, [sp, #0]
 8005a2a:	605a      	str	r2, [r3, #4]
  return p;
 8005a2c:	9b00      	ldr	r3, [sp, #0]
}
 8005a2e:	0018      	movs	r0, r3
 8005a30:	b002      	add	sp, #8
 8005a32:	4770      	bx	lr
	...

08005a40 <port_lock.lto_priv.9>:
  __ASM volatile ("cpsid i" : : : "memory");
 8005a40:	b672      	cpsid	i
}
 8005a42:	4770      	bx	lr
	...

08005a50 <port_unlock.lto_priv.9>:
  __ASM volatile ("cpsie i" : : : "memory");
 8005a50:	b662      	cpsie	i
}
 8005a52:	4770      	bx	lr
	...

08005a60 <port_lock_from_isr.lto_priv.5>:
static inline void port_lock_from_isr(void) {
 8005a60:	b510      	push	{r4, lr}
  port_lock();
 8005a62:	f7ff ffed 	bl	8005a40 <port_lock.lto_priv.9>
}
 8005a66:	bd10      	pop	{r4, pc}
	...

08005a70 <port_unlock_from_isr.lto_priv.5>:
static inline void port_unlock_from_isr(void) {
 8005a70:	b510      	push	{r4, lr}
  port_unlock();
 8005a72:	f7ff ffed 	bl	8005a50 <port_unlock.lto_priv.9>
}
 8005a76:	bd10      	pop	{r4, pc}
	...

08005a80 <chSysLockFromISR.lto_priv.4>:
static inline void chSysLockFromISR(void) {
 8005a80:	b510      	push	{r4, lr}
  port_lock_from_isr();
 8005a82:	f7ff ffed 	bl	8005a60 <port_lock_from_isr.lto_priv.5>
  __dbg_check_lock_from_isr();
 8005a86:	f7ff fa83 	bl	8004f90 <__dbg_check_lock_from_isr>
}
 8005a8a:	bd10      	pop	{r4, pc}
 8005a8c:	0000      	movs	r0, r0
	...

08005a90 <chSysUnlockFromISR.lto_priv.4>:
static inline void chSysUnlockFromISR(void) {
 8005a90:	b510      	push	{r4, lr}
  __dbg_check_unlock_from_isr();
 8005a92:	f7ff faa5 	bl	8004fe0 <__dbg_check_unlock_from_isr>
  port_unlock_from_isr();
 8005a96:	f7ff ffeb 	bl	8005a70 <port_unlock_from_isr.lto_priv.5>
}
 8005a9a:	bd10      	pop	{r4, pc}
 8005a9c:	0000      	movs	r0, r0
	...

08005aa0 <chVTIsArmedI.lto_priv.1>:
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 8005aa0:	b500      	push	{lr}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	9001      	str	r0, [sp, #4]
  chDbgCheckClassI();
 8005aa6:	f7ff fb1b 	bl	80050e0 <chDbgCheckClassI>
  return (bool)(vtp->dlist.next != NULL);
 8005aaa:	9b01      	ldr	r3, [sp, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	1e5a      	subs	r2, r3, #1
 8005ab0:	4193      	sbcs	r3, r2
 8005ab2:	b2db      	uxtb	r3, r3
}
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	b003      	add	sp, #12
 8005ab8:	bd00      	pop	{pc}
 8005aba:	46c0      	nop			; (mov r8, r8)
 8005abc:	0000      	movs	r0, r0
	...

08005ac0 <chSemFastSignalI.lto_priv.0>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
 8005ac0:	b500      	push	{lr}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
 8005ac6:	f7ff fb0b 	bl	80050e0 <chDbgCheckClassI>

  sp->cnt++;
 8005aca:	9b01      	ldr	r3, [sp, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	9b01      	ldr	r3, [sp, #4]
 8005ad2:	609a      	str	r2, [r3, #8]
}
 8005ad4:	b003      	add	sp, #12
 8005ad6:	bd00      	pop	{pc}
	...

08005ae0 <__sch_ready_behind>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @notapi
 */
static thread_t *__sch_ready_behind(thread_t *tp) {
 8005ae0:	b500      	push	{lr}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	9001      	str	r0, [sp, #4]

  chDbgAssert((tp->state != CH_STATE_READY) &&
 8005ae6:	9b01      	ldr	r3, [sp, #4]
 8005ae8:	2228      	movs	r2, #40	; 0x28
 8005aea:	5c9b      	ldrb	r3, [r3, r2]
 8005aec:	425a      	negs	r2, r3
 8005aee:	4153      	adcs	r3, r2
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d108      	bne.n	8005b08 <__sch_ready_behind+0x28>
 8005af6:	9b01      	ldr	r3, [sp, #4]
 8005af8:	2228      	movs	r2, #40	; 0x28
 8005afa:	5c9b      	ldrb	r3, [r3, r2]
 8005afc:	3b0f      	subs	r3, #15
 8005afe:	425a      	negs	r2, r3
 8005b00:	4153      	adcs	r3, r2
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <__sch_ready_behind+0x30>
 8005b08:	4b09      	ldr	r3, [pc, #36]	; (8005b30 <__sch_ready_behind+0x50>)
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	f7ff f980 	bl	8004e10 <chSysHalt>

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
 8005b10:	9b01      	ldr	r3, [sp, #4]
 8005b12:	2228      	movs	r2, #40	; 0x28
 8005b14:	2100      	movs	r1, #0
 8005b16:	5499      	strb	r1, [r3, r2]

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8005b18:	9b01      	ldr	r3, [sp, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	001a      	movs	r2, r3
 8005b1e:	9b01      	ldr	r3, [sp, #4]
 8005b20:	0019      	movs	r1, r3
 8005b22:	0010      	movs	r0, r2
 8005b24:	f7ff ff3c 	bl	80059a0 <ch_pqueue_insert_behind>
 8005b28:	0003      	movs	r3, r0
                                           &tp->hdr.pqueue));
}
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	b003      	add	sp, #12
 8005b2e:	bd00      	pop	{pc}
 8005b30:	0800b37c 	.word	0x0800b37c
	...

08005b40 <__sch_ready_ahead>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @notapi
 */
static thread_t *__sch_ready_ahead(thread_t *tp) {
 8005b40:	b500      	push	{lr}
 8005b42:	b083      	sub	sp, #12
 8005b44:	9001      	str	r0, [sp, #4]

  chDbgAssert((tp->state != CH_STATE_READY) &&
 8005b46:	9b01      	ldr	r3, [sp, #4]
 8005b48:	2228      	movs	r2, #40	; 0x28
 8005b4a:	5c9b      	ldrb	r3, [r3, r2]
 8005b4c:	425a      	negs	r2, r3
 8005b4e:	4153      	adcs	r3, r2
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d108      	bne.n	8005b68 <__sch_ready_ahead+0x28>
 8005b56:	9b01      	ldr	r3, [sp, #4]
 8005b58:	2228      	movs	r2, #40	; 0x28
 8005b5a:	5c9b      	ldrb	r3, [r3, r2]
 8005b5c:	3b0f      	subs	r3, #15
 8005b5e:	425a      	negs	r2, r3
 8005b60:	4153      	adcs	r3, r2
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <__sch_ready_ahead+0x30>
 8005b68:	4b09      	ldr	r3, [pc, #36]	; (8005b90 <__sch_ready_ahead+0x50>)
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	f7ff f950 	bl	8004e10 <chSysHalt>

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
 8005b70:	9b01      	ldr	r3, [sp, #4]
 8005b72:	2228      	movs	r2, #40	; 0x28
 8005b74:	2100      	movs	r1, #0
 8005b76:	5499      	strb	r1, [r3, r2]

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8005b78:	9b01      	ldr	r3, [sp, #4]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	001a      	movs	r2, r3
 8005b7e:	9b01      	ldr	r3, [sp, #4]
 8005b80:	0019      	movs	r1, r3
 8005b82:	0010      	movs	r0, r2
 8005b84:	f7ff ff34 	bl	80059f0 <ch_pqueue_insert_ahead>
 8005b88:	0003      	movs	r3, r0
                                          &tp->hdr.pqueue));
}
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	b003      	add	sp, #12
 8005b8e:	bd00      	pop	{pc}
 8005b90:	0800b390 	.word	0x0800b390
	...

08005ba0 <__sch_reschedule_ahead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @notapi
 */
static void __sch_reschedule_ahead(void) {
 8005ba0:	b500      	push	{lr}
 8005ba2:	b085      	sub	sp, #20
  os_instance_t *oip = currcore;
 8005ba4:	4b0f      	ldr	r3, [pc, #60]	; (8005be4 <__sch_reschedule_ahead+0x44>)
 8005ba6:	9303      	str	r3, [sp, #12]
  thread_t *otp = __instance_get_currthread(oip);
 8005ba8:	9b03      	ldr	r3, [sp, #12]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	9302      	str	r3, [sp, #8]
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 8005bae:	9b03      	ldr	r3, [sp, #12]
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f7ff fedd 	bl	8005970 <ch_pqueue_remove_highest>
 8005bb6:	0003      	movs	r3, r0
 8005bb8:	9301      	str	r3, [sp, #4]
  ntp->state = CH_STATE_CURRENT;
 8005bba:	9b01      	ldr	r3, [sp, #4]
 8005bbc:	2228      	movs	r2, #40	; 0x28
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	5499      	strb	r1, [r3, r2]
  __instance_set_currthread(oip, ntp);
 8005bc2:	9b03      	ldr	r3, [sp, #12]
 8005bc4:	9a01      	ldr	r2, [sp, #4]
 8005bc6:	60da      	str	r2, [r3, #12]
  if (otp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = __sch_ready_ahead(otp);
 8005bc8:	9b02      	ldr	r3, [sp, #8]
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f7ff ffb8 	bl	8005b40 <__sch_ready_ahead>
 8005bd0:	0003      	movs	r3, r0
 8005bd2:	9302      	str	r3, [sp, #8]

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8005bd4:	9a02      	ldr	r2, [sp, #8]
 8005bd6:	9b01      	ldr	r3, [sp, #4]
 8005bd8:	0011      	movs	r1, r2
 8005bda:	0018      	movs	r0, r3
 8005bdc:	f7fa fadc 	bl	8000198 <__port_switch>
}
 8005be0:	b005      	add	sp, #20
 8005be2:	bd00      	pop	{pc}
 8005be4:	20000a28 	.word	0x20000a28
	...

08005bf0 <__sch_wakeup>:

/*
 * Timeout wakeup callback.
 */
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 8005bf0:	b500      	push	{lr}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	9001      	str	r0, [sp, #4]
 8005bf6:	9100      	str	r1, [sp, #0]
  thread_t *tp = threadref(p);
 8005bf8:	9b00      	ldr	r3, [sp, #0]
 8005bfa:	9303      	str	r3, [sp, #12]

  (void)vtp;

  chSysLockFromISR();
 8005bfc:	f7ff ff40 	bl	8005a80 <chSysLockFromISR.lto_priv.4>
  switch (tp->state) {
 8005c00:	9b03      	ldr	r3, [sp, #12]
 8005c02:	2228      	movs	r2, #40	; 0x28
 8005c04:	5c9b      	ldrb	r3, [r3, r2]
 8005c06:	2b0c      	cmp	r3, #12
 8005c08:	d815      	bhi.n	8005c36 <__sch_wakeup+0x46>
 8005c0a:	009a      	lsls	r2, r3, #2
 8005c0c:	4b10      	ldr	r3, [pc, #64]	; (8005c50 <__sch_wakeup+0x60>)
 8005c0e:	18d3      	adds	r3, r2, r3
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	469f      	mov	pc, r3
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
 8005c14:	f7ff ff3c 	bl	8005a90 <chSysUnlockFromISR.lto_priv.4>
 8005c18:	e017      	b.n	8005c4a <__sch_wakeup+0x5a>
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 8005c1a:	9b03      	ldr	r3, [sp, #12]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	e008      	b.n	8005c36 <__sch_wakeup+0x46>
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8005c24:	9b03      	ldr	r3, [sp, #12]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	0018      	movs	r0, r3
 8005c2a:	f7ff ff49 	bl	8005ac0 <chSemFastSignalI.lto_priv.0>
#endif
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
    /* States requiring dequeuing.*/
    (void) ch_queue_dequeue(&tp->hdr.queue);
 8005c2e:	9b03      	ldr	r3, [sp, #12]
 8005c30:	0018      	movs	r0, r3
 8005c32:	f7ff fe8d 	bl	8005950 <ch_queue_dequeue.lto_priv.0>
    /* Any other state, nothing to do.*/
    break;
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
 8005c36:	9b03      	ldr	r3, [sp, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	4252      	negs	r2, r2
 8005c3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
 8005c3e:	9b03      	ldr	r3, [sp, #12]
 8005c40:	0018      	movs	r0, r3
 8005c42:	f7ff ff4d 	bl	8005ae0 <__sch_ready_behind>
  chSysUnlockFromISR();
 8005c46:	f7ff ff23 	bl	8005a90 <chSysUnlockFromISR.lto_priv.4>

  return;
}
 8005c4a:	b005      	add	sp, #20
 8005c4c:	bd00      	pop	{pc}
 8005c4e:	46c0      	nop			; (mov r8, r8)
 8005c50:	0800b348 	.word	0x0800b348
	...

08005c60 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8005c60:	b500      	push	{lr}
 8005c62:	b083      	sub	sp, #12
 8005c64:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
 8005c66:	f7ff fa3b 	bl	80050e0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8005c6a:	9b01      	ldr	r3, [sp, #4]
 8005c6c:	425a      	negs	r2, r3
 8005c6e:	4153      	adcs	r3, r2
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <chSchReadyI+0x1e>
 8005c76:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <chSchReadyI+0x30>)
 8005c78:	0018      	movs	r0, r3
 8005c7a:	f7ff f8c9 	bl	8004e10 <chSysHalt>
       the other core.*/
    chSysNotifyInstance(tp->owner);
  }
#endif

  return __sch_ready_behind(tp);
 8005c7e:	9b01      	ldr	r3, [sp, #4]
 8005c80:	0018      	movs	r0, r3
 8005c82:	f7ff ff2d 	bl	8005ae0 <__sch_ready_behind>
 8005c86:	0003      	movs	r3, r0
}
 8005c88:	0018      	movs	r0, r3
 8005c8a:	b003      	add	sp, #12
 8005c8c:	bd00      	pop	{pc}
 8005c8e:	46c0      	nop			; (mov r8, r8)
 8005c90:	0800b3a4 	.word	0x0800b3a4
	...

08005ca0 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8005ca0:	b500      	push	{lr}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	0002      	movs	r2, r0
 8005ca6:	466b      	mov	r3, sp
 8005ca8:	3307      	adds	r3, #7
 8005caa:	701a      	strb	r2, [r3, #0]
  os_instance_t *oip = currcore;
 8005cac:	4b1e      	ldr	r3, [pc, #120]	; (8005d28 <chSchGoSleepS+0x88>)
 8005cae:	9305      	str	r3, [sp, #20]
  thread_t *otp = __instance_get_currthread(oip);
 8005cb0:	9b05      	ldr	r3, [sp, #20]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	9304      	str	r3, [sp, #16]
  thread_t *ntp;

  chDbgCheckClassS();
 8005cb6:	f7ff fa33 	bl	8005120 <chDbgCheckClassS>

  chDbgAssert(otp != chSysGetIdleThreadX(), "sleeping in idle thread");
 8005cba:	f7ff f8c1 	bl	8004e40 <chSysGetIdleThreadX>
 8005cbe:	0002      	movs	r2, r0
 8005cc0:	9b04      	ldr	r3, [sp, #16]
 8005cc2:	1a9b      	subs	r3, r3, r2
 8005cc4:	425a      	negs	r2, r3
 8005cc6:	4153      	adcs	r3, r2
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <chSchGoSleepS+0x36>
 8005cce:	4b17      	ldr	r3, [pc, #92]	; (8005d2c <chSchGoSleepS+0x8c>)
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f7ff f89d 	bl	8004e10 <chSysHalt>
  chDbgAssert(otp->owner == oip, "invalid core");
 8005cd6:	9b04      	ldr	r3, [sp, #16]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	9a05      	ldr	r2, [sp, #20]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	1e5a      	subs	r2, r3, #1
 8005ce0:	4193      	sbcs	r3, r2
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <chSchGoSleepS+0x50>
 8005ce8:	4b10      	ldr	r3, [pc, #64]	; (8005d2c <chSchGoSleepS+0x8c>)
 8005cea:	0018      	movs	r0, r3
 8005cec:	f7ff f890 	bl	8004e10 <chSysHalt>

  /* New state.*/
  otp->state = newstate;
 8005cf0:	9b04      	ldr	r3, [sp, #16]
 8005cf2:	466a      	mov	r2, sp
 8005cf4:	3207      	adds	r2, #7
 8005cf6:	2128      	movs	r1, #40	; 0x28
 8005cf8:	7812      	ldrb	r2, [r2, #0]
 8005cfa:	545a      	strb	r2, [r3, r1]
     time quantum when it will wakeup.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 8005cfc:	9b05      	ldr	r3, [sp, #20]
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f7ff fe36 	bl	8005970 <ch_pqueue_remove_highest>
 8005d04:	0003      	movs	r3, r0
 8005d06:	9303      	str	r3, [sp, #12]
  ntp->state = CH_STATE_CURRENT;
 8005d08:	9b03      	ldr	r3, [sp, #12]
 8005d0a:	2228      	movs	r2, #40	; 0x28
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	5499      	strb	r1, [r3, r2]
  __instance_set_currthread(oip, ntp);
 8005d10:	9b05      	ldr	r3, [sp, #20]
 8005d12:	9a03      	ldr	r2, [sp, #12]
 8005d14:	60da      	str	r2, [r3, #12]
  if (ntp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8005d16:	9a04      	ldr	r2, [sp, #16]
 8005d18:	9b03      	ldr	r3, [sp, #12]
 8005d1a:	0011      	movs	r1, r2
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	f7fa fa3b 	bl	8000198 <__port_switch>
}
 8005d22:	b007      	add	sp, #28
 8005d24:	bd00      	pop	{pc}
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	20000a28 	.word	0x20000a28
 8005d2c:	0800b3b0 	.word	0x0800b3b0

08005d30 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8005d30:	b500      	push	{lr}
 8005d32:	b08b      	sub	sp, #44	; 0x2c
 8005d34:	0002      	movs	r2, r0
 8005d36:	9100      	str	r1, [sp, #0]
 8005d38:	466b      	mov	r3, sp
 8005d3a:	3307      	adds	r3, #7
 8005d3c:	701a      	strb	r2, [r3, #0]
  thread_t *tp = __instance_get_currthread(currcore);
 8005d3e:	4b15      	ldr	r3, [pc, #84]	; (8005d94 <chSchGoSleepTimeoutS+0x64>)
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	9309      	str	r3, [sp, #36]	; 0x24

  chDbgCheckClassS();
 8005d44:	f7ff f9ec 	bl	8005120 <chDbgCheckClassS>

  if (TIME_INFINITE != timeout) {
 8005d48:	9b00      	ldr	r3, [sp, #0]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	d016      	beq.n	8005d7c <chSchGoSleepTimeoutS+0x4c>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
 8005d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d50:	4a11      	ldr	r2, [pc, #68]	; (8005d98 <chSchGoSleepTimeoutS+0x68>)
 8005d52:	9900      	ldr	r1, [sp, #0]
 8005d54:	a803      	add	r0, sp, #12
 8005d56:	f7ff fc73 	bl	8005640 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8005d5a:	466b      	mov	r3, sp
 8005d5c:	3307      	adds	r3, #7
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	0018      	movs	r0, r3
 8005d62:	f7ff ff9d 	bl	8005ca0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8005d66:	ab03      	add	r3, sp, #12
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f7ff fe99 	bl	8005aa0 <chVTIsArmedI.lto_priv.1>
 8005d6e:	1e03      	subs	r3, r0, #0
 8005d70:	d00a      	beq.n	8005d88 <chSchGoSleepTimeoutS+0x58>
      chVTDoResetI(&vt);
 8005d72:	ab03      	add	r3, sp, #12
 8005d74:	0018      	movs	r0, r3
 8005d76:	f7ff fca3 	bl	80056c0 <chVTDoResetI>
 8005d7a:	e005      	b.n	8005d88 <chSchGoSleepTimeoutS+0x58>
    }
  }
  else {
    chSchGoSleepS(newstate);
 8005d7c:	466b      	mov	r3, sp
 8005d7e:	3307      	adds	r3, #7
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	0018      	movs	r0, r3
 8005d84:	f7ff ff8c 	bl	8005ca0 <chSchGoSleepS>
  }

  return tp->u.rdymsg;
 8005d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	b00b      	add	sp, #44	; 0x2c
 8005d90:	bd00      	pop	{pc}
 8005d92:	46c0      	nop			; (mov r8, r8)
 8005d94:	20000a28 	.word	0x20000a28
 8005d98:	08005bf1 	.word	0x08005bf1
 8005d9c:	00000000 	.word	0x00000000

08005da0 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8005da0:	b500      	push	{lr}
 8005da2:	b085      	sub	sp, #20
 8005da4:	9001      	str	r0, [sp, #4]
 8005da6:	9100      	str	r1, [sp, #0]
  os_instance_t *oip = currcore;
 8005da8:	4b23      	ldr	r3, [pc, #140]	; (8005e38 <chSchWakeupS+0x98>)
 8005daa:	9303      	str	r3, [sp, #12]
  thread_t *otp = __instance_get_currthread(oip);
 8005dac:	9b03      	ldr	r3, [sp, #12]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	9302      	str	r3, [sp, #8]

  chDbgCheckClassS();
 8005db2:	f7ff f9b5 	bl	8005120 <chDbgCheckClassS>

  chDbgAssert((oip->rlist.pqueue.next == &oip->rlist.pqueue) ||
 8005db6:	9b03      	ldr	r3, [sp, #12]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	9b03      	ldr	r3, [sp, #12]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	1e5a      	subs	r2, r3, #1
 8005dc0:	4193      	sbcs	r3, r2
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00f      	beq.n	8005de8 <chSchWakeupS+0x48>
 8005dc8:	9b03      	ldr	r3, [sp, #12]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	9b03      	ldr	r3, [sp, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	419b      	sbcs	r3, r3
 8005dd8:	425b      	negs	r3, r3
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <chSchWakeupS+0x48>
 8005de0:	4b16      	ldr	r3, [pc, #88]	; (8005e3c <chSchWakeupS+0x9c>)
 8005de2:	0018      	movs	r0, r3
 8005de4:	f7ff f814 	bl	8004e10 <chSysHalt>
              (oip->rlist.current->hdr.pqueue.prio >= oip->rlist.pqueue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8005de8:	9b01      	ldr	r3, [sp, #4]
 8005dea:	9a00      	ldr	r2, [sp, #0]
 8005dec:	62da      	str	r2, [r3, #44]	; 0x2c
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.
     Note, we are favoring the path where the woken thread has higher
     priority.*/
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8005dee:	9b01      	ldr	r3, [sp, #4]
 8005df0:	689a      	ldr	r2, [r3, #8]
 8005df2:	9b02      	ldr	r3, [sp, #8]
 8005df4:	6899      	ldr	r1, [r3, #8]
 8005df6:	2300      	movs	r3, #0
 8005df8:	4291      	cmp	r1, r2
 8005dfa:	415b      	adcs	r3, r3
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d004      	beq.n	8005e0c <chSchWakeupS+0x6c>
    (void) __sch_ready_behind(ntp);
 8005e02:	9b01      	ldr	r3, [sp, #4]
 8005e04:	0018      	movs	r0, r3
 8005e06:	f7ff fe6b 	bl	8005ae0 <__sch_ready_behind>
 8005e0a:	e012      	b.n	8005e32 <chSchWakeupS+0x92>
  }
  else {
    /* The old thread goes back in the ready list ahead of its peers
       because it has not exhausted its time slice.*/
    otp = __sch_ready_ahead(otp);
 8005e0c:	9b02      	ldr	r3, [sp, #8]
 8005e0e:	0018      	movs	r0, r3
 8005e10:	f7ff fe96 	bl	8005b40 <__sch_ready_ahead>
 8005e14:	0003      	movs	r3, r0
 8005e16:	9302      	str	r3, [sp, #8]
    if (otp->hdr.pqueue.prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    ntp->state = CH_STATE_CURRENT;
 8005e18:	9b01      	ldr	r3, [sp, #4]
 8005e1a:	2228      	movs	r2, #40	; 0x28
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	5499      	strb	r1, [r3, r2]
    __instance_set_currthread(oip, ntp);
 8005e20:	9b03      	ldr	r3, [sp, #12]
 8005e22:	9a01      	ldr	r2, [sp, #4]
 8005e24:	60da      	str	r2, [r3, #12]

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8005e26:	9a02      	ldr	r2, [sp, #8]
 8005e28:	9b01      	ldr	r3, [sp, #4]
 8005e2a:	0011      	movs	r1, r2
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f7fa f9b3 	bl	8000198 <__port_switch>
  }
}
 8005e32:	b005      	add	sp, #20
 8005e34:	bd00      	pop	{pc}
 8005e36:	46c0      	nop			; (mov r8, r8)
 8005e38:	20000a28 	.word	0x20000a28
 8005e3c:	0800b3c0 	.word	0x0800b3c0

08005e40 <chSchRescheduleS>:
 * @note    Only local threads are considered, other cores are signaled
 *          and perform a reschedule locally.
 *
 * @sclass
 */
void chSchRescheduleS(void) {
 8005e40:	b500      	push	{lr}
 8005e42:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
 8005e44:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <chSchRescheduleS+0x30>)
 8005e46:	9301      	str	r3, [sp, #4]
  thread_t *tp = __instance_get_currthread(oip);
 8005e48:	9b01      	ldr	r3, [sp, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	9300      	str	r3, [sp, #0]

  chDbgCheckClassS();
 8005e4e:	f7ff f967 	bl	8005120 <chDbgCheckClassS>

  /* Note, we are favoring the path where the reschedule is necessary
     because higher priority threads are ready.*/
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8005e52:	9b01      	ldr	r3, [sp, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	9b00      	ldr	r3, [sp, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	419b      	sbcs	r3, r3
 8005e60:	425b      	negs	r3, r3
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <chSchRescheduleS+0x2c>
    __sch_reschedule_ahead();
 8005e68:	f7ff fe9a 	bl	8005ba0 <__sch_reschedule_ahead>
  }
}
 8005e6c:	b003      	add	sp, #12
 8005e6e:	bd00      	pop	{pc}
 8005e70:	20000a28 	.word	0x20000a28
	...

08005e80 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
 8005e80:	b084      	sub	sp, #16
  os_instance_t *oip = currcore;
 8005e82:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <chSchIsPreemptionRequired+0x2c>)
 8005e84:	9303      	str	r3, [sp, #12]
  thread_t *tp = __instance_get_currthread(oip);
 8005e86:	9b03      	ldr	r3, [sp, #12]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	9302      	str	r3, [sp, #8]

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8005e8c:	9b03      	ldr	r3, [sp, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	9301      	str	r3, [sp, #4]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8005e94:	9b02      	ldr	r3, [sp, #8]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	9300      	str	r3, [sp, #0]
     if the first thread on the ready queue has equal or higher priority.*/
  return (tp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 8005e9a:	9b01      	ldr	r3, [sp, #4]
 8005e9c:	9a00      	ldr	r2, [sp, #0]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	419b      	sbcs	r3, r3
 8005ea2:	425b      	negs	r3, r3
 8005ea4:	b2db      	uxtb	r3, r3
#endif
}
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	b004      	add	sp, #16
 8005eaa:	4770      	bx	lr
 8005eac:	20000a28 	.word	0x20000a28

08005eb0 <chSchDoPreemption>:
 * @note    Not a user function, it is meant to be invoked from within
 *          the port layer in the IRQ-related preemption code.
 *
 * @special
 */
void chSchDoPreemption(void) {
 8005eb0:	b500      	push	{lr}
 8005eb2:	b085      	sub	sp, #20
  os_instance_t *oip = currcore;
 8005eb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <chSchDoPreemption+0x44>)
 8005eb6:	9303      	str	r3, [sp, #12]
  thread_t *otp = __instance_get_currthread(oip);
 8005eb8:	9b03      	ldr	r3, [sp, #12]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	9302      	str	r3, [sp, #8]
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 8005ebe:	9b03      	ldr	r3, [sp, #12]
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	f7ff fd55 	bl	8005970 <ch_pqueue_remove_highest>
 8005ec6:	0003      	movs	r3, r0
 8005ec8:	9301      	str	r3, [sp, #4]
  ntp->state = CH_STATE_CURRENT;
 8005eca:	9b01      	ldr	r3, [sp, #4]
 8005ecc:	2228      	movs	r2, #40	; 0x28
 8005ece:	2101      	movs	r1, #1
 8005ed0:	5499      	strb	r1, [r3, r2]
  __instance_set_currthread(oip, ntp);
 8005ed2:	9b03      	ldr	r3, [sp, #12]
 8005ed4:	9a01      	ldr	r2, [sp, #4]
 8005ed6:	60da      	str	r2, [r3, #12]
    otp = __sch_ready_ahead(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = __sch_ready_ahead(otp);
 8005ed8:	9b02      	ldr	r3, [sp, #8]
 8005eda:	0018      	movs	r0, r3
 8005edc:	f7ff fe30 	bl	8005b40 <__sch_ready_ahead>
 8005ee0:	0003      	movs	r3, r0
 8005ee2:	9302      	str	r3, [sp, #8]
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8005ee4:	9a02      	ldr	r2, [sp, #8]
 8005ee6:	9b01      	ldr	r3, [sp, #4]
 8005ee8:	0011      	movs	r1, r2
 8005eea:	0018      	movs	r0, r3
 8005eec:	f7fa f954 	bl	8000198 <__port_switch>
}
 8005ef0:	b005      	add	sp, #20
 8005ef2:	bd00      	pop	{pc}
 8005ef4:	20000a28 	.word	0x20000a28
	...

08005f00 <__rfcu_object_init>:
 *
 * @param[out] rfcup    pointer to the @p rfcu_t structure
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {
 8005f00:	b082      	sub	sp, #8
 8005f02:	9001      	str	r0, [sp, #4]

  rfcup->mask = (rfcu_mask_t)0;
 8005f04:	9b01      	ldr	r3, [sp, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]
}
 8005f0a:	b002      	add	sp, #8
 8005f0c:	4770      	bx	lr
 8005f0e:	46c0      	nop			; (mov r8, r8)

08005f10 <__dbg_object_init>:
 *
 * @param[out] sdp      pointer to the @p system_debug_t structure
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {
 8005f10:	b082      	sub	sp, #8
 8005f12:	9001      	str	r0, [sp, #4]

  sdp->panic_msg = NULL;
 8005f14:	9b01      	ldr	r3, [sp, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]

#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  /* The initial state is assumed to be within a critical zone.*/
  sdp->isr_cnt  = (cnt_t)0;
 8005f1a:	9b01      	ldr	r3, [sp, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	605a      	str	r2, [r3, #4]
  sdp->lock_cnt = (cnt_t)1;
 8005f20:	9b01      	ldr	r3, [sp, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	609a      	str	r2, [r3, #8]
#endif
}
 8005f26:	b002      	add	sp, #8
 8005f28:	4770      	bx	lr
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	0000      	movs	r0, r0
	...

08005f30 <ch_queue_init.lto_priv.0>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8005f30:	b082      	sub	sp, #8
 8005f32:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8005f34:	9b01      	ldr	r3, [sp, #4]
 8005f36:	9a01      	ldr	r2, [sp, #4]
 8005f38:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 8005f3a:	9b01      	ldr	r3, [sp, #4]
 8005f3c:	9a01      	ldr	r2, [sp, #4]
 8005f3e:	605a      	str	r2, [r3, #4]
}
 8005f40:	b002      	add	sp, #8
 8005f42:	4770      	bx	lr
	...

08005f50 <ch_pqueue_init>:
static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {
 8005f50:	b082      	sub	sp, #8
 8005f52:	9001      	str	r0, [sp, #4]
  pqp->next = pqp;
 8005f54:	9b01      	ldr	r3, [sp, #4]
 8005f56:	9a01      	ldr	r2, [sp, #4]
 8005f58:	601a      	str	r2, [r3, #0]
  pqp->prev = pqp;
 8005f5a:	9b01      	ldr	r3, [sp, #4]
 8005f5c:	9a01      	ldr	r2, [sp, #4]
 8005f5e:	605a      	str	r2, [r3, #4]
  pqp->prio = (tprio_t)0;
 8005f60:	9b01      	ldr	r3, [sp, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	609a      	str	r2, [r3, #8]
}
 8005f66:	b002      	add	sp, #8
 8005f68:	4770      	bx	lr
 8005f6a:	46c0      	nop			; (mov r8, r8)
 8005f6c:	0000      	movs	r0, r0
	...

08005f70 <ch_dlist_init>:
static inline void ch_dlist_init(ch_delta_list_t *dlhp) {
 8005f70:	b082      	sub	sp, #8
 8005f72:	9001      	str	r0, [sp, #4]
  dlhp->next  = dlhp;
 8005f74:	9b01      	ldr	r3, [sp, #4]
 8005f76:	9a01      	ldr	r2, [sp, #4]
 8005f78:	601a      	str	r2, [r3, #0]
  dlhp->prev  = dlhp;
 8005f7a:	9b01      	ldr	r3, [sp, #4]
 8005f7c:	9a01      	ldr	r2, [sp, #4]
 8005f7e:	605a      	str	r2, [r3, #4]
  dlhp->delta = (sysinterval_t)-1;
 8005f80:	9b01      	ldr	r3, [sp, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	4252      	negs	r2, r2
 8005f86:	609a      	str	r2, [r3, #8]
}
 8005f88:	b002      	add	sp, #8
 8005f8a:	4770      	bx	lr
 8005f8c:	0000      	movs	r0, r0
	...

08005f90 <port_wait_for_interrupt>:
static inline void port_wait_for_interrupt(void) {

#if CORTEX_ENABLE_WFI_IDLE == TRUE
  __WFI();
#endif
}
 8005f90:	4770      	bx	lr
 8005f92:	46c0      	nop			; (mov r8, r8)
	...

08005fa0 <port_timer_get_time.lto_priv.1>:
static inline systime_t port_timer_get_time(void) {
 8005fa0:	b510      	push	{r4, lr}
  return stGetCounter();
 8005fa2:	f7fd f8e5 	bl	8003170 <stGetCounter>
 8005fa6:	0003      	movs	r3, r0
}
 8005fa8:	0018      	movs	r0, r3
 8005faa:	bd10      	pop	{r4, pc}
 8005fac:	0000      	movs	r0, r0
	...

08005fb0 <chVTGetSystemTimeX.lto_priv.1>:
static inline systime_t chVTGetSystemTimeX(void) {
 8005fb0:	b510      	push	{r4, lr}
  return port_timer_get_time();
 8005fb2:	f7ff fff5 	bl	8005fa0 <port_timer_get_time.lto_priv.1>
 8005fb6:	0003      	movs	r3, r0
}
 8005fb8:	0018      	movs	r0, r3
 8005fba:	bd10      	pop	{r4, pc}
 8005fbc:	0000      	movs	r0, r0
	...

08005fc0 <__vt_object_init>:
 *
 * @param[out] vtlp     pointer to the @p virtual_timers_list_t structure
 *
 * @notapi
 */
static inline void __vt_object_init(virtual_timers_list_t *vtlp) {
 8005fc0:	b530      	push	{r4, r5, lr}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	9001      	str	r0, [sp, #4]

  ch_dlist_init(&vtlp->dlist);
 8005fc6:	9b01      	ldr	r3, [sp, #4]
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f7ff ffd1 	bl	8005f70 <ch_dlist_init>
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
 8005fce:	9b01      	ldr	r3, [sp, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	819a      	strh	r2, [r3, #12]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 8005fd4:	f7ff ffec 	bl	8005fb0 <chVTGetSystemTimeX.lto_priv.1>
 8005fd8:	0003      	movs	r3, r0
 8005fda:	001c      	movs	r4, r3
 8005fdc:	2300      	movs	r3, #0
 8005fde:	001d      	movs	r5, r3
 8005fe0:	9b01      	ldr	r3, [sp, #4]
 8005fe2:	611c      	str	r4, [r3, #16]
 8005fe4:	615d      	str	r5, [r3, #20]
#endif
}
 8005fe6:	b003      	add	sp, #12
 8005fe8:	bd30      	pop	{r4, r5, pc}
 8005fea:	46c0      	nop			; (mov r8, r8)
 8005fec:	0000      	movs	r0, r0
	...

08005ff0 <__reg_object_init>:
 *
 * @param[out] rp       pointer to a @p registry_t structure
 *
 * @init
 */
static inline void __reg_object_init(registry_t *rp) {
 8005ff0:	b500      	push	{lr}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	9001      	str	r0, [sp, #4]

  ch_queue_init(&rp->queue);
 8005ff6:	9b01      	ldr	r3, [sp, #4]
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	f7ff ff99 	bl	8005f30 <ch_queue_init.lto_priv.0>
}
 8005ffe:	b003      	add	sp, #12
 8006000:	bd00      	pop	{pc}
 8006002:	46c0      	nop			; (mov r8, r8)
	...

08006010 <__idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void __idle_thread(void *p) {
 8006010:	b500      	push	{lr}
 8006012:	b083      	sub	sp, #12
 8006014:	9001      	str	r0, [sp, #4]
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
 8006016:	f7ff ffbb 	bl	8005f90 <port_wait_for_interrupt>
 800601a:	e7fc      	b.n	8006016 <__idle_thread+0x6>
 800601c:	0000      	movs	r0, r0
	...

08006020 <chInstanceObjectInit>:
 * @param[in] oicp      pointer to the @p os_instance_config_t structure
 *
 * @special
 */
void chInstanceObjectInit(os_instance_t *oip,
                          const os_instance_config_t *oicp) {
 8006020:	b500      	push	{lr}
 8006022:	b08b      	sub	sp, #44	; 0x2c
 8006024:	9001      	str	r0, [sp, #4]
 8006026:	9100      	str	r1, [sp, #0]

  /* Registering into the global system structure.*/
#if CH_CFG_SMP_MODE == TRUE
  core_id = port_get_core_id();
#else
  core_id = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	9309      	str	r3, [sp, #36]	; 0x24
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
 800602c:	4a35      	ldr	r2, [pc, #212]	; (8006104 <chInstanceObjectInit+0xe4>)
 800602e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	18d3      	adds	r3, r2, r3
 8006034:	3304      	adds	r3, #4
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	1e5a      	subs	r2, r3, #1
 800603a:	4193      	sbcs	r3, r2
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <chInstanceObjectInit+0x2a>
 8006042:	4b31      	ldr	r3, [pc, #196]	; (8006108 <chInstanceObjectInit+0xe8>)
 8006044:	0018      	movs	r0, r3
 8006046:	f7fe fee3 	bl	8004e10 <chSysHalt>
  ch_system.instances[core_id] = oip;
 800604a:	4a2e      	ldr	r2, [pc, #184]	; (8006104 <chInstanceObjectInit+0xe4>)
 800604c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	18d3      	adds	r3, r2, r3
 8006052:	3304      	adds	r3, #4
 8006054:	9a01      	ldr	r2, [sp, #4]
 8006056:	601a      	str	r2, [r3, #0]

  /* Core associated to this instance.*/
  oip->core_id = core_id;
 8006058:	9b01      	ldr	r3, [sp, #4]
 800605a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800605c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 800605e:	9b01      	ldr	r3, [sp, #4]
 8006060:	9a00      	ldr	r2, [sp, #0]
 8006062:	639a      	str	r2, [r3, #56]	; 0x38

  /* Port initialization for the current instance.*/
  port_init(oip);
 8006064:	9b01      	ldr	r3, [sp, #4]
 8006066:	0018      	movs	r0, r3
 8006068:	f001 fcca 	bl	8007a00 <port_init>

  /* Ready list initialization.*/
  ch_pqueue_init(&oip->rlist.pqueue);
 800606c:	9b01      	ldr	r3, [sp, #4]
 800606e:	0018      	movs	r0, r3
 8006070:	f7ff ff6e 	bl	8005f50 <ch_pqueue_init>

#if (CH_CFG_USE_REGISTRY == TRUE) && (CH_CFG_SMP_MODE == FALSE)
  /* Registry initialization when SMP mode is disabled.*/
  __reg_object_init(&oip->reglist);
 8006074:	9b01      	ldr	r3, [sp, #4]
 8006076:	3328      	adds	r3, #40	; 0x28
 8006078:	0018      	movs	r0, r3
 800607a:	f7ff ffb9 	bl	8005ff0 <__reg_object_init>
#endif

#if CH_CFG_SMP_MODE == FALSE
  /* RFCU initialization when SMP mode is disabled.*/
  __rfcu_object_init(&oip->rfcu);
 800607e:	9b01      	ldr	r3, [sp, #4]
 8006080:	3334      	adds	r3, #52	; 0x34
 8006082:	0018      	movs	r0, r3
 8006084:	f7ff ff3c 	bl	8005f00 <__rfcu_object_init>
#endif

  /* Virtual timers list initialization.*/
  __vt_object_init(&oip->vtlist);
 8006088:	9b01      	ldr	r3, [sp, #4]
 800608a:	3310      	adds	r3, #16
 800608c:	0018      	movs	r0, r3
 800608e:	f7ff ff97 	bl	8005fc0 <__vt_object_init>

  /* Debug support initialization.*/
  __dbg_object_init(&oip->dbg);
 8006092:	9b01      	ldr	r3, [sp, #4]
 8006094:	3388      	adds	r3, #136	; 0x88
 8006096:	0018      	movs	r0, r3
 8006098:	f7ff ff3a 	bl	8005f10 <__dbg_object_init>
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 800609c:	9b01      	ldr	r3, [sp, #4]
 800609e:	333c      	adds	r3, #60	; 0x3c
 80060a0:	0019      	movs	r1, r3
 80060a2:	4a1a      	ldr	r2, [pc, #104]	; (800610c <chInstanceObjectInit+0xec>)
 80060a4:	9801      	ldr	r0, [sp, #4]
 80060a6:	2380      	movs	r3, #128	; 0x80
 80060a8:	f000 f98a 	bl	80063c0 <__thd_object_init>
 80060ac:	0002      	movs	r2, r0
 80060ae:	9b01      	ldr	r3, [sp, #4]
 80060b0:	60da      	str	r2, [r3, #12]
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
                                         "idle", IDLEPRIO);
#endif

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  oip->rlist.current->wabase = oicp->mainthread_base;
 80060b2:	9b01      	ldr	r3, [sp, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	9a00      	ldr	r2, [sp, #0]
 80060b8:	6852      	ldr	r2, [r2, #4]
 80060ba:	621a      	str	r2, [r3, #32]
  oip->rlist.current->waend  = oicp->mainthread_end;
 80060bc:	9b01      	ldr	r3, [sp, #4]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	9a00      	ldr	r2, [sp, #0]
 80060c2:	6892      	ldr	r2, [r2, #8]
 80060c4:	625a      	str	r2, [r3, #36]	; 0x24
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 80060c6:	9b01      	ldr	r3, [sp, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	2228      	movs	r2, #40	; 0x28
 80060cc:	2101      	movs	r1, #1
 80060ce:	5499      	strb	r1, [r3, r2]
  /* User instance initialization hook.*/
  CH_CFG_OS_INSTANCE_INIT_HOOK(oip);

#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
    thread_descriptor_t idle_descriptor = {
 80060d0:	ab03      	add	r3, sp, #12
 80060d2:	4a0f      	ldr	r2, [pc, #60]	; (8006110 <chInstanceObjectInit+0xf0>)
 80060d4:	601a      	str	r2, [r3, #0]
      .name     = "idle",
      .wbase    = oicp->idlethread_base,
 80060d6:	9b00      	ldr	r3, [sp, #0]
 80060d8:	68da      	ldr	r2, [r3, #12]
    thread_descriptor_t idle_descriptor = {
 80060da:	ab03      	add	r3, sp, #12
 80060dc:	605a      	str	r2, [r3, #4]
      .wend     = oicp->idlethread_end,
 80060de:	9b00      	ldr	r3, [sp, #0]
 80060e0:	691a      	ldr	r2, [r3, #16]
    thread_descriptor_t idle_descriptor = {
 80060e2:	ab03      	add	r3, sp, #12
 80060e4:	609a      	str	r2, [r3, #8]
 80060e6:	ab03      	add	r3, sp, #12
 80060e8:	2201      	movs	r2, #1
 80060ea:	60da      	str	r2, [r3, #12]
 80060ec:	ab03      	add	r3, sp, #12
 80060ee:	4a09      	ldr	r2, [pc, #36]	; (8006114 <chInstanceObjectInit+0xf4>)
 80060f0:	611a      	str	r2, [r3, #16]
 80060f2:	ab03      	add	r3, sp, #12
 80060f4:	2200      	movs	r2, #0
 80060f6:	615a      	str	r2, [r3, #20]
#endif

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreateI(&idle_descriptor);
 80060f8:	ab03      	add	r3, sp, #12
 80060fa:	0018      	movs	r0, r3
 80060fc:	f000 fa30 	bl	8006560 <chThdCreateI>
  }
#endif
}
 8006100:	b00b      	add	sp, #44	; 0x2c
 8006102:	bd00      	pop	{pc}
 8006104:	20000a20 	.word	0x20000a20
 8006108:	0800b3d8 	.word	0x0800b3d8
 800610c:	0800b484 	.word	0x0800b484
 8006110:	0800b3d0 	.word	0x0800b3d0
 8006114:	08006011 	.word	0x08006011
	...

08006120 <chTimeDiffX.lto_priv.1>:
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 8006120:	b082      	sub	sp, #8
 8006122:	0002      	movs	r2, r0
 8006124:	466b      	mov	r3, sp
 8006126:	3306      	adds	r3, #6
 8006128:	801a      	strh	r2, [r3, #0]
 800612a:	ab01      	add	r3, sp, #4
 800612c:	1c0a      	adds	r2, r1, #0
 800612e:	801a      	strh	r2, [r3, #0]
  return (sysinterval_t)((systime_t)(end - start));
 8006130:	aa01      	add	r2, sp, #4
 8006132:	466b      	mov	r3, sp
 8006134:	3306      	adds	r3, #6
 8006136:	8812      	ldrh	r2, [r2, #0]
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	b29b      	uxth	r3, r3
}
 800613e:	0018      	movs	r0, r3
 8006140:	b002      	add	sp, #8
 8006142:	4770      	bx	lr
	...

08006150 <ch_list_init>:
static inline void ch_list_init(ch_list_t *lp) {
 8006150:	b082      	sub	sp, #8
 8006152:	9001      	str	r0, [sp, #4]
  lp->next = lp;
 8006154:	9b01      	ldr	r3, [sp, #4]
 8006156:	9a01      	ldr	r2, [sp, #4]
 8006158:	601a      	str	r2, [r3, #0]
}
 800615a:	b002      	add	sp, #8
 800615c:	4770      	bx	lr
 800615e:	46c0      	nop			; (mov r8, r8)

08006160 <ch_list_notempty>:
static inline bool ch_list_notempty(ch_list_t *lp) {
 8006160:	b082      	sub	sp, #8
 8006162:	9001      	str	r0, [sp, #4]
  return (bool)(lp->next != lp);
 8006164:	9b01      	ldr	r3, [sp, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	9a01      	ldr	r2, [sp, #4]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	1e5a      	subs	r2, r3, #1
 800616e:	4193      	sbcs	r3, r2
 8006170:	b2db      	uxtb	r3, r3
}
 8006172:	0018      	movs	r0, r3
 8006174:	b002      	add	sp, #8
 8006176:	4770      	bx	lr
	...

08006180 <ch_list_unlink>:
static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 8006180:	b084      	sub	sp, #16
 8006182:	9001      	str	r0, [sp, #4]
  ch_list_t *p = lp->next;
 8006184:	9b01      	ldr	r3, [sp, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	9303      	str	r3, [sp, #12]
  lp->next = p->next;
 800618a:	9b03      	ldr	r3, [sp, #12]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	9b01      	ldr	r3, [sp, #4]
 8006190:	601a      	str	r2, [r3, #0]
  return p;
 8006192:	9b03      	ldr	r3, [sp, #12]
}
 8006194:	0018      	movs	r0, r3
 8006196:	b004      	add	sp, #16
 8006198:	4770      	bx	lr
 800619a:	46c0      	nop			; (mov r8, r8)
 800619c:	0000      	movs	r0, r0
	...

080061a0 <ch_queue_init.lto_priv.1>:
static inline void ch_queue_init(ch_queue_t *qp) {
 80061a0:	b082      	sub	sp, #8
 80061a2:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 80061a4:	9b01      	ldr	r3, [sp, #4]
 80061a6:	9a01      	ldr	r2, [sp, #4]
 80061a8:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 80061aa:	9b01      	ldr	r3, [sp, #4]
 80061ac:	9a01      	ldr	r2, [sp, #4]
 80061ae:	605a      	str	r2, [r3, #4]
}
 80061b0:	b002      	add	sp, #8
 80061b2:	4770      	bx	lr
	...

080061c0 <ch_queue_notempty.lto_priv.0>:
static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 80061c0:	b082      	sub	sp, #8
 80061c2:	9001      	str	r0, [sp, #4]
  return (bool)(qp->next != qp);
 80061c4:	9b01      	ldr	r3, [sp, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	9a01      	ldr	r2, [sp, #4]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	1e5a      	subs	r2, r3, #1
 80061ce:	4193      	sbcs	r3, r2
 80061d0:	b2db      	uxtb	r3, r3
}
 80061d2:	0018      	movs	r0, r3
 80061d4:	b002      	add	sp, #8
 80061d6:	4770      	bx	lr
	...

080061e0 <ch_queue_insert.lto_priv.0>:
static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 80061e0:	b082      	sub	sp, #8
 80061e2:	9001      	str	r0, [sp, #4]
 80061e4:	9100      	str	r1, [sp, #0]
  p->next       = qp;
 80061e6:	9b00      	ldr	r3, [sp, #0]
 80061e8:	9a01      	ldr	r2, [sp, #4]
 80061ea:	601a      	str	r2, [r3, #0]
  p->prev       = qp->prev;
 80061ec:	9b01      	ldr	r3, [sp, #4]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	9b00      	ldr	r3, [sp, #0]
 80061f2:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 80061f4:	9b00      	ldr	r3, [sp, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	9a00      	ldr	r2, [sp, #0]
 80061fa:	601a      	str	r2, [r3, #0]
  qp->prev      = p;
 80061fc:	9b01      	ldr	r3, [sp, #4]
 80061fe:	9a00      	ldr	r2, [sp, #0]
 8006200:	605a      	str	r2, [r3, #4]
}
 8006202:	b002      	add	sp, #8
 8006204:	4770      	bx	lr
 8006206:	46c0      	nop			; (mov r8, r8)
	...

08006210 <ch_queue_fifo_remove.lto_priv.0>:
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 8006210:	b084      	sub	sp, #16
 8006212:	9001      	str	r0, [sp, #4]
  ch_queue_t *p = qp->next;
 8006214:	9b01      	ldr	r3, [sp, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	9303      	str	r3, [sp, #12]
  qp->next       = p->next;
 800621a:	9b03      	ldr	r3, [sp, #12]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	9b01      	ldr	r3, [sp, #4]
 8006220:	601a      	str	r2, [r3, #0]
  qp->next->prev = qp;
 8006222:	9b01      	ldr	r3, [sp, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	9a01      	ldr	r2, [sp, #4]
 8006228:	605a      	str	r2, [r3, #4]
  return p;
 800622a:	9b03      	ldr	r3, [sp, #12]
}
 800622c:	0018      	movs	r0, r3
 800622e:	b004      	add	sp, #16
 8006230:	4770      	bx	lr
 8006232:	46c0      	nop			; (mov r8, r8)
	...

08006240 <ch_queue_dequeue.lto_priv.1>:
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 8006240:	b082      	sub	sp, #8
 8006242:	9001      	str	r0, [sp, #4]
  p->prev->next = p->next;
 8006244:	9b01      	ldr	r3, [sp, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	9a01      	ldr	r2, [sp, #4]
 800624a:	6812      	ldr	r2, [r2, #0]
 800624c:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
 800624e:	9b01      	ldr	r3, [sp, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	9a01      	ldr	r2, [sp, #4]
 8006254:	6852      	ldr	r2, [r2, #4]
 8006256:	605a      	str	r2, [r3, #4]
  return p;
 8006258:	9b01      	ldr	r3, [sp, #4]
}
 800625a:	0018      	movs	r0, r3
 800625c:	b002      	add	sp, #8
 800625e:	4770      	bx	lr

08006260 <port_lock.lto_priv.10>:
  __ASM volatile ("cpsid i" : : : "memory");
 8006260:	b672      	cpsid	i
}
 8006262:	4770      	bx	lr
	...

08006270 <port_unlock.lto_priv.10>:
  __ASM volatile ("cpsie i" : : : "memory");
 8006270:	b662      	cpsie	i
}
 8006272:	4770      	bx	lr
	...

08006280 <port_timer_get_time.lto_priv.2>:
static inline systime_t port_timer_get_time(void) {
 8006280:	b510      	push	{r4, lr}
  return stGetCounter();
 8006282:	f7fc ff75 	bl	8003170 <stGetCounter>
 8006286:	0003      	movs	r3, r0
}
 8006288:	0018      	movs	r0, r3
 800628a:	bd10      	pop	{r4, pc}
 800628c:	0000      	movs	r0, r0
	...

08006290 <chSysLock.lto_priv.5>:
static inline void chSysLock(void) {
 8006290:	b510      	push	{r4, lr}
  port_lock();
 8006292:	f7ff ffe5 	bl	8006260 <port_lock.lto_priv.10>
  __dbg_check_lock();
 8006296:	f7fe fe2b 	bl	8004ef0 <__dbg_check_lock>
}
 800629a:	bd10      	pop	{r4, pc}
 800629c:	0000      	movs	r0, r0
	...

080062a0 <chSysUnlock.lto_priv.5>:
static inline void chSysUnlock(void) {
 80062a0:	b510      	push	{r4, lr}
  __dbg_check_unlock();
 80062a2:	f7fe fe4d 	bl	8004f40 <__dbg_check_unlock>
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
 80062a6:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <chSysUnlock.lto_priv.5+0x40>)
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	4b0d      	ldr	r3, [pc, #52]	; (80062e0 <chSysUnlock.lto_priv.5+0x40>)
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	1e5a      	subs	r2, r3, #1
 80062b0:	4193      	sbcs	r3, r2
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00f      	beq.n	80062d8 <chSysUnlock.lto_priv.5+0x38>
 80062b8:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <chSysUnlock.lto_priv.5+0x40>)
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	4b08      	ldr	r3, [pc, #32]	; (80062e0 <chSysUnlock.lto_priv.5+0x40>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	419b      	sbcs	r3, r3
 80062c8:	425b      	negs	r3, r3
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <chSysUnlock.lto_priv.5+0x38>
 80062d0:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <chSysUnlock.lto_priv.5+0x44>)
 80062d2:	0018      	movs	r0, r3
 80062d4:	f7fe fd9c 	bl	8004e10 <chSysHalt>
  port_unlock();
 80062d8:	f7ff ffca 	bl	8006270 <port_unlock.lto_priv.10>
}
 80062dc:	bd10      	pop	{r4, pc}
 80062de:	46c0      	nop			; (mov r8, r8)
 80062e0:	20000a28 	.word	0x20000a28
 80062e4:	0800b410 	.word	0x0800b410
	...

080062f0 <chVTGetSystemTimeX.lto_priv.2>:
static inline systime_t chVTGetSystemTimeX(void) {
 80062f0:	b510      	push	{r4, lr}
  return port_timer_get_time();
 80062f2:	f7ff ffc5 	bl	8006280 <port_timer_get_time.lto_priv.2>
 80062f6:	0003      	movs	r3, r0
}
 80062f8:	0018      	movs	r0, r3
 80062fa:	bd10      	pop	{r4, pc}
 80062fc:	0000      	movs	r0, r0
	...

08006300 <chThdGetSelfX.lto_priv.0>:
 *
 * @xclass
 */
static inline thread_t *chThdGetSelfX(void) {

  return __sch_get_currthread();
 8006300:	4b01      	ldr	r3, [pc, #4]	; (8006308 <chThdGetSelfX.lto_priv.0+0x8>)
 8006302:	68db      	ldr	r3, [r3, #12]
}
 8006304:	0018      	movs	r0, r3
 8006306:	4770      	bx	lr
 8006308:	20000a28 	.word	0x20000a28
 800630c:	00000000 	.word	0x00000000

08006310 <chThdGetWorkingAreaX.lto_priv.0>:
 * @param[in] tp        pointer to the thread
 * @return              The working area base pointer.
 *
 * @xclass
 */
static inline stkalign_t *chThdGetWorkingAreaX(thread_t *tp) {
 8006310:	b082      	sub	sp, #8
 8006312:	9001      	str	r0, [sp, #4]

  return tp->wabase;
 8006314:	9b01      	ldr	r3, [sp, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
}
 8006318:	0018      	movs	r0, r3
 800631a:	b002      	add	sp, #8
 800631c:	4770      	bx	lr
 800631e:	46c0      	nop			; (mov r8, r8)

08006320 <chThdSleepS>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @sclass
 */
static inline void chThdSleepS(sysinterval_t ticks) {
 8006320:	b500      	push	{lr}
 8006322:	b083      	sub	sp, #12
 8006324:	9001      	str	r0, [sp, #4]

  chDbgCheck(ticks != TIME_IMMEDIATE);
 8006326:	9b01      	ldr	r3, [sp, #4]
 8006328:	425a      	negs	r2, r3
 800632a:	4153      	adcs	r3, r2
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <chThdSleepS+0x1a>
 8006332:	4b05      	ldr	r3, [pc, #20]	; (8006348 <chThdSleepS+0x28>)
 8006334:	0018      	movs	r0, r3
 8006336:	f7fe fd6b 	bl	8004e10 <chSysHalt>

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800633a:	9b01      	ldr	r3, [sp, #4]
 800633c:	0019      	movs	r1, r3
 800633e:	2008      	movs	r0, #8
 8006340:	f7ff fcf6 	bl	8005d30 <chSchGoSleepTimeoutS>
}
 8006344:	b003      	add	sp, #12
 8006346:	bd00      	pop	{pc}
 8006348:	0800b44c 	.word	0x0800b44c
 800634c:	00000000 	.word	0x00000000

08006350 <chThdDoDequeueNextI>:
 * @param[in] tqp       pointer to a @p threads_queue_t structure
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8006350:	b500      	push	{lr}
 8006352:	b085      	sub	sp, #20
 8006354:	9001      	str	r0, [sp, #4]
 8006356:	9100      	str	r1, [sp, #0]
  thread_t *tp;

  chDbgAssert(ch_queue_notempty(&tqp->queue), "empty queue");
 8006358:	9b01      	ldr	r3, [sp, #4]
 800635a:	0018      	movs	r0, r3
 800635c:	f7ff ff30 	bl	80061c0 <ch_queue_notempty.lto_priv.0>
 8006360:	0003      	movs	r3, r0
 8006362:	001a      	movs	r2, r3
 8006364:	2301      	movs	r3, #1
 8006366:	4053      	eors	r3, r2
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <chThdDoDequeueNextI+0x26>
 800636e:	4b10      	ldr	r3, [pc, #64]	; (80063b0 <chThdDoDequeueNextI+0x60>)
 8006370:	0018      	movs	r0, r3
 8006372:	f7fe fd4d 	bl	8004e10 <chSysHalt>

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));
 8006376:	9b01      	ldr	r3, [sp, #4]
 8006378:	0018      	movs	r0, r3
 800637a:	f7ff ff49 	bl	8006210 <ch_queue_fifo_remove.lto_priv.0>
 800637e:	0003      	movs	r3, r0
 8006380:	9303      	str	r3, [sp, #12]

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8006382:	9b03      	ldr	r3, [sp, #12]
 8006384:	2228      	movs	r2, #40	; 0x28
 8006386:	5c9b      	ldrb	r3, [r3, r2]
 8006388:	3b04      	subs	r3, #4
 800638a:	1e5a      	subs	r2, r3, #1
 800638c:	4193      	sbcs	r3, r2
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d003      	beq.n	800639c <chThdDoDequeueNextI+0x4c>
 8006394:	4b06      	ldr	r3, [pc, #24]	; (80063b0 <chThdDoDequeueNextI+0x60>)
 8006396:	0018      	movs	r0, r3
 8006398:	f7fe fd3a 	bl	8004e10 <chSysHalt>

  tp->u.rdymsg = msg;
 800639c:	9b03      	ldr	r3, [sp, #12]
 800639e:	9a00      	ldr	r2, [sp, #0]
 80063a0:	62da      	str	r2, [r3, #44]	; 0x2c
  (void) chSchReadyI(tp);
 80063a2:	9b03      	ldr	r3, [sp, #12]
 80063a4:	0018      	movs	r0, r3
 80063a6:	f7ff fc5b 	bl	8005c60 <chSchReadyI>
}
 80063aa:	b005      	add	sp, #20
 80063ac:	bd00      	pop	{pc}
 80063ae:	46c0      	nop			; (mov r8, r8)
 80063b0:	0800b470 	.word	0x0800b470
	...

080063c0 <__thd_object_init>:
 * @notapi
 */
thread_t *__thd_object_init(os_instance_t *oip,
                            thread_t *tp,
                            const char *name,
                            tprio_t prio) {
 80063c0:	b500      	push	{lr}
 80063c2:	b085      	sub	sp, #20
 80063c4:	9003      	str	r0, [sp, #12]
 80063c6:	9102      	str	r1, [sp, #8]
 80063c8:	9201      	str	r2, [sp, #4]
 80063ca:	9300      	str	r3, [sp, #0]

  tp->hdr.pqueue.prio   = prio;
 80063cc:	9b02      	ldr	r3, [sp, #8]
 80063ce:	9a00      	ldr	r2, [sp, #0]
 80063d0:	609a      	str	r2, [r3, #8]
  tp->state             = CH_STATE_WTSTART;
 80063d2:	9b02      	ldr	r3, [sp, #8]
 80063d4:	2228      	movs	r2, #40	; 0x28
 80063d6:	2102      	movs	r1, #2
 80063d8:	5499      	strb	r1, [r3, r2]
  tp->flags             = CH_FLAG_MODE_STATIC;
 80063da:	9b02      	ldr	r3, [sp, #8]
 80063dc:	2229      	movs	r2, #41	; 0x29
 80063de:	2100      	movs	r1, #0
 80063e0:	5499      	strb	r1, [r3, r2]
  tp->owner             = oip;
 80063e2:	9b02      	ldr	r3, [sp, #8]
 80063e4:	9a03      	ldr	r2, [sp, #12]
 80063e6:	619a      	str	r2, [r3, #24]
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks             = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio          = prio;
 80063e8:	9b02      	ldr	r3, [sp, #8]
 80063ea:	9a00      	ldr	r2, [sp, #0]
 80063ec:	645a      	str	r2, [r3, #68]	; 0x44
  tp->mtxlist           = NULL;
 80063ee:	9b02      	ldr	r3, [sp, #8]
 80063f0:	2200      	movs	r2, #0
 80063f2:	641a      	str	r2, [r3, #64]	; 0x40
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending          = (eventmask_t)0;
 80063f4:	9b02      	ldr	r3, [sp, #8]
 80063f6:	2200      	movs	r2, #0
 80063f8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time              = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs              = (trefs_t)1;
 80063fa:	9b02      	ldr	r3, [sp, #8]
 80063fc:	222a      	movs	r2, #42	; 0x2a
 80063fe:	2101      	movs	r1, #1
 8006400:	5499      	strb	r1, [r3, r2]
  tp->name              = name;
 8006402:	9b02      	ldr	r3, [sp, #8]
 8006404:	9a01      	ldr	r2, [sp, #4]
 8006406:	61da      	str	r2, [r3, #28]
  REG_INSERT(oip, tp);
 8006408:	9b03      	ldr	r3, [sp, #12]
 800640a:	3328      	adds	r3, #40	; 0x28
 800640c:	001a      	movs	r2, r3
 800640e:	9b02      	ldr	r3, [sp, #8]
 8006410:	3310      	adds	r3, #16
 8006412:	0019      	movs	r1, r3
 8006414:	0010      	movs	r0, r2
 8006416:	f7ff fee3 	bl	80061e0 <ch_queue_insert.lto_priv.0>
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  ch_list_init(&tp->waiting);
 800641a:	9b02      	ldr	r3, [sp, #8]
 800641c:	3330      	adds	r3, #48	; 0x30
 800641e:	0018      	movs	r0, r3
 8006420:	f7ff fe96 	bl	8006150 <ch_list_init>
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  ch_queue_init(&tp->msgqueue);
 8006424:	9b02      	ldr	r3, [sp, #8]
 8006426:	3334      	adds	r3, #52	; 0x34
 8006428:	0018      	movs	r0, r3
 800642a:	f7ff feb9 	bl	80061a0 <ch_queue_init.lto_priv.1>
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
 800642e:	9b02      	ldr	r3, [sp, #8]
}
 8006430:	0018      	movs	r0, r3
 8006432:	b005      	add	sp, #20
 8006434:	bd00      	pop	{pc}
 8006436:	46c0      	nop			; (mov r8, r8)
	...

08006440 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8006440:	b500      	push	{lr}
 8006442:	b085      	sub	sp, #20
 8006444:	9001      	str	r0, [sp, #4]
  thread_t *tp;

  chDbgCheckClassI();
 8006446:	f7fe fe4b 	bl	80050e0 <chDbgCheckClassI>
  chDbgCheck(tdp != NULL);
 800644a:	9b01      	ldr	r3, [sp, #4]
 800644c:	425a      	negs	r2, r3
 800644e:	4153      	adcs	r3, r2
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <chThdCreateSuspendedI+0x1e>
 8006456:	4b3e      	ldr	r3, [pc, #248]	; (8006550 <chThdCreateSuspendedI+0x110>)
 8006458:	0018      	movs	r0, r3
 800645a:	f7fe fcd9 	bl	8004e10 <chSysHalt>
  chDbgCheck(MEM_IS_ALIGNED(tdp->wbase, PORT_WORKING_AREA_ALIGN) &&
 800645e:	9b01      	ldr	r3, [sp, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	001a      	movs	r2, r3
 8006464:	2307      	movs	r3, #7
 8006466:	4013      	ands	r3, r2
 8006468:	1e5a      	subs	r2, r3, #1
 800646a:	4193      	sbcs	r3, r2
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d109      	bne.n	8006486 <chThdCreateSuspendedI+0x46>
 8006472:	9b01      	ldr	r3, [sp, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	001a      	movs	r2, r3
 8006478:	2307      	movs	r3, #7
 800647a:	4013      	ands	r3, r2
 800647c:	1e5a      	subs	r2, r3, #1
 800647e:	4193      	sbcs	r3, r2
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <chThdCreateSuspendedI+0x4a>
 8006486:	2301      	movs	r3, #1
 8006488:	e000      	b.n	800648c <chThdCreateSuspendedI+0x4c>
 800648a:	2300      	movs	r3, #0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d109      	bne.n	80064a4 <chThdCreateSuspendedI+0x64>
 8006490:	9b01      	ldr	r3, [sp, #4]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	9b01      	ldr	r3, [sp, #4]
 8006496:	6859      	ldr	r1, [r3, #4]
 8006498:	2300      	movs	r3, #0
 800649a:	4291      	cmp	r1, r2
 800649c:	415b      	adcs	r3, r3
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <chThdCreateSuspendedI+0x68>
 80064a4:	2301      	movs	r3, #1
 80064a6:	e000      	b.n	80064aa <chThdCreateSuspendedI+0x6a>
 80064a8:	2300      	movs	r3, #0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10c      	bne.n	80064c8 <chThdCreateSuspendedI+0x88>
 80064ae:	9b01      	ldr	r3, [sp, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	001a      	movs	r2, r3
 80064b4:	9b01      	ldr	r3, [sp, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	1ad2      	subs	r2, r2, r3
 80064ba:	21cf      	movs	r1, #207	; 0xcf
 80064bc:	2300      	movs	r3, #0
 80064be:	4291      	cmp	r1, r2
 80064c0:	415b      	adcs	r3, r3
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d003      	beq.n	80064d0 <chThdCreateSuspendedI+0x90>
 80064c8:	4b21      	ldr	r3, [pc, #132]	; (8006550 <chThdCreateSuspendedI+0x110>)
 80064ca:	0018      	movs	r0, r3
 80064cc:	f7fe fca0 	bl	8004e10 <chSysHalt>
             MEM_IS_ALIGNED(tdp->wend, PORT_STACK_ALIGN) &&
             (tdp->wend > tdp->wbase) &&
             (((size_t)tdp->wend - (size_t)tdp->wbase) >= THD_WORKING_AREA_SIZE(0)));
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));
 80064d0:	9b01      	ldr	r3, [sp, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	22ff      	movs	r2, #255	; 0xff
 80064d6:	429a      	cmp	r2, r3
 80064d8:	419b      	sbcs	r3, r3
 80064da:	425b      	negs	r3, r3
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <chThdCreateSuspendedI+0xb0>
 80064e2:	9b01      	ldr	r3, [sp, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	425a      	negs	r2, r3
 80064e8:	4153      	adcs	r3, r2
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <chThdCreateSuspendedI+0xb8>
 80064f0:	4b17      	ldr	r3, [pc, #92]	; (8006550 <chThdCreateSuspendedI+0x110>)
 80064f2:	0018      	movs	r0, r3
 80064f4:	f7fe fc8c 	bl	8004e10 <chSysHalt>

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = threadref(((uint8_t *)tdp->wend -
 80064f8:	9b01      	ldr	r3, [sp, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	3b50      	subs	r3, #80	; 0x50
 80064fe:	9303      	str	r3, [sp, #12]
                 MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN)));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8006500:	9b01      	ldr	r3, [sp, #4]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	9b03      	ldr	r3, [sp, #12]
 8006506:	621a      	str	r2, [r3, #32]
  tp->waend  = tdp->wend;
 8006508:	9b01      	ldr	r3, [sp, #4]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	9b03      	ldr	r3, [sp, #12]
 800650e:	625a      	str	r2, [r3, #36]	; 0x24
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8006510:	9b03      	ldr	r3, [sp, #12]
 8006512:	3b24      	subs	r3, #36	; 0x24
 8006514:	001a      	movs	r2, r3
 8006516:	9b03      	ldr	r3, [sp, #12]
 8006518:	60da      	str	r2, [r3, #12]
 800651a:	9b01      	ldr	r3, [sp, #4]
 800651c:	691a      	ldr	r2, [r3, #16]
 800651e:	9b03      	ldr	r3, [sp, #12]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	611a      	str	r2, [r3, #16]
 8006524:	9b01      	ldr	r3, [sp, #4]
 8006526:	695a      	ldr	r2, [r3, #20]
 8006528:	9b03      	ldr	r3, [sp, #12]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	615a      	str	r2, [r3, #20]
 800652e:	9b03      	ldr	r3, [sp, #12]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	4a08      	ldr	r2, [pc, #32]	; (8006554 <chThdCreateSuspendedI+0x114>)
 8006534:	621a      	str	r2, [r3, #32]
  if (tdp->instance != NULL) {
    return __thd_object_init(tdp->instance, tp, tdp->name, tdp->prio);
  }
#endif

  return __thd_object_init(currcore, tp, tdp->name, tdp->prio);
 8006536:	9b01      	ldr	r3, [sp, #4]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	9b01      	ldr	r3, [sp, #4]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	9903      	ldr	r1, [sp, #12]
 8006540:	4805      	ldr	r0, [pc, #20]	; (8006558 <chThdCreateSuspendedI+0x118>)
 8006542:	f7ff ff3d 	bl	80063c0 <__thd_object_init>
 8006546:	0003      	movs	r3, r0
}
 8006548:	0018      	movs	r0, r3
 800654a:	b005      	add	sp, #20
 800654c:	bd00      	pop	{pc}
 800654e:	46c0      	nop			; (mov r8, r8)
 8006550:	0800b3f8 	.word	0x0800b3f8
 8006554:	080001b9 	.word	0x080001b9
 8006558:	20000a28 	.word	0x20000a28
 800655c:	00000000 	.word	0x00000000

08006560 <chThdCreateI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(const thread_descriptor_t *tdp) {
 8006560:	b500      	push	{lr}
 8006562:	b083      	sub	sp, #12
 8006564:	9001      	str	r0, [sp, #4]

  return chSchReadyI(chThdCreateSuspendedI(tdp));
 8006566:	9b01      	ldr	r3, [sp, #4]
 8006568:	0018      	movs	r0, r3
 800656a:	f7ff ff69 	bl	8006440 <chThdCreateSuspendedI>
 800656e:	0003      	movs	r3, r0
 8006570:	0018      	movs	r0, r3
 8006572:	f7ff fb75 	bl	8005c60 <chSchReadyI>
 8006576:	0003      	movs	r3, r0
}
 8006578:	0018      	movs	r0, r3
 800657a:	b003      	add	sp, #12
 800657c:	bd00      	pop	{pc}
 800657e:	46c0      	nop			; (mov r8, r8)

08006580 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8006580:	b500      	push	{lr}
 8006582:	b087      	sub	sp, #28
 8006584:	9003      	str	r0, [sp, #12]
 8006586:	9102      	str	r1, [sp, #8]
 8006588:	9201      	str	r2, [sp, #4]
 800658a:	9300      	str	r3, [sp, #0]
  thread_t *tp;

  chDbgCheck((wsp != NULL) &&
 800658c:	9b03      	ldr	r3, [sp, #12]
 800658e:	425a      	negs	r2, r3
 8006590:	4153      	adcs	r3, r2
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d107      	bne.n	80065a8 <chThdCreateStatic+0x28>
 8006598:	9b03      	ldr	r3, [sp, #12]
 800659a:	2207      	movs	r2, #7
 800659c:	4013      	ands	r3, r2
 800659e:	1e5a      	subs	r2, r3, #1
 80065a0:	4193      	sbcs	r3, r2
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <chThdCreateStatic+0x2c>
 80065a8:	2301      	movs	r3, #1
 80065aa:	e000      	b.n	80065ae <chThdCreateStatic+0x2e>
 80065ac:	2300      	movs	r3, #0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d107      	bne.n	80065c2 <chThdCreateStatic+0x42>
 80065b2:	9a02      	ldr	r2, [sp, #8]
 80065b4:	21cf      	movs	r1, #207	; 0xcf
 80065b6:	2300      	movs	r3, #0
 80065b8:	4291      	cmp	r1, r2
 80065ba:	415b      	adcs	r3, r3
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <chThdCreateStatic+0x46>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <chThdCreateStatic+0x48>
 80065c6:	2300      	movs	r3, #0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d107      	bne.n	80065dc <chThdCreateStatic+0x5c>
 80065cc:	9b02      	ldr	r3, [sp, #8]
 80065ce:	2207      	movs	r2, #7
 80065d0:	4013      	ands	r3, r2
 80065d2:	1e5a      	subs	r2, r3, #1
 80065d4:	4193      	sbcs	r3, r2
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <chThdCreateStatic+0x60>
 80065dc:	2301      	movs	r3, #1
 80065de:	e000      	b.n	80065e2 <chThdCreateStatic+0x62>
 80065e0:	2300      	movs	r3, #0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d107      	bne.n	80065f6 <chThdCreateStatic+0x76>
 80065e6:	9b01      	ldr	r3, [sp, #4]
 80065e8:	22ff      	movs	r2, #255	; 0xff
 80065ea:	429a      	cmp	r2, r3
 80065ec:	419b      	sbcs	r3, r3
 80065ee:	425b      	negs	r3, r3
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <chThdCreateStatic+0x7a>
 80065f6:	2301      	movs	r3, #1
 80065f8:	e000      	b.n	80065fc <chThdCreateStatic+0x7c>
 80065fa:	2300      	movs	r3, #0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d105      	bne.n	800660c <chThdCreateStatic+0x8c>
 8006600:	9b00      	ldr	r3, [sp, #0]
 8006602:	425a      	negs	r2, r3
 8006604:	4153      	adcs	r3, r2
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d003      	beq.n	8006614 <chThdCreateStatic+0x94>
 800660c:	4b23      	ldr	r3, [pc, #140]	; (800669c <chThdCreateStatic+0x11c>)
 800660e:	0018      	movs	r0, r3
 8006610:	f7fe fbfe 	bl	8004e10 <chSysHalt>
             MEM_IS_ALIGNED(size, PORT_STACK_ALIGN) &&
             (prio <= HIGHPRIO) && (pf != NULL));

#if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
    ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
  chDbgAssert(chRegFindThreadByWorkingArea(wsp) == NULL,
 8006614:	9b03      	ldr	r3, [sp, #12]
 8006616:	0018      	movs	r0, r3
 8006618:	f000 fa12 	bl	8006a40 <chRegFindThreadByWorkingArea>
 800661c:	0003      	movs	r3, r0
 800661e:	1e5a      	subs	r2, r3, #1
 8006620:	4193      	sbcs	r3, r2
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d003      	beq.n	8006630 <chThdCreateStatic+0xb0>
 8006628:	4b1c      	ldr	r3, [pc, #112]	; (800669c <chThdCreateStatic+0x11c>)
 800662a:	0018      	movs	r0, r3
 800662c:	f7fe fbf0 	bl	8004e10 <chSysHalt>

#if CH_DBG_FILL_THREADS == TRUE
  __thd_stackfill((uint8_t *)wsp, (uint8_t *)wsp + size);
#endif

  chSysLock();
 8006630:	f7ff fe2e 	bl	8006290 <chSysLock.lto_priv.5>

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = threadref(((uint8_t *)wsp + size -
 8006634:	9b02      	ldr	r3, [sp, #8]
 8006636:	3b50      	subs	r3, #80	; 0x50
 8006638:	9a03      	ldr	r2, [sp, #12]
 800663a:	18d3      	adds	r3, r2, r3
 800663c:	9305      	str	r3, [sp, #20]
                 MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN)));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 800663e:	9b05      	ldr	r3, [sp, #20]
 8006640:	9a03      	ldr	r2, [sp, #12]
 8006642:	621a      	str	r2, [r3, #32]
  tp->waend  = (stkalign_t *)wsp + (size / sizeof (stkalign_t));
 8006644:	9b02      	ldr	r3, [sp, #8]
 8006646:	2207      	movs	r2, #7
 8006648:	4393      	bics	r3, r2
 800664a:	9a03      	ldr	r2, [sp, #12]
 800664c:	18d2      	adds	r2, r2, r3
 800664e:	9b05      	ldr	r3, [sp, #20]
 8006650:	625a      	str	r2, [r3, #36]	; 0x24
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8006652:	9b05      	ldr	r3, [sp, #20]
 8006654:	3b24      	subs	r3, #36	; 0x24
 8006656:	001a      	movs	r2, r3
 8006658:	9b05      	ldr	r3, [sp, #20]
 800665a:	60da      	str	r2, [r3, #12]
 800665c:	9b05      	ldr	r3, [sp, #20]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	9a00      	ldr	r2, [sp, #0]
 8006662:	611a      	str	r2, [r3, #16]
 8006664:	9b05      	ldr	r3, [sp, #20]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	9a08      	ldr	r2, [sp, #32]
 800666a:	615a      	str	r2, [r3, #20]
 800666c:	9b05      	ldr	r3, [sp, #20]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4a0b      	ldr	r2, [pc, #44]	; (80066a0 <chThdCreateStatic+0x120>)
 8006672:	621a      	str	r2, [r3, #32]

  tp = __thd_object_init(currcore, tp, "noname", prio);
 8006674:	9b01      	ldr	r3, [sp, #4]
 8006676:	4a0b      	ldr	r2, [pc, #44]	; (80066a4 <chThdCreateStatic+0x124>)
 8006678:	9905      	ldr	r1, [sp, #20]
 800667a:	480b      	ldr	r0, [pc, #44]	; (80066a8 <chThdCreateStatic+0x128>)
 800667c:	f7ff fea0 	bl	80063c0 <__thd_object_init>
 8006680:	0003      	movs	r3, r0
 8006682:	9305      	str	r3, [sp, #20]

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 8006684:	9b05      	ldr	r3, [sp, #20]
 8006686:	2100      	movs	r1, #0
 8006688:	0018      	movs	r0, r3
 800668a:	f7ff fb89 	bl	8005da0 <chSchWakeupS>
  chSysUnlock();
 800668e:	f7ff fe07 	bl	80062a0 <chSysUnlock.lto_priv.5>

  return tp;
 8006692:	9b05      	ldr	r3, [sp, #20]
}
 8006694:	0018      	movs	r0, r3
 8006696:	b007      	add	sp, #28
 8006698:	bd00      	pop	{pc}
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	0800b41c 	.word	0x0800b41c
 80066a0:	080001b9 	.word	0x080001b9
 80066a4:	0800b3f0 	.word	0x0800b3f0
 80066a8:	20000a28 	.word	0x20000a28
 80066ac:	00000000 	.word	0x00000000

080066b0 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 80066b0:	b510      	push	{r4, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	9001      	str	r0, [sp, #4]

  chSysLock();
 80066b6:	f7ff fdeb 	bl	8006290 <chSysLock.lto_priv.5>
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 80066ba:	9b01      	ldr	r3, [sp, #4]
 80066bc:	222a      	movs	r2, #42	; 0x2a
 80066be:	5c9b      	ldrb	r3, [r3, r2]
 80066c0:	425a      	negs	r2, r3
 80066c2:	4153      	adcs	r3, r2
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <chThdRelease+0x22>
 80066ca:	4b20      	ldr	r3, [pc, #128]	; (800674c <chThdRelease+0x9c>)
 80066cc:	0018      	movs	r0, r3
 80066ce:	f7fe fb9f 	bl	8004e10 <chSysHalt>
  tp->refs--;
 80066d2:	9b01      	ldr	r3, [sp, #4]
 80066d4:	222a      	movs	r2, #42	; 0x2a
 80066d6:	5c9b      	ldrb	r3, [r3, r2]
 80066d8:	3b01      	subs	r3, #1
 80066da:	b2d9      	uxtb	r1, r3
 80066dc:	9b01      	ldr	r3, [sp, #4]
 80066de:	222a      	movs	r2, #42	; 0x2a
 80066e0:	5499      	strb	r1, [r3, r2]

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator.*/
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 80066e2:	9b01      	ldr	r3, [sp, #4]
 80066e4:	222a      	movs	r2, #42	; 0x2a
 80066e6:	5c9b      	ldrb	r3, [r3, r2]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d12b      	bne.n	8006744 <chThdRelease+0x94>
 80066ec:	9b01      	ldr	r3, [sp, #4]
 80066ee:	2228      	movs	r2, #40	; 0x28
 80066f0:	5c9b      	ldrb	r3, [r3, r2]
 80066f2:	2b0f      	cmp	r3, #15
 80066f4:	d126      	bne.n	8006744 <chThdRelease+0x94>
    REG_REMOVE(tp);
 80066f6:	9b01      	ldr	r3, [sp, #4]
 80066f8:	3310      	adds	r3, #16
 80066fa:	0018      	movs	r0, r3
 80066fc:	f7ff fda0 	bl	8006240 <ch_queue_dequeue.lto_priv.1>
    chSysUnlock();
 8006700:	f7ff fdce 	bl	80062a0 <chSysUnlock.lto_priv.5>

#if CH_CFG_USE_DYNAMIC == TRUE
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8006704:	9b01      	ldr	r3, [sp, #4]
 8006706:	2229      	movs	r2, #41	; 0x29
 8006708:	5c9b      	ldrb	r3, [r3, r2]
 800670a:	001a      	movs	r2, r3
 800670c:	2303      	movs	r3, #3
 800670e:	4013      	ands	r3, r2
 8006710:	2b01      	cmp	r3, #1
 8006712:	d002      	beq.n	800671a <chThdRelease+0x6a>
 8006714:	2b02      	cmp	r3, #2
 8006716:	d009      	beq.n	800672c <chThdRelease+0x7c>
    default:
      /* Nothing else to do for static threads.*/
      break;
    }
#endif /* CH_CFG_USE_DYNAMIC == TRUE */
    return;
 8006718:	e016      	b.n	8006748 <chThdRelease+0x98>
      chHeapFree(chThdGetWorkingAreaX(tp));
 800671a:	9b01      	ldr	r3, [sp, #4]
 800671c:	0018      	movs	r0, r3
 800671e:	f7ff fdf7 	bl	8006310 <chThdGetWorkingAreaX.lto_priv.0>
 8006722:	0003      	movs	r3, r0
 8006724:	0018      	movs	r0, r3
 8006726:	f000 fe9b 	bl	8007460 <chHeapFree>
    return;
 800672a:	e00d      	b.n	8006748 <chThdRelease+0x98>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 800672c:	9b01      	ldr	r3, [sp, #4]
 800672e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8006730:	9b01      	ldr	r3, [sp, #4]
 8006732:	0018      	movs	r0, r3
 8006734:	f7ff fdec 	bl	8006310 <chThdGetWorkingAreaX.lto_priv.0>
 8006738:	0003      	movs	r3, r0
 800673a:	0019      	movs	r1, r3
 800673c:	0020      	movs	r0, r4
 800673e:	f001 f83f 	bl	80077c0 <chPoolFree>
 8006742:	e001      	b.n	8006748 <chThdRelease+0x98>
  }
  chSysUnlock();
 8006744:	f7ff fdac 	bl	80062a0 <chSysUnlock.lto_priv.5>
}
 8006748:	b002      	add	sp, #8
 800674a:	bd10      	pop	{r4, pc}
 800674c:	0800b430 	.word	0x0800b430

08006750 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8006750:	b500      	push	{lr}
 8006752:	b083      	sub	sp, #12
 8006754:	9001      	str	r0, [sp, #4]

  chSysLock();
 8006756:	f7ff fd9b 	bl	8006290 <chSysLock.lto_priv.5>
  chThdExitS(msg);
 800675a:	9b01      	ldr	r3, [sp, #4]
 800675c:	0018      	movs	r0, r3
 800675e:	f000 f807 	bl	8006770 <chThdExitS>
  /* The thread never returns here.*/
}
 8006762:	b003      	add	sp, #12
 8006764:	bd00      	pop	{pc}
 8006766:	46c0      	nop			; (mov r8, r8)
	...

08006770 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8006770:	b500      	push	{lr}
 8006772:	b085      	sub	sp, #20
 8006774:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 8006776:	f7ff fdc3 	bl	8006300 <chThdGetSelfX.lto_priv.0>
 800677a:	0003      	movs	r3, r0
 800677c:	9303      	str	r3, [sp, #12]

  /* Storing exit message.*/
  currtp->u.exitcode = msg;
 800677e:	9b03      	ldr	r3, [sp, #12]
 8006780:	9a01      	ldr	r2, [sp, #4]
 8006782:	62da      	str	r2, [r3, #44]	; 0x2c
 8006784:	e008      	b.n	8006798 <chThdExitS+0x28>
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
    (void) chSchReadyI(threadref(ch_list_unlink(&currtp->waiting)));
 8006786:	9b03      	ldr	r3, [sp, #12]
 8006788:	3330      	adds	r3, #48	; 0x30
 800678a:	0018      	movs	r0, r3
 800678c:	f7ff fcf8 	bl	8006180 <ch_list_unlink>
 8006790:	0003      	movs	r3, r0
 8006792:	0018      	movs	r0, r3
 8006794:	f7ff fa64 	bl	8005c60 <chSchReadyI>
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8006798:	9b03      	ldr	r3, [sp, #12]
 800679a:	3330      	adds	r3, #48	; 0x30
 800679c:	0018      	movs	r0, r3
 800679e:	f7ff fcdf 	bl	8006160 <ch_list_notempty>
 80067a2:	1e03      	subs	r3, r0, #0
 80067a4:	d1ef      	bne.n	8006786 <chThdExitS+0x16>
  }
#endif

#if CH_CFG_USE_REGISTRY == TRUE
  if (unlikely(currtp->refs == (trefs_t)0)) {
 80067a6:	9b03      	ldr	r3, [sp, #12]
 80067a8:	222a      	movs	r2, #42	; 0x2a
 80067aa:	5c9b      	ldrb	r3, [r3, r2]
 80067ac:	425a      	negs	r2, r3
 80067ae:	4153      	adcs	r3, r2
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00f      	beq.n	80067d6 <chThdExitS+0x66>
#if CH_CFG_USE_DYNAMIC == TRUE
    /* Static threads are immediately removed from the registry because there
       is no memory to recover.*/
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 80067b6:	9b03      	ldr	r3, [sp, #12]
 80067b8:	2229      	movs	r2, #41	; 0x29
 80067ba:	5c9b      	ldrb	r3, [r3, r2]
 80067bc:	001a      	movs	r2, r3
 80067be:	2303      	movs	r3, #3
 80067c0:	4013      	ands	r3, r2
 80067c2:	425a      	negs	r2, r3
 80067c4:	4153      	adcs	r3, r2
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d004      	beq.n	80067d6 <chThdExitS+0x66>
      REG_REMOVE(currtp);
 80067cc:	9b03      	ldr	r3, [sp, #12]
 80067ce:	3310      	adds	r3, #16
 80067d0:	0018      	movs	r0, r3
 80067d2:	f7ff fd35 	bl	8006240 <ch_queue_dequeue.lto_priv.1>
#endif
  }
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 80067d6:	200f      	movs	r0, #15
 80067d8:	f7ff fa62 	bl	8005ca0 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
 80067dc:	4b02      	ldr	r3, [pc, #8]	; (80067e8 <chThdExitS+0x78>)
 80067de:	0018      	movs	r0, r3
 80067e0:	f7fe fb16 	bl	8004e10 <chSysHalt>
}
 80067e4:	b005      	add	sp, #20
 80067e6:	bd00      	pop	{pc}
 80067e8:	0800b440 	.word	0x0800b440
 80067ec:	00000000 	.word	0x00000000

080067f0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 80067f0:	b500      	push	{lr}
 80067f2:	b083      	sub	sp, #12
 80067f4:	9001      	str	r0, [sp, #4]

  chSysLock();
 80067f6:	f7ff fd4b 	bl	8006290 <chSysLock.lto_priv.5>
  chThdSleepS(time);
 80067fa:	9b01      	ldr	r3, [sp, #4]
 80067fc:	0018      	movs	r0, r3
 80067fe:	f7ff fd8f 	bl	8006320 <chThdSleepS>
  chSysUnlock();
 8006802:	f7ff fd4d 	bl	80062a0 <chSysUnlock.lto_priv.5>
}
 8006806:	b003      	add	sp, #12
 8006808:	bd00      	pop	{pc}
 800680a:	46c0      	nop			; (mov r8, r8)
 800680c:	0000      	movs	r0, r0
	...

08006810 <chThdSleepUntil>:
 *
 * @param[in] time      absolute system time
 *
 * @api
 */
void chThdSleepUntil(systime_t time) {
 8006810:	b500      	push	{lr}
 8006812:	b085      	sub	sp, #20
 8006814:	0002      	movs	r2, r0
 8006816:	466b      	mov	r3, sp
 8006818:	3306      	adds	r3, #6
 800681a:	801a      	strh	r2, [r3, #0]
  sysinterval_t interval;

  chSysLock();
 800681c:	f7ff fd38 	bl	8006290 <chSysLock.lto_priv.5>
  interval = chTimeDiffX(chVTGetSystemTimeX(), time);
 8006820:	f7ff fd66 	bl	80062f0 <chVTGetSystemTimeX.lto_priv.2>
 8006824:	0003      	movs	r3, r0
 8006826:	001a      	movs	r2, r3
 8006828:	466b      	mov	r3, sp
 800682a:	3306      	adds	r3, #6
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	0019      	movs	r1, r3
 8006830:	0010      	movs	r0, r2
 8006832:	f7ff fc75 	bl	8006120 <chTimeDiffX.lto_priv.1>
 8006836:	0003      	movs	r3, r0
 8006838:	9303      	str	r3, [sp, #12]
  if (likely(interval > (sysinterval_t)0)) {
 800683a:	9b03      	ldr	r3, [sp, #12]
 800683c:	1e5a      	subs	r2, r3, #1
 800683e:	4193      	sbcs	r3, r2
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <chThdSleepUntil+0x3e>
    chThdSleepS(interval);
 8006846:	9b03      	ldr	r3, [sp, #12]
 8006848:	0018      	movs	r0, r3
 800684a:	f7ff fd69 	bl	8006320 <chThdSleepS>
  }
  chSysUnlock();
 800684e:	f7ff fd27 	bl	80062a0 <chSysUnlock.lto_priv.5>
}
 8006852:	b005      	add	sp, #20
 8006854:	bd00      	pop	{pc}
 8006856:	46c0      	nop			; (mov r8, r8)
	...

08006860 <chThdQueueObjectInit>:
 *
 * @param[out] tqp      pointer to a @p threads_queue_t structure
 *
 * @init
 */
void chThdQueueObjectInit(threads_queue_t *tqp) {
 8006860:	b500      	push	{lr}
 8006862:	b083      	sub	sp, #12
 8006864:	9001      	str	r0, [sp, #4]

  chDbgCheck(tqp);
 8006866:	9b01      	ldr	r3, [sp, #4]
 8006868:	425a      	negs	r2, r3
 800686a:	4153      	adcs	r3, r2
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <chThdQueueObjectInit+0x1a>
 8006872:	4b05      	ldr	r3, [pc, #20]	; (8006888 <chThdQueueObjectInit+0x28>)
 8006874:	0018      	movs	r0, r3
 8006876:	f7fe facb 	bl	8004e10 <chSysHalt>

  ch_queue_init(&tqp->queue);
 800687a:	9b01      	ldr	r3, [sp, #4]
 800687c:	0018      	movs	r0, r3
 800687e:	f7ff fc8f 	bl	80061a0 <ch_queue_init.lto_priv.1>
}
 8006882:	b003      	add	sp, #12
 8006884:	bd00      	pop	{pc}
 8006886:	46c0      	nop			; (mov r8, r8)
 8006888:	0800b458 	.word	0x0800b458
 800688c:	00000000 	.word	0x00000000

08006890 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8006890:	b500      	push	{lr}
 8006892:	b085      	sub	sp, #20
 8006894:	9001      	str	r0, [sp, #4]
 8006896:	9100      	str	r1, [sp, #0]
  thread_t *currtp = chThdGetSelfX();
 8006898:	f7ff fd32 	bl	8006300 <chThdGetSelfX.lto_priv.0>
 800689c:	0003      	movs	r3, r0
 800689e:	9303      	str	r3, [sp, #12]

  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80068a0:	9b00      	ldr	r3, [sp, #0]
 80068a2:	425a      	negs	r2, r3
 80068a4:	4153      	adcs	r3, r2
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <chThdEnqueueTimeoutS+0x22>
    return MSG_TIMEOUT;
 80068ac:	2301      	movs	r3, #1
 80068ae:	425b      	negs	r3, r3
 80068b0:	e00b      	b.n	80068ca <chThdEnqueueTimeoutS+0x3a>
  }

  ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);
 80068b2:	9b01      	ldr	r3, [sp, #4]
 80068b4:	9a03      	ldr	r2, [sp, #12]
 80068b6:	0011      	movs	r1, r2
 80068b8:	0018      	movs	r0, r3
 80068ba:	f7ff fc91 	bl	80061e0 <ch_queue_insert.lto_priv.0>

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80068be:	9b00      	ldr	r3, [sp, #0]
 80068c0:	0019      	movs	r1, r3
 80068c2:	2004      	movs	r0, #4
 80068c4:	f7ff fa34 	bl	8005d30 <chSchGoSleepTimeoutS>
 80068c8:	0003      	movs	r3, r0
}
 80068ca:	0018      	movs	r0, r3
 80068cc:	b005      	add	sp, #20
 80068ce:	bd00      	pop	{pc}

080068d0 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to a @p threads_queue_t structure
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 80068d0:	b500      	push	{lr}
 80068d2:	b083      	sub	sp, #12
 80068d4:	9001      	str	r0, [sp, #4]
 80068d6:	9100      	str	r1, [sp, #0]

  if (ch_queue_notempty(&tqp->queue)) {
 80068d8:	9b01      	ldr	r3, [sp, #4]
 80068da:	0018      	movs	r0, r3
 80068dc:	f7ff fc70 	bl	80061c0 <ch_queue_notempty.lto_priv.0>
 80068e0:	1e03      	subs	r3, r0, #0
 80068e2:	d005      	beq.n	80068f0 <chThdDequeueNextI+0x20>
    chThdDoDequeueNextI(tqp, msg);
 80068e4:	9a00      	ldr	r2, [sp, #0]
 80068e6:	9b01      	ldr	r3, [sp, #4]
 80068e8:	0011      	movs	r1, r2
 80068ea:	0018      	movs	r0, r3
 80068ec:	f7ff fd30 	bl	8006350 <chThdDoDequeueNextI>
  }
}
 80068f0:	b003      	add	sp, #12
 80068f2:	bd00      	pop	{pc}
	...

08006900 <port_lock.lto_priv.11>:
  __ASM volatile ("cpsid i" : : : "memory");
 8006900:	b672      	cpsid	i
}
 8006902:	4770      	bx	lr
	...

08006910 <port_unlock.lto_priv.11>:
  __ASM volatile ("cpsie i" : : : "memory");
 8006910:	b662      	cpsie	i
}
 8006912:	4770      	bx	lr
	...

08006920 <chSysLock.lto_priv.6>:
static inline void chSysLock(void) {
 8006920:	b510      	push	{r4, lr}
  port_lock();
 8006922:	f7ff ffed 	bl	8006900 <port_lock.lto_priv.11>
  __dbg_check_lock();
 8006926:	f7fe fae3 	bl	8004ef0 <__dbg_check_lock>
}
 800692a:	bd10      	pop	{r4, pc}
 800692c:	0000      	movs	r0, r0
	...

08006930 <chSysUnlock.lto_priv.6>:
static inline void chSysUnlock(void) {
 8006930:	b510      	push	{r4, lr}
  __dbg_check_unlock();
 8006932:	f7fe fb05 	bl	8004f40 <__dbg_check_unlock>
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
 8006936:	4b0e      	ldr	r3, [pc, #56]	; (8006970 <chSysUnlock.lto_priv.6+0x40>)
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	4b0d      	ldr	r3, [pc, #52]	; (8006970 <chSysUnlock.lto_priv.6+0x40>)
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	1e5a      	subs	r2, r3, #1
 8006940:	4193      	sbcs	r3, r2
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00f      	beq.n	8006968 <chSysUnlock.lto_priv.6+0x38>
 8006948:	4b09      	ldr	r3, [pc, #36]	; (8006970 <chSysUnlock.lto_priv.6+0x40>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	4b08      	ldr	r3, [pc, #32]	; (8006970 <chSysUnlock.lto_priv.6+0x40>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	429a      	cmp	r2, r3
 8006956:	419b      	sbcs	r3, r3
 8006958:	425b      	negs	r3, r3
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <chSysUnlock.lto_priv.6+0x38>
 8006960:	4b04      	ldr	r3, [pc, #16]	; (8006974 <chSysUnlock.lto_priv.6+0x44>)
 8006962:	0018      	movs	r0, r3
 8006964:	f7fe fa54 	bl	8004e10 <chSysHalt>
  port_unlock();
 8006968:	f7ff ffd2 	bl	8006910 <port_unlock.lto_priv.11>
}
 800696c:	bd10      	pop	{r4, pc}
 800696e:	46c0      	nop			; (mov r8, r8)
 8006970:	20000a28 	.word	0x20000a28
 8006974:	0800b4b0 	.word	0x0800b4b0
	...

08006980 <chThdGetWorkingAreaX.lto_priv.1>:
static inline stkalign_t *chThdGetWorkingAreaX(thread_t *tp) {
 8006980:	b082      	sub	sp, #8
 8006982:	9001      	str	r0, [sp, #4]
  return tp->wabase;
 8006984:	9b01      	ldr	r3, [sp, #4]
 8006986:	6a1b      	ldr	r3, [r3, #32]
}
 8006988:	0018      	movs	r0, r3
 800698a:	b002      	add	sp, #8
 800698c:	4770      	bx	lr
 800698e:	46c0      	nop			; (mov r8, r8)

08006990 <chRegFirstThread>:
 *
 * @return              A reference to the most ancient thread.
 *
 * @api
 */
thread_t *chRegFirstThread(void) {
 8006990:	b500      	push	{lr}
 8006992:	b083      	sub	sp, #12
  thread_t *tp;
  uint8_t *p;

  chSysLock();
 8006994:	f7ff ffc4 	bl	8006920 <chSysLock.lto_priv.6>
  p = (uint8_t *)REG_HEADER(currcore)->next;
 8006998:	4b09      	ldr	r3, [pc, #36]	; (80069c0 <chRegFirstThread+0x30>)
 800699a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699c:	9301      	str	r3, [sp, #4]
  /*lint -save -e413 [1.3] Safe to subtract a calculated offset.*/
  tp = threadref((p - __CH_OFFSETOF(thread_t, rqueue)));
 800699e:	9b01      	ldr	r3, [sp, #4]
 80069a0:	3b10      	subs	r3, #16
 80069a2:	9300      	str	r3, [sp, #0]
  /*lint -restore*/
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 80069a4:	9b00      	ldr	r3, [sp, #0]
 80069a6:	222a      	movs	r2, #42	; 0x2a
 80069a8:	5c9b      	ldrb	r3, [r3, r2]
 80069aa:	3301      	adds	r3, #1
 80069ac:	b2d9      	uxtb	r1, r3
 80069ae:	9b00      	ldr	r3, [sp, #0]
 80069b0:	222a      	movs	r2, #42	; 0x2a
 80069b2:	5499      	strb	r1, [r3, r2]
#endif
  chSysUnlock();
 80069b4:	f7ff ffbc 	bl	8006930 <chSysUnlock.lto_priv.6>

  return tp;
 80069b8:	9b00      	ldr	r3, [sp, #0]
}
 80069ba:	0018      	movs	r0, r3
 80069bc:	b003      	add	sp, #12
 80069be:	bd00      	pop	{pc}
 80069c0:	20000a28 	.word	0x20000a28
	...

080069d0 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 80069d0:	b500      	push	{lr}
 80069d2:	b087      	sub	sp, #28
 80069d4:	9001      	str	r0, [sp, #4]
  thread_t *ntp;
  ch_queue_t *nqp;

  chSysLock();
 80069d6:	f7ff ffa3 	bl	8006920 <chSysLock.lto_priv.6>

  /* Next element in the registry queue.*/
  nqp = tp->rqueue.next;
 80069da:	9b01      	ldr	r3, [sp, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	9304      	str	r3, [sp, #16]
  if (nqp == REG_HEADER(currcore)) {
 80069e0:	9a04      	ldr	r2, [sp, #16]
 80069e2:	4b15      	ldr	r3, [pc, #84]	; (8006a38 <chRegNextThread+0x68>)
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d102      	bne.n	80069ee <chRegNextThread+0x1e>
    ntp = NULL;
 80069e8:	2300      	movs	r3, #0
 80069ea:	9305      	str	r3, [sp, #20]
 80069ec:	e019      	b.n	8006a22 <chRegNextThread+0x52>
  }
  else {
    uint8_t *p = (uint8_t *)nqp;
 80069ee:	9b04      	ldr	r3, [sp, #16]
 80069f0:	9303      	str	r3, [sp, #12]
    /*lint -save -e413 [1.3] Safe to subtract a calculated offset.*/
    ntp = threadref((p - __CH_OFFSETOF(thread_t, rqueue)));
 80069f2:	9b03      	ldr	r3, [sp, #12]
 80069f4:	3b10      	subs	r3, #16
 80069f6:	9305      	str	r3, [sp, #20]
    /*lint -restore*/

#if CH_CFG_USE_DYNAMIC == TRUE
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 80069f8:	9b05      	ldr	r3, [sp, #20]
 80069fa:	222a      	movs	r2, #42	; 0x2a
 80069fc:	5c9b      	ldrb	r3, [r3, r2]
 80069fe:	3bff      	subs	r3, #255	; 0xff
 8006a00:	425a      	negs	r2, r3
 8006a02:	4153      	adcs	r3, r2
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <chRegNextThread+0x42>
 8006a0a:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <chRegNextThread+0x6c>)
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	f7fe f9ff 	bl	8004e10 <chSysHalt>

    ntp->refs++;
 8006a12:	9b05      	ldr	r3, [sp, #20]
 8006a14:	222a      	movs	r2, #42	; 0x2a
 8006a16:	5c9b      	ldrb	r3, [r3, r2]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	b2d9      	uxtb	r1, r3
 8006a1c:	9b05      	ldr	r3, [sp, #20]
 8006a1e:	222a      	movs	r2, #42	; 0x2a
 8006a20:	5499      	strb	r1, [r3, r2]
#endif
  }
  chSysUnlock();
 8006a22:	f7ff ff85 	bl	8006930 <chSysUnlock.lto_priv.6>
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 8006a26:	9b01      	ldr	r3, [sp, #4]
 8006a28:	0018      	movs	r0, r3
 8006a2a:	f7ff fe41 	bl	80066b0 <chThdRelease>
#endif

  return ntp;
 8006a2e:	9b05      	ldr	r3, [sp, #20]
}
 8006a30:	0018      	movs	r0, r3
 8006a32:	b007      	add	sp, #28
 8006a34:	bd00      	pop	{pc}
 8006a36:	46c0      	nop			; (mov r8, r8)
 8006a38:	20000a50 	.word	0x20000a50
 8006a3c:	0800b4bc 	.word	0x0800b4bc

08006a40 <chRegFindThreadByWorkingArea>:
 * @return              A pointer to the found thread.
 * @retval NULL         if a matching thread has not been found.
 *
 * @api
 */
thread_t *chRegFindThreadByWorkingArea(stkalign_t *wa) {
 8006a40:	b500      	push	{lr}
 8006a42:	b085      	sub	sp, #20
 8006a44:	9001      	str	r0, [sp, #4]
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
 8006a46:	f7ff ffa3 	bl	8006990 <chRegFirstThread>
 8006a4a:	0003      	movs	r3, r0
 8006a4c:	9303      	str	r3, [sp, #12]
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
 8006a4e:	9b03      	ldr	r3, [sp, #12]
 8006a50:	0018      	movs	r0, r3
 8006a52:	f7ff ff95 	bl	8006980 <chThdGetWorkingAreaX.lto_priv.1>
 8006a56:	0002      	movs	r2, r0
 8006a58:	9b01      	ldr	r3, [sp, #4]
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d101      	bne.n	8006a62 <chRegFindThreadByWorkingArea+0x22>
      return ctp;
 8006a5e:	9b03      	ldr	r3, [sp, #12]
 8006a60:	e009      	b.n	8006a76 <chRegFindThreadByWorkingArea+0x36>
    }
    ctp = chRegNextThread(ctp);
 8006a62:	9b03      	ldr	r3, [sp, #12]
 8006a64:	0018      	movs	r0, r3
 8006a66:	f7ff ffb3 	bl	80069d0 <chRegNextThread>
 8006a6a:	0003      	movs	r3, r0
 8006a6c:	9303      	str	r3, [sp, #12]
  } while (ctp != NULL);
 8006a6e:	9b03      	ldr	r3, [sp, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1ec      	bne.n	8006a4e <chRegFindThreadByWorkingArea+0xe>

  return NULL;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	0018      	movs	r0, r3
 8006a78:	b005      	add	sp, #20
 8006a7a:	bd00      	pop	{pc}
 8006a7c:	0000      	movs	r0, r0
	...

08006a80 <ch_queue_init.lto_priv.3>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8006a80:	b082      	sub	sp, #8
 8006a82:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8006a84:	9b01      	ldr	r3, [sp, #4]
 8006a86:	9a01      	ldr	r2, [sp, #4]
 8006a88:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 8006a8a:	9b01      	ldr	r3, [sp, #4]
 8006a8c:	9a01      	ldr	r2, [sp, #4]
 8006a8e:	605a      	str	r2, [r3, #4]
}
 8006a90:	b002      	add	sp, #8
 8006a92:	4770      	bx	lr
	...

08006aa0 <ch_queue_notempty.lto_priv.2>:
static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 8006aa0:	b082      	sub	sp, #8
 8006aa2:	9001      	str	r0, [sp, #4]
  return (bool)(qp->next != qp);
 8006aa4:	9b01      	ldr	r3, [sp, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	9a01      	ldr	r2, [sp, #4]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	1e5a      	subs	r2, r3, #1
 8006aae:	4193      	sbcs	r3, r2
 8006ab0:	b2db      	uxtb	r3, r3
}
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	b002      	add	sp, #8
 8006ab6:	4770      	bx	lr
	...

08006ac0 <ch_queue_fifo_remove.lto_priv.2>:
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	9001      	str	r0, [sp, #4]
  ch_queue_t *p = qp->next;
 8006ac4:	9b01      	ldr	r3, [sp, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	9303      	str	r3, [sp, #12]
  qp->next       = p->next;
 8006aca:	9b03      	ldr	r3, [sp, #12]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	9b01      	ldr	r3, [sp, #4]
 8006ad0:	601a      	str	r2, [r3, #0]
  qp->next->prev = qp;
 8006ad2:	9b01      	ldr	r3, [sp, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	9a01      	ldr	r2, [sp, #4]
 8006ad8:	605a      	str	r2, [r3, #4]
  return p;
 8006ada:	9b03      	ldr	r3, [sp, #12]
}
 8006adc:	0018      	movs	r0, r3
 8006ade:	b004      	add	sp, #16
 8006ae0:	4770      	bx	lr
 8006ae2:	46c0      	nop			; (mov r8, r8)
	...

08006af0 <ch_queue_dequeue.lto_priv.2>:
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 8006af0:	b082      	sub	sp, #8
 8006af2:	9001      	str	r0, [sp, #4]
  p->prev->next = p->next;
 8006af4:	9b01      	ldr	r3, [sp, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	9a01      	ldr	r2, [sp, #4]
 8006afa:	6812      	ldr	r2, [r2, #0]
 8006afc:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
 8006afe:	9b01      	ldr	r3, [sp, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	9a01      	ldr	r2, [sp, #4]
 8006b04:	6852      	ldr	r2, [r2, #4]
 8006b06:	605a      	str	r2, [r3, #4]
  return p;
 8006b08:	9b01      	ldr	r3, [sp, #4]
}
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	b002      	add	sp, #8
 8006b0e:	4770      	bx	lr

08006b10 <port_lock.lto_priv.13>:
  __ASM volatile ("cpsid i" : : : "memory");
 8006b10:	b672      	cpsid	i
}
 8006b12:	4770      	bx	lr
	...

08006b20 <port_unlock.lto_priv.13>:
  __ASM volatile ("cpsie i" : : : "memory");
 8006b20:	b662      	cpsie	i
}
 8006b22:	4770      	bx	lr
	...

08006b30 <chSysLock.lto_priv.8>:
static inline void chSysLock(void) {
 8006b30:	b510      	push	{r4, lr}
  port_lock();
 8006b32:	f7ff ffed 	bl	8006b10 <port_lock.lto_priv.13>
  __dbg_check_lock();
 8006b36:	f7fe f9db 	bl	8004ef0 <__dbg_check_lock>
}
 8006b3a:	bd10      	pop	{r4, pc}
 8006b3c:	0000      	movs	r0, r0
	...

08006b40 <chSysUnlock.lto_priv.8>:
static inline void chSysUnlock(void) {
 8006b40:	b510      	push	{r4, lr}
  __dbg_check_unlock();
 8006b42:	f7fe f9fd 	bl	8004f40 <__dbg_check_unlock>
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
 8006b46:	4b0e      	ldr	r3, [pc, #56]	; (8006b80 <chSysUnlock.lto_priv.8+0x40>)
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	4b0d      	ldr	r3, [pc, #52]	; (8006b80 <chSysUnlock.lto_priv.8+0x40>)
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	1e5a      	subs	r2, r3, #1
 8006b50:	4193      	sbcs	r3, r2
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00f      	beq.n	8006b78 <chSysUnlock.lto_priv.8+0x38>
 8006b58:	4b09      	ldr	r3, [pc, #36]	; (8006b80 <chSysUnlock.lto_priv.8+0x40>)
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	4b08      	ldr	r3, [pc, #32]	; (8006b80 <chSysUnlock.lto_priv.8+0x40>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	419b      	sbcs	r3, r3
 8006b68:	425b      	negs	r3, r3
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d003      	beq.n	8006b78 <chSysUnlock.lto_priv.8+0x38>
 8006b70:	4b04      	ldr	r3, [pc, #16]	; (8006b84 <chSysUnlock.lto_priv.8+0x44>)
 8006b72:	0018      	movs	r0, r3
 8006b74:	f7fe f94c 	bl	8004e10 <chSysHalt>
  port_unlock();
 8006b78:	f7ff ffd2 	bl	8006b20 <port_unlock.lto_priv.13>
}
 8006b7c:	bd10      	pop	{r4, pc}
 8006b7e:	46c0      	nop			; (mov r8, r8)
 8006b80:	20000a28 	.word	0x20000a28
 8006b84:	0800b4dc 	.word	0x0800b4dc
	...

08006b90 <ch_sch_prio_insert.lto_priv.0>:
/*===========================================================================*/

/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {
 8006b90:	b084      	sub	sp, #16
 8006b92:	9001      	str	r0, [sp, #4]
 8006b94:	9100      	str	r1, [sp, #0]

  ch_queue_t *cp = qp;
 8006b96:	9b01      	ldr	r3, [sp, #4]
 8006b98:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->next;
 8006b9a:	9b03      	ldr	r3, [sp, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	9303      	str	r3, [sp, #12]
  } while ((cp != qp) &&
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 8006ba0:	9a03      	ldr	r2, [sp, #12]
 8006ba2:	9b01      	ldr	r3, [sp, #4]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d005      	beq.n	8006bb4 <ch_sch_prio_insert.lto_priv.0+0x24>
 8006ba8:	9b03      	ldr	r3, [sp, #12]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	9b00      	ldr	r3, [sp, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
  } while ((cp != qp) &&
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d2f2      	bcs.n	8006b9a <ch_sch_prio_insert.lto_priv.0+0xa>
  tp->next       = cp;
 8006bb4:	9b00      	ldr	r3, [sp, #0]
 8006bb6:	9a03      	ldr	r2, [sp, #12]
 8006bb8:	601a      	str	r2, [r3, #0]
  tp->prev       = cp->prev;
 8006bba:	9b03      	ldr	r3, [sp, #12]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	9b00      	ldr	r3, [sp, #0]
 8006bc0:	605a      	str	r2, [r3, #4]
  tp->prev->next = tp;
 8006bc2:	9b00      	ldr	r3, [sp, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	9a00      	ldr	r2, [sp, #0]
 8006bc8:	601a      	str	r2, [r3, #0]
  cp->prev       = tp;
 8006bca:	9b03      	ldr	r3, [sp, #12]
 8006bcc:	9a00      	ldr	r2, [sp, #0]
 8006bce:	605a      	str	r2, [r3, #4]
}
 8006bd0:	b004      	add	sp, #16
 8006bd2:	4770      	bx	lr
	...

08006be0 <chThdGetSelfX.lto_priv.2>:
  return __sch_get_currthread();
 8006be0:	4b01      	ldr	r3, [pc, #4]	; (8006be8 <chThdGetSelfX.lto_priv.2+0x8>)
 8006be2:	68db      	ldr	r3, [r3, #12]
}
 8006be4:	0018      	movs	r0, r3
 8006be6:	4770      	bx	lr
 8006be8:	20000a28 	.word	0x20000a28
 8006bec:	00000000 	.word	0x00000000

08006bf0 <chMtxQueueNotEmptyS>:
 * @param[out] mp       pointer to a @p mutex_t structure
 * @return              The mutex queue status.
 *
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {
 8006bf0:	b500      	push	{lr}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	9001      	str	r0, [sp, #4]

  chDbgCheckClassS();
 8006bf6:	f7fe fa93 	bl	8005120 <chDbgCheckClassS>

  return ch_queue_notempty(&mp->queue);
 8006bfa:	9b01      	ldr	r3, [sp, #4]
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	f7ff ff4f 	bl	8006aa0 <ch_queue_notempty.lto_priv.2>
 8006c02:	0003      	movs	r3, r0
}
 8006c04:	0018      	movs	r0, r3
 8006c06:	b003      	add	sp, #12
 8006c08:	bd00      	pop	{pc}
 8006c0a:	46c0      	nop			; (mov r8, r8)
 8006c0c:	0000      	movs	r0, r0
	...

08006c10 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 8006c10:	b500      	push	{lr}
 8006c12:	b083      	sub	sp, #12
 8006c14:	9001      	str	r0, [sp, #4]

  chDbgCheck(mp != NULL);
 8006c16:	9b01      	ldr	r3, [sp, #4]
 8006c18:	425a      	negs	r2, r3
 8006c1a:	4153      	adcs	r3, r2
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <chMtxObjectInit+0x1a>
 8006c22:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <chMtxObjectInit+0x2c>)
 8006c24:	0018      	movs	r0, r3
 8006c26:	f7fe f8f3 	bl	8004e10 <chSysHalt>

  ch_queue_init(&mp->queue);
 8006c2a:	9b01      	ldr	r3, [sp, #4]
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	f7ff ff27 	bl	8006a80 <ch_queue_init.lto_priv.3>
  mp->owner = NULL;
 8006c32:	9b01      	ldr	r3, [sp, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 8006c38:	b003      	add	sp, #12
 8006c3a:	bd00      	pop	{pc}
 8006c3c:	0800b4cc 	.word	0x0800b4cc

08006c40 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8006c40:	b500      	push	{lr}
 8006c42:	b083      	sub	sp, #12
 8006c44:	9001      	str	r0, [sp, #4]

  chSysLock();
 8006c46:	f7ff ff73 	bl	8006b30 <chSysLock.lto_priv.8>
  chMtxLockS(mp);
 8006c4a:	9b01      	ldr	r3, [sp, #4]
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f000 f807 	bl	8006c60 <chMtxLockS>
  chSysUnlock();
 8006c52:	f7ff ff75 	bl	8006b40 <chSysUnlock.lto_priv.8>
}
 8006c56:	b003      	add	sp, #12
 8006c58:	bd00      	pop	{pc}
 8006c5a:	46c0      	nop			; (mov r8, r8)
 8006c5c:	0000      	movs	r0, r0
	...

08006c60 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8006c60:	b510      	push	{r4, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 8006c66:	f7ff ffbb 	bl	8006be0 <chThdGetSelfX.lto_priv.2>
 8006c6a:	0003      	movs	r3, r0
 8006c6c:	9302      	str	r3, [sp, #8]

  chDbgCheckClassS();
 8006c6e:	f7fe fa57 	bl	8005120 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);
 8006c72:	9b01      	ldr	r3, [sp, #4]
 8006c74:	425a      	negs	r2, r3
 8006c76:	4153      	adcs	r3, r2
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <chMtxLockS+0x26>
 8006c7e:	4b40      	ldr	r3, [pc, #256]	; (8006d80 <chMtxLockS+0x120>)
 8006c80:	0018      	movs	r0, r3
 8006c82:	f7fe f8c5 	bl	8004e10 <chSysHalt>

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8006c86:	9b01      	ldr	r3, [sp, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d100      	bne.n	8006c90 <chMtxLockS+0x30>
 8006c8e:	e06b      	b.n	8006d68 <chMtxLockS+0x108>
    else {
#endif
      /* Priority inheritance protocol; explores the thread-mutex dependencies
         boosting the priority of all the affected threads to equal the
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;
 8006c90:	9b01      	ldr	r3, [sp, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	9303      	str	r3, [sp, #12]
 8006c96:	e038      	b.n	8006d0a <chMtxLockS+0xaa>

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->hdr.pqueue.prio = currtp->hdr.pqueue.prio;
 8006c98:	9b02      	ldr	r3, [sp, #8]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	9b03      	ldr	r3, [sp, #12]
 8006c9e:	609a      	str	r2, [r3, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8006ca0:	9b03      	ldr	r3, [sp, #12]
 8006ca2:	2228      	movs	r2, #40	; 0x28
 8006ca4:	5c9b      	ldrb	r3, [r3, r2]
 8006ca6:	2b07      	cmp	r3, #7
 8006ca8:	d015      	beq.n	8006cd6 <chMtxLockS+0x76>
 8006caa:	dc35      	bgt.n	8006d18 <chMtxLockS+0xb8>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01f      	beq.n	8006cf0 <chMtxLockS+0x90>
 8006cb0:	2b06      	cmp	r3, #6
 8006cb2:	d131      	bne.n	8006d18 <chMtxLockS+0xb8>
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 8006cb4:	9b03      	ldr	r3, [sp, #12]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb8:	001c      	movs	r4, r3
 8006cba:	9b03      	ldr	r3, [sp, #12]
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	f7ff ff17 	bl	8006af0 <ch_queue_dequeue.lto_priv.2>
 8006cc2:	0003      	movs	r3, r0
 8006cc4:	0019      	movs	r1, r3
 8006cc6:	0020      	movs	r0, r4
 8006cc8:	f7ff ff62 	bl	8006b90 <ch_sch_prio_insert.lto_priv.0>
                             ch_queue_dequeue(&tp->hdr.queue));
          tp = tp->u.wtmtxp->owner;
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	9303      	str	r3, [sp, #12]
 8006cd4:	e019      	b.n	8006d0a <chMtxLockS+0xaa>
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 8006cd6:	9b03      	ldr	r3, [sp, #12]
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cda:	001c      	movs	r4, r3
 8006cdc:	9b03      	ldr	r3, [sp, #12]
 8006cde:	0018      	movs	r0, r3
 8006ce0:	f7ff ff06 	bl	8006af0 <ch_queue_dequeue.lto_priv.2>
 8006ce4:	0003      	movs	r3, r0
 8006ce6:	0019      	movs	r1, r3
 8006ce8:	0020      	movs	r0, r4
 8006cea:	f7ff ff51 	bl	8006b90 <ch_sch_prio_insert.lto_priv.0>
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(threadref(ch_queue_dequeue(&tp->hdr.queue)));
 8006cee:	e013      	b.n	8006d18 <chMtxLockS+0xb8>
          tp->state = CH_STATE_CURRENT;
 8006cf0:	9b03      	ldr	r3, [sp, #12]
 8006cf2:	2228      	movs	r2, #40	; 0x28
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	5499      	strb	r1, [r3, r2]
          (void) chSchReadyI(threadref(ch_queue_dequeue(&tp->hdr.queue)));
 8006cf8:	9b03      	ldr	r3, [sp, #12]
 8006cfa:	0018      	movs	r0, r3
 8006cfc:	f7ff fef8 	bl	8006af0 <ch_queue_dequeue.lto_priv.2>
 8006d00:	0003      	movs	r3, r0
 8006d02:	0018      	movs	r0, r3
 8006d04:	f7fe ffac 	bl	8005c60 <chSchReadyI>
 8006d08:	e007      	b.n	8006d1a <chMtxLockS+0xba>
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 8006d0a:	9b03      	ldr	r3, [sp, #12]
 8006d0c:	689a      	ldr	r2, [r3, #8]
 8006d0e:	9b02      	ldr	r3, [sp, #8]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d3c0      	bcc.n	8006c98 <chMtxLockS+0x38>
 8006d16:	e000      	b.n	8006d1a <chMtxLockS+0xba>
          (void) chSchReadyI(threadref(ch_queue_dequeue(&tp->hdr.queue)));
 8006d18:	46c0      	nop			; (mov r8, r8)
        }
        break;
      }

      /* Sleep on the mutex.*/
      ch_sch_prio_insert(&mp->queue, &currtp->hdr.queue);
 8006d1a:	9b01      	ldr	r3, [sp, #4]
 8006d1c:	9a02      	ldr	r2, [sp, #8]
 8006d1e:	0011      	movs	r1, r2
 8006d20:	0018      	movs	r0, r3
 8006d22:	f7ff ff35 	bl	8006b90 <ch_sch_prio_insert.lto_priv.0>
      currtp->u.wtmtxp = mp;
 8006d26:	9b02      	ldr	r3, [sp, #8]
 8006d28:	9a01      	ldr	r2, [sp, #4]
 8006d2a:	62da      	str	r2, [r3, #44]	; 0x2c
      chSchGoSleepS(CH_STATE_WTMTX);
 8006d2c:	2006      	movs	r0, #6
 8006d2e:	f7fe ffb7 	bl	8005ca0 <chSchGoSleepS>

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->owner == currtp, "not owner");
 8006d32:	9b01      	ldr	r3, [sp, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	9a02      	ldr	r2, [sp, #8]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	1e5a      	subs	r2, r3, #1
 8006d3c:	4193      	sbcs	r3, r2
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <chMtxLockS+0xec>
 8006d44:	4b0e      	ldr	r3, [pc, #56]	; (8006d80 <chMtxLockS+0x120>)
 8006d46:	0018      	movs	r0, r3
 8006d48:	f7fe f862 	bl	8004e10 <chSysHalt>
      chDbgAssert(currtp->mtxlist == mp, "not owned");
 8006d4c:	9b02      	ldr	r3, [sp, #8]
 8006d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d50:	9a01      	ldr	r2, [sp, #4]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	1e5a      	subs	r2, r3, #1
 8006d56:	4193      	sbcs	r3, r2
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00e      	beq.n	8006d7c <chMtxLockS+0x11c>
 8006d5e:	4b08      	ldr	r3, [pc, #32]	; (8006d80 <chMtxLockS+0x120>)
 8006d60:	0018      	movs	r0, r3
 8006d62:	f7fe f855 	bl	8004e10 <chSysHalt>
 8006d66:	e009      	b.n	8006d7c <chMtxLockS+0x11c>
    chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = currtp;
 8006d68:	9b01      	ldr	r3, [sp, #4]
 8006d6a:	9a02      	ldr	r2, [sp, #8]
 8006d6c:	609a      	str	r2, [r3, #8]
    mp->next = currtp->mtxlist;
 8006d6e:	9b02      	ldr	r3, [sp, #8]
 8006d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d72:	9b01      	ldr	r3, [sp, #4]
 8006d74:	60da      	str	r2, [r3, #12]
    currtp->mtxlist = mp;
 8006d76:	9b02      	ldr	r3, [sp, #8]
 8006d78:	9a01      	ldr	r2, [sp, #4]
 8006d7a:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8006d7c:	b004      	add	sp, #16
 8006d7e:	bd10      	pop	{r4, pc}
 8006d80:	0800b4e8 	.word	0x0800b4e8
	...

08006d90 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8006d90:	b500      	push	{lr}
 8006d92:	b087      	sub	sp, #28
 8006d94:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 8006d96:	f7ff ff23 	bl	8006be0 <chThdGetSelfX.lto_priv.2>
 8006d9a:	0003      	movs	r3, r0
 8006d9c:	9303      	str	r3, [sp, #12]
  mutex_t *lmp;

  chDbgCheck(mp != NULL);
 8006d9e:	9b01      	ldr	r3, [sp, #4]
 8006da0:	425a      	negs	r2, r3
 8006da2:	4153      	adcs	r3, r2
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <chMtxUnlock+0x22>
 8006daa:	4b3a      	ldr	r3, [pc, #232]	; (8006e94 <chMtxUnlock+0x104>)
 8006dac:	0018      	movs	r0, r3
 8006dae:	f7fe f82f 	bl	8004e10 <chSysHalt>

  chSysLock();
 8006db2:	f7ff febd 	bl	8006b30 <chSysLock.lto_priv.8>

  chDbgAssert(currtp->mtxlist != NULL, "owned mutexes list empty");
 8006db6:	9b03      	ldr	r3, [sp, #12]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	425a      	negs	r2, r3
 8006dbc:	4153      	adcs	r3, r2
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <chMtxUnlock+0x3c>
 8006dc4:	4b33      	ldr	r3, [pc, #204]	; (8006e94 <chMtxUnlock+0x104>)
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	f7fe f822 	bl	8004e10 <chSysHalt>
  chDbgAssert(currtp->mtxlist->owner == currtp, "ownership failure");
 8006dcc:	9b03      	ldr	r3, [sp, #12]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	9a03      	ldr	r2, [sp, #12]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	1e5a      	subs	r2, r3, #1
 8006dd8:	4193      	sbcs	r3, r2
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <chMtxUnlock+0x58>
 8006de0:	4b2c      	ldr	r3, [pc, #176]	; (8006e94 <chMtxUnlock+0x104>)
 8006de2:	0018      	movs	r0, r3
 8006de4:	f7fe f814 	bl	8004e10 <chSysHalt>
  chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->cnt == (cnt_t)0) {
#endif

    chDbgAssert(currtp->mtxlist == mp, "not next in list");
 8006de8:	9b03      	ldr	r3, [sp, #12]
 8006dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dec:	9a01      	ldr	r2, [sp, #4]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	1e5a      	subs	r2, r3, #1
 8006df2:	4193      	sbcs	r3, r2
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <chMtxUnlock+0x72>
 8006dfa:	4b26      	ldr	r3, [pc, #152]	; (8006e94 <chMtxUnlock+0x104>)
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	f7fe f807 	bl	8004e10 <chSysHalt>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    currtp->mtxlist = mp->next;
 8006e02:	9b01      	ldr	r3, [sp, #4]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	9b03      	ldr	r3, [sp, #12]
 8006e08:	641a      	str	r2, [r3, #64]	; 0x40

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8006e0a:	9b01      	ldr	r3, [sp, #4]
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	f7ff feef 	bl	8006bf0 <chMtxQueueNotEmptyS>
 8006e12:	1e03      	subs	r3, r0, #0
 8006e14:	d036      	beq.n	8006e84 <chMtxUnlock+0xf4>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = currtp->realprio;
 8006e16:	9b03      	ldr	r3, [sp, #12]
 8006e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1a:	9304      	str	r3, [sp, #16]
      lmp = currtp->mtxlist;
 8006e1c:	9b03      	ldr	r3, [sp, #12]
 8006e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e20:	9305      	str	r3, [sp, #20]
 8006e22:	e012      	b.n	8006e4a <chMtxUnlock+0xba>
      while (lmp != NULL) {
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8006e24:	9b05      	ldr	r3, [sp, #20]
 8006e26:	0018      	movs	r0, r3
 8006e28:	f7ff fee2 	bl	8006bf0 <chMtxQueueNotEmptyS>
 8006e2c:	1e03      	subs	r3, r0, #0
 8006e2e:	d009      	beq.n	8006e44 <chMtxUnlock+0xb4>
            ((threadref(lmp->queue.next))->hdr.pqueue.prio > newprio)) {
 8006e30:	9b05      	ldr	r3, [sp, #20]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
        if (chMtxQueueNotEmptyS(lmp) &&
 8006e36:	9a04      	ldr	r2, [sp, #16]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d203      	bcs.n	8006e44 <chMtxUnlock+0xb4>
          newprio = (threadref(lmp->queue.next))->hdr.pqueue.prio;
 8006e3c:	9b05      	ldr	r3, [sp, #20]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	9304      	str	r3, [sp, #16]
        }
        lmp = lmp->next;
 8006e44:	9b05      	ldr	r3, [sp, #20]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	9305      	str	r3, [sp, #20]
      while (lmp != NULL) {
 8006e4a:	9b05      	ldr	r3, [sp, #20]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e9      	bne.n	8006e24 <chMtxUnlock+0x94>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      currtp->hdr.pqueue.prio = newprio;
 8006e50:	9b03      	ldr	r3, [sp, #12]
 8006e52:	9a04      	ldr	r2, [sp, #16]
 8006e54:	609a      	str	r2, [r3, #8]
      /* Awakens the highest priority thread waiting for the unlocked mutex and
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = threadref(ch_queue_fifo_remove(&mp->queue));
 8006e56:	9b01      	ldr	r3, [sp, #4]
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f7ff fe31 	bl	8006ac0 <ch_queue_fifo_remove.lto_priv.2>
 8006e5e:	0003      	movs	r3, r0
 8006e60:	9302      	str	r3, [sp, #8]
      mp->owner = tp;
 8006e62:	9b01      	ldr	r3, [sp, #4]
 8006e64:	9a02      	ldr	r2, [sp, #8]
 8006e66:	609a      	str	r2, [r3, #8]
      mp->next = tp->mtxlist;
 8006e68:	9b02      	ldr	r3, [sp, #8]
 8006e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e6c:	9b01      	ldr	r3, [sp, #4]
 8006e6e:	60da      	str	r2, [r3, #12]
      tp->mtxlist = mp;
 8006e70:	9b02      	ldr	r3, [sp, #8]
 8006e72:	9a01      	ldr	r2, [sp, #4]
 8006e74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8006e76:	9b02      	ldr	r3, [sp, #8]
 8006e78:	0018      	movs	r0, r3
 8006e7a:	f7fe fef1 	bl	8005c60 <chSchReadyI>
      chSchRescheduleS();
 8006e7e:	f7fe ffdf 	bl	8005e40 <chSchRescheduleS>
 8006e82:	e002      	b.n	8006e8a <chMtxUnlock+0xfa>
    }
    else {
      mp->owner = NULL;
 8006e84:	9b01      	ldr	r3, [sp, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	609a      	str	r2, [r3, #8]
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
 8006e8a:	f7ff fe59 	bl	8006b40 <chSysUnlock.lto_priv.8>
}
 8006e8e:	b007      	add	sp, #28
 8006e90:	bd00      	pop	{pc}
 8006e92:	46c0      	nop			; (mov r8, r8)
 8006e94:	0800b4f4 	.word	0x0800b4f4
	...

08006ea0 <chEvtObjectInit>:
 *
 * @param[in] esp       pointer to an @p event_source_t structure
 *
 * @init
 */
void chEvtObjectInit(event_source_t *esp) {
 8006ea0:	b500      	push	{lr}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	9001      	str	r0, [sp, #4]

  chDbgCheck(esp != NULL);
 8006ea6:	9b01      	ldr	r3, [sp, #4]
 8006ea8:	425a      	negs	r2, r3
 8006eaa:	4153      	adcs	r3, r2
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <chEvtObjectInit+0x1a>
 8006eb2:	4b04      	ldr	r3, [pc, #16]	; (8006ec4 <chEvtObjectInit+0x24>)
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	f7fd ffab 	bl	8004e10 <chSysHalt>

  esp->next = (event_listener_t *)esp;
 8006eba:	9b01      	ldr	r3, [sp, #4]
 8006ebc:	9a01      	ldr	r2, [sp, #4]
 8006ebe:	601a      	str	r2, [r3, #0]
}
 8006ec0:	b003      	add	sp, #12
 8006ec2:	bd00      	pop	{pc}
 8006ec4:	0800b500 	.word	0x0800b500
	...

08006ed0 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 8006ed0:	b500      	push	{lr}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	9001      	str	r0, [sp, #4]
 8006ed6:	9100      	str	r1, [sp, #0]

  chDbgCheckClassI();
 8006ed8:	f7fe f902 	bl	80050e0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8006edc:	9b01      	ldr	r3, [sp, #4]
 8006ede:	425a      	negs	r2, r3
 8006ee0:	4153      	adcs	r3, r2
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <chEvtSignalI+0x20>
 8006ee8:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <chEvtSignalI+0x70>)
 8006eea:	0018      	movs	r0, r3
 8006eec:	f7fd ff90 	bl	8004e10 <chSysHalt>

  tp->epending |= events;
 8006ef0:	9b01      	ldr	r3, [sp, #4]
 8006ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ef4:	9b00      	ldr	r3, [sp, #0]
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	9b01      	ldr	r3, [sp, #4]
 8006efa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8006efc:	9b01      	ldr	r3, [sp, #4]
 8006efe:	2228      	movs	r2, #40	; 0x28
 8006f00:	5c9b      	ldrb	r3, [r3, r2]
 8006f02:	2b0a      	cmp	r3, #10
 8006f04:	d105      	bne.n	8006f12 <chEvtSignalI+0x42>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8006f06:	9b01      	ldr	r3, [sp, #4]
 8006f08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f0a:	9b01      	ldr	r3, [sp, #4]
 8006f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0e:	4013      	ands	r3, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 8006f10:	d10d      	bne.n	8006f2e <chEvtSignalI+0x5e>
      ((tp->state == CH_STATE_WTANDEVT) &&
 8006f12:	9b01      	ldr	r3, [sp, #4]
 8006f14:	2228      	movs	r2, #40	; 0x28
 8006f16:	5c9b      	ldrb	r3, [r3, r2]
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8006f18:	2b0b      	cmp	r3, #11
 8006f1a:	d10f      	bne.n	8006f3c <chEvtSignalI+0x6c>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8006f1c:	9b01      	ldr	r3, [sp, #4]
 8006f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f20:	9b01      	ldr	r3, [sp, #4]
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	401a      	ands	r2, r3
 8006f26:	9b01      	ldr	r3, [sp, #4]
 8006f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((tp->state == CH_STATE_WTANDEVT) &&
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d106      	bne.n	8006f3c <chEvtSignalI+0x6c>
    tp->u.rdymsg = MSG_OK;
 8006f2e:	9b01      	ldr	r3, [sp, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	62da      	str	r2, [r3, #44]	; 0x2c
    (void) chSchReadyI(tp);
 8006f34:	9b01      	ldr	r3, [sp, #4]
 8006f36:	0018      	movs	r0, r3
 8006f38:	f7fe fe92 	bl	8005c60 <chSchReadyI>
  }
}
 8006f3c:	b003      	add	sp, #12
 8006f3e:	bd00      	pop	{pc}
 8006f40:	0800b510 	.word	0x0800b510
	...

08006f50 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to an @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8006f50:	b500      	push	{lr}
 8006f52:	b085      	sub	sp, #20
 8006f54:	9001      	str	r0, [sp, #4]
 8006f56:	9100      	str	r1, [sp, #0]
  event_listener_t *elp;

  chDbgCheckClassI();
 8006f58:	f7fe f8c2 	bl	80050e0 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);
 8006f5c:	9b01      	ldr	r3, [sp, #4]
 8006f5e:	425a      	negs	r2, r3
 8006f60:	4153      	adcs	r3, r2
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d003      	beq.n	8006f70 <chEvtBroadcastFlagsI+0x20>
 8006f68:	4b13      	ldr	r3, [pc, #76]	; (8006fb8 <chEvtBroadcastFlagsI+0x68>)
 8006f6a:	0018      	movs	r0, r3
 8006f6c:	f7fd ff50 	bl	8004e10 <chSysHalt>

  elp = esp->next;
 8006f70:	9b01      	ldr	r3, [sp, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	9303      	str	r3, [sp, #12]
 8006f76:	e018      	b.n	8006faa <chEvtBroadcastFlagsI+0x5a>
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
 8006f78:	9b03      	ldr	r3, [sp, #12]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	9b00      	ldr	r3, [sp, #0]
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	9b03      	ldr	r3, [sp, #12]
 8006f82:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8006f84:	9b00      	ldr	r3, [sp, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d004      	beq.n	8006f94 <chEvtBroadcastFlagsI+0x44>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8006f8a:	9b03      	ldr	r3, [sp, #12]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	9a00      	ldr	r2, [sp, #0]
 8006f90:	4013      	ands	r3, r2
    if ((flags == (eventflags_t)0) ||
 8006f92:	d007      	beq.n	8006fa4 <chEvtBroadcastFlagsI+0x54>
      chEvtSignalI(elp->listener, elp->events);
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	9b03      	ldr	r3, [sp, #12]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	0019      	movs	r1, r3
 8006f9e:	0010      	movs	r0, r2
 8006fa0:	f7ff ff96 	bl	8006ed0 <chEvtSignalI>
    }
    elp = elp->next;
 8006fa4:	9b03      	ldr	r3, [sp, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	9303      	str	r3, [sp, #12]
  while (elp != (event_listener_t *)esp) {
 8006faa:	9a03      	ldr	r2, [sp, #12]
 8006fac:	9b01      	ldr	r3, [sp, #4]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d1e2      	bne.n	8006f78 <chEvtBroadcastFlagsI+0x28>
  }
}
 8006fb2:	b005      	add	sp, #20
 8006fb4:	bd00      	pop	{pc}
 8006fb6:	46c0      	nop			; (mov r8, r8)
 8006fb8:	0800b520 	.word	0x0800b520
 8006fbc:	00000000 	.word	0x00000000

08006fc0 <port_lock.lto_priv.17>:
  __ASM volatile ("cpsid i" : : : "memory");
 8006fc0:	b672      	cpsid	i
}
 8006fc2:	4770      	bx	lr
	...

08006fd0 <port_unlock.lto_priv.17>:
  __ASM volatile ("cpsie i" : : : "memory");
 8006fd0:	b662      	cpsie	i
}
 8006fd2:	4770      	bx	lr
	...

08006fe0 <chSysLock.lto_priv.12>:
static inline void chSysLock(void) {
 8006fe0:	b510      	push	{r4, lr}
  port_lock();
 8006fe2:	f7ff ffed 	bl	8006fc0 <port_lock.lto_priv.17>
  __dbg_check_lock();
 8006fe6:	f7fd ff83 	bl	8004ef0 <__dbg_check_lock>
}
 8006fea:	bd10      	pop	{r4, pc}
 8006fec:	0000      	movs	r0, r0
	...

08006ff0 <chSysUnlock.lto_priv.12>:
static inline void chSysUnlock(void) {
 8006ff0:	b510      	push	{r4, lr}
  __dbg_check_unlock();
 8006ff2:	f7fd ffa5 	bl	8004f40 <__dbg_check_unlock>
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
 8006ff6:	4b0e      	ldr	r3, [pc, #56]	; (8007030 <chSysUnlock.lto_priv.12+0x40>)
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	4b0d      	ldr	r3, [pc, #52]	; (8007030 <chSysUnlock.lto_priv.12+0x40>)
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	1e5a      	subs	r2, r3, #1
 8007000:	4193      	sbcs	r3, r2
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00f      	beq.n	8007028 <chSysUnlock.lto_priv.12+0x38>
 8007008:	4b09      	ldr	r3, [pc, #36]	; (8007030 <chSysUnlock.lto_priv.12+0x40>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	689a      	ldr	r2, [r3, #8]
 800700e:	4b08      	ldr	r3, [pc, #32]	; (8007030 <chSysUnlock.lto_priv.12+0x40>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	429a      	cmp	r2, r3
 8007016:	419b      	sbcs	r3, r3
 8007018:	425b      	negs	r3, r3
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	d003      	beq.n	8007028 <chSysUnlock.lto_priv.12+0x38>
 8007020:	4b04      	ldr	r3, [pc, #16]	; (8007034 <chSysUnlock.lto_priv.12+0x44>)
 8007022:	0018      	movs	r0, r3
 8007024:	f7fd fef4 	bl	8004e10 <chSysHalt>
  port_unlock();
 8007028:	f7ff ffd2 	bl	8006fd0 <port_unlock.lto_priv.17>
}
 800702c:	bd10      	pop	{r4, pc}
 800702e:	46c0      	nop			; (mov r8, r8)
 8007030:	20000a28 	.word	0x20000a28
 8007034:	0800b538 	.word	0x0800b538
	...

08007040 <chThdCreateFromHeap>:
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              const char *name, tprio_t prio,
                              tfunc_t pf, void *arg) {
 8007040:	b500      	push	{lr}
 8007042:	b08f      	sub	sp, #60	; 0x3c
 8007044:	9003      	str	r0, [sp, #12]
 8007046:	9102      	str	r1, [sp, #8]
 8007048:	9201      	str	r2, [sp, #4]
 800704a:	9300      	str	r3, [sp, #0]
  thread_t *tp;
  void *wbase, *wend;

  wbase = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 800704c:	9902      	ldr	r1, [sp, #8]
 800704e:	9b03      	ldr	r3, [sp, #12]
 8007050:	2208      	movs	r2, #8
 8007052:	0018      	movs	r0, r3
 8007054:	f000 f914 	bl	8007280 <chHeapAllocAligned>
 8007058:	0003      	movs	r3, r0
 800705a:	930d      	str	r3, [sp, #52]	; 0x34
  if (wbase == NULL) {
 800705c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <chThdCreateFromHeap+0x26>
    return NULL;
 8007062:	2300      	movs	r3, #0
 8007064:	e029      	b.n	80070ba <chThdCreateFromHeap+0x7a>
  }
  wend = (void *)((uint8_t *)wbase + size);
 8007066:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007068:	9b02      	ldr	r3, [sp, #8]
 800706a:	18d3      	adds	r3, r2, r3
 800706c:	930c      	str	r3, [sp, #48]	; 0x30

  thread_descriptor_t td = THD_DESCRIPTOR(name, wbase, wend, prio, pf, arg);
 800706e:	ab05      	add	r3, sp, #20
 8007070:	9a01      	ldr	r2, [sp, #4]
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	ab05      	add	r3, sp, #20
 8007076:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007078:	605a      	str	r2, [r3, #4]
 800707a:	ab05      	add	r3, sp, #20
 800707c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800707e:	609a      	str	r2, [r3, #8]
 8007080:	ab05      	add	r3, sp, #20
 8007082:	9a00      	ldr	r2, [sp, #0]
 8007084:	60da      	str	r2, [r3, #12]
 8007086:	ab05      	add	r3, sp, #20
 8007088:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800708a:	611a      	str	r2, [r3, #16]
 800708c:	ab05      	add	r3, sp, #20
 800708e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007090:	615a      	str	r2, [r3, #20]

#if CH_DBG_FILL_THREADS == TRUE
  __thd_stackfill((uint8_t *)wbase, (uint8_t *)wend);
#endif

  chSysLock();
 8007092:	f7ff ffa5 	bl	8006fe0 <chSysLock.lto_priv.12>
  tp = chThdCreateSuspendedI(&td);
 8007096:	ab05      	add	r3, sp, #20
 8007098:	0018      	movs	r0, r3
 800709a:	f7ff f9d1 	bl	8006440 <chThdCreateSuspendedI>
 800709e:	0003      	movs	r3, r0
 80070a0:	930b      	str	r3, [sp, #44]	; 0x2c
  tp->flags = CH_FLAG_MODE_HEAP;
 80070a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070a4:	2229      	movs	r2, #41	; 0x29
 80070a6:	2101      	movs	r1, #1
 80070a8:	5499      	strb	r1, [r3, r2]
  chSchWakeupS(tp, MSG_OK);
 80070aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ac:	2100      	movs	r1, #0
 80070ae:	0018      	movs	r0, r3
 80070b0:	f7fe fe76 	bl	8005da0 <chSchWakeupS>
  chSysUnlock();
 80070b4:	f7ff ff9c 	bl	8006ff0 <chSysUnlock.lto_priv.12>

  return tp;
 80070b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
 80070ba:	0018      	movs	r0, r3
 80070bc:	b00f      	add	sp, #60	; 0x3c
 80070be:	bd00      	pop	{pc}

080070c0 <port_lock.lto_priv.19>:
  __ASM volatile ("cpsid i" : : : "memory");
 80070c0:	b672      	cpsid	i
}
 80070c2:	4770      	bx	lr
	...

080070d0 <port_unlock.lto_priv.19>:
  __ASM volatile ("cpsie i" : : : "memory");
 80070d0:	b662      	cpsie	i
}
 80070d2:	4770      	bx	lr
	...

080070e0 <chSysLock.lto_priv.14>:
static inline void chSysLock(void) {
 80070e0:	b510      	push	{r4, lr}
  port_lock();
 80070e2:	f7ff ffed 	bl	80070c0 <port_lock.lto_priv.19>
  __dbg_check_lock();
 80070e6:	f7fd ff03 	bl	8004ef0 <__dbg_check_lock>
}
 80070ea:	bd10      	pop	{r4, pc}
 80070ec:	0000      	movs	r0, r0
	...

080070f0 <chSysUnlock.lto_priv.14>:
static inline void chSysUnlock(void) {
 80070f0:	b510      	push	{r4, lr}
  __dbg_check_unlock();
 80070f2:	f7fd ff25 	bl	8004f40 <__dbg_check_unlock>
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
 80070f6:	4b0e      	ldr	r3, [pc, #56]	; (8007130 <chSysUnlock.lto_priv.14+0x40>)
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	4b0d      	ldr	r3, [pc, #52]	; (8007130 <chSysUnlock.lto_priv.14+0x40>)
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	1e5a      	subs	r2, r3, #1
 8007100:	4193      	sbcs	r3, r2
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00f      	beq.n	8007128 <chSysUnlock.lto_priv.14+0x38>
 8007108:	4b09      	ldr	r3, [pc, #36]	; (8007130 <chSysUnlock.lto_priv.14+0x40>)
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	689a      	ldr	r2, [r3, #8]
 800710e:	4b08      	ldr	r3, [pc, #32]	; (8007130 <chSysUnlock.lto_priv.14+0x40>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	429a      	cmp	r2, r3
 8007116:	419b      	sbcs	r3, r3
 8007118:	425b      	negs	r3, r3
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <chSysUnlock.lto_priv.14+0x38>
 8007120:	4b04      	ldr	r3, [pc, #16]	; (8007134 <chSysUnlock.lto_priv.14+0x44>)
 8007122:	0018      	movs	r0, r3
 8007124:	f7fd fe74 	bl	8004e10 <chSysHalt>
  port_unlock();
 8007128:	f7ff ffd2 	bl	80070d0 <port_unlock.lto_priv.19>
}
 800712c:	bd10      	pop	{r4, pc}
 800712e:	46c0      	nop			; (mov r8, r8)
 8007130:	20000a28 	.word	0x20000a28
 8007134:	0800b558 	.word	0x0800b558
	...

08007140 <__core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.basemem = __heap_base__;
 8007140:	4b03      	ldr	r3, [pc, #12]	; (8007150 <__core_init+0x10>)
 8007142:	4a04      	ldr	r2, [pc, #16]	; (8007154 <__core_init+0x14>)
 8007144:	601a      	str	r2, [r3, #0]
  ch_memcore.topmem  = __heap_end__;
 8007146:	4b02      	ldr	r3, [pc, #8]	; (8007150 <__core_init+0x10>)
 8007148:	4a03      	ldr	r2, [pc, #12]	; (8007158 <__core_init+0x18>)
 800714a:	605a      	str	r2, [r3, #4]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.basemem = &static_heap[0];
  ch_memcore.topmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 800714c:	4770      	bx	lr
 800714e:	46c0      	nop			; (mov r8, r8)
 8007150:	20000ba0 	.word	0x20000ba0
 8007154:	200012e0 	.word	0x200012e0
 8007158:	20002000 	.word	0x20002000
 800715c:	00000000 	.word	0x00000000

08007160 <chCoreAllocFromTopI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocFromTopI(size_t size, unsigned align, size_t offset) {
 8007160:	b500      	push	{lr}
 8007162:	b087      	sub	sp, #28
 8007164:	9003      	str	r0, [sp, #12]
 8007166:	9102      	str	r1, [sp, #8]
 8007168:	9201      	str	r2, [sp, #4]
  uint8_t *p, *prev;

  chDbgCheckClassI();
 800716a:	f7fd ffb9 	bl	80050e0 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 800716e:	9b02      	ldr	r3, [sp, #8]
 8007170:	425a      	negs	r2, r3
 8007172:	4153      	adcs	r3, r2
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d108      	bne.n	800718c <chCoreAllocFromTopI+0x2c>
 800717a:	9b02      	ldr	r3, [sp, #8]
 800717c:	3b01      	subs	r3, #1
 800717e:	9a02      	ldr	r2, [sp, #8]
 8007180:	4013      	ands	r3, r2
 8007182:	1e5a      	subs	r2, r3, #1
 8007184:	4193      	sbcs	r3, r2
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <chCoreAllocFromTopI+0x34>
 800718c:	4b12      	ldr	r3, [pc, #72]	; (80071d8 <chCoreAllocFromTopI+0x78>)
 800718e:	0018      	movs	r0, r3
 8007190:	f7fd fe3e 	bl	8004e10 <chSysHalt>

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8007194:	4b11      	ldr	r3, [pc, #68]	; (80071dc <chCoreAllocFromTopI+0x7c>)
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	9b03      	ldr	r3, [sp, #12]
 800719a:	425b      	negs	r3, r3
 800719c:	18d3      	adds	r3, r2, r3
 800719e:	001a      	movs	r2, r3
 80071a0:	9b02      	ldr	r3, [sp, #8]
 80071a2:	425b      	negs	r3, r3
 80071a4:	4013      	ands	r3, r2
 80071a6:	9305      	str	r3, [sp, #20]
  prev = p - offset;
 80071a8:	9b01      	ldr	r3, [sp, #4]
 80071aa:	425b      	negs	r3, r3
 80071ac:	9a05      	ldr	r2, [sp, #20]
 80071ae:	18d3      	adds	r3, r2, r3
 80071b0:	9304      	str	r3, [sp, #16]

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80071b2:	4b0a      	ldr	r3, [pc, #40]	; (80071dc <chCoreAllocFromTopI+0x7c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	9a04      	ldr	r2, [sp, #16]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d304      	bcc.n	80071c6 <chCoreAllocFromTopI+0x66>
 80071bc:	4b07      	ldr	r3, [pc, #28]	; (80071dc <chCoreAllocFromTopI+0x7c>)
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	9a04      	ldr	r2, [sp, #16]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d901      	bls.n	80071ca <chCoreAllocFromTopI+0x6a>
    return NULL;
 80071c6:	2300      	movs	r3, #0
 80071c8:	e003      	b.n	80071d2 <chCoreAllocFromTopI+0x72>
  }

  ch_memcore.topmem = prev;
 80071ca:	4b04      	ldr	r3, [pc, #16]	; (80071dc <chCoreAllocFromTopI+0x7c>)
 80071cc:	9a04      	ldr	r2, [sp, #16]
 80071ce:	605a      	str	r2, [r3, #4]

  return p;
 80071d0:	9b05      	ldr	r3, [sp, #20]
}
 80071d2:	0018      	movs	r0, r3
 80071d4:	b007      	add	sp, #28
 80071d6:	bd00      	pop	{pc}
 80071d8:	0800b544 	.word	0x0800b544
 80071dc:	20000ba0 	.word	0x20000ba0

080071e0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80071e0:	b500      	push	{lr}
 80071e2:	b087      	sub	sp, #28
 80071e4:	9003      	str	r0, [sp, #12]
 80071e6:	9102      	str	r1, [sp, #8]
 80071e8:	9201      	str	r2, [sp, #4]
  void *p;

  chSysLock();
 80071ea:	f7ff ff79 	bl	80070e0 <chSysLock.lto_priv.14>
  p = chCoreAllocFromTopI(size, align, offset);
 80071ee:	9a01      	ldr	r2, [sp, #4]
 80071f0:	9902      	ldr	r1, [sp, #8]
 80071f2:	9b03      	ldr	r3, [sp, #12]
 80071f4:	0018      	movs	r0, r3
 80071f6:	f7ff ffb3 	bl	8007160 <chCoreAllocFromTopI>
 80071fa:	0003      	movs	r3, r0
 80071fc:	9305      	str	r3, [sp, #20]
  chSysUnlock();
 80071fe:	f7ff ff77 	bl	80070f0 <chSysUnlock.lto_priv.14>

  return p;
 8007202:	9b05      	ldr	r3, [sp, #20]
}
 8007204:	0018      	movs	r0, r3
 8007206:	b007      	add	sp, #28
 8007208:	bd00      	pop	{pc}
 800720a:	46c0      	nop			; (mov r8, r8)
 800720c:	0000      	movs	r0, r0
	...

08007210 <chCoreGetStatusX>:
 *
 * @param[in] map       Memory area representing available core space.
 *
 * @xclass
 */
void chCoreGetStatusX(memory_area_t *map) {
 8007210:	b082      	sub	sp, #8
 8007212:	9001      	str	r0, [sp, #4]

  map->base = ch_memcore.basemem;
 8007214:	4b06      	ldr	r3, [pc, #24]	; (8007230 <chCoreGetStatusX+0x20>)
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	9b01      	ldr	r3, [sp, #4]
 800721a:	601a      	str	r2, [r3, #0]
  /*lint -save -e9033 [10.8] The cast is safe.*/
  map->size = (size_t)(ch_memcore.topmem - ch_memcore.basemem);
 800721c:	4b04      	ldr	r3, [pc, #16]	; (8007230 <chCoreGetStatusX+0x20>)
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	4b03      	ldr	r3, [pc, #12]	; (8007230 <chCoreGetStatusX+0x20>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	001a      	movs	r2, r3
 8007228:	9b01      	ldr	r3, [sp, #4]
 800722a:	605a      	str	r2, [r3, #4]
  /*lint -restore*/
}
 800722c:	b002      	add	sp, #8
 800722e:	4770      	bx	lr
 8007230:	20000ba0 	.word	0x20000ba0
	...

08007240 <__heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void __heap_init(void) {
 8007240:	b510      	push	{r4, lr}

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8007242:	4b09      	ldr	r3, [pc, #36]	; (8007268 <__heap_init+0x28>)
 8007244:	4a09      	ldr	r2, [pc, #36]	; (800726c <__heap_init+0x2c>)
 8007246:	601a      	str	r2, [r3, #0]
  chCoreGetStatusX(&default_heap.area);
 8007248:	4b09      	ldr	r3, [pc, #36]	; (8007270 <__heap_init+0x30>)
 800724a:	0018      	movs	r0, r3
 800724c:	f7ff ffe0 	bl	8007210 <chCoreGetStatusX>
  H_FREE_NEXT(&default_heap.header) = NULL;
 8007250:	4b05      	ldr	r3, [pc, #20]	; (8007268 <__heap_init+0x28>)
 8007252:	2200      	movs	r2, #0
 8007254:	60da      	str	r2, [r3, #12]
  H_FREE_PAGES(&default_heap.header) = 0;
 8007256:	4b04      	ldr	r3, [pc, #16]	; (8007268 <__heap_init+0x28>)
 8007258:	2200      	movs	r2, #0
 800725a:	611a      	str	r2, [r3, #16]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 800725c:	4b05      	ldr	r3, [pc, #20]	; (8007274 <__heap_init+0x34>)
 800725e:	0018      	movs	r0, r3
 8007260:	f7ff fcd6 	bl	8006c10 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
 8007264:	bd10      	pop	{r4, pc}
 8007266:	46c0      	nop			; (mov r8, r8)
 8007268:	20000ba8 	.word	0x20000ba8
 800726c:	080071e1 	.word	0x080071e1
 8007270:	20000bac 	.word	0x20000bac
 8007274:	20000bbc 	.word	0x20000bbc
	...

08007280 <chHeapAllocAligned>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8007280:	b500      	push	{lr}
 8007282:	b08d      	sub	sp, #52	; 0x34
 8007284:	9003      	str	r0, [sp, #12]
 8007286:	9102      	str	r1, [sp, #8]
 8007288:	9201      	str	r2, [sp, #4]
  heap_header_t *qp, *hp, *ahp;
  size_t pages;

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));
 800728a:	9b02      	ldr	r3, [sp, #8]
 800728c:	425a      	negs	r2, r3
 800728e:	4153      	adcs	r3, r2
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d113      	bne.n	80072be <chHeapAllocAligned+0x3e>
 8007296:	9b01      	ldr	r3, [sp, #4]
 8007298:	425a      	negs	r2, r3
 800729a:	4153      	adcs	r3, r2
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d108      	bne.n	80072b4 <chHeapAllocAligned+0x34>
 80072a2:	9b01      	ldr	r3, [sp, #4]
 80072a4:	3b01      	subs	r3, #1
 80072a6:	9a01      	ldr	r2, [sp, #4]
 80072a8:	4013      	ands	r3, r2
 80072aa:	1e5a      	subs	r2, r3, #1
 80072ac:	4193      	sbcs	r3, r2
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <chHeapAllocAligned+0x38>
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <chHeapAllocAligned+0x3a>
 80072b8:	2300      	movs	r3, #0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <chHeapAllocAligned+0x46>
 80072be:	4b66      	ldr	r3, [pc, #408]	; (8007458 <chHeapAllocAligned+0x1d8>)
 80072c0:	0018      	movs	r0, r3
 80072c2:	f7fd fda5 	bl	8004e10 <chSysHalt>

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
 80072c6:	9b03      	ldr	r3, [sp, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <chHeapAllocAligned+0x50>
    heapp = &default_heap;
 80072cc:	4b63      	ldr	r3, [pc, #396]	; (800745c <chHeapAllocAligned+0x1dc>)
 80072ce:	9303      	str	r3, [sp, #12]
  }

  /* Minimum alignment is constrained by the heap header structure size.*/
  if (align < CH_HEAP_ALIGNMENT) {
 80072d0:	9b01      	ldr	r3, [sp, #4]
 80072d2:	2b07      	cmp	r3, #7
 80072d4:	d801      	bhi.n	80072da <chHeapAllocAligned+0x5a>
    align = CH_HEAP_ALIGNMENT;
 80072d6:	2308      	movs	r3, #8
 80072d8:	9301      	str	r3, [sp, #4]
  }

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80072da:	9b02      	ldr	r3, [sp, #8]
 80072dc:	3307      	adds	r3, #7
 80072de:	08db      	lsrs	r3, r3, #3
 80072e0:	9309      	str	r3, [sp, #36]	; 0x24

  /* Taking heap mutex.*/
  H_LOCK(heapp);
 80072e2:	9b03      	ldr	r3, [sp, #12]
 80072e4:	3314      	adds	r3, #20
 80072e6:	0018      	movs	r0, r3
 80072e8:	f7ff fcaa 	bl	8006c40 <chMtxLock>

  /* Start of the free blocks list.*/
  qp = &heapp->header;
 80072ec:	9b03      	ldr	r3, [sp, #12]
 80072ee:	330c      	adds	r3, #12
 80072f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80072f2:	e087      	b.n	8007404 <chHeapAllocAligned+0x184>
  while (H_FREE_NEXT(qp) != NULL) {

    /* Next free block.*/
    hp = H_FREE_NEXT(qp);
 80072f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	930a      	str	r3, [sp, #40]	; 0x28

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 80072fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072fc:	9b01      	ldr	r3, [sp, #4]
 80072fe:	18d3      	adds	r3, r2, r3
 8007300:	3307      	adds	r3, #7
 8007302:	9a01      	ldr	r2, [sp, #4]
 8007304:	4252      	negs	r2, r2
 8007306:	4013      	ands	r3, r2
 8007308:	3b08      	subs	r3, #8
 800730a:	9308      	str	r3, [sp, #32]

    if ((ahp < H_FREE_LIMIT(hp)) && (pages <= NPAGES(H_FREE_LIMIT(hp), ahp + 1U))) {
 800730c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	3301      	adds	r3, #1
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007316:	18d3      	adds	r3, r2, r3
 8007318:	9a08      	ldr	r2, [sp, #32]
 800731a:	429a      	cmp	r2, r3
 800731c:	d270      	bcs.n	8007400 <chHeapAllocAligned+0x180>
 800731e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	3301      	adds	r3, #1
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007328:	18d2      	adds	r2, r2, r3
 800732a:	9b08      	ldr	r3, [sp, #32]
 800732c:	3308      	adds	r3, #8
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	10db      	asrs	r3, r3, #3
 8007332:	001a      	movs	r2, r3
 8007334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007336:	4293      	cmp	r3, r2
 8007338:	d862      	bhi.n	8007400 <chHeapAllocAligned+0x180>
      /* The block is large enough to contain a correctly aligned area
         of sufficient size.*/

      if (ahp > hp) {
 800733a:	9a08      	ldr	r2, [sp, #32]
 800733c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800733e:	429a      	cmp	r2, r3
 8007340:	d92c      	bls.n	800739c <chHeapAllocAligned+0x11c>
        /* The block is not properly aligned, must split it.*/
        size_t bpages;

        bpages = NPAGES(H_FREE_LIMIT(hp), H_BLOCK(ahp));
 8007342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	3301      	adds	r3, #1
 8007348:	00db      	lsls	r3, r3, #3
 800734a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800734c:	18d2      	adds	r2, r2, r3
 800734e:	9b08      	ldr	r3, [sp, #32]
 8007350:	3308      	adds	r3, #8
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	10db      	asrs	r3, r3, #3
 8007356:	9306      	str	r3, [sp, #24]
        H_FREE_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8007358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800735a:	3308      	adds	r3, #8
 800735c:	9a08      	ldr	r2, [sp, #32]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	10db      	asrs	r3, r3, #3
 8007362:	001a      	movs	r2, r3
 8007364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007366:	605a      	str	r2, [r3, #4]
        if (bpages > pages) {
 8007368:	9a06      	ldr	r2, [sp, #24]
 800736a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800736c:	429a      	cmp	r2, r3
 800736e:	d912      	bls.n	8007396 <chHeapAllocAligned+0x116>
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          /* Creating the excess block.*/
          fp = H_BLOCK(ahp) + pages;
 8007370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007372:	3301      	adds	r3, #1
 8007374:	00db      	lsls	r3, r3, #3
 8007376:	9a08      	ldr	r2, [sp, #32]
 8007378:	18d3      	adds	r3, r2, r3
 800737a:	9305      	str	r3, [sp, #20]
          H_FREE_PAGES(fp) = (bpages - pages) - 1U;
 800737c:	9a06      	ldr	r2, [sp, #24]
 800737e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	1e5a      	subs	r2, r3, #1
 8007384:	9b05      	ldr	r3, [sp, #20]
 8007386:	605a      	str	r2, [r3, #4]

          /* Linking the excess block.*/
          H_FREE_NEXT(fp) = H_FREE_NEXT(hp);
 8007388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	9b05      	ldr	r3, [sp, #20]
 800738e:	601a      	str	r2, [r3, #0]
          H_FREE_NEXT(hp) = fp;
 8007390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007392:	9a05      	ldr	r2, [sp, #20]
 8007394:	601a      	str	r2, [r3, #0]
        }

        hp = ahp;
 8007396:	9b08      	ldr	r3, [sp, #32]
 8007398:	930a      	str	r3, [sp, #40]	; 0x28
 800739a:	e023      	b.n	80073e4 <chHeapAllocAligned+0x164>
      }
      else {
        /* The block is already properly aligned.*/

        if (H_FREE_PAGES(hp) == pages) {
 800739c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d104      	bne.n	80073b0 <chHeapAllocAligned+0x130>
          /* Exact size, getting the whole block.*/
          H_FREE_NEXT(qp) = H_FREE_NEXT(hp);
 80073a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	e019      	b.n	80073e4 <chHeapAllocAligned+0x164>
        }
        else {
          /* The block is bigger than required, must split the excess.*/
          heap_header_t *fp;

          fp = H_BLOCK(hp) + pages;
 80073b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b2:	3301      	adds	r3, #1
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073b8:	18d3      	adds	r3, r2, r3
 80073ba:	9307      	str	r3, [sp, #28]
          H_FREE_NEXT(fp) = H_FREE_NEXT(hp);
 80073bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	9b07      	ldr	r3, [sp, #28]
 80073c2:	601a      	str	r2, [r3, #0]
          H_FREE_PAGES(fp) = NPAGES(H_FREE_LIMIT(hp), H_BLOCK(fp));
 80073c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	3301      	adds	r3, #1
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073ce:	18d2      	adds	r2, r2, r3
 80073d0:	9b07      	ldr	r3, [sp, #28]
 80073d2:	3308      	adds	r3, #8
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	10db      	asrs	r3, r3, #3
 80073d8:	001a      	movs	r2, r3
 80073da:	9b07      	ldr	r3, [sp, #28]
 80073dc:	605a      	str	r2, [r3, #4]
          H_FREE_NEXT(qp) = fp;
 80073de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073e0:	9a07      	ldr	r2, [sp, #28]
 80073e2:	601a      	str	r2, [r3, #0]
        }
      }

      /* Setting in the block owner heap and size.*/
      H_USED_SIZE(hp) = size;
 80073e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073e6:	9a02      	ldr	r2, [sp, #8]
 80073e8:	605a      	str	r2, [r3, #4]
      H_USED_HEAP(hp) = heapp;
 80073ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ec:	9a03      	ldr	r2, [sp, #12]
 80073ee:	601a      	str	r2, [r3, #0]

      /* Releasing heap mutex.*/
      H_UNLOCK(heapp);
 80073f0:	9b03      	ldr	r3, [sp, #12]
 80073f2:	3314      	adds	r3, #20
 80073f4:	0018      	movs	r0, r3
 80073f6:	f7ff fccb 	bl	8006d90 <chMtxUnlock>

      /*lint -save -e9087 [11.3] Safe cast.*/
      return (void *)H_BLOCK(hp);
 80073fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073fc:	3308      	adds	r3, #8
 80073fe:	e027      	b.n	8007450 <chHeapAllocAligned+0x1d0>
      /*lint -restore*/
    }

    /* Next in the free blocks list.*/
    qp = hp;
 8007400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007402:	930b      	str	r3, [sp, #44]	; 0x2c
  while (H_FREE_NEXT(qp) != NULL) {
 8007404:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d000      	beq.n	800740e <chHeapAllocAligned+0x18e>
 800740c:	e772      	b.n	80072f4 <chHeapAllocAligned+0x74>
  }

  /* Releasing heap mutex.*/
  H_UNLOCK(heapp);
 800740e:	9b03      	ldr	r3, [sp, #12]
 8007410:	3314      	adds	r3, #20
 8007412:	0018      	movs	r0, r3
 8007414:	f7ff fcbc 	bl	8006d90 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 8007418:	9b03      	ldr	r3, [sp, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d016      	beq.n	800744e <chHeapAllocAligned+0x1ce>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 8007420:	9b03      	ldr	r3, [sp, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007426:	00d0      	lsls	r0, r2, #3
 8007428:	9901      	ldr	r1, [sp, #4]
 800742a:	2208      	movs	r2, #8
 800742c:	4798      	blx	r3
 800742e:	0003      	movs	r3, r0
 8007430:	9308      	str	r3, [sp, #32]
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
 8007432:	9b08      	ldr	r3, [sp, #32]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00a      	beq.n	800744e <chHeapAllocAligned+0x1ce>
      hp = ahp - 1U;
 8007438:	9b08      	ldr	r3, [sp, #32]
 800743a:	3b08      	subs	r3, #8
 800743c:	930a      	str	r3, [sp, #40]	; 0x28
      H_USED_HEAP(hp) = heapp;
 800743e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007440:	9a03      	ldr	r2, [sp, #12]
 8007442:	601a      	str	r2, [r3, #0]
      H_USED_SIZE(hp) = size;
 8007444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007446:	9a02      	ldr	r2, [sp, #8]
 8007448:	605a      	str	r2, [r3, #4]

      /*lint -save -e9087 [11.3] Safe cast.*/
      return (void *)ahp;
 800744a:	9b08      	ldr	r3, [sp, #32]
 800744c:	e000      	b.n	8007450 <chHeapAllocAligned+0x1d0>
      /*lint -restore*/
    }
  }

  return NULL;
 800744e:	2300      	movs	r3, #0
}
 8007450:	0018      	movs	r0, r3
 8007452:	b00d      	add	sp, #52	; 0x34
 8007454:	bd00      	pop	{pc}
 8007456:	46c0      	nop			; (mov r8, r8)
 8007458:	0800b564 	.word	0x0800b564
 800745c:	20000ba8 	.word	0x20000ba8

08007460 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8007460:	b500      	push	{lr}
 8007462:	b087      	sub	sp, #28
 8007464:	9001      	str	r0, [sp, #4]
  heap_header_t *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 8007466:	9b01      	ldr	r3, [sp, #4]
 8007468:	425a      	negs	r2, r3
 800746a:	4153      	adcs	r3, r2
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	d107      	bne.n	8007482 <chHeapFree+0x22>
 8007472:	9b01      	ldr	r3, [sp, #4]
 8007474:	2207      	movs	r2, #7
 8007476:	4013      	ands	r3, r2
 8007478:	1e5a      	subs	r2, r3, #1
 800747a:	4193      	sbcs	r3, r2
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <chHeapFree+0x2a>
 8007482:	4b41      	ldr	r3, [pc, #260]	; (8007588 <chHeapFree+0x128>)
 8007484:	0018      	movs	r0, r3
 8007486:	f7fd fcc3 	bl	8004e10 <chSysHalt>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
 800748a:	9b01      	ldr	r3, [sp, #4]
 800748c:	3b08      	subs	r3, #8
 800748e:	9304      	str	r3, [sp, #16]
  /*lint -restore*/
  heapp = H_USED_HEAP(hp);
 8007490:	9b04      	ldr	r3, [sp, #16]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	9303      	str	r3, [sp, #12]
  qp = &heapp->header;
 8007496:	9b03      	ldr	r3, [sp, #12]
 8007498:	330c      	adds	r3, #12
 800749a:	9305      	str	r3, [sp, #20]
#if CH_CFG_HARDENING_LEVEL > 0
  memset((void *)p, 0, MEM_ALIGN_NEXT(H_USED_SIZE(hp), CH_HEAP_ALIGNMENT));
#endif

  /* Size is converted in number of elementary allocation units.*/
  H_FREE_PAGES(hp) = MEM_ALIGN_NEXT(H_USED_SIZE(hp),
 800749c:	9b04      	ldr	r3, [sp, #16]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	3307      	adds	r3, #7
                                    CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80074a2:	08da      	lsrs	r2, r3, #3
  H_FREE_PAGES(hp) = MEM_ALIGN_NEXT(H_USED_SIZE(hp),
 80074a4:	9b04      	ldr	r3, [sp, #16]
 80074a6:	605a      	str	r2, [r3, #4]

  /* Taking heap mutex.*/
  H_LOCK(heapp);
 80074a8:	9b03      	ldr	r3, [sp, #12]
 80074aa:	3314      	adds	r3, #20
 80074ac:	0018      	movs	r0, r3
 80074ae:	f7ff fbc7 	bl	8006c40 <chMtxLock>

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_FREE_LIMIT(qp)), "within free block");
 80074b2:	9904      	ldr	r1, [sp, #16]
 80074b4:	9a05      	ldr	r2, [sp, #20]
 80074b6:	2300      	movs	r3, #0
 80074b8:	4291      	cmp	r1, r2
 80074ba:	415b      	adcs	r3, r3
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d010      	beq.n	80074e4 <chHeapFree+0x84>
 80074c2:	9b05      	ldr	r3, [sp, #20]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	3301      	adds	r3, #1
 80074c8:	00db      	lsls	r3, r3, #3
 80074ca:	9a05      	ldr	r2, [sp, #20]
 80074cc:	18d3      	adds	r3, r2, r3
 80074ce:	9a04      	ldr	r2, [sp, #16]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	419b      	sbcs	r3, r3
 80074d4:	425b      	negs	r3, r3
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <chHeapFree+0x84>
 80074dc:	4b2a      	ldr	r3, [pc, #168]	; (8007588 <chHeapFree+0x128>)
 80074de:	0018      	movs	r0, r3
 80074e0:	f7fd fc96 	bl	8004e10 <chSysHalt>

    if (((qp == &heapp->header) || (hp > qp)) &&
 80074e4:	9b03      	ldr	r3, [sp, #12]
 80074e6:	330c      	adds	r3, #12
 80074e8:	9a05      	ldr	r2, [sp, #20]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d003      	beq.n	80074f6 <chHeapFree+0x96>
 80074ee:	9a04      	ldr	r2, [sp, #16]
 80074f0:	9b05      	ldr	r3, [sp, #20]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d942      	bls.n	800757c <chHeapFree+0x11c>
        ((H_FREE_NEXT(qp) == NULL) || (hp < H_FREE_NEXT(qp)))) {
 80074f6:	9b05      	ldr	r3, [sp, #20]
 80074f8:	681b      	ldr	r3, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d004      	beq.n	8007508 <chHeapFree+0xa8>
        ((H_FREE_NEXT(qp) == NULL) || (hp < H_FREE_NEXT(qp)))) {
 80074fe:	9b05      	ldr	r3, [sp, #20]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	9a04      	ldr	r2, [sp, #16]
 8007504:	429a      	cmp	r2, r3
 8007506:	d239      	bcs.n	800757c <chHeapFree+0x11c>
      /* Insertion after qp.*/
      H_FREE_NEXT(hp) = H_FREE_NEXT(qp);
 8007508:	9b05      	ldr	r3, [sp, #20]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	9b04      	ldr	r3, [sp, #16]
 800750e:	601a      	str	r2, [r3, #0]
      H_FREE_NEXT(qp) = hp;
 8007510:	9b05      	ldr	r3, [sp, #20]
 8007512:	9a04      	ldr	r2, [sp, #16]
 8007514:	601a      	str	r2, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (H_FREE_LIMIT(hp) == H_FREE_NEXT(hp)) {
 8007516:	9b04      	ldr	r3, [sp, #16]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	3301      	adds	r3, #1
 800751c:	00db      	lsls	r3, r3, #3
 800751e:	9a04      	ldr	r2, [sp, #16]
 8007520:	18d2      	adds	r2, r2, r3
 8007522:	9b04      	ldr	r3, [sp, #16]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	429a      	cmp	r2, r3
 8007528:	d10d      	bne.n	8007546 <chHeapFree+0xe6>
        /* Merge with the next block.*/
        H_FREE_PAGES(hp) += H_FREE_PAGES(H_FREE_NEXT(hp)) + 1U;
 800752a:	9b04      	ldr	r3, [sp, #16]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	9b04      	ldr	r3, [sp, #16]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	18d3      	adds	r3, r2, r3
 8007536:	1c5a      	adds	r2, r3, #1
 8007538:	9b04      	ldr	r3, [sp, #16]
 800753a:	605a      	str	r2, [r3, #4]
        H_FREE_NEXT(hp) = H_FREE_NEXT(H_FREE_NEXT(hp));
 800753c:	9b04      	ldr	r3, [sp, #16]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	9b04      	ldr	r3, [sp, #16]
 8007544:	601a      	str	r2, [r3, #0]
      }
      if ((H_FREE_LIMIT(qp) == hp)) {
 8007546:	9b05      	ldr	r3, [sp, #20]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	3301      	adds	r3, #1
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	9a05      	ldr	r2, [sp, #20]
 8007550:	18d3      	adds	r3, r2, r3
 8007552:	9a04      	ldr	r2, [sp, #16]
 8007554:	429a      	cmp	r2, r3
 8007556:	d10b      	bne.n	8007570 <chHeapFree+0x110>
        /* Merge with the previous block.*/
        H_FREE_PAGES(qp) += H_FREE_PAGES(hp) + 1U;
 8007558:	9b05      	ldr	r3, [sp, #20]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	9b04      	ldr	r3, [sp, #16]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	18d3      	adds	r3, r2, r3
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	9b05      	ldr	r3, [sp, #20]
 8007566:	605a      	str	r2, [r3, #4]
        H_FREE_NEXT(qp) = H_FREE_NEXT(hp);
 8007568:	9b04      	ldr	r3, [sp, #16]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	9b05      	ldr	r3, [sp, #20]
 800756e:	601a      	str	r2, [r3, #0]
    }
    qp = H_FREE_NEXT(qp);
  }

  /* Releasing heap mutex.*/
  H_UNLOCK(heapp);
 8007570:	9b03      	ldr	r3, [sp, #12]
 8007572:	3314      	adds	r3, #20
 8007574:	0018      	movs	r0, r3
 8007576:	f7ff fc0b 	bl	8006d90 <chMtxUnlock>
 800757a:	e003      	b.n	8007584 <chHeapFree+0x124>
    qp = H_FREE_NEXT(qp);
 800757c:	9b05      	ldr	r3, [sp, #20]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	9305      	str	r3, [sp, #20]
 8007582:	e796      	b.n	80074b2 <chHeapFree+0x52>

  return;
}
 8007584:	b007      	add	sp, #28
 8007586:	bd00      	pop	{pc}
 8007588:	0800b578 	.word	0x0800b578
 800758c:	00000000 	.word	0x00000000

08007590 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8007590:	b500      	push	{lr}
 8007592:	b08b      	sub	sp, #44	; 0x2c
 8007594:	9003      	str	r0, [sp, #12]
 8007596:	9102      	str	r1, [sp, #8]
 8007598:	9201      	str	r2, [sp, #4]
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
 800759a:	9b03      	ldr	r3, [sp, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <chHeapStatus+0x14>
    heapp = &default_heap;
 80075a0:	4b1f      	ldr	r3, [pc, #124]	; (8007620 <chHeapStatus+0x90>)
 80075a2:	9303      	str	r3, [sp, #12]
  }

  H_LOCK(heapp);
 80075a4:	9b03      	ldr	r3, [sp, #12]
 80075a6:	3314      	adds	r3, #20
 80075a8:	0018      	movs	r0, r3
 80075aa:	f7ff fb49 	bl	8006c40 <chMtxLock>
  tpages = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	9307      	str	r3, [sp, #28]
  lpages = 0U;
 80075b2:	2300      	movs	r3, #0
 80075b4:	9306      	str	r3, [sp, #24]
  n = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	9308      	str	r3, [sp, #32]
  qp = &heapp->header;
 80075ba:	9b03      	ldr	r3, [sp, #12]
 80075bc:	330c      	adds	r3, #12
 80075be:	9309      	str	r3, [sp, #36]	; 0x24
 80075c0:	e013      	b.n	80075ea <chHeapStatus+0x5a>
  while (H_FREE_NEXT(qp) != NULL) {
    size_t pages = H_FREE_PAGES(H_FREE_NEXT(qp));
 80075c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	9305      	str	r3, [sp, #20]

    /* Updating counters.*/
    n++;
 80075ca:	9b08      	ldr	r3, [sp, #32]
 80075cc:	3301      	adds	r3, #1
 80075ce:	9308      	str	r3, [sp, #32]
    tpages += pages;
 80075d0:	9a07      	ldr	r2, [sp, #28]
 80075d2:	9b05      	ldr	r3, [sp, #20]
 80075d4:	18d3      	adds	r3, r2, r3
 80075d6:	9307      	str	r3, [sp, #28]
    if (pages > lpages) {
 80075d8:	9a05      	ldr	r2, [sp, #20]
 80075da:	9b06      	ldr	r3, [sp, #24]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d901      	bls.n	80075e4 <chHeapStatus+0x54>
      lpages = pages;
 80075e0:	9b05      	ldr	r3, [sp, #20]
 80075e2:	9306      	str	r3, [sp, #24]
    }

    qp = H_FREE_NEXT(qp);
 80075e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	9309      	str	r3, [sp, #36]	; 0x24
  while (H_FREE_NEXT(qp) != NULL) {
 80075ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e7      	bne.n	80075c2 <chHeapStatus+0x32>
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 80075f2:	9b02      	ldr	r3, [sp, #8]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <chHeapStatus+0x70>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 80075f8:	9b07      	ldr	r3, [sp, #28]
 80075fa:	00da      	lsls	r2, r3, #3
 80075fc:	9b02      	ldr	r3, [sp, #8]
 80075fe:	601a      	str	r2, [r3, #0]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 8007600:	9b01      	ldr	r3, [sp, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <chHeapStatus+0x7e>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 8007606:	9b06      	ldr	r3, [sp, #24]
 8007608:	00da      	lsls	r2, r3, #3
 800760a:	9b01      	ldr	r3, [sp, #4]
 800760c:	601a      	str	r2, [r3, #0]
  }
  H_UNLOCK(heapp);
 800760e:	9b03      	ldr	r3, [sp, #12]
 8007610:	3314      	adds	r3, #20
 8007612:	0018      	movs	r0, r3
 8007614:	f7ff fbbc 	bl	8006d90 <chMtxUnlock>

  return n;
 8007618:	9b08      	ldr	r3, [sp, #32]
}
 800761a:	0018      	movs	r0, r3
 800761c:	b00b      	add	sp, #44	; 0x2c
 800761e:	bd00      	pop	{pc}
 8007620:	20000ba8 	.word	0x20000ba8
	...

08007630 <port_lock.lto_priv.20>:
  __ASM volatile ("cpsid i" : : : "memory");
 8007630:	b672      	cpsid	i
}
 8007632:	4770      	bx	lr
	...

08007640 <port_unlock.lto_priv.20>:
  __ASM volatile ("cpsie i" : : : "memory");
 8007640:	b662      	cpsie	i
}
 8007642:	4770      	bx	lr
	...

08007650 <chSysLock.lto_priv.15>:
static inline void chSysLock(void) {
 8007650:	b510      	push	{r4, lr}
  port_lock();
 8007652:	f7ff ffed 	bl	8007630 <port_lock.lto_priv.20>
  __dbg_check_lock();
 8007656:	f7fd fc4b 	bl	8004ef0 <__dbg_check_lock>
}
 800765a:	bd10      	pop	{r4, pc}
 800765c:	0000      	movs	r0, r0
	...

08007660 <chSysUnlock.lto_priv.15>:
static inline void chSysUnlock(void) {
 8007660:	b510      	push	{r4, lr}
  __dbg_check_unlock();
 8007662:	f7fd fc6d 	bl	8004f40 <__dbg_check_unlock>
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
 8007666:	4b0e      	ldr	r3, [pc, #56]	; (80076a0 <chSysUnlock.lto_priv.15+0x40>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	4b0d      	ldr	r3, [pc, #52]	; (80076a0 <chSysUnlock.lto_priv.15+0x40>)
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	1e5a      	subs	r2, r3, #1
 8007670:	4193      	sbcs	r3, r2
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00f      	beq.n	8007698 <chSysUnlock.lto_priv.15+0x38>
 8007678:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <chSysUnlock.lto_priv.15+0x40>)
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	689a      	ldr	r2, [r3, #8]
 800767e:	4b08      	ldr	r3, [pc, #32]	; (80076a0 <chSysUnlock.lto_priv.15+0x40>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	429a      	cmp	r2, r3
 8007686:	419b      	sbcs	r3, r3
 8007688:	425b      	negs	r3, r3
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d003      	beq.n	8007698 <chSysUnlock.lto_priv.15+0x38>
 8007690:	4b04      	ldr	r3, [pc, #16]	; (80076a4 <chSysUnlock.lto_priv.15+0x44>)
 8007692:	0018      	movs	r0, r3
 8007694:	f7fd fbbc 	bl	8004e10 <chSysHalt>
  port_unlock();
 8007698:	f7ff ffd2 	bl	8007640 <port_unlock.lto_priv.20>
}
 800769c:	bd10      	pop	{r4, pc}
 800769e:	46c0      	nop			; (mov r8, r8)
 80076a0:	20000a28 	.word	0x20000a28
 80076a4:	0800b59c 	.word	0x0800b59c
	...

080076b0 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
 80076b0:	b500      	push	{lr}
 80076b2:	b085      	sub	sp, #20
 80076b4:	9003      	str	r0, [sp, #12]
 80076b6:	9102      	str	r1, [sp, #8]
 80076b8:	9201      	str	r2, [sp, #4]
 80076ba:	9300      	str	r3, [sp, #0]

  chDbgCheck((mp != NULL) &&
 80076bc:	9b03      	ldr	r3, [sp, #12]
 80076be:	425a      	negs	r2, r3
 80076c0:	4153      	adcs	r3, r2
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d107      	bne.n	80076d8 <chPoolObjectInitAligned+0x28>
 80076c8:	9a02      	ldr	r2, [sp, #8]
 80076ca:	2103      	movs	r1, #3
 80076cc:	2300      	movs	r3, #0
 80076ce:	4291      	cmp	r1, r2
 80076d0:	415b      	adcs	r3, r3
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <chPoolObjectInitAligned+0x2c>
 80076d8:	2301      	movs	r3, #1
 80076da:	e000      	b.n	80076de <chPoolObjectInitAligned+0x2e>
 80076dc:	2300      	movs	r3, #0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d107      	bne.n	80076f2 <chPoolObjectInitAligned+0x42>
 80076e2:	9a01      	ldr	r2, [sp, #4]
 80076e4:	2103      	movs	r1, #3
 80076e6:	2300      	movs	r3, #0
 80076e8:	4291      	cmp	r1, r2
 80076ea:	415b      	adcs	r3, r3
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d001      	beq.n	80076f6 <chPoolObjectInitAligned+0x46>
 80076f2:	2301      	movs	r3, #1
 80076f4:	e000      	b.n	80076f8 <chPoolObjectInitAligned+0x48>
 80076f6:	2300      	movs	r3, #0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d113      	bne.n	8007724 <chPoolObjectInitAligned+0x74>
 80076fc:	9b01      	ldr	r3, [sp, #4]
 80076fe:	425a      	negs	r2, r3
 8007700:	4153      	adcs	r3, r2
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	d108      	bne.n	800771a <chPoolObjectInitAligned+0x6a>
 8007708:	9b01      	ldr	r3, [sp, #4]
 800770a:	3b01      	subs	r3, #1
 800770c:	9a01      	ldr	r2, [sp, #4]
 800770e:	4013      	ands	r3, r2
 8007710:	1e5a      	subs	r2, r3, #1
 8007712:	4193      	sbcs	r3, r2
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <chPoolObjectInitAligned+0x6e>
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <chPoolObjectInitAligned+0x70>
 800771e:	2300      	movs	r3, #0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <chPoolObjectInitAligned+0x7c>
 8007724:	4b08      	ldr	r3, [pc, #32]	; (8007748 <chPoolObjectInitAligned+0x98>)
 8007726:	0018      	movs	r0, r3
 8007728:	f7fd fb72 	bl	8004e10 <chSysHalt>
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 800772c:	9b03      	ldr	r3, [sp, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	601a      	str	r2, [r3, #0]
  mp->object_size = size;
 8007732:	9b03      	ldr	r3, [sp, #12]
 8007734:	9a02      	ldr	r2, [sp, #8]
 8007736:	605a      	str	r2, [r3, #4]
  mp->align = align;
 8007738:	9b03      	ldr	r3, [sp, #12]
 800773a:	9a01      	ldr	r2, [sp, #4]
 800773c:	609a      	str	r2, [r3, #8]
  mp->provider = provider;
 800773e:	9b03      	ldr	r3, [sp, #12]
 8007740:	9a00      	ldr	r2, [sp, #0]
 8007742:	60da      	str	r2, [r3, #12]
}
 8007744:	b005      	add	sp, #20
 8007746:	bd00      	pop	{pc}
 8007748:	0800b584 	.word	0x0800b584
 800774c:	00000000 	.word	0x00000000

08007750 <chPoolFreeI>:
 * @param[in] mp        pointer to a @p memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @iclass
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
 8007750:	b500      	push	{lr}
 8007752:	b085      	sub	sp, #20
 8007754:	9001      	str	r0, [sp, #4]
 8007756:	9100      	str	r1, [sp, #0]
  struct pool_header *php = objp;
 8007758:	9b00      	ldr	r3, [sp, #0]
 800775a:	9303      	str	r3, [sp, #12]

  chDbgCheckClassI();
 800775c:	f7fd fcc0 	bl	80050e0 <chDbgCheckClassI>
  chDbgCheck((mp != NULL) &&
 8007760:	9b01      	ldr	r3, [sp, #4]
 8007762:	425a      	negs	r2, r3
 8007764:	4153      	adcs	r3, r2
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d105      	bne.n	8007778 <chPoolFreeI+0x28>
 800776c:	9b00      	ldr	r3, [sp, #0]
 800776e:	425a      	negs	r2, r3
 8007770:	4153      	adcs	r3, r2
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <chPoolFreeI+0x2c>
 8007778:	2301      	movs	r3, #1
 800777a:	e000      	b.n	800777e <chPoolFreeI+0x2e>
 800777c:	2300      	movs	r3, #0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d109      	bne.n	8007796 <chPoolFreeI+0x46>
 8007782:	9b01      	ldr	r3, [sp, #4]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	3b01      	subs	r3, #1
 8007788:	9a00      	ldr	r2, [sp, #0]
 800778a:	4013      	ands	r3, r2
 800778c:	1e5a      	subs	r2, r3, #1
 800778e:	4193      	sbcs	r3, r2
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <chPoolFreeI+0x4e>
 8007796:	4b06      	ldr	r3, [pc, #24]	; (80077b0 <chPoolFreeI+0x60>)
 8007798:	0018      	movs	r0, r3
 800779a:	f7fd fb39 	bl	8004e10 <chSysHalt>
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 800779e:	9b01      	ldr	r3, [sp, #4]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	9b03      	ldr	r3, [sp, #12]
 80077a4:	601a      	str	r2, [r3, #0]
  mp->next = php;
 80077a6:	9b01      	ldr	r3, [sp, #4]
 80077a8:	9a03      	ldr	r2, [sp, #12]
 80077aa:	601a      	str	r2, [r3, #0]
}
 80077ac:	b005      	add	sp, #20
 80077ae:	bd00      	pop	{pc}
 80077b0:	0800b5a8 	.word	0x0800b5a8
	...

080077c0 <chPoolFree>:
 * @param[in] mp        pointer to a @p memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @api
 */
void chPoolFree(memory_pool_t *mp, void *objp) {
 80077c0:	b500      	push	{lr}
 80077c2:	b083      	sub	sp, #12
 80077c4:	9001      	str	r0, [sp, #4]
 80077c6:	9100      	str	r1, [sp, #0]

  chSysLock();
 80077c8:	f7ff ff42 	bl	8007650 <chSysLock.lto_priv.15>
  chPoolFreeI(mp, objp);
 80077cc:	9a00      	ldr	r2, [sp, #0]
 80077ce:	9b01      	ldr	r3, [sp, #4]
 80077d0:	0011      	movs	r1, r2
 80077d2:	0018      	movs	r0, r3
 80077d4:	f7ff ffbc 	bl	8007750 <chPoolFreeI>
  chSysUnlock();
 80077d8:	f7ff ff42 	bl	8007660 <chSysUnlock.lto_priv.15>
}
 80077dc:	b003      	add	sp, #12
 80077de:	bd00      	pop	{pc}

080077e0 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 80077e0:	b500      	push	{lr}
 80077e2:	b083      	sub	sp, #12
 80077e4:	9001      	str	r0, [sp, #4]
 80077e6:	9100      	str	r1, [sp, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 80077e8:	9900      	ldr	r1, [sp, #0]
 80077ea:	9b01      	ldr	r3, [sp, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	0018      	movs	r0, r3
 80077f0:	f7ff fcb6 	bl	8007160 <chCoreAllocFromTopI>
 80077f4:	0003      	movs	r3, r0
}
 80077f6:	0018      	movs	r0, r3
 80077f8:	b003      	add	sp, #12
 80077fa:	bd00      	pop	{pc}
 80077fc:	0000      	movs	r0, r0
	...

08007800 <chPoolObjectInit>:
 *
 * @init
 */
static inline void chPoolObjectInit(memory_pool_t *mp,
                                    size_t size,
                                    memgetfunc_t provider) {
 8007800:	b500      	push	{lr}
 8007802:	b085      	sub	sp, #20
 8007804:	9003      	str	r0, [sp, #12]
 8007806:	9102      	str	r1, [sp, #8]
 8007808:	9201      	str	r2, [sp, #4]

  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 800780a:	9b01      	ldr	r3, [sp, #4]
 800780c:	9902      	ldr	r1, [sp, #8]
 800780e:	9803      	ldr	r0, [sp, #12]
 8007810:	2204      	movs	r2, #4
 8007812:	f7ff ff4d 	bl	80076b0 <chPoolObjectInitAligned>
}
 8007816:	b005      	add	sp, #20
 8007818:	bd00      	pop	{pc}
 800781a:	46c0      	nop			; (mov r8, r8)
 800781c:	0000      	movs	r0, r0
	...

08007820 <dyn_list_init>:
    *dp++ = c;
    i--;
  } while ((c != (char)0) && (i > 0U));
}

static inline void dyn_list_init(dyn_list_t *dlp) {
 8007820:	b082      	sub	sp, #8
 8007822:	9001      	str	r0, [sp, #4]

  dlp->next = (dyn_element_t *)dlp;
 8007824:	9b01      	ldr	r3, [sp, #4]
 8007826:	9a01      	ldr	r2, [sp, #4]
 8007828:	601a      	str	r2, [r3, #0]
}
 800782a:	b002      	add	sp, #8
 800782c:	4770      	bx	lr
 800782e:	46c0      	nop			; (mov r8, r8)

08007830 <__factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void __factory_init(void) {
 8007830:	b510      	push	{r4, lr}

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 8007832:	4b12      	ldr	r3, [pc, #72]	; (800787c <__factory_init+0x4c>)
 8007834:	0018      	movs	r0, r3
 8007836:	f7ff f9eb 	bl	8006c10 <chMtxObjectInit>
#else
  chSemObjectInit(&ch_factory.sem, (cnt_t)1);
#endif

#if CH_CFG_FACTORY_OBJECTS_REGISTRY == TRUE
  dyn_list_init(&ch_factory.obj_list);
 800783a:	4b11      	ldr	r3, [pc, #68]	; (8007880 <__factory_init+0x50>)
 800783c:	0018      	movs	r0, r3
 800783e:	f7ff ffef 	bl	8007820 <dyn_list_init>
  chPoolObjectInit(&ch_factory.obj_pool,
 8007842:	4a10      	ldr	r2, [pc, #64]	; (8007884 <__factory_init+0x54>)
 8007844:	4b10      	ldr	r3, [pc, #64]	; (8007888 <__factory_init+0x58>)
 8007846:	2114      	movs	r1, #20
 8007848:	0018      	movs	r0, r3
 800784a:	f7ff ffd9 	bl	8007800 <chPoolObjectInit>
                   sizeof (registered_object_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_GENERIC_BUFFERS == TRUE
  dyn_list_init(&ch_factory.buf_list);
 800784e:	4b0f      	ldr	r3, [pc, #60]	; (800788c <__factory_init+0x5c>)
 8007850:	0018      	movs	r0, r3
 8007852:	f7ff ffe5 	bl	8007820 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_SEMAPHORES == TRUE
  dyn_list_init(&ch_factory.sem_list);
 8007856:	4b0e      	ldr	r3, [pc, #56]	; (8007890 <__factory_init+0x60>)
 8007858:	0018      	movs	r0, r3
 800785a:	f7ff ffe1 	bl	8007820 <dyn_list_init>
  chPoolObjectInit(&ch_factory.sem_pool,
 800785e:	4a09      	ldr	r2, [pc, #36]	; (8007884 <__factory_init+0x54>)
 8007860:	4b0c      	ldr	r3, [pc, #48]	; (8007894 <__factory_init+0x64>)
 8007862:	211c      	movs	r1, #28
 8007864:	0018      	movs	r0, r3
 8007866:	f7ff ffcb 	bl	8007800 <chPoolObjectInit>
#endif
#if CH_CFG_FACTORY_MAILBOXES == TRUE
  dyn_list_init(&ch_factory.mbx_list);
#endif
#if CH_CFG_FACTORY_OBJ_FIFOS == TRUE
  dyn_list_init(&ch_factory.fifo_list);
 800786a:	4b0b      	ldr	r3, [pc, #44]	; (8007898 <__factory_init+0x68>)
 800786c:	0018      	movs	r0, r3
 800786e:	f7ff ffd7 	bl	8007820 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_PIPES == TRUE
  dyn_list_init(&ch_factory.pipe_list);
 8007872:	4b0a      	ldr	r3, [pc, #40]	; (800789c <__factory_init+0x6c>)
 8007874:	0018      	movs	r0, r3
 8007876:	f7ff ffd3 	bl	8007820 <dyn_list_init>
#endif
}
 800787a:	bd10      	pop	{r4, pc}
 800787c:	20000bcc 	.word	0x20000bcc
 8007880:	20000bdc 	.word	0x20000bdc
 8007884:	080077e1 	.word	0x080077e1
 8007888:	20000be0 	.word	0x20000be0
 800788c:	20000bf0 	.word	0x20000bf0
 8007890:	20000bf4 	.word	0x20000bf4
 8007894:	20000bf8 	.word	0x20000bf8
 8007898:	20000c08 	.word	0x20000c08
 800789c:	20000c0c 	.word	0x20000c0c

080078a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80078a0:	b510      	push	{r4, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	0002      	movs	r2, r0
 80078a6:	9100      	str	r1, [sp, #0]
 80078a8:	466b      	mov	r3, sp
 80078aa:	3307      	adds	r3, #7
 80078ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80078ae:	466b      	mov	r3, sp
 80078b0:	3307      	adds	r3, #7
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b7f      	cmp	r3, #127	; 0x7f
 80078b6:	d82c      	bhi.n	8007912 <__NVIC_SetPriority+0x72>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80078b8:	4a32      	ldr	r2, [pc, #200]	; (8007984 <__NVIC_SetPriority+0xe4>)
 80078ba:	466b      	mov	r3, sp
 80078bc:	3307      	adds	r3, #7
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	b25b      	sxtb	r3, r3
 80078c2:	089b      	lsrs	r3, r3, #2
 80078c4:	33c0      	adds	r3, #192	; 0xc0
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	589b      	ldr	r3, [r3, r2]
 80078ca:	466a      	mov	r2, sp
 80078cc:	3207      	adds	r2, #7
 80078ce:	7812      	ldrb	r2, [r2, #0]
 80078d0:	0011      	movs	r1, r2
 80078d2:	2203      	movs	r2, #3
 80078d4:	400a      	ands	r2, r1
 80078d6:	00d2      	lsls	r2, r2, #3
 80078d8:	21ff      	movs	r1, #255	; 0xff
 80078da:	4091      	lsls	r1, r2
 80078dc:	000a      	movs	r2, r1
 80078de:	43d2      	mvns	r2, r2
 80078e0:	401a      	ands	r2, r3
 80078e2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80078e4:	9b00      	ldr	r3, [sp, #0]
 80078e6:	019b      	lsls	r3, r3, #6
 80078e8:	22ff      	movs	r2, #255	; 0xff
 80078ea:	401a      	ands	r2, r3
 80078ec:	466b      	mov	r3, sp
 80078ee:	3307      	adds	r3, #7
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	0018      	movs	r0, r3
 80078f4:	2303      	movs	r3, #3
 80078f6:	4003      	ands	r3, r0
 80078f8:	00db      	lsls	r3, r3, #3
 80078fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80078fc:	4821      	ldr	r0, [pc, #132]	; (8007984 <__NVIC_SetPriority+0xe4>)
 80078fe:	466b      	mov	r3, sp
 8007900:	3307      	adds	r3, #7
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	b25b      	sxtb	r3, r3
 8007906:	089b      	lsrs	r3, r3, #2
 8007908:	430a      	orrs	r2, r1
 800790a:	33c0      	adds	r3, #192	; 0xc0
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	501a      	str	r2, [r3, r0]
 8007910:	e035      	b.n	800797e <__NVIC_SetPriority+0xde>
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007912:	4a1d      	ldr	r2, [pc, #116]	; (8007988 <__NVIC_SetPriority+0xe8>)
 8007914:	466b      	mov	r3, sp
 8007916:	3307      	adds	r3, #7
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	0019      	movs	r1, r3
 800791c:	230f      	movs	r3, #15
 800791e:	400b      	ands	r3, r1
 8007920:	3b08      	subs	r3, #8
 8007922:	089b      	lsrs	r3, r3, #2
 8007924:	3306      	adds	r3, #6
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	18d3      	adds	r3, r2, r3
 800792a:	3304      	adds	r3, #4
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	466a      	mov	r2, sp
 8007930:	3207      	adds	r2, #7
 8007932:	7812      	ldrb	r2, [r2, #0]
 8007934:	0011      	movs	r1, r2
 8007936:	2203      	movs	r2, #3
 8007938:	400a      	ands	r2, r1
 800793a:	00d2      	lsls	r2, r2, #3
 800793c:	21ff      	movs	r1, #255	; 0xff
 800793e:	4091      	lsls	r1, r2
 8007940:	000a      	movs	r2, r1
 8007942:	43d2      	mvns	r2, r2
 8007944:	401a      	ands	r2, r3
 8007946:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007948:	9b00      	ldr	r3, [sp, #0]
 800794a:	019b      	lsls	r3, r3, #6
 800794c:	22ff      	movs	r2, #255	; 0xff
 800794e:	401a      	ands	r2, r3
 8007950:	466b      	mov	r3, sp
 8007952:	3307      	adds	r3, #7
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	0018      	movs	r0, r3
 8007958:	2303      	movs	r3, #3
 800795a:	4003      	ands	r3, r0
 800795c:	00db      	lsls	r3, r3, #3
 800795e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007960:	4809      	ldr	r0, [pc, #36]	; (8007988 <__NVIC_SetPriority+0xe8>)
 8007962:	466b      	mov	r3, sp
 8007964:	3307      	adds	r3, #7
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	001c      	movs	r4, r3
 800796a:	230f      	movs	r3, #15
 800796c:	4023      	ands	r3, r4
 800796e:	3b08      	subs	r3, #8
 8007970:	089b      	lsrs	r3, r3, #2
 8007972:	430a      	orrs	r2, r1
 8007974:	3306      	adds	r3, #6
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	18c3      	adds	r3, r0, r3
 800797a:	3304      	adds	r3, #4
 800797c:	601a      	str	r2, [r3, #0]
  }
}
 800797e:	b002      	add	sp, #8
 8007980:	bd10      	pop	{r4, pc}
 8007982:	46c0      	nop			; (mov r8, r8)
 8007984:	e000e100 	.word	0xe000e100
 8007988:	e000ed00 	.word	0xe000ed00
 800798c:	00000000 	.word	0x00000000

08007990 <port_lock.lto_priv.24>:
  __ASM volatile ("cpsid i" : : : "memory");
 8007990:	b672      	cpsid	i
}
 8007992:	4770      	bx	lr
	...

080079a0 <port_unlock.lto_priv.24>:
  __ASM volatile ("cpsie i" : : : "memory");
 80079a0:	b662      	cpsie	i
}
 80079a2:	4770      	bx	lr
	...

080079b0 <port_lock_from_isr.lto_priv.6>:
static inline void port_lock_from_isr(void) {
 80079b0:	b510      	push	{r4, lr}
  port_lock();
 80079b2:	f7ff ffed 	bl	8007990 <port_lock.lto_priv.24>
}
 80079b6:	bd10      	pop	{r4, pc}
	...

080079c0 <port_unlock_from_isr.lto_priv.6>:
static inline void port_unlock_from_isr(void) {
 80079c0:	b510      	push	{r4, lr}
  port_unlock();
 80079c2:	f7ff ffed 	bl	80079a0 <port_unlock.lto_priv.24>
}
 80079c6:	bd10      	pop	{r4, pc}
	...

080079d0 <NMI_Handler>:
 * @brief   NMI vector.
 * @details The NMI vector is used for exception mode re-entering after a
 *          context switch.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void NMI_Handler(void) {
 80079d0:	b500      	push	{lr}
 80079d2:	b085      	sub	sp, #20
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80079d4:	f3ef 8309 	mrs	r3, PSP
 80079d8:	9301      	str	r3, [sp, #4]
  return(result);
 80079da:	9b01      	ldr	r3, [sp, #4]
/*lint -restore*/

  /* The port_extctx structure is pointed by the PSP register.*/
  struct port_extctx *ctxp = (struct port_extctx *)__get_PSP();
 80079dc:	9303      	str	r3, [sp, #12]

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 80079de:	9b03      	ldr	r3, [sp, #12]
 80079e0:	3320      	adds	r3, #32
 80079e2:	9303      	str	r3, [sp, #12]

  /* Writing back the modified PSP value.*/
  __set_PSP((uint32_t)ctxp);
 80079e4:	9b03      	ldr	r3, [sp, #12]
 80079e6:	9302      	str	r3, [sp, #8]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80079e8:	9b02      	ldr	r3, [sp, #8]
 80079ea:	f383 8809 	msr	PSP, r3

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
 80079ee:	f7ff ffe7 	bl	80079c0 <port_unlock_from_isr.lto_priv.6>
}
 80079f2:	b005      	add	sp, #20
 80079f4:	bd00      	pop	{pc}
 80079f6:	46c0      	nop			; (mov r8, r8)
	...

08007a00 <port_init>:
 *
 * @param[in, out] oip  pointer to the @p os_instance_t structure
 *
 * @notapi
 */
void port_init(os_instance_t *oip) {
 8007a00:	b500      	push	{lr}
 8007a02:	b083      	sub	sp, #12
 8007a04:	9001      	str	r0, [sp, #4]

  (void)oip;

  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 8007a06:	2302      	movs	r3, #2
 8007a08:	425b      	negs	r3, r3
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	0018      	movs	r0, r3
 8007a0e:	f7ff ff47 	bl	80078a0 <__NVIC_SetPriority>
}
 8007a12:	b003      	add	sp, #12
 8007a14:	bd00      	pop	{pc}
 8007a16:	46c0      	nop			; (mov r8, r8)
	...

08007a20 <__port_irq_epilogue>:
/**
 * @brief   IRQ epilogue code.
 *
 * @param[in] lr        value of the @p LR register on ISR entry
 */
void __port_irq_epilogue(uint32_t lr) {
 8007a20:	b500      	push	{lr}
 8007a22:	b087      	sub	sp, #28
 8007a24:	9001      	str	r0, [sp, #4]

  if (lr != 0xFFFFFFF1U) {
 8007a26:	9b01      	ldr	r3, [sp, #4]
 8007a28:	330f      	adds	r3, #15
 8007a2a:	d01d      	beq.n	8007a68 <__port_irq_epilogue+0x48>
    struct port_extctx *ectxp;

    port_lock_from_isr();
 8007a2c:	f7ff ffc0 	bl	80079b0 <port_lock_from_isr.lto_priv.6>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8007a30:	f3ef 8309 	mrs	r3, PSP
 8007a34:	9303      	str	r3, [sp, #12]
  return(result);
 8007a36:	9b03      	ldr	r3, [sp, #12]

    /* The extctx structure is pointed by the PSP register.*/
    ectxp = (struct port_extctx *)__get_PSP();
 8007a38:	9305      	str	r3, [sp, #20]

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ectxp--;
 8007a3a:	9b05      	ldr	r3, [sp, #20]
 8007a3c:	3b20      	subs	r3, #32
 8007a3e:	9305      	str	r3, [sp, #20]

    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ectxp);
 8007a40:	9b05      	ldr	r3, [sp, #20]
 8007a42:	9304      	str	r3, [sp, #16]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8007a44:	9b04      	ldr	r3, [sp, #16]
 8007a46:	f383 8809 	msr	PSP, r3

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 8007a4a:	9b05      	ldr	r3, [sp, #20]
 8007a4c:	2280      	movs	r2, #128	; 0x80
 8007a4e:	0452      	lsls	r2, r2, #17
 8007a50:	61da      	str	r2, [r3, #28]

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8007a52:	f7fe fa15 	bl	8005e80 <chSchIsPreemptionRequired>
 8007a56:	1e03      	subs	r3, r0, #0
 8007a58:	d003      	beq.n	8007a62 <__port_irq_epilogue+0x42>
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8007a5a:	4a04      	ldr	r2, [pc, #16]	; (8007a6c <__port_irq_epilogue+0x4c>)
 8007a5c:	9b05      	ldr	r3, [sp, #20]
 8007a5e:	619a      	str	r2, [r3, #24]
 8007a60:	e002      	b.n	8007a68 <__port_irq_epilogue+0x48>
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8007a62:	4a03      	ldr	r2, [pc, #12]	; (8007a70 <__port_irq_epilogue+0x50>)
 8007a64:	9b05      	ldr	r3, [sp, #20]
 8007a66:	619a      	str	r2, [r3, #24]
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
  }
}
 8007a68:	b007      	add	sp, #28
 8007a6a:	bd00      	pop	{pc}
 8007a6c:	080001cb 	.word	0x080001cb
 8007a70:	080001d6 	.word	0x080001d6
	...

08007a80 <port_lock.lto_priv.25>:
  __ASM volatile ("cpsid i" : : : "memory");
 8007a80:	b672      	cpsid	i
}
 8007a82:	4770      	bx	lr
	...

08007a90 <chSysLock.lto_priv.19>:
static inline void chSysLock(void) {
 8007a90:	b510      	push	{r4, lr}
  port_lock();
 8007a92:	f7ff fff5 	bl	8007a80 <port_lock.lto_priv.25>
  __dbg_check_lock();
 8007a96:	f7fd fa2b 	bl	8004ef0 <__dbg_check_lock>
}
 8007a9a:	bd10      	pop	{r4, pc}
 8007a9c:	0000      	movs	r0, r0
	...

08007aa0 <chThdGetSelfX.lto_priv.6>:
  return __sch_get_currthread();
 8007aa0:	4b01      	ldr	r3, [pc, #4]	; (8007aa8 <chThdGetSelfX.lto_priv.6+0x8>)
 8007aa2:	68db      	ldr	r3, [r3, #12]
}
 8007aa4:	0018      	movs	r0, r3
 8007aa6:	4770      	bx	lr
 8007aa8:	20000a28 	.word	0x20000a28
 8007aac:	00000000 	.word	0x00000000

08007ab0 <chThdShouldTerminateX>:
static inline bool chThdShouldTerminateX(void) {
 8007ab0:	b510      	push	{r4, lr}
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8007ab2:	f7ff fff5 	bl	8007aa0 <chThdGetSelfX.lto_priv.6>
 8007ab6:	0003      	movs	r3, r0
 8007ab8:	2229      	movs	r2, #41	; 0x29
 8007aba:	5c9b      	ldrb	r3, [r3, r2]
 8007abc:	001a      	movs	r2, r3
 8007abe:	2304      	movs	r3, #4
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	1e5a      	subs	r2, r3, #1
 8007ac4:	4193      	sbcs	r3, r2
 8007ac6:	b2db      	uxtb	r3, r3
}
 8007ac8:	0018      	movs	r0, r3
 8007aca:	bd10      	pop	{r4, pc}
 8007acc:	0000      	movs	r0, r0
	...

08007ad0 <chRegSetThreadName.lto_priv.0>:
 *
 * @param[in] name      thread name as a zero terminated string
 *
 * @api
 */
static inline void chRegSetThreadName(const char *name) {
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_REGISTRY == TRUE
  __sch_get_currthread()->name = name;
 8007ad4:	4b02      	ldr	r3, [pc, #8]	; (8007ae0 <chRegSetThreadName.lto_priv.0+0x10>)
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	9a01      	ldr	r2, [sp, #4]
 8007ada:	61da      	str	r2, [r3, #28]
#else
  (void)name;
#endif
}
 8007adc:	b002      	add	sp, #8
 8007ade:	4770      	bx	lr
 8007ae0:	20000a28 	.word	0x20000a28
	...

08007af0 <chEvtBroadcastI>:
 *
 * @param[in] esp       pointer to an @p event_source_t structure
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {
 8007af0:	b500      	push	{lr}
 8007af2:	b083      	sub	sp, #12
 8007af4:	9001      	str	r0, [sp, #4]

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8007af6:	9b01      	ldr	r3, [sp, #4]
 8007af8:	2100      	movs	r1, #0
 8007afa:	0018      	movs	r0, r3
 8007afc:	f7ff fa28 	bl	8006f50 <chEvtBroadcastFlagsI>
}
 8007b00:	b003      	add	sp, #12
 8007b02:	bd00      	pop	{pc}
	...

08007b10 <parse_arguments>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static char *parse_arguments(char *str, char **saveptr) {
 8007b10:	b500      	push	{lr}
 8007b12:	b085      	sub	sp, #20
 8007b14:	9001      	str	r0, [sp, #4]
 8007b16:	9100      	str	r1, [sp, #0]
  char *p;

  if (str != NULL)
 8007b18:	9b01      	ldr	r3, [sp, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d002      	beq.n	8007b24 <parse_arguments+0x14>
    *saveptr = str;
 8007b1e:	9b00      	ldr	r3, [sp, #0]
 8007b20:	9a01      	ldr	r2, [sp, #4]
 8007b22:	601a      	str	r2, [r3, #0]

  p = *saveptr;
 8007b24:	9b00      	ldr	r3, [sp, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	9303      	str	r3, [sp, #12]
  if (!p) {
 8007b2a:	9b03      	ldr	r3, [sp, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <parse_arguments+0x24>
    return NULL;
 8007b30:	2300      	movs	r3, #0
 8007b32:	e034      	b.n	8007b9e <parse_arguments+0x8e>
  }

  /* Skipping white space.*/
  p += strspn(p, " \t");
 8007b34:	4a1b      	ldr	r2, [pc, #108]	; (8007ba4 <parse_arguments+0x94>)
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	0011      	movs	r1, r2
 8007b3a:	0018      	movs	r0, r3
 8007b3c:	f003 f992 	bl	800ae64 <strspn>
 8007b40:	0002      	movs	r2, r0
 8007b42:	9b03      	ldr	r3, [sp, #12]
 8007b44:	189b      	adds	r3, r3, r2
 8007b46:	9303      	str	r3, [sp, #12]

  if (*p == '"') {
 8007b48:	9b03      	ldr	r3, [sp, #12]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	2b22      	cmp	r3, #34	; 0x22
 8007b4e:	d10b      	bne.n	8007b68 <parse_arguments+0x58>
    /* If an argument starts with a double quote then its delimiter is another
       quote.*/
    p++;
 8007b50:	9b03      	ldr	r3, [sp, #12]
 8007b52:	3301      	adds	r3, #1
 8007b54:	9303      	str	r3, [sp, #12]
    *saveptr = strpbrk(p, "\"");
 8007b56:	9b03      	ldr	r3, [sp, #12]
 8007b58:	2122      	movs	r1, #34	; 0x22
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	f003 f906 	bl	800ad6c <strchr>
 8007b60:	0002      	movs	r2, r0
 8007b62:	9b00      	ldr	r3, [sp, #0]
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	e008      	b.n	8007b7a <parse_arguments+0x6a>
  }
  else {
    /* The delimiter is white space.*/
    *saveptr = strpbrk(p, " \t");
 8007b68:	4a0e      	ldr	r2, [pc, #56]	; (8007ba4 <parse_arguments+0x94>)
 8007b6a:	9b03      	ldr	r3, [sp, #12]
 8007b6c:	0011      	movs	r1, r2
 8007b6e:	0018      	movs	r0, r3
 8007b70:	f003 f95c 	bl	800ae2c <strpbrk>
 8007b74:	0002      	movs	r2, r0
 8007b76:	9b00      	ldr	r3, [sp, #0]
 8007b78:	601a      	str	r2, [r3, #0]
  }

  /* Replacing the delimiter with a zero.*/
  if (*saveptr != NULL) {
 8007b7a:	9b00      	ldr	r3, [sp, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d006      	beq.n	8007b90 <parse_arguments+0x80>
    *(*saveptr)++ = '\0';
 8007b82:	9b00      	ldr	r3, [sp, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	1c59      	adds	r1, r3, #1
 8007b88:	9a00      	ldr	r2, [sp, #0]
 8007b8a:	6011      	str	r1, [r2, #0]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	701a      	strb	r2, [r3, #0]
  }

  return *p != '\0' ? p : NULL;
 8007b90:	9b03      	ldr	r3, [sp, #12]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <parse_arguments+0x8c>
 8007b98:	9b03      	ldr	r3, [sp, #12]
 8007b9a:	e000      	b.n	8007b9e <parse_arguments+0x8e>
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	0018      	movs	r0, r3
 8007ba0:	b005      	add	sp, #20
 8007ba2:	bd00      	pop	{pc}
 8007ba4:	0800b5b4 	.word	0x0800b5b4
	...

08007bb0 <list_commands>:

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {
 8007bb0:	b500      	push	{lr}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	9001      	str	r0, [sp, #4]
 8007bb6:	9100      	str	r1, [sp, #0]
 8007bb8:	e009      	b.n	8007bce <list_commands+0x1e>

  while (scp->sc_name != NULL) {
    chprintf(chp, "%s ", scp->sc_name);
 8007bba:	9b00      	ldr	r3, [sp, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	4907      	ldr	r1, [pc, #28]	; (8007bdc <list_commands+0x2c>)
 8007bc0:	9b01      	ldr	r3, [sp, #4]
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	f000 fdec 	bl	80087a0 <chprintf>
    scp++;
 8007bc8:	9b00      	ldr	r3, [sp, #0]
 8007bca:	3308      	adds	r3, #8
 8007bcc:	9300      	str	r3, [sp, #0]
  while (scp->sc_name != NULL) {
 8007bce:	9b00      	ldr	r3, [sp, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1f1      	bne.n	8007bba <list_commands+0xa>
  }
}
 8007bd6:	b003      	add	sp, #12
 8007bd8:	bd00      	pop	{pc}
 8007bda:	46c0      	nop			; (mov r8, r8)
 8007bdc:	0800bbb0 	.word	0x0800bbb0

08007be0 <cmdexec>:

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {
 8007be0:	b500      	push	{lr}
 8007be2:	b085      	sub	sp, #20
 8007be4:	9003      	str	r0, [sp, #12]
 8007be6:	9102      	str	r1, [sp, #8]
 8007be8:	9201      	str	r2, [sp, #4]
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	e013      	b.n	8007c16 <cmdexec+0x36>

  while (scp->sc_name != NULL) {
    if (strcmp(scp->sc_name, name) == 0) {
 8007bee:	9b03      	ldr	r3, [sp, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	9a01      	ldr	r2, [sp, #4]
 8007bf4:	0011      	movs	r1, r2
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	f7fb f9be 	bl	8002f78 <strcmp>
 8007bfc:	1e03      	subs	r3, r0, #0
 8007bfe:	d107      	bne.n	8007c10 <cmdexec+0x30>
      scp->sc_function(chp, argc, argv);
 8007c00:	9b03      	ldr	r3, [sp, #12]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	9a06      	ldr	r2, [sp, #24]
 8007c06:	9900      	ldr	r1, [sp, #0]
 8007c08:	9802      	ldr	r0, [sp, #8]
 8007c0a:	4798      	blx	r3
      return false;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	e007      	b.n	8007c20 <cmdexec+0x40>
    }
    scp++;
 8007c10:	9b03      	ldr	r3, [sp, #12]
 8007c12:	3308      	adds	r3, #8
 8007c14:	9303      	str	r3, [sp, #12]
  while (scp->sc_name != NULL) {
 8007c16:	9b03      	ldr	r3, [sp, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1e7      	bne.n	8007bee <cmdexec+0xe>
  }
  return true;
 8007c1e:	2301      	movs	r3, #1
}
 8007c20:	0018      	movs	r0, r3
 8007c22:	b005      	add	sp, #20
 8007c24:	bd00      	pop	{pc}
 8007c26:	46c0      	nop			; (mov r8, r8)
	...

08007c30 <shellThread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
THD_FUNCTION(shellThread, p) {
 8007c30:	b510      	push	{r4, lr}
 8007c32:	b0a2      	sub	sp, #136	; 0x88
 8007c34:	9003      	str	r0, [sp, #12]
  int n;
  ShellConfig *scfg = p;
 8007c36:	9b03      	ldr	r3, [sp, #12]
 8007c38:	931f      	str	r3, [sp, #124]	; 0x7c
  BaseSequentialStream *chp = scfg->sc_channel;
 8007c3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	931e      	str	r3, [sp, #120]	; 0x78
  const ShellCommand *scp = scfg->sc_commands;
 8007c40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	931d      	str	r3, [sp, #116]	; 0x74
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

#if !defined(__CHIBIOS_NIL__)
  chRegSetThreadName(SHELL_THREAD_NAME);
 8007c46:	4b61      	ldr	r3, [pc, #388]	; (8007dcc <shellThread+0x19c>)
 8007c48:	0018      	movs	r0, r3
 8007c4a:	f7ff ff41 	bl	8007ad0 <chRegSetThreadName.lto_priv.0>
                       0,
                       0
  };
  ShellHistory *shp = &hist;
#else
  ShellHistory *shp = NULL;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	931c      	str	r3, [sp, #112]	; 0x70
#endif

  chprintf(chp, SHELL_NEWLINE_STR);
 8007c52:	4a5f      	ldr	r2, [pc, #380]	; (8007dd0 <shellThread+0x1a0>)
 8007c54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c56:	0011      	movs	r1, r2
 8007c58:	0018      	movs	r0, r3
 8007c5a:	f000 fda1 	bl	80087a0 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 8007c5e:	4a5d      	ldr	r2, [pc, #372]	; (8007dd4 <shellThread+0x1a4>)
 8007c60:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c62:	0011      	movs	r1, r2
 8007c64:	0018      	movs	r0, r3
 8007c66:	f000 fd9b 	bl	80087a0 <chprintf>
 8007c6a:	e09f      	b.n	8007dac <shellThread+0x17c>
#if !defined(__CHIBIOS_NIL__)
  while (!chThdShouldTerminateX()) {
#else
  while (true) {
#endif
    chprintf(chp, SHELL_PROMPT_STR);
 8007c6c:	4a5a      	ldr	r2, [pc, #360]	; (8007dd8 <shellThread+0x1a8>)
 8007c6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c70:	0011      	movs	r1, r2
 8007c72:	0018      	movs	r0, r3
 8007c74:	f000 fd94 	bl	80087a0 <chprintf>
    if (shellGetLine(scfg, line, sizeof(line), shp)) {
 8007c78:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007c7a:	a90a      	add	r1, sp, #40	; 0x28
 8007c7c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007c7e:	2240      	movs	r2, #64	; 0x40
 8007c80:	f000 f8de 	bl	8007e40 <shellGetLine>
 8007c84:	1e03      	subs	r3, r0, #0
 8007c86:	d00c      	beq.n	8007ca2 <shellThread+0x72>
#if (SHELL_CMD_EXIT_ENABLED == TRUE) && !defined(__CHIBIOS_NIL__)
      chprintf(chp, SHELL_NEWLINE_STR);
 8007c88:	4a51      	ldr	r2, [pc, #324]	; (8007dd0 <shellThread+0x1a0>)
 8007c8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c8c:	0011      	movs	r1, r2
 8007c8e:	0018      	movs	r0, r3
 8007c90:	f000 fd86 	bl	80087a0 <chprintf>
      chprintf(chp, "logout");
 8007c94:	4a51      	ldr	r2, [pc, #324]	; (8007ddc <shellThread+0x1ac>)
 8007c96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c98:	0011      	movs	r1, r2
 8007c9a:	0018      	movs	r0, r3
 8007c9c:	f000 fd80 	bl	80087a0 <chprintf>
 8007ca0:	e08e      	b.n	8007dc0 <shellThread+0x190>
         an unavailable stream.*/
      osalThreadSleepMilliseconds(100);
      continue;
#endif
    }
    lp = parse_arguments(line, &tokp);
 8007ca2:	aa1a      	add	r2, sp, #104	; 0x68
 8007ca4:	ab0a      	add	r3, sp, #40	; 0x28
 8007ca6:	0011      	movs	r1, r2
 8007ca8:	0018      	movs	r0, r3
 8007caa:	f7ff ff31 	bl	8007b10 <parse_arguments>
 8007cae:	0003      	movs	r3, r0
 8007cb0:	931b      	str	r3, [sp, #108]	; 0x6c
    cmd = lp;
 8007cb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cb4:	9320      	str	r3, [sp, #128]	; 0x80
    n = 0;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	9321      	str	r3, [sp, #132]	; 0x84
 8007cba:	e012      	b.n	8007ce2 <shellThread+0xb2>
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
      if (n >= SHELL_MAX_ARGUMENTS) {
 8007cbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cbe:	2b03      	cmp	r3, #3
 8007cc0:	dd08      	ble.n	8007cd4 <shellThread+0xa4>
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 8007cc2:	4a47      	ldr	r2, [pc, #284]	; (8007de0 <shellThread+0x1b0>)
 8007cc4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007cc6:	0011      	movs	r1, r2
 8007cc8:	0018      	movs	r0, r3
 8007cca:	f000 fd69 	bl	80087a0 <chprintf>
        cmd = NULL;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9320      	str	r3, [sp, #128]	; 0x80
 8007cd2:	e010      	b.n	8007cf6 <shellThread+0xc6>
        break;
      }
      args[n++] = lp;
 8007cd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cd6:	1c5a      	adds	r2, r3, #1
 8007cd8:	9221      	str	r2, [sp, #132]	; 0x84
 8007cda:	aa05      	add	r2, sp, #20
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007ce0:	5099      	str	r1, [r3, r2]
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8007ce2:	ab1a      	add	r3, sp, #104	; 0x68
 8007ce4:	0019      	movs	r1, r3
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	f7ff ff12 	bl	8007b10 <parse_arguments>
 8007cec:	0003      	movs	r3, r0
 8007cee:	931b      	str	r3, [sp, #108]	; 0x6c
 8007cf0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e2      	bne.n	8007cbc <shellThread+0x8c>
    }
    args[n] = NULL;
 8007cf6:	ab05      	add	r3, sp, #20
 8007cf8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007cfa:	0092      	lsls	r2, r2, #2
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	50d1      	str	r1, [r2, r3]
    if (cmd != NULL) {
 8007d00:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d052      	beq.n	8007dac <shellThread+0x17c>
      if (strcmp(cmd, "help") == 0) {
 8007d06:	4a37      	ldr	r2, [pc, #220]	; (8007de4 <shellThread+0x1b4>)
 8007d08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d0a:	0011      	movs	r1, r2
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	f7fb f933 	bl	8002f78 <strcmp>
 8007d12:	1e03      	subs	r3, r0, #0
 8007d14:	d125      	bne.n	8007d62 <shellThread+0x132>
        if (n > 0) {
 8007d16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	dd06      	ble.n	8007d2a <shellThread+0xfa>
          shellUsage(chp, "help");
 8007d1c:	4a31      	ldr	r2, [pc, #196]	; (8007de4 <shellThread+0x1b4>)
 8007d1e:	4932      	ldr	r1, [pc, #200]	; (8007de8 <shellThread+0x1b8>)
 8007d20:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d22:	0018      	movs	r0, r3
 8007d24:	f000 fd3c 	bl	80087a0 <chprintf>
 8007d28:	e040      	b.n	8007dac <shellThread+0x17c>
          continue;
        }
        chprintf(chp, "Commands: help ");
 8007d2a:	4a30      	ldr	r2, [pc, #192]	; (8007dec <shellThread+0x1bc>)
 8007d2c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d2e:	0011      	movs	r1, r2
 8007d30:	0018      	movs	r0, r3
 8007d32:	f000 fd35 	bl	80087a0 <chprintf>
        list_commands(chp, shell_local_commands);
 8007d36:	4a2e      	ldr	r2, [pc, #184]	; (8007df0 <shellThread+0x1c0>)
 8007d38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d3a:	0011      	movs	r1, r2
 8007d3c:	0018      	movs	r0, r3
 8007d3e:	f7ff ff37 	bl	8007bb0 <list_commands>
        if (scp != NULL)
 8007d42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d005      	beq.n	8007d54 <shellThread+0x124>
          list_commands(chp, scp);
 8007d48:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007d4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d4c:	0011      	movs	r1, r2
 8007d4e:	0018      	movs	r0, r3
 8007d50:	f7ff ff2e 	bl	8007bb0 <list_commands>
        chprintf(chp, SHELL_NEWLINE_STR);
 8007d54:	4a1e      	ldr	r2, [pc, #120]	; (8007dd0 <shellThread+0x1a0>)
 8007d56:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d58:	0011      	movs	r1, r2
 8007d5a:	0018      	movs	r0, r3
 8007d5c:	f000 fd20 	bl	80087a0 <chprintf>
 8007d60:	e024      	b.n	8007dac <shellThread+0x17c>
      }
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 8007d62:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8007d64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007d66:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007d68:	4821      	ldr	r0, [pc, #132]	; (8007df0 <shellThread+0x1c0>)
 8007d6a:	ab05      	add	r3, sp, #20
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	0023      	movs	r3, r4
 8007d70:	f7ff ff36 	bl	8007be0 <cmdexec>
 8007d74:	1e03      	subs	r3, r0, #0
 8007d76:	d019      	beq.n	8007dac <shellThread+0x17c>
 8007d78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00a      	beq.n	8007d94 <shellThread+0x164>
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
 8007d7e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8007d80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007d82:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007d84:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007d86:	ab05      	add	r3, sp, #20
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	0023      	movs	r3, r4
 8007d8c:	f7ff ff28 	bl	8007be0 <cmdexec>
 8007d90:	1e03      	subs	r3, r0, #0
 8007d92:	d00b      	beq.n	8007dac <shellThread+0x17c>
        chprintf(chp, "%s", cmd);
 8007d94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007d96:	4917      	ldr	r1, [pc, #92]	; (8007df4 <shellThread+0x1c4>)
 8007d98:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	f000 fd00 	bl	80087a0 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 8007da0:	4a15      	ldr	r2, [pc, #84]	; (8007df8 <shellThread+0x1c8>)
 8007da2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007da4:	0011      	movs	r1, r2
 8007da6:	0018      	movs	r0, r3
 8007da8:	f000 fcfa 	bl	80087a0 <chprintf>
  while (!chThdShouldTerminateX()) {
 8007dac:	f7ff fe80 	bl	8007ab0 <chThdShouldTerminateX>
 8007db0:	0003      	movs	r3, r0
 8007db2:	001a      	movs	r2, r3
 8007db4:	2301      	movs	r3, #1
 8007db6:	4053      	eors	r3, r2
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d000      	beq.n	8007dc0 <shellThread+0x190>
 8007dbe:	e755      	b.n	8007c6c <shellThread+0x3c>
      }
    }
  }
#if !defined(__CHIBIOS_NIL__)
  shellExit(MSG_OK);
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	f000 f825 	bl	8007e10 <shellExit>
#endif
}
 8007dc6:	b022      	add	sp, #136	; 0x88
 8007dc8:	bd10      	pop	{r4, pc}
 8007dca:	46c0      	nop			; (mov r8, r8)
 8007dcc:	0800b5b8 	.word	0x0800b5b8
 8007dd0:	0800b898 	.word	0x0800b898
 8007dd4:	0800b5c0 	.word	0x0800b5c0
 8007dd8:	0800b5d4 	.word	0x0800b5d4
 8007ddc:	0800b5dc 	.word	0x0800b5dc
 8007de0:	0800b5e4 	.word	0x0800b5e4
 8007de4:	0800b5fc 	.word	0x0800b5fc
 8007de8:	0800b604 	.word	0x0800b604
 8007dec:	0800b610 	.word	0x0800b610
 8007df0:	0800b8c8 	.word	0x0800b8c8
 8007df4:	0800b620 	.word	0x0800b620
 8007df8:	0800b624 	.word	0x0800b624
 8007dfc:	00000000 	.word	0x00000000

08007e00 <shellInit>:
/**
 * @brief   Shell manager initialization.
 *
 * @api
 */
void shellInit(void) {
 8007e00:	b510      	push	{r4, lr}

#if !defined(__CHIBIOS_NIL__)
  chEvtObjectInit(&shell_terminated);
 8007e02:	4b02      	ldr	r3, [pc, #8]	; (8007e0c <shellInit+0xc>)
 8007e04:	0018      	movs	r0, r3
 8007e06:	f7ff f84b 	bl	8006ea0 <chEvtObjectInit>
#endif
}
 8007e0a:	bd10      	pop	{r4, pc}
 8007e0c:	20000c10 	.word	0x20000c10

08007e10 <shellExit>:
 *
 * @param[in] msg       shell exit code
 *
 * @api
 */
void shellExit(msg_t msg) {
 8007e10:	b500      	push	{lr}
 8007e12:	b083      	sub	sp, #12
 8007e14:	9001      	str	r0, [sp, #4]

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
 8007e16:	f7ff fe3b 	bl	8007a90 <chSysLock.lto_priv.19>
  chEvtBroadcastI(&shell_terminated);
 8007e1a:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <shellExit+0x20>)
 8007e1c:	0018      	movs	r0, r3
 8007e1e:	f7ff fe67 	bl	8007af0 <chEvtBroadcastI>
  chThdExitS(msg);
 8007e22:	9b01      	ldr	r3, [sp, #4]
 8007e24:	0018      	movs	r0, r3
 8007e26:	f7fe fca3 	bl	8006770 <chThdExitS>
}
 8007e2a:	b003      	add	sp, #12
 8007e2c:	bd00      	pop	{pc}
 8007e2e:	46c0      	nop			; (mov r8, r8)
 8007e30:	20000c10 	.word	0x20000c10
	...

08007e40 <shellGetLine>:
 * @retval true         the channel was reset or CTRL-D pressed.
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(ShellConfig *scfg, char *line, unsigned size, ShellHistory *shp) {
 8007e40:	b500      	push	{lr}
 8007e42:	b089      	sub	sp, #36	; 0x24
 8007e44:	9003      	str	r0, [sp, #12]
 8007e46:	9102      	str	r1, [sp, #8]
 8007e48:	9201      	str	r2, [sp, #4]
 8007e4a:	9300      	str	r3, [sp, #0]
  char *p = line;
 8007e4c:	9b02      	ldr	r3, [sp, #8]
 8007e4e:	9307      	str	r3, [sp, #28]
  BaseSequentialStream *chp = scfg->sc_channel;
 8007e50:	9b03      	ldr	r3, [sp, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	9306      	str	r3, [sp, #24]
#endif

  while (true) {
    char c;

    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 8007e56:	9b06      	ldr	r3, [sp, #24]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	2117      	movs	r1, #23
 8007e5e:	4469      	add	r1, sp
 8007e60:	9806      	ldr	r0, [sp, #24]
 8007e62:	2201      	movs	r2, #1
 8007e64:	4798      	blx	r3
 8007e66:	1e03      	subs	r3, r0, #0
 8007e68:	d101      	bne.n	8007e6e <shellGetLine+0x2e>
      return true;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e064      	b.n	8007f38 <shellGetLine+0xf8>
      }
      continue;
    }
#endif
#if (SHELL_CMD_EXIT_ENABLED == TRUE) && !defined(__CHIBIOS_NIL__)
    if (c == 4) {
 8007e6e:	2317      	movs	r3, #23
 8007e70:	446b      	add	r3, sp
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	2b04      	cmp	r3, #4
 8007e76:	d107      	bne.n	8007e88 <shellGetLine+0x48>
      chprintf(chp, "^D");
 8007e78:	4a31      	ldr	r2, [pc, #196]	; (8007f40 <shellGetLine+0x100>)
 8007e7a:	9b06      	ldr	r3, [sp, #24]
 8007e7c:	0011      	movs	r1, r2
 8007e7e:	0018      	movs	r0, r3
 8007e80:	f000 fc8e 	bl	80087a0 <chprintf>
      return true;
 8007e84:	2301      	movs	r3, #1
      return true;
 8007e86:	e057      	b.n	8007f38 <shellGetLine+0xf8>
    }
#endif
    if ((c == 8) || (c == 127)) {
 8007e88:	2317      	movs	r3, #23
 8007e8a:	446b      	add	r3, sp
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	2b08      	cmp	r3, #8
 8007e90:	d004      	beq.n	8007e9c <shellGetLine+0x5c>
 8007e92:	2317      	movs	r3, #23
 8007e94:	446b      	add	r3, sp
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	2b7f      	cmp	r3, #127	; 0x7f
 8007e9a:	d11c      	bne.n	8007ed6 <shellGetLine+0x96>
      if (p != line) {
 8007e9c:	9a07      	ldr	r2, [sp, #28]
 8007e9e:	9b02      	ldr	r3, [sp, #8]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d045      	beq.n	8007f30 <shellGetLine+0xf0>
        streamPut(chp, 0x08);
 8007ea4:	9b06      	ldr	r3, [sp, #24]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	9a06      	ldr	r2, [sp, #24]
 8007eac:	2108      	movs	r1, #8
 8007eae:	0010      	movs	r0, r2
 8007eb0:	4798      	blx	r3
        streamPut(chp, 0x20);
 8007eb2:	9b06      	ldr	r3, [sp, #24]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	9a06      	ldr	r2, [sp, #24]
 8007eba:	2120      	movs	r1, #32
 8007ebc:	0010      	movs	r0, r2
 8007ebe:	4798      	blx	r3
        streamPut(chp, 0x08);
 8007ec0:	9b06      	ldr	r3, [sp, #24]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	9a06      	ldr	r2, [sp, #24]
 8007ec8:	2108      	movs	r1, #8
 8007eca:	0010      	movs	r0, r2
 8007ecc:	4798      	blx	r3
        p--;
 8007ece:	9b07      	ldr	r3, [sp, #28]
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	9307      	str	r3, [sp, #28]
 8007ed4:	e7bf      	b.n	8007e56 <shellGetLine+0x16>
      }
      continue;
    }
    if (c == '\r') {
 8007ed6:	2317      	movs	r3, #23
 8007ed8:	446b      	add	r3, sp
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2b0d      	cmp	r3, #13
 8007ede:	d10a      	bne.n	8007ef6 <shellGetLine+0xb6>
      chprintf(chp, SHELL_NEWLINE_STR);
 8007ee0:	4a18      	ldr	r2, [pc, #96]	; (8007f44 <shellGetLine+0x104>)
 8007ee2:	9b06      	ldr	r3, [sp, #24]
 8007ee4:	0011      	movs	r1, r2
 8007ee6:	0018      	movs	r0, r3
 8007ee8:	f000 fc5a 	bl	80087a0 <chprintf>
#if SHELL_USE_HISTORY == TRUE
      save_history(shp, line, p - line);
#endif
      *p = 0;
 8007eec:	9b07      	ldr	r3, [sp, #28]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	701a      	strb	r2, [r3, #0]
      return false;
 8007ef2:	2300      	movs	r3, #0
      return true;
 8007ef4:	e020      	b.n	8007f38 <shellGetLine+0xf8>
        p = line + len;
      }
      continue;
    }
#endif
    if (c < 0x20)
 8007ef6:	2317      	movs	r3, #23
 8007ef8:	446b      	add	r3, sp
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	2b1f      	cmp	r3, #31
 8007efe:	d919      	bls.n	8007f34 <shellGetLine+0xf4>
      continue;
    if (p < line + size - 1) {
 8007f00:	9b01      	ldr	r3, [sp, #4]
 8007f02:	3b01      	subs	r3, #1
 8007f04:	9a02      	ldr	r2, [sp, #8]
 8007f06:	18d3      	adds	r3, r2, r3
 8007f08:	9a07      	ldr	r2, [sp, #28]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d2a3      	bcs.n	8007e56 <shellGetLine+0x16>
      streamPut(chp, c);
 8007f0e:	9b06      	ldr	r3, [sp, #24]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	2217      	movs	r2, #23
 8007f16:	446a      	add	r2, sp
 8007f18:	7811      	ldrb	r1, [r2, #0]
 8007f1a:	9a06      	ldr	r2, [sp, #24]
 8007f1c:	0010      	movs	r0, r2
 8007f1e:	4798      	blx	r3
      *p++ = (char)c;
 8007f20:	9b07      	ldr	r3, [sp, #28]
 8007f22:	1c5a      	adds	r2, r3, #1
 8007f24:	9207      	str	r2, [sp, #28]
 8007f26:	2217      	movs	r2, #23
 8007f28:	446a      	add	r2, sp
 8007f2a:	7812      	ldrb	r2, [r2, #0]
 8007f2c:	701a      	strb	r2, [r3, #0]
 8007f2e:	e792      	b.n	8007e56 <shellGetLine+0x16>
      continue;
 8007f30:	46c0      	nop			; (mov r8, r8)
 8007f32:	e790      	b.n	8007e56 <shellGetLine+0x16>
      continue;
 8007f34:	46c0      	nop			; (mov r8, r8)
 8007f36:	e78e      	b.n	8007e56 <shellGetLine+0x16>
    }
  }
}
 8007f38:	0018      	movs	r0, r3
 8007f3a:	b009      	add	sp, #36	; 0x24
 8007f3c:	bd00      	pop	{pc}
 8007f3e:	46c0      	nop			; (mov r8, r8)
 8007f40:	0800b62c 	.word	0x0800b62c
 8007f44:	0800b898 	.word	0x0800b898
	...

08007f50 <port_timer_get_time.lto_priv.3>:
static inline systime_t port_timer_get_time(void) {
 8007f50:	b510      	push	{r4, lr}
  return stGetCounter();
 8007f52:	f7fb f90d 	bl	8003170 <stGetCounter>
 8007f56:	0003      	movs	r3, r0
}
 8007f58:	0018      	movs	r0, r3
 8007f5a:	bd10      	pop	{r4, pc}
 8007f5c:	0000      	movs	r0, r0
	...

08007f60 <chVTGetSystemTimeX.lto_priv.3>:
static inline systime_t chVTGetSystemTimeX(void) {
 8007f60:	b510      	push	{r4, lr}
  return port_timer_get_time();
 8007f62:	f7ff fff5 	bl	8007f50 <port_timer_get_time.lto_priv.3>
 8007f66:	0003      	movs	r3, r0
}
 8007f68:	0018      	movs	r0, r3
 8007f6a:	bd10      	pop	{r4, pc}
 8007f6c:	0000      	movs	r0, r0
	...

08007f70 <cmd_exit>:
/* Module local functions.                                                   */
/*===========================================================================*/

#if ((SHELL_CMD_EXIT_ENABLED == TRUE) && !defined(__CHIBIOS_NIL__)) ||        \
    defined(__DOXYGEN__)
static void cmd_exit(BaseSequentialStream *chp, int argc, char *argv[]) {
 8007f70:	b500      	push	{lr}
 8007f72:	b085      	sub	sp, #20
 8007f74:	9003      	str	r0, [sp, #12]
 8007f76:	9102      	str	r1, [sp, #8]
 8007f78:	9201      	str	r2, [sp, #4]

  (void)argv;
  if (argc > 0) {
 8007f7a:	9b02      	ldr	r3, [sp, #8]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	dd06      	ble.n	8007f8e <cmd_exit+0x1e>
    shellUsage(chp, "exit");
 8007f80:	4a05      	ldr	r2, [pc, #20]	; (8007f98 <cmd_exit+0x28>)
 8007f82:	4906      	ldr	r1, [pc, #24]	; (8007f9c <cmd_exit+0x2c>)
 8007f84:	9b03      	ldr	r3, [sp, #12]
 8007f86:	0018      	movs	r0, r3
 8007f88:	f000 fc0a 	bl	80087a0 <chprintf>
 8007f8c:	e002      	b.n	8007f94 <cmd_exit+0x24>
    return;
  }

  shellExit(MSG_OK);
 8007f8e:	2000      	movs	r0, #0
 8007f90:	f7ff ff3e 	bl	8007e10 <shellExit>
}
 8007f94:	b005      	add	sp, #20
 8007f96:	bd00      	pop	{pc}
 8007f98:	0800b630 	.word	0x0800b630
 8007f9c:	0800b604 	.word	0x0800b604

08007fa0 <cmd_info>:
#endif

#if (SHELL_CMD_INFO_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8007fa0:	b510      	push	{r4, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	9005      	str	r0, [sp, #20]
 8007fa6:	9104      	str	r1, [sp, #16]
 8007fa8:	9203      	str	r2, [sp, #12]

  (void)argv;
  if (argc > 0) {
 8007faa:	9b04      	ldr	r3, [sp, #16]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	dd06      	ble.n	8007fbe <cmd_info+0x1e>
    shellUsage(chp, "info");
 8007fb0:	4a1d      	ldr	r2, [pc, #116]	; (8008028 <cmd_info+0x88>)
 8007fb2:	491e      	ldr	r1, [pc, #120]	; (800802c <cmd_info+0x8c>)
 8007fb4:	9b05      	ldr	r3, [sp, #20]
 8007fb6:	0018      	movs	r0, r3
 8007fb8:	f000 fbf2 	bl	80087a0 <chprintf>
 8007fbc:	e032      	b.n	8008024 <cmd_info+0x84>
    return;
  }

  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 8007fbe:	4a1c      	ldr	r2, [pc, #112]	; (8008030 <cmd_info+0x90>)
 8007fc0:	491c      	ldr	r1, [pc, #112]	; (8008034 <cmd_info+0x94>)
 8007fc2:	9b05      	ldr	r3, [sp, #20]
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	f000 fbeb 	bl	80087a0 <chprintf>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s" SHELL_NEWLINE_STR, PORT_COMPILER_NAME);
 8007fca:	4a1b      	ldr	r2, [pc, #108]	; (8008038 <cmd_info+0x98>)
 8007fcc:	491b      	ldr	r1, [pc, #108]	; (800803c <cmd_info+0x9c>)
 8007fce:	9b05      	ldr	r3, [sp, #20]
 8007fd0:	0018      	movs	r0, r3
 8007fd2:	f000 fbe5 	bl	80087a0 <chprintf>
#endif
  chprintf(chp, "Architecture: %s" SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 8007fd6:	4a1a      	ldr	r2, [pc, #104]	; (8008040 <cmd_info+0xa0>)
 8007fd8:	491a      	ldr	r1, [pc, #104]	; (8008044 <cmd_info+0xa4>)
 8007fda:	9b05      	ldr	r3, [sp, #20]
 8007fdc:	0018      	movs	r0, r3
 8007fde:	f000 fbdf 	bl	80087a0 <chprintf>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s" SHELL_NEWLINE_STR, PORT_CORE_VARIANT_NAME);
 8007fe2:	4a19      	ldr	r2, [pc, #100]	; (8008048 <cmd_info+0xa8>)
 8007fe4:	4919      	ldr	r1, [pc, #100]	; (800804c <cmd_info+0xac>)
 8007fe6:	9b05      	ldr	r3, [sp, #20]
 8007fe8:	0018      	movs	r0, r3
 8007fea:	f000 fbd9 	bl	80087a0 <chprintf>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s" SHELL_NEWLINE_STR, PORT_INFO);
 8007fee:	4a18      	ldr	r2, [pc, #96]	; (8008050 <cmd_info+0xb0>)
 8007ff0:	4918      	ldr	r1, [pc, #96]	; (8008054 <cmd_info+0xb4>)
 8007ff2:	9b05      	ldr	r3, [sp, #20]
 8007ff4:	0018      	movs	r0, r3
 8007ff6:	f000 fbd3 	bl	80087a0 <chprintf>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s" SHELL_NEWLINE_STR, PLATFORM_NAME);
 8007ffa:	4a17      	ldr	r2, [pc, #92]	; (8008058 <cmd_info+0xb8>)
 8007ffc:	4917      	ldr	r1, [pc, #92]	; (800805c <cmd_info+0xbc>)
 8007ffe:	9b05      	ldr	r3, [sp, #20]
 8008000:	0018      	movs	r0, r3
 8008002:	f000 fbcd 	bl	80087a0 <chprintf>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s" SHELL_NEWLINE_STR, BOARD_NAME);
 8008006:	4a16      	ldr	r2, [pc, #88]	; (8008060 <cmd_info+0xc0>)
 8008008:	4916      	ldr	r1, [pc, #88]	; (8008064 <cmd_info+0xc4>)
 800800a:	9b05      	ldr	r3, [sp, #20]
 800800c:	0018      	movs	r0, r3
 800800e:	f000 fbc7 	bl	80087a0 <chprintf>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s" SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 8008012:	4c15      	ldr	r4, [pc, #84]	; (8008068 <cmd_info+0xc8>)
 8008014:	4a15      	ldr	r2, [pc, #84]	; (800806c <cmd_info+0xcc>)
 8008016:	4916      	ldr	r1, [pc, #88]	; (8008070 <cmd_info+0xd0>)
 8008018:	9805      	ldr	r0, [sp, #20]
 800801a:	4b16      	ldr	r3, [pc, #88]	; (8008074 <cmd_info+0xd4>)
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	0023      	movs	r3, r4
 8008020:	f000 fbbe 	bl	80087a0 <chprintf>
#endif
#endif
}
 8008024:	b006      	add	sp, #24
 8008026:	bd10      	pop	{r4, pc}
 8008028:	0800b638 	.word	0x0800b638
 800802c:	0800b604 	.word	0x0800b604
 8008030:	0800b640 	.word	0x0800b640
 8008034:	0800b648 	.word	0x0800b648
 8008038:	0800b65c 	.word	0x0800b65c
 800803c:	0800b67c 	.word	0x0800b67c
 8008040:	0800b690 	.word	0x0800b690
 8008044:	0800b698 	.word	0x0800b698
 8008048:	0800b6ac 	.word	0x0800b6ac
 800804c:	0800b6b8 	.word	0x0800b6b8
 8008050:	0800b6cc 	.word	0x0800b6cc
 8008054:	0800b6e4 	.word	0x0800b6e4
 8008058:	0800b6f8 	.word	0x0800b6f8
 800805c:	0800b724 	.word	0x0800b724
 8008060:	0800b738 	.word	0x0800b738
 8008064:	0800b764 	.word	0x0800b764
 8008068:	0800b778 	.word	0x0800b778
 800806c:	0800b77c 	.word	0x0800b77c
 8008070:	0800b788 	.word	0x0800b788
 8008074:	0800b7a0 	.word	0x0800b7a0
	...

08008080 <cmd_echo>:
#endif

#if (SHELL_CMD_ECHO_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_echo(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008080:	b500      	push	{lr}
 8008082:	b085      	sub	sp, #20
 8008084:	9003      	str	r0, [sp, #12]
 8008086:	9102      	str	r1, [sp, #8]
 8008088:	9201      	str	r2, [sp, #4]

  (void)argv;
  if (argc != 1) {
 800808a:	9b02      	ldr	r3, [sp, #8]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d006      	beq.n	800809e <cmd_echo+0x1e>
    shellUsage(chp, "echo \"message\"");
 8008090:	4a07      	ldr	r2, [pc, #28]	; (80080b0 <cmd_echo+0x30>)
 8008092:	4908      	ldr	r1, [pc, #32]	; (80080b4 <cmd_echo+0x34>)
 8008094:	9b03      	ldr	r3, [sp, #12]
 8008096:	0018      	movs	r0, r3
 8008098:	f000 fb82 	bl	80087a0 <chprintf>
 800809c:	e006      	b.n	80080ac <cmd_echo+0x2c>
    return;
  }
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
 800809e:	9b01      	ldr	r3, [sp, #4]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	4905      	ldr	r1, [pc, #20]	; (80080b8 <cmd_echo+0x38>)
 80080a4:	9b03      	ldr	r3, [sp, #12]
 80080a6:	0018      	movs	r0, r3
 80080a8:	f000 fb7a 	bl	80087a0 <chprintf>
}
 80080ac:	b005      	add	sp, #20
 80080ae:	bd00      	pop	{pc}
 80080b0:	0800b7ac 	.word	0x0800b7ac
 80080b4:	0800b604 	.word	0x0800b604
 80080b8:	0800b7bc 	.word	0x0800b7bc
 80080bc:	00000000 	.word	0x00000000

080080c0 <cmd_systime>:
#endif

#if (SHELL_CMD_SYSTIME_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {
 80080c0:	b500      	push	{lr}
 80080c2:	b085      	sub	sp, #20
 80080c4:	9003      	str	r0, [sp, #12]
 80080c6:	9102      	str	r1, [sp, #8]
 80080c8:	9201      	str	r2, [sp, #4]

  (void)argv;
  if (argc > 0) {
 80080ca:	9b02      	ldr	r3, [sp, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	dd06      	ble.n	80080de <cmd_systime+0x1e>
    shellUsage(chp, "systime");
 80080d0:	4a08      	ldr	r2, [pc, #32]	; (80080f4 <cmd_systime+0x34>)
 80080d2:	4909      	ldr	r1, [pc, #36]	; (80080f8 <cmd_systime+0x38>)
 80080d4:	9b03      	ldr	r3, [sp, #12]
 80080d6:	0018      	movs	r0, r3
 80080d8:	f000 fb62 	bl	80087a0 <chprintf>
 80080dc:	e008      	b.n	80080f0 <cmd_systime+0x30>
    return;
  }
  chprintf(chp, "%lu" SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTimeX());
 80080de:	f7ff ff3f 	bl	8007f60 <chVTGetSystemTimeX.lto_priv.3>
 80080e2:	0003      	movs	r3, r0
 80080e4:	001a      	movs	r2, r3
 80080e6:	4905      	ldr	r1, [pc, #20]	; (80080fc <cmd_systime+0x3c>)
 80080e8:	9b03      	ldr	r3, [sp, #12]
 80080ea:	0018      	movs	r0, r3
 80080ec:	f000 fb58 	bl	80087a0 <chprintf>
}
 80080f0:	b005      	add	sp, #20
 80080f2:	bd00      	pop	{pc}
 80080f4:	0800b7c4 	.word	0x0800b7c4
 80080f8:	0800b604 	.word	0x0800b604
 80080fc:	0800b7cc 	.word	0x0800b7cc

08008100 <cmd_mem>:
#endif

#if (SHELL_CMD_MEM_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008100:	b500      	push	{lr}
 8008102:	b08b      	sub	sp, #44	; 0x2c
 8008104:	9003      	str	r0, [sp, #12]
 8008106:	9102      	str	r1, [sp, #8]
 8008108:	9201      	str	r2, [sp, #4]
  size_t n, total, largest;
  memory_area_t area;

  (void)argv;
  if (argc > 0) {
 800810a:	9b02      	ldr	r3, [sp, #8]
 800810c:	2b00      	cmp	r3, #0
 800810e:	dd06      	ble.n	800811e <cmd_mem+0x1e>
    shellUsage(chp, "mem");
 8008110:	4a16      	ldr	r2, [pc, #88]	; (800816c <cmd_mem+0x6c>)
 8008112:	4917      	ldr	r1, [pc, #92]	; (8008170 <cmd_mem+0x70>)
 8008114:	9b03      	ldr	r3, [sp, #12]
 8008116:	0018      	movs	r0, r3
 8008118:	f000 fb42 	bl	80087a0 <chprintf>
 800811c:	e024      	b.n	8008168 <cmd_mem+0x68>
    return;
  }
  n = chHeapStatus(NULL, &total, &largest);
 800811e:	aa07      	add	r2, sp, #28
 8008120:	ab08      	add	r3, sp, #32
 8008122:	0019      	movs	r1, r3
 8008124:	2000      	movs	r0, #0
 8008126:	f7ff fa33 	bl	8007590 <chHeapStatus>
 800812a:	0003      	movs	r3, r0
 800812c:	9309      	str	r3, [sp, #36]	; 0x24
  chCoreGetStatusX(&area);
 800812e:	ab05      	add	r3, sp, #20
 8008130:	0018      	movs	r0, r3
 8008132:	f7ff f86d 	bl	8007210 <chCoreGetStatusX>
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, area.size);
 8008136:	ab05      	add	r3, sp, #20
 8008138:	685a      	ldr	r2, [r3, #4]
 800813a:	490e      	ldr	r1, [pc, #56]	; (8008174 <cmd_mem+0x74>)
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	0018      	movs	r0, r3
 8008140:	f000 fb2e 	bl	80087a0 <chprintf>
  chprintf(chp, "heap fragments   : %u" SHELL_NEWLINE_STR, n);
 8008144:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008146:	490c      	ldr	r1, [pc, #48]	; (8008178 <cmd_mem+0x78>)
 8008148:	9b03      	ldr	r3, [sp, #12]
 800814a:	0018      	movs	r0, r3
 800814c:	f000 fb28 	bl	80087a0 <chprintf>
  chprintf(chp, "heap free total  : %u bytes" SHELL_NEWLINE_STR, total);
 8008150:	9a08      	ldr	r2, [sp, #32]
 8008152:	490a      	ldr	r1, [pc, #40]	; (800817c <cmd_mem+0x7c>)
 8008154:	9b03      	ldr	r3, [sp, #12]
 8008156:	0018      	movs	r0, r3
 8008158:	f000 fb22 	bl	80087a0 <chprintf>
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 800815c:	9a07      	ldr	r2, [sp, #28]
 800815e:	4908      	ldr	r1, [pc, #32]	; (8008180 <cmd_mem+0x80>)
 8008160:	9b03      	ldr	r3, [sp, #12]
 8008162:	0018      	movs	r0, r3
 8008164:	f000 fb1c 	bl	80087a0 <chprintf>
}
 8008168:	b00b      	add	sp, #44	; 0x2c
 800816a:	bd00      	pop	{pc}
 800816c:	0800b7d4 	.word	0x0800b7d4
 8008170:	0800b604 	.word	0x0800b604
 8008174:	0800b7d8 	.word	0x0800b7d8
 8008178:	0800b7f8 	.word	0x0800b7f8
 800817c:	0800b810 	.word	0x0800b810
 8008180:	0800b830 	.word	0x0800b830
	...

08008190 <cmd_threads>:
#endif

#if (SHELL_CMD_THREADS_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008192:	46c6      	mov	lr, r8
 8008194:	b500      	push	{lr}
 8008196:	b08e      	sub	sp, #56	; 0x38
 8008198:	9009      	str	r0, [sp, #36]	; 0x24
 800819a:	9108      	str	r1, [sp, #32]
 800819c:	9207      	str	r2, [sp, #28]
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 800819e:	9b08      	ldr	r3, [sp, #32]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	dd06      	ble.n	80081b2 <cmd_threads+0x22>
    shellUsage(chp, "threads");
 80081a4:	4a27      	ldr	r2, [pc, #156]	; (8008244 <cmd_threads+0xb4>)
 80081a6:	4928      	ldr	r1, [pc, #160]	; (8008248 <cmd_threads+0xb8>)
 80081a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081aa:	0018      	movs	r0, r3
 80081ac:	f000 faf8 	bl	80087a0 <chprintf>
 80081b0:	e044      	b.n	800823c <cmd_threads+0xac>
    return;
  }
  chprintf(chp, "core stklimit    stack     addr refs prio     state         name" SHELL_NEWLINE_STR);
 80081b2:	4a26      	ldr	r2, [pc, #152]	; (800824c <cmd_threads+0xbc>)
 80081b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b6:	0011      	movs	r1, r2
 80081b8:	0018      	movs	r0, r3
 80081ba:	f000 faf1 	bl	80087a0 <chprintf>
  tp = chRegFirstThread();
 80081be:	f7fe fbe7 	bl	8006990 <chRegFirstThread>
 80081c2:	0003      	movs	r3, r0
 80081c4:	930d      	str	r3, [sp, #52]	; 0x34
  do {
    core_id_t core_id;

#if !defined(__CHIBIOS_NIL__)
    core_id = tp->owner->core_id;
 80081c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081cc:	930c      	str	r3, [sp, #48]	; 0x30
#else
    core_id = 0U;
#endif
#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
    uint32_t stklimit = (uint32_t)tp->wabase;
 80081ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t stklimit = 0U;
#endif
    chprintf(chp, "%4lu %08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
             core_id,
             stklimit,
             (uint32_t)tp->ctx.sp,
 80081d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081d6:	68db      	ldr	r3, [r3, #12]
    chprintf(chp, "%4lu %08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80081d8:	4698      	mov	r8, r3
 80081da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
             (uint32_t)tp,
             (uint32_t)tp->refs - 1,
 80081dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081de:	212a      	movs	r1, #42	; 0x2a
 80081e0:	5c5b      	ldrb	r3, [r3, r1]
    chprintf(chp, "%4lu %08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80081e2:	1e59      	subs	r1, r3, #1
             (uint32_t)tp->hdr.pqueue.prio,
 80081e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081e6:	6898      	ldr	r0, [r3, #8]
             states[tp->state],
 80081e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081ea:	2428      	movs	r4, #40	; 0x28
 80081ec:	5d1b      	ldrb	r3, [r3, r4]
 80081ee:	001c      	movs	r4, r3
    chprintf(chp, "%4lu %08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80081f0:	4b17      	ldr	r3, [pc, #92]	; (8008250 <cmd_threads+0xc0>)
 80081f2:	00a4      	lsls	r4, r4, #2
 80081f4:	58e4      	ldr	r4, [r4, r3]
             tp->name == NULL ? "" : tp->name);
 80081f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081f8:	69db      	ldr	r3, [r3, #28]
    chprintf(chp, "%4lu %08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d002      	beq.n	8008204 <cmd_threads+0x74>
 80081fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	e000      	b.n	8008206 <cmd_threads+0x76>
 8008204:	4b13      	ldr	r3, [pc, #76]	; (8008254 <cmd_threads+0xc4>)
 8008206:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008208:	46ac      	mov	ip, r5
 800820a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800820c:	4e12      	ldr	r6, [pc, #72]	; (8008258 <cmd_threads+0xc8>)
 800820e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008210:	9305      	str	r3, [sp, #20]
 8008212:	9404      	str	r4, [sp, #16]
 8008214:	9003      	str	r0, [sp, #12]
 8008216:	9102      	str	r1, [sp, #8]
 8008218:	9201      	str	r2, [sp, #4]
 800821a:	4643      	mov	r3, r8
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	4663      	mov	r3, ip
 8008220:	003a      	movs	r2, r7
 8008222:	0031      	movs	r1, r6
 8008224:	0028      	movs	r0, r5
 8008226:	f000 fabb 	bl	80087a0 <chprintf>
    tp = chRegNextThread(tp);
 800822a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800822c:	0018      	movs	r0, r3
 800822e:	f7fe fbcf 	bl	80069d0 <chRegNextThread>
 8008232:	0003      	movs	r3, r0
 8008234:	930d      	str	r3, [sp, #52]	; 0x34
  } while (tp != NULL);
 8008236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1c4      	bne.n	80081c6 <cmd_threads+0x36>
}
 800823c:	b00e      	add	sp, #56	; 0x38
 800823e:	bc80      	pop	{r7}
 8008240:	46b8      	mov	r8, r7
 8008242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008244:	0800b850 	.word	0x0800b850
 8008248:	0800b604 	.word	0x0800b604
 800824c:	0800b858 	.word	0x0800b858
 8008250:	20000400 	.word	0x20000400
 8008254:	0800b628 	.word	0x0800b628
 8008258:	0800b89c 	.word	0x0800b89c
 800825c:	00000000 	.word	0x00000000

08008260 <long_to_string_with_divisor>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 8008260:	b500      	push	{lr}
 8008262:	b089      	sub	sp, #36	; 0x24
 8008264:	9003      	str	r0, [sp, #12]
 8008266:	9102      	str	r1, [sp, #8]
 8008268:	9201      	str	r2, [sp, #4]
 800826a:	9300      	str	r3, [sp, #0]
  int i;
  char *q;
  long l, ll;

  l = num;
 800826c:	9b02      	ldr	r3, [sp, #8]
 800826e:	9305      	str	r3, [sp, #20]
  if (divisor == 0) {
 8008270:	9b00      	ldr	r3, [sp, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d102      	bne.n	800827c <long_to_string_with_divisor+0x1c>
    ll = num;
 8008276:	9b02      	ldr	r3, [sp, #8]
 8008278:	9304      	str	r3, [sp, #16]
 800827a:	e001      	b.n	8008280 <long_to_string_with_divisor+0x20>
  } else {
    ll = divisor;
 800827c:	9b00      	ldr	r3, [sp, #0]
 800827e:	9304      	str	r3, [sp, #16]
  }

  q = p + MAX_FILLER;
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	330b      	adds	r3, #11
 8008284:	9306      	str	r3, [sp, #24]
  do {
    i = (int)(l % radix);
 8008286:	9b05      	ldr	r3, [sp, #20]
 8008288:	9901      	ldr	r1, [sp, #4]
 800828a:	0018      	movs	r0, r3
 800828c:	f7fa fc20 	bl	8002ad0 <__aeabi_uidivmod>
 8008290:	000b      	movs	r3, r1
 8008292:	9307      	str	r3, [sp, #28]
    i += '0';
 8008294:	9b07      	ldr	r3, [sp, #28]
 8008296:	3330      	adds	r3, #48	; 0x30
 8008298:	9307      	str	r3, [sp, #28]
    if (i > '9') {
 800829a:	9b07      	ldr	r3, [sp, #28]
 800829c:	2b39      	cmp	r3, #57	; 0x39
 800829e:	dd02      	ble.n	80082a6 <long_to_string_with_divisor+0x46>
      i += 'A' - '0' - 10;
 80082a0:	9b07      	ldr	r3, [sp, #28]
 80082a2:	3307      	adds	r3, #7
 80082a4:	9307      	str	r3, [sp, #28]
    }
    *--q = i;
 80082a6:	9b06      	ldr	r3, [sp, #24]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	9306      	str	r3, [sp, #24]
 80082ac:	9b07      	ldr	r3, [sp, #28]
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	9b06      	ldr	r3, [sp, #24]
 80082b2:	701a      	strb	r2, [r3, #0]
    l /= radix;
 80082b4:	9b05      	ldr	r3, [sp, #20]
 80082b6:	9901      	ldr	r1, [sp, #4]
 80082b8:	0018      	movs	r0, r3
 80082ba:	f7fa fb83 	bl	80029c4 <__udivsi3>
 80082be:	0003      	movs	r3, r0
 80082c0:	9305      	str	r3, [sp, #20]
  } while ((ll /= radix) != 0);
 80082c2:	9b04      	ldr	r3, [sp, #16]
 80082c4:	9901      	ldr	r1, [sp, #4]
 80082c6:	0018      	movs	r0, r3
 80082c8:	f7fa fb7c 	bl	80029c4 <__udivsi3>
 80082cc:	0003      	movs	r3, r0
 80082ce:	9304      	str	r3, [sp, #16]
 80082d0:	9b04      	ldr	r3, [sp, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1d7      	bne.n	8008286 <long_to_string_with_divisor+0x26>

  i = (int)(p + MAX_FILLER - q);
 80082d6:	9b03      	ldr	r3, [sp, #12]
 80082d8:	330b      	adds	r3, #11
 80082da:	001a      	movs	r2, r3
 80082dc:	9b06      	ldr	r3, [sp, #24]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	9307      	str	r3, [sp, #28]
  do
    *p++ = *q++;
 80082e2:	9a06      	ldr	r2, [sp, #24]
 80082e4:	1c53      	adds	r3, r2, #1
 80082e6:	9306      	str	r3, [sp, #24]
 80082e8:	9b03      	ldr	r3, [sp, #12]
 80082ea:	1c59      	adds	r1, r3, #1
 80082ec:	9103      	str	r1, [sp, #12]
 80082ee:	7812      	ldrb	r2, [r2, #0]
 80082f0:	701a      	strb	r2, [r3, #0]
  while (--i);
 80082f2:	9b07      	ldr	r3, [sp, #28]
 80082f4:	3b01      	subs	r3, #1
 80082f6:	9307      	str	r3, [sp, #28]
 80082f8:	9b07      	ldr	r3, [sp, #28]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1f1      	bne.n	80082e2 <long_to_string_with_divisor+0x82>

  return p;
 80082fe:	9b03      	ldr	r3, [sp, #12]
}
 8008300:	0018      	movs	r0, r3
 8008302:	b009      	add	sp, #36	; 0x24
 8008304:	bd00      	pop	{pc}
 8008306:	46c0      	nop			; (mov r8, r8)
	...

08008310 <ch_ltoa>:

static char *ch_ltoa(char *p, long num, unsigned radix) {
 8008310:	b500      	push	{lr}
 8008312:	b085      	sub	sp, #20
 8008314:	9003      	str	r0, [sp, #12]
 8008316:	9102      	str	r1, [sp, #8]
 8008318:	9201      	str	r2, [sp, #4]

  return long_to_string_with_divisor(p, num, radix, 0);
 800831a:	9a01      	ldr	r2, [sp, #4]
 800831c:	9902      	ldr	r1, [sp, #8]
 800831e:	9803      	ldr	r0, [sp, #12]
 8008320:	2300      	movs	r3, #0
 8008322:	f7ff ff9d 	bl	8008260 <long_to_string_with_divisor>
 8008326:	0003      	movs	r3, r0
}
 8008328:	0018      	movs	r0, r3
 800832a:	b005      	add	sp, #20
 800832c:	bd00      	pop	{pc}
 800832e:	46c0      	nop			; (mov r8, r8)

08008330 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8008330:	b500      	push	{lr}
 8008332:	b091      	sub	sp, #68	; 0x44
 8008334:	9003      	str	r0, [sp, #12]
 8008336:	9102      	str	r1, [sp, #8]
 8008338:	9201      	str	r2, [sp, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	9309      	str	r3, [sp, #36]	; 0x24
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 800833e:	9b02      	ldr	r3, [sp, #8]
 8008340:	1c5a      	adds	r2, r3, #1
 8008342:	9202      	str	r2, [sp, #8]
 8008344:	2237      	movs	r2, #55	; 0x37
 8008346:	446a      	add	r2, sp
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	7013      	strb	r3, [r2, #0]
    if (c == 0) {
 800834c:	2337      	movs	r3, #55	; 0x37
 800834e:	446b      	add	r3, sp
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <chvprintf+0x2a>
      return n;
 8008356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008358:	e213      	b.n	8008782 <chvprintf+0x452>
    }
    
    if (c != '%') {
 800835a:	2337      	movs	r3, #55	; 0x37
 800835c:	446b      	add	r3, sp
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	2b25      	cmp	r3, #37	; 0x25
 8008362:	d00c      	beq.n	800837e <chvprintf+0x4e>
      streamPut(chp, (uint8_t)c);
 8008364:	9b03      	ldr	r3, [sp, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	2237      	movs	r2, #55	; 0x37
 800836c:	446a      	add	r2, sp
 800836e:	7811      	ldrb	r1, [r2, #0]
 8008370:	9a03      	ldr	r2, [sp, #12]
 8008372:	0010      	movs	r0, r2
 8008374:	4798      	blx	r3
      n++;
 8008376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008378:	3301      	adds	r3, #1
 800837a:	9309      	str	r3, [sp, #36]	; 0x24
 800837c:	e7df      	b.n	800833e <chvprintf+0xe>
      continue;
    }
    
    p = tmpbuf;
 800837e:	ab04      	add	r3, sp, #16
 8008380:	930f      	str	r3, [sp, #60]	; 0x3c
    s = tmpbuf;
 8008382:	ab04      	add	r3, sp, #16
 8008384:	930e      	str	r3, [sp, #56]	; 0x38

    /* Alignment mode.*/
    left_align = false;
 8008386:	2322      	movs	r3, #34	; 0x22
 8008388:	446b      	add	r3, sp
 800838a:	2200      	movs	r2, #0
 800838c:	701a      	strb	r2, [r3, #0]
    if (*fmt == '-') {
 800838e:	9b02      	ldr	r3, [sp, #8]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	2b2d      	cmp	r3, #45	; 0x2d
 8008394:	d106      	bne.n	80083a4 <chvprintf+0x74>
      fmt++;
 8008396:	9b02      	ldr	r3, [sp, #8]
 8008398:	3301      	adds	r3, #1
 800839a:	9302      	str	r3, [sp, #8]
      left_align = true;
 800839c:	2322      	movs	r3, #34	; 0x22
 800839e:	446b      	add	r3, sp
 80083a0:	2201      	movs	r2, #1
 80083a2:	701a      	strb	r2, [r3, #0]
    }

    /* Sign mode.*/
    do_sign = false;
 80083a4:	2321      	movs	r3, #33	; 0x21
 80083a6:	446b      	add	r3, sp
 80083a8:	2200      	movs	r2, #0
 80083aa:	701a      	strb	r2, [r3, #0]
    if (*fmt == '+') {
 80083ac:	9b02      	ldr	r3, [sp, #8]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b2b      	cmp	r3, #43	; 0x2b
 80083b2:	d106      	bne.n	80083c2 <chvprintf+0x92>
      fmt++;
 80083b4:	9b02      	ldr	r3, [sp, #8]
 80083b6:	3301      	adds	r3, #1
 80083b8:	9302      	str	r3, [sp, #8]
      do_sign = true;
 80083ba:	2321      	movs	r3, #33	; 0x21
 80083bc:	446b      	add	r3, sp
 80083be:	2201      	movs	r2, #1
 80083c0:	701a      	strb	r2, [r3, #0]
    }

    /* Filler mode.*/
    filler = ' ';
 80083c2:	2336      	movs	r3, #54	; 0x36
 80083c4:	446b      	add	r3, sp
 80083c6:	2220      	movs	r2, #32
 80083c8:	701a      	strb	r2, [r3, #0]
    if (*fmt == '0') {
 80083ca:	9b02      	ldr	r3, [sp, #8]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	2b30      	cmp	r3, #48	; 0x30
 80083d0:	d106      	bne.n	80083e0 <chvprintf+0xb0>
      fmt++;
 80083d2:	9b02      	ldr	r3, [sp, #8]
 80083d4:	3301      	adds	r3, #1
 80083d6:	9302      	str	r3, [sp, #8]
      filler = '0';
 80083d8:	2336      	movs	r3, #54	; 0x36
 80083da:	446b      	add	r3, sp
 80083dc:	2230      	movs	r2, #48	; 0x30
 80083de:	701a      	strb	r2, [r3, #0]
    }
    
    /* Width modifier.*/
    if ( *fmt == '*') {
 80083e0:	9b02      	ldr	r3, [sp, #8]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	2b2a      	cmp	r3, #42	; 0x2a
 80083e6:	d10f      	bne.n	8008408 <chvprintf+0xd8>
      width = va_arg(ap, int);
 80083e8:	9b01      	ldr	r3, [sp, #4]
 80083ea:	1d1a      	adds	r2, r3, #4
 80083ec:	9201      	str	r2, [sp, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	930a      	str	r3, [sp, #40]	; 0x28
      ++fmt;
 80083f2:	9b02      	ldr	r3, [sp, #8]
 80083f4:	3301      	adds	r3, #1
 80083f6:	9302      	str	r3, [sp, #8]
      c = *fmt++;
 80083f8:	9b02      	ldr	r3, [sp, #8]
 80083fa:	1c5a      	adds	r2, r3, #1
 80083fc:	9202      	str	r2, [sp, #8]
 80083fe:	2237      	movs	r2, #55	; 0x37
 8008400:	446a      	add	r2, sp
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	7013      	strb	r3, [r2, #0]
 8008406:	e02c      	b.n	8008462 <chvprintf+0x132>
    }
    else {
      width = 0;
 8008408:	2300      	movs	r3, #0
 800840a:	930a      	str	r3, [sp, #40]	; 0x28
      while (true) {
        c = *fmt++;
 800840c:	9b02      	ldr	r3, [sp, #8]
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	9202      	str	r2, [sp, #8]
 8008412:	2237      	movs	r2, #55	; 0x37
 8008414:	446a      	add	r2, sp
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	7013      	strb	r3, [r2, #0]
        if (c == 0) {
 800841a:	2337      	movs	r3, #55	; 0x37
 800841c:	446b      	add	r3, sp
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <chvprintf+0xf8>
          return n;
 8008424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008426:	e1ac      	b.n	8008782 <chvprintf+0x452>
        }
        if (c >= '0' && c <= '9') {
 8008428:	2337      	movs	r3, #55	; 0x37
 800842a:	446b      	add	r3, sp
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	2b2f      	cmp	r3, #47	; 0x2f
 8008430:	d917      	bls.n	8008462 <chvprintf+0x132>
 8008432:	2337      	movs	r3, #55	; 0x37
 8008434:	446b      	add	r3, sp
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	2b39      	cmp	r3, #57	; 0x39
 800843a:	d812      	bhi.n	8008462 <chvprintf+0x132>
          c -= '0';
 800843c:	2337      	movs	r3, #55	; 0x37
 800843e:	446b      	add	r3, sp
 8008440:	2237      	movs	r2, #55	; 0x37
 8008442:	446a      	add	r2, sp
 8008444:	7812      	ldrb	r2, [r2, #0]
 8008446:	3a30      	subs	r2, #48	; 0x30
 8008448:	701a      	strb	r2, [r3, #0]
          width = width * 10 + c;
 800844a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800844c:	0013      	movs	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	189b      	adds	r3, r3, r2
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	001a      	movs	r2, r3
 8008456:	2337      	movs	r3, #55	; 0x37
 8008458:	446b      	add	r3, sp
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	18d3      	adds	r3, r2, r3
 800845e:	930a      	str	r3, [sp, #40]	; 0x28
 8008460:	e7d4      	b.n	800840c <chvprintf+0xdc>
        }
      }
    }
    
    /* Precision modifier.*/
    precision = 0;
 8008462:	2300      	movs	r3, #0
 8008464:	930b      	str	r3, [sp, #44]	; 0x2c
    if (c == '.') {
 8008466:	2337      	movs	r3, #55	; 0x37
 8008468:	446b      	add	r3, sp
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b2e      	cmp	r3, #46	; 0x2e
 800846e:	d149      	bne.n	8008504 <chvprintf+0x1d4>
      c = *fmt++;
 8008470:	9b02      	ldr	r3, [sp, #8]
 8008472:	1c5a      	adds	r2, r3, #1
 8008474:	9202      	str	r2, [sp, #8]
 8008476:	2237      	movs	r2, #55	; 0x37
 8008478:	446a      	add	r2, sp
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	7013      	strb	r3, [r2, #0]
      if (c == 0) {
 800847e:	2337      	movs	r3, #55	; 0x37
 8008480:	446b      	add	r3, sp
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d101      	bne.n	800848c <chvprintf+0x15c>
        return n;
 8008488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800848a:	e17a      	b.n	8008782 <chvprintf+0x452>
      }
      if (c == '*') {
 800848c:	2337      	movs	r3, #55	; 0x37
 800848e:	446b      	add	r3, sp
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	2b2a      	cmp	r3, #42	; 0x2a
 8008494:	d12c      	bne.n	80084f0 <chvprintf+0x1c0>
        precision = va_arg(ap, int);
 8008496:	9b01      	ldr	r3, [sp, #4]
 8008498:	1d1a      	adds	r2, r3, #4
 800849a:	9201      	str	r2, [sp, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	930b      	str	r3, [sp, #44]	; 0x2c
        c = *fmt++;
 80084a0:	9b02      	ldr	r3, [sp, #8]
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	9202      	str	r2, [sp, #8]
 80084a6:	2237      	movs	r2, #55	; 0x37
 80084a8:	446a      	add	r2, sp
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	7013      	strb	r3, [r2, #0]
 80084ae:	e029      	b.n	8008504 <chvprintf+0x1d4>
      }
      else {
        while (c >= '0' && c <= '9') {
          c -= '0';
 80084b0:	2337      	movs	r3, #55	; 0x37
 80084b2:	446b      	add	r3, sp
 80084b4:	2237      	movs	r2, #55	; 0x37
 80084b6:	446a      	add	r2, sp
 80084b8:	7812      	ldrb	r2, [r2, #0]
 80084ba:	3a30      	subs	r2, #48	; 0x30
 80084bc:	701a      	strb	r2, [r3, #0]
          precision = precision * 10 + c;
 80084be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084c0:	0013      	movs	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	189b      	adds	r3, r3, r2
 80084c6:	005b      	lsls	r3, r3, #1
 80084c8:	001a      	movs	r2, r3
 80084ca:	2337      	movs	r3, #55	; 0x37
 80084cc:	446b      	add	r3, sp
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	18d3      	adds	r3, r2, r3
 80084d2:	930b      	str	r3, [sp, #44]	; 0x2c
          c = *fmt++;
 80084d4:	9b02      	ldr	r3, [sp, #8]
 80084d6:	1c5a      	adds	r2, r3, #1
 80084d8:	9202      	str	r2, [sp, #8]
 80084da:	2237      	movs	r2, #55	; 0x37
 80084dc:	446a      	add	r2, sp
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	7013      	strb	r3, [r2, #0]
          if (c == 0) {
 80084e2:	2337      	movs	r3, #55	; 0x37
 80084e4:	446b      	add	r3, sp
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d101      	bne.n	80084f0 <chvprintf+0x1c0>
            return n;
 80084ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ee:	e148      	b.n	8008782 <chvprintf+0x452>
        while (c >= '0' && c <= '9') {
 80084f0:	2337      	movs	r3, #55	; 0x37
 80084f2:	446b      	add	r3, sp
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	2b2f      	cmp	r3, #47	; 0x2f
 80084f8:	d904      	bls.n	8008504 <chvprintf+0x1d4>
 80084fa:	2337      	movs	r3, #55	; 0x37
 80084fc:	446b      	add	r3, sp
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	2b39      	cmp	r3, #57	; 0x39
 8008502:	d9d5      	bls.n	80084b0 <chvprintf+0x180>
        }
      }
    }
    
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8008504:	2337      	movs	r3, #55	; 0x37
 8008506:	446b      	add	r3, sp
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	2b6c      	cmp	r3, #108	; 0x6c
 800850c:	d004      	beq.n	8008518 <chvprintf+0x1e8>
 800850e:	2337      	movs	r3, #55	; 0x37
 8008510:	446b      	add	r3, sp
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	2b4c      	cmp	r3, #76	; 0x4c
 8008516:	d111      	bne.n	800853c <chvprintf+0x20c>
      is_long = true;
 8008518:	2323      	movs	r3, #35	; 0x23
 800851a:	446b      	add	r3, sp
 800851c:	2201      	movs	r2, #1
 800851e:	701a      	strb	r2, [r3, #0]
      c = *fmt++;
 8008520:	9b02      	ldr	r3, [sp, #8]
 8008522:	1c5a      	adds	r2, r3, #1
 8008524:	9202      	str	r2, [sp, #8]
 8008526:	2237      	movs	r2, #55	; 0x37
 8008528:	446a      	add	r2, sp
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	7013      	strb	r3, [r2, #0]
      if (c == 0) {
 800852e:	2337      	movs	r3, #55	; 0x37
 8008530:	446b      	add	r3, sp
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d115      	bne.n	8008564 <chvprintf+0x234>
        return n;
 8008538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800853a:	e122      	b.n	8008782 <chvprintf+0x452>
      }
    }
    else {
      is_long = (c >= 'A') && (c <= 'Z');
 800853c:	2337      	movs	r3, #55	; 0x37
 800853e:	446b      	add	r3, sp
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	2b40      	cmp	r3, #64	; 0x40
 8008544:	d906      	bls.n	8008554 <chvprintf+0x224>
 8008546:	2337      	movs	r3, #55	; 0x37
 8008548:	446b      	add	r3, sp
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	2b5a      	cmp	r3, #90	; 0x5a
 800854e:	d801      	bhi.n	8008554 <chvprintf+0x224>
 8008550:	2201      	movs	r2, #1
 8008552:	e000      	b.n	8008556 <chvprintf+0x226>
 8008554:	2200      	movs	r2, #0
 8008556:	2323      	movs	r3, #35	; 0x23
 8008558:	446b      	add	r3, sp
 800855a:	701a      	strb	r2, [r3, #0]
 800855c:	781a      	ldrb	r2, [r3, #0]
 800855e:	2101      	movs	r1, #1
 8008560:	400a      	ands	r2, r1
 8008562:	701a      	strb	r2, [r3, #0]
    }

    /* Command decoding.*/
    switch (c) {
 8008564:	2337      	movs	r3, #55	; 0x37
 8008566:	446b      	add	r3, sp
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	3b44      	subs	r3, #68	; 0x44
 800856c:	2b34      	cmp	r3, #52	; 0x34
 800856e:	d900      	bls.n	8008572 <chvprintf+0x242>
 8008570:	e08e      	b.n	8008690 <chvprintf+0x360>
 8008572:	009a      	lsls	r2, r3, #2
 8008574:	4b84      	ldr	r3, [pc, #528]	; (8008788 <chvprintf+0x458>)
 8008576:	18d3      	adds	r3, r2, r3
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	469f      	mov	pc, r3
    case 'c':
      filler = ' ';
 800857c:	2336      	movs	r3, #54	; 0x36
 800857e:	446b      	add	r3, sp
 8008580:	2220      	movs	r2, #32
 8008582:	701a      	strb	r2, [r3, #0]
      *p++ = va_arg(ap, int);
 8008584:	9b01      	ldr	r3, [sp, #4]
 8008586:	1d1a      	adds	r2, r3, #4
 8008588:	9201      	str	r2, [sp, #4]
 800858a:	6819      	ldr	r1, [r3, #0]
 800858c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800858e:	1c5a      	adds	r2, r3, #1
 8008590:	920f      	str	r2, [sp, #60]	; 0x3c
 8008592:	b2ca      	uxtb	r2, r1
 8008594:	701a      	strb	r2, [r3, #0]
 8008596:	e082      	b.n	800869e <chvprintf+0x36e>
      break;
    case 's':
      filler = ' ';
 8008598:	2336      	movs	r3, #54	; 0x36
 800859a:	446b      	add	r3, sp
 800859c:	2220      	movs	r2, #32
 800859e:	701a      	strb	r2, [r3, #0]
      if ((s = va_arg(ap, char *)) == 0) {
 80085a0:	9b01      	ldr	r3, [sp, #4]
 80085a2:	1d1a      	adds	r2, r3, #4
 80085a4:	9201      	str	r2, [sp, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	930e      	str	r3, [sp, #56]	; 0x38
 80085aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <chvprintf+0x284>
        s = "(null)";
 80085b0:	4b76      	ldr	r3, [pc, #472]	; (800878c <chvprintf+0x45c>)
 80085b2:	930e      	str	r3, [sp, #56]	; 0x38
      }
      if (precision == 0) {
 80085b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <chvprintf+0x28e>
        precision = 32767;
 80085ba:	4b75      	ldr	r3, [pc, #468]	; (8008790 <chvprintf+0x460>)
 80085bc:	930b      	str	r3, [sp, #44]	; 0x2c
      }
      for (p = s; *p && (--precision >= 0); p++)
 80085be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80085c2:	e002      	b.n	80085ca <chvprintf+0x29a>
 80085c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085c6:	3301      	adds	r3, #1
 80085c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80085ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d065      	beq.n	800869e <chvprintf+0x36e>
 80085d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085d4:	3b01      	subs	r3, #1
 80085d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80085d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085da:	2b00      	cmp	r3, #0
 80085dc:	daf2      	bge.n	80085c4 <chvprintf+0x294>
 80085de:	e05e      	b.n	800869e <chvprintf+0x36e>
      break;
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long) {
 80085e0:	2323      	movs	r3, #35	; 0x23
 80085e2:	446b      	add	r3, sp
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d005      	beq.n	80085f6 <chvprintf+0x2c6>
        l = va_arg(ap, long);
 80085ea:	9b01      	ldr	r3, [sp, #4]
 80085ec:	1d1a      	adds	r2, r3, #4
 80085ee:	9201      	str	r2, [sp, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	9307      	str	r3, [sp, #28]
 80085f4:	e004      	b.n	8008600 <chvprintf+0x2d0>
      }
      else {
        l = va_arg(ap, int);
 80085f6:	9b01      	ldr	r3, [sp, #4]
 80085f8:	1d1a      	adds	r2, r3, #4
 80085fa:	9201      	str	r2, [sp, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	9307      	str	r3, [sp, #28]
      }
      if (l < 0) {
 8008600:	9b07      	ldr	r3, [sp, #28]
 8008602:	2b00      	cmp	r3, #0
 8008604:	da08      	bge.n	8008618 <chvprintf+0x2e8>
        *p++ = '-';
 8008606:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	920f      	str	r2, [sp, #60]	; 0x3c
 800860c:	222d      	movs	r2, #45	; 0x2d
 800860e:	701a      	strb	r2, [r3, #0]
        l = -l;
 8008610:	9b07      	ldr	r3, [sp, #28]
 8008612:	425b      	negs	r3, r3
 8008614:	9307      	str	r3, [sp, #28]
 8008616:	e009      	b.n	800862c <chvprintf+0x2fc>
      }
      else
        if (do_sign) {
 8008618:	2321      	movs	r3, #33	; 0x21
 800861a:	446b      	add	r3, sp
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d004      	beq.n	800862c <chvprintf+0x2fc>
          *p++ = '+';
 8008622:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008624:	1c5a      	adds	r2, r3, #1
 8008626:	920f      	str	r2, [sp, #60]	; 0x3c
 8008628:	222b      	movs	r2, #43	; 0x2b
 800862a:	701a      	strb	r2, [r3, #0]
        }
      p = ch_ltoa(p, l, 10);
 800862c:	9907      	ldr	r1, [sp, #28]
 800862e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008630:	220a      	movs	r2, #10
 8008632:	0018      	movs	r0, r3
 8008634:	f7ff fe6c 	bl	8008310 <ch_ltoa>
 8008638:	0003      	movs	r3, r0
 800863a:	930f      	str	r3, [sp, #60]	; 0x3c
 800863c:	e02f      	b.n	800869e <chvprintf+0x36e>
#endif
    case 'X':
    case 'x':
    case 'P':
    case 'p':
      c = 16;
 800863e:	2337      	movs	r3, #55	; 0x37
 8008640:	446b      	add	r3, sp
 8008642:	2210      	movs	r2, #16
 8008644:	701a      	strb	r2, [r3, #0]
 8008646:	e008      	b.n	800865a <chvprintf+0x32a>
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
 8008648:	2337      	movs	r3, #55	; 0x37
 800864a:	446b      	add	r3, sp
 800864c:	220a      	movs	r2, #10
 800864e:	701a      	strb	r2, [r3, #0]
 8008650:	e003      	b.n	800865a <chvprintf+0x32a>
      goto unsigned_common;
    case 'O':
    case 'o':
      c = 8;
 8008652:	2337      	movs	r3, #55	; 0x37
 8008654:	446b      	add	r3, sp
 8008656:	2208      	movs	r2, #8
 8008658:	701a      	strb	r2, [r3, #0]
unsigned_common:
      if (is_long) {
 800865a:	2323      	movs	r3, #35	; 0x23
 800865c:	446b      	add	r3, sp
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d005      	beq.n	8008670 <chvprintf+0x340>
        l = va_arg(ap, unsigned long);
 8008664:	9b01      	ldr	r3, [sp, #4]
 8008666:	1d1a      	adds	r2, r3, #4
 8008668:	9201      	str	r2, [sp, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	9307      	str	r3, [sp, #28]
 800866e:	e004      	b.n	800867a <chvprintf+0x34a>
      }
      else {
        l = va_arg(ap, unsigned int);
 8008670:	9b01      	ldr	r3, [sp, #4]
 8008672:	1d1a      	adds	r2, r3, #4
 8008674:	9201      	str	r2, [sp, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	9307      	str	r3, [sp, #28]
      }
      p = ch_ltoa(p, l, c);
 800867a:	2337      	movs	r3, #55	; 0x37
 800867c:	446b      	add	r3, sp
 800867e:	781a      	ldrb	r2, [r3, #0]
 8008680:	9907      	ldr	r1, [sp, #28]
 8008682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008684:	0018      	movs	r0, r3
 8008686:	f7ff fe43 	bl	8008310 <ch_ltoa>
 800868a:	0003      	movs	r3, r0
 800868c:	930f      	str	r3, [sp, #60]	; 0x3c
 800868e:	e006      	b.n	800869e <chvprintf+0x36e>
      break;
    default:
      *p++ = c;
 8008690:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008692:	1c5a      	adds	r2, r3, #1
 8008694:	920f      	str	r2, [sp, #60]	; 0x3c
 8008696:	2237      	movs	r2, #55	; 0x37
 8008698:	446a      	add	r2, sp
 800869a:	7812      	ldrb	r2, [r2, #0]
 800869c:	701a      	strb	r2, [r3, #0]
      break;
    }
    i = (int)(p - s);
 800869e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80086a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	930c      	str	r3, [sp, #48]	; 0x30
    if ((width -= i) < 0) {
 80086a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	930a      	str	r3, [sp, #40]	; 0x28
 80086ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	da01      	bge.n	80086b8 <chvprintf+0x388>
      width = 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	930a      	str	r3, [sp, #40]	; 0x28
    }
    if (left_align == false) {
 80086b8:	2322      	movs	r3, #34	; 0x22
 80086ba:	446b      	add	r3, sp
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	2201      	movs	r2, #1
 80086c0:	4053      	eors	r3, r2
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <chvprintf+0x39e>
      width = -width;
 80086c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ca:	425b      	negs	r3, r3
 80086cc:	930a      	str	r3, [sp, #40]	; 0x28
    }
    if (width < 0) {
 80086ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	da3c      	bge.n	800874e <chvprintf+0x41e>
      if ((*s == '-' || *s == '+') && filler == '0') {
 80086d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	2b2d      	cmp	r3, #45	; 0x2d
 80086da:	d003      	beq.n	80086e4 <chvprintf+0x3b4>
 80086dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	2b2b      	cmp	r3, #43	; 0x2b
 80086e2:	d114      	bne.n	800870e <chvprintf+0x3de>
 80086e4:	2336      	movs	r3, #54	; 0x36
 80086e6:	446b      	add	r3, sp
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	2b30      	cmp	r3, #48	; 0x30
 80086ec:	d10f      	bne.n	800870e <chvprintf+0x3de>
        streamPut(chp, (uint8_t)*s++);
 80086ee:	9b03      	ldr	r3, [sp, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68da      	ldr	r2, [r3, #12]
 80086f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086f6:	1c59      	adds	r1, r3, #1
 80086f8:	910e      	str	r1, [sp, #56]	; 0x38
 80086fa:	7819      	ldrb	r1, [r3, #0]
 80086fc:	9b03      	ldr	r3, [sp, #12]
 80086fe:	0018      	movs	r0, r3
 8008700:	4790      	blx	r2
        n++;
 8008702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008704:	3301      	adds	r3, #1
 8008706:	9309      	str	r3, [sp, #36]	; 0x24
        i--;
 8008708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800870a:	3b01      	subs	r3, #1
 800870c:	930c      	str	r3, [sp, #48]	; 0x30
      }
      do {
        streamPut(chp, (uint8_t)filler);
 800870e:	9b03      	ldr	r3, [sp, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	2236      	movs	r2, #54	; 0x36
 8008716:	446a      	add	r2, sp
 8008718:	7811      	ldrb	r1, [r2, #0]
 800871a:	9a03      	ldr	r2, [sp, #12]
 800871c:	0010      	movs	r0, r2
 800871e:	4798      	blx	r3
        n++;
 8008720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008722:	3301      	adds	r3, #1
 8008724:	9309      	str	r3, [sp, #36]	; 0x24
      } while (++width != 0);
 8008726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008728:	3301      	adds	r3, #1
 800872a:	930a      	str	r3, [sp, #40]	; 0x28
 800872c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1ed      	bne.n	800870e <chvprintf+0x3de>
 8008732:	e00c      	b.n	800874e <chvprintf+0x41e>
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 8008734:	9b03      	ldr	r3, [sp, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68da      	ldr	r2, [r3, #12]
 800873a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800873c:	1c59      	adds	r1, r3, #1
 800873e:	910e      	str	r1, [sp, #56]	; 0x38
 8008740:	7819      	ldrb	r1, [r3, #0]
 8008742:	9b03      	ldr	r3, [sp, #12]
 8008744:	0018      	movs	r0, r3
 8008746:	4790      	blx	r2
      n++;
 8008748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800874a:	3301      	adds	r3, #1
 800874c:	9309      	str	r3, [sp, #36]	; 0x24
    while (--i >= 0) {
 800874e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008750:	3b01      	subs	r3, #1
 8008752:	930c      	str	r3, [sp, #48]	; 0x30
 8008754:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008756:	2b00      	cmp	r3, #0
 8008758:	daec      	bge.n	8008734 <chvprintf+0x404>
 800875a:	e00e      	b.n	800877a <chvprintf+0x44a>
    }

    while (width) {
      streamPut(chp, (uint8_t)filler);
 800875c:	9b03      	ldr	r3, [sp, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	2236      	movs	r2, #54	; 0x36
 8008764:	446a      	add	r2, sp
 8008766:	7811      	ldrb	r1, [r2, #0]
 8008768:	9a03      	ldr	r2, [sp, #12]
 800876a:	0010      	movs	r0, r2
 800876c:	4798      	blx	r3
      n++;
 800876e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008770:	3301      	adds	r3, #1
 8008772:	9309      	str	r3, [sp, #36]	; 0x24
      width--;
 8008774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008776:	3b01      	subs	r3, #1
 8008778:	930a      	str	r3, [sp, #40]	; 0x28
    while (width) {
 800877a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1ed      	bne.n	800875c <chvprintf+0x42c>
 8008780:	e5dd      	b.n	800833e <chvprintf+0xe>
    }
  }
}
 8008782:	0018      	movs	r0, r3
 8008784:	b011      	add	sp, #68	; 0x44
 8008786:	bd00      	pop	{pc}
 8008788:	0800b908 	.word	0x0800b908
 800878c:	0800b900 	.word	0x0800b900
 8008790:	00007fff 	.word	0x00007fff
	...

080087a0 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80087a0:	b40e      	push	{r1, r2, r3}
 80087a2:	b500      	push	{lr}
 80087a4:	b084      	sub	sp, #16
 80087a6:	9001      	str	r0, [sp, #4]
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80087a8:	ab06      	add	r3, sp, #24
 80087aa:	9302      	str	r3, [sp, #8]
  formatted_bytes = chvprintf(chp, fmt, ap);
 80087ac:	9a02      	ldr	r2, [sp, #8]
 80087ae:	9905      	ldr	r1, [sp, #20]
 80087b0:	9b01      	ldr	r3, [sp, #4]
 80087b2:	0018      	movs	r0, r3
 80087b4:	f7ff fdbc 	bl	8008330 <chvprintf>
 80087b8:	0003      	movs	r3, r0
 80087ba:	9303      	str	r3, [sp, #12]
  va_end(ap);

  return formatted_bytes;
 80087bc:	9b03      	ldr	r3, [sp, #12]
}
 80087be:	0018      	movs	r0, r3
 80087c0:	b004      	add	sp, #16
 80087c2:	bc08      	pop	{r3}
 80087c4:	b003      	add	sp, #12
 80087c6:	4718      	bx	r3
	...

080087d0 <customAtoI>:

#include "common.h"

#include "chprintf.h"

int customAtoI(const char *str, int *result) {
 80087d0:	b084      	sub	sp, #16
 80087d2:	9001      	str	r0, [sp, #4]
 80087d4:	9100      	str	r1, [sp, #0]
    long longValue = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	9303      	str	r3, [sp, #12]
 80087da:	e023      	b.n	8008824 <customAtoI+0x54>

    while (*str) {
        if (*str < '0' || *str > '9') {
 80087dc:	9b01      	ldr	r3, [sp, #4]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	2b2f      	cmp	r3, #47	; 0x2f
 80087e2:	d903      	bls.n	80087ec <customAtoI+0x1c>
 80087e4:	9b01      	ldr	r3, [sp, #4]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	2b39      	cmp	r3, #57	; 0x39
 80087ea:	d902      	bls.n	80087f2 <customAtoI+0x22>
            // Non-digit character found
            return -1;
 80087ec:	2301      	movs	r3, #1
 80087ee:	425b      	negs	r3, r3
 80087f0:	e020      	b.n	8008834 <customAtoI+0x64>
        }

        longValue = longValue * 10 + (*str - '0');
 80087f2:	9a03      	ldr	r2, [sp, #12]
 80087f4:	0013      	movs	r3, r2
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	189b      	adds	r3, r3, r2
 80087fa:	005b      	lsls	r3, r3, #1
 80087fc:	001a      	movs	r2, r3
 80087fe:	9b01      	ldr	r3, [sp, #4]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	3b30      	subs	r3, #48	; 0x30
 8008804:	18d3      	adds	r3, r2, r3
 8008806:	9303      	str	r3, [sp, #12]

        // Check for overflow
        if (longValue > UINT16_MAX || longValue < 0) {
 8008808:	9a03      	ldr	r2, [sp, #12]
 800880a:	2380      	movs	r3, #128	; 0x80
 800880c:	025b      	lsls	r3, r3, #9
 800880e:	429a      	cmp	r2, r3
 8008810:	da02      	bge.n	8008818 <customAtoI+0x48>
 8008812:	9b03      	ldr	r3, [sp, #12]
 8008814:	2b00      	cmp	r3, #0
 8008816:	da02      	bge.n	800881e <customAtoI+0x4e>
            // Overflow occurred
            return -1;
 8008818:	2301      	movs	r3, #1
 800881a:	425b      	negs	r3, r3
 800881c:	e00a      	b.n	8008834 <customAtoI+0x64>
        }

        str++;
 800881e:	9b01      	ldr	r3, [sp, #4]
 8008820:	3301      	adds	r3, #1
 8008822:	9301      	str	r3, [sp, #4]
    while (*str) {
 8008824:	9b01      	ldr	r3, [sp, #4]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1d7      	bne.n	80087dc <customAtoI+0xc>
    }

    *result = (int) longValue;
 800882c:	9b00      	ldr	r3, [sp, #0]
 800882e:	9a03      	ldr	r2, [sp, #12]
 8008830:	601a      	str	r2, [r3, #0]
    return 0;
 8008832:	2300      	movs	r3, #0
}
 8008834:	0018      	movs	r0, r3
 8008836:	b004      	add	sp, #16
 8008838:	4770      	bx	lr
 800883a:	46c0      	nop			; (mov r8, r8)
 800883c:	0000      	movs	r0, r0
	...

08008840 <customAtoF>:
/**
 * @note source: https://www.techieclues.com/blogs/converting-string-to-float-in-c
 * @param str
 * @return
 */
float customAtoF(const char *str) {
 8008840:	b510      	push	{r4, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	9001      	str	r0, [sp, #4]
    float result = 0.0;
 8008846:	2300      	movs	r3, #0
 8008848:	9305      	str	r3, [sp, #20]
    float decimalFactor = 0.1;
 800884a:	4b3a      	ldr	r3, [pc, #232]	; (8008934 <customAtoF+0xf4>)
 800884c:	9304      	str	r3, [sp, #16]
    int sign = 1;
 800884e:	2301      	movs	r3, #1
 8008850:	9303      	str	r3, [sp, #12]
    int i = 0;
 8008852:	2300      	movs	r3, #0
 8008854:	9302      	str	r3, [sp, #8]

    if (str[i] == '-') {
 8008856:	9b02      	ldr	r3, [sp, #8]
 8008858:	9a01      	ldr	r2, [sp, #4]
 800885a:	18d3      	adds	r3, r2, r3
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	2b2d      	cmp	r3, #45	; 0x2d
 8008860:	d155      	bne.n	800890e <customAtoF+0xce>
        sign = -1;
 8008862:	2301      	movs	r3, #1
 8008864:	425b      	negs	r3, r3
 8008866:	9303      	str	r3, [sp, #12]
        i++;
 8008868:	9b02      	ldr	r3, [sp, #8]
 800886a:	3301      	adds	r3, #1
 800886c:	9302      	str	r3, [sp, #8]
 800886e:	e04e      	b.n	800890e <customAtoF+0xce>
    }

    while (str[i] != '\0') {
        if (str[i] == '.') {
 8008870:	9b02      	ldr	r3, [sp, #8]
 8008872:	9a01      	ldr	r2, [sp, #4]
 8008874:	18d3      	adds	r3, r2, r3
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	2b2e      	cmp	r3, #46	; 0x2e
 800887a:	d130      	bne.n	80088de <customAtoF+0x9e>
            i++;
 800887c:	9b02      	ldr	r3, [sp, #8]
 800887e:	3301      	adds	r3, #1
 8008880:	9302      	str	r3, [sp, #8]
 8008882:	e025      	b.n	80088d0 <customAtoF+0x90>
            while (str[i] != '\0') {
                result += (str[i] - '0') * decimalFactor;
 8008884:	9b02      	ldr	r3, [sp, #8]
 8008886:	9a01      	ldr	r2, [sp, #4]
 8008888:	18d3      	adds	r3, r2, r3
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	3b30      	subs	r3, #48	; 0x30
 800888e:	0018      	movs	r0, r3
 8008890:	f7f8 fa7e 	bl	8000d90 <__aeabi_i2f>
 8008894:	1c03      	adds	r3, r0, #0
 8008896:	9904      	ldr	r1, [sp, #16]
 8008898:	1c18      	adds	r0, r3, #0
 800889a:	f7f7 ff77 	bl	800078c <__aeabi_fmul>
 800889e:	1c03      	adds	r3, r0, #0
 80088a0:	1c19      	adds	r1, r3, #0
 80088a2:	9805      	ldr	r0, [sp, #20]
 80088a4:	f7f7 fd18 	bl	80002d8 <__aeabi_fadd>
 80088a8:	1c03      	adds	r3, r0, #0
 80088aa:	9305      	str	r3, [sp, #20]
                decimalFactor *= 0.1;
 80088ac:	9804      	ldr	r0, [sp, #16]
 80088ae:	f7fa fa93 	bl	8002dd8 <__aeabi_f2d>
 80088b2:	4a21      	ldr	r2, [pc, #132]	; (8008938 <customAtoF+0xf8>)
 80088b4:	4b21      	ldr	r3, [pc, #132]	; (800893c <customAtoF+0xfc>)
 80088b6:	f7f9 fa21 	bl	8001cfc <__aeabi_dmul>
 80088ba:	0002      	movs	r2, r0
 80088bc:	000b      	movs	r3, r1
 80088be:	0010      	movs	r0, r2
 80088c0:	0019      	movs	r1, r3
 80088c2:	f7fa fad1 	bl	8002e68 <__aeabi_d2f>
 80088c6:	1c03      	adds	r3, r0, #0
 80088c8:	9304      	str	r3, [sp, #16]
                i++;
 80088ca:	9b02      	ldr	r3, [sp, #8]
 80088cc:	3301      	adds	r3, #1
 80088ce:	9302      	str	r3, [sp, #8]
            while (str[i] != '\0') {
 80088d0:	9b02      	ldr	r3, [sp, #8]
 80088d2:	9a01      	ldr	r2, [sp, #4]
 80088d4:	18d3      	adds	r3, r2, r3
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1d3      	bne.n	8008884 <customAtoF+0x44>
 80088dc:	e017      	b.n	800890e <customAtoF+0xce>
            }
        } else {
            result = result * 10 + (str[i] - '0');
 80088de:	4918      	ldr	r1, [pc, #96]	; (8008940 <customAtoF+0x100>)
 80088e0:	9805      	ldr	r0, [sp, #20]
 80088e2:	f7f7 ff53 	bl	800078c <__aeabi_fmul>
 80088e6:	1c03      	adds	r3, r0, #0
 80088e8:	1c1c      	adds	r4, r3, #0
 80088ea:	9b02      	ldr	r3, [sp, #8]
 80088ec:	9a01      	ldr	r2, [sp, #4]
 80088ee:	18d3      	adds	r3, r2, r3
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	3b30      	subs	r3, #48	; 0x30
 80088f4:	0018      	movs	r0, r3
 80088f6:	f7f8 fa4b 	bl	8000d90 <__aeabi_i2f>
 80088fa:	1c03      	adds	r3, r0, #0
 80088fc:	1c19      	adds	r1, r3, #0
 80088fe:	1c20      	adds	r0, r4, #0
 8008900:	f7f7 fcea 	bl	80002d8 <__aeabi_fadd>
 8008904:	1c03      	adds	r3, r0, #0
 8008906:	9305      	str	r3, [sp, #20]
            i++;
 8008908:	9b02      	ldr	r3, [sp, #8]
 800890a:	3301      	adds	r3, #1
 800890c:	9302      	str	r3, [sp, #8]
    while (str[i] != '\0') {
 800890e:	9b02      	ldr	r3, [sp, #8]
 8008910:	9a01      	ldr	r2, [sp, #4]
 8008912:	18d3      	adds	r3, r2, r3
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1aa      	bne.n	8008870 <customAtoF+0x30>
        }
    }

    return sign * result;
 800891a:	9803      	ldr	r0, [sp, #12]
 800891c:	f7f8 fa38 	bl	8000d90 <__aeabi_i2f>
 8008920:	1c03      	adds	r3, r0, #0
 8008922:	9905      	ldr	r1, [sp, #20]
 8008924:	1c18      	adds	r0, r3, #0
 8008926:	f7f7 ff31 	bl	800078c <__aeabi_fmul>
 800892a:	1c03      	adds	r3, r0, #0
}
 800892c:	1c18      	adds	r0, r3, #0
 800892e:	b006      	add	sp, #24
 8008930:	bd10      	pop	{r4, pc}
 8008932:	46c0      	nop			; (mov r8, r8)
 8008934:	3dcccccd 	.word	0x3dcccccd
 8008938:	9999999a 	.word	0x9999999a
 800893c:	3fb99999 	.word	0x3fb99999
 8008940:	41200000 	.word	0x41200000
	...

08008950 <isEqual>:

bool isEqual(const char *buffer, const char *string) {
 8008950:	b500      	push	{lr}
 8008952:	b083      	sub	sp, #12
 8008954:	9001      	str	r0, [sp, #4]
 8008956:	9100      	str	r1, [sp, #0]
    return strcmp((char *) buffer, string) == 0;
 8008958:	9a00      	ldr	r2, [sp, #0]
 800895a:	9b01      	ldr	r3, [sp, #4]
 800895c:	0011      	movs	r1, r2
 800895e:	0018      	movs	r0, r3
 8008960:	f7fa fb0a 	bl	8002f78 <strcmp>
 8008964:	0003      	movs	r3, r0
 8008966:	425a      	negs	r2, r3
 8008968:	4153      	adcs	r3, r2
 800896a:	b2db      	uxtb	r3, r3
}
 800896c:	0018      	movs	r0, r3
 800896e:	b003      	add	sp, #12
 8008970:	bd00      	pop	{pc}
 8008972:	46c0      	nop			; (mov r8, r8)
	...

08008980 <argument_missing>:

void argument_missing(BaseSequentialStream *chp) {
 8008980:	b500      	push	{lr}
 8008982:	b083      	sub	sp, #12
 8008984:	9001      	str	r0, [sp, #4]
    chprintf(chp, "Error: argument missing\n");
 8008986:	4a04      	ldr	r2, [pc, #16]	; (8008998 <argument_missing+0x18>)
 8008988:	9b01      	ldr	r3, [sp, #4]
 800898a:	0011      	movs	r1, r2
 800898c:	0018      	movs	r0, r3
 800898e:	f7ff ff07 	bl	80087a0 <chprintf>
 8008992:	b003      	add	sp, #12
 8008994:	bd00      	pop	{pc}
 8008996:	46c0      	nop			; (mov r8, r8)
 8008998:	0800b9dc 	.word	0x0800b9dc
 800899c:	00000000 	.word	0x00000000

080089a0 <led_string_init>:
        0,
        0
};


void led_string_init(void) {
 80089a0:	b510      	push	{r4, lr}
    pwmStart(&PWMD1, &pwm1_cfg);
 80089a2:	4a09      	ldr	r2, [pc, #36]	; (80089c8 <led_string_init+0x28>)
 80089a4:	4b09      	ldr	r3, [pc, #36]	; (80089cc <led_string_init+0x2c>)
 80089a6:	0011      	movs	r1, r2
 80089a8:	0018      	movs	r0, r3
 80089aa:	f7fa fff9 	bl	80039a0 <pwmStart>
    pwmStart(&PWMD3, &pwm3_cfg);
 80089ae:	4a08      	ldr	r2, [pc, #32]	; (80089d0 <led_string_init+0x30>)
 80089b0:	4b08      	ldr	r3, [pc, #32]	; (80089d4 <led_string_init+0x34>)
 80089b2:	0011      	movs	r1, r2
 80089b4:	0018      	movs	r0, r3
 80089b6:	f7fa fff3 	bl	80039a0 <pwmStart>
    pwmStart(&PWMD15, &pwm15_cfg);
 80089ba:	4a07      	ldr	r2, [pc, #28]	; (80089d8 <led_string_init+0x38>)
 80089bc:	4b07      	ldr	r3, [pc, #28]	; (80089dc <led_string_init+0x3c>)
 80089be:	0011      	movs	r1, r2
 80089c0:	0018      	movs	r0, r3
 80089c2:	f7fa ffed 	bl	80039a0 <pwmStart>
}
 80089c6:	bd10      	pop	{r4, pc}
 80089c8:	20000460 	.word	0x20000460
 80089cc:	20000940 	.word	0x20000940
 80089d0:	20000498 	.word	0x20000498
 80089d4:	20000960 	.word	0x20000960
 80089d8:	200004d0 	.word	0x200004d0
 80089dc:	20000980 	.word	0x20000980

080089e0 <led_string_setBrightness>:

int led_string_setBrightness(uint8_t channel, float brightness) {
 80089e0:	b510      	push	{r4, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	0002      	movs	r2, r0
 80089e6:	9100      	str	r1, [sp, #0]
 80089e8:	466b      	mov	r3, sp
 80089ea:	3307      	adds	r3, #7
 80089ec:	701a      	strb	r2, [r3, #0]
    if (brightness > 1.0f || brightness < 0.0f) {
 80089ee:	21fe      	movs	r1, #254	; 0xfe
 80089f0:	0589      	lsls	r1, r1, #22
 80089f2:	9800      	ldr	r0, [sp, #0]
 80089f4:	f7f7 fc5c 	bl	80002b0 <__aeabi_fcmpgt>
 80089f8:	1e03      	subs	r3, r0, #0
 80089fa:	d105      	bne.n	8008a08 <led_string_setBrightness+0x28>
 80089fc:	2100      	movs	r1, #0
 80089fe:	9800      	ldr	r0, [sp, #0]
 8008a00:	f7f7 fc42 	bl	8000288 <__aeabi_fcmplt>
 8008a04:	1e03      	subs	r3, r0, #0
 8008a06:	d002      	beq.n	8008a0e <led_string_setBrightness+0x2e>
        return -1;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	425b      	negs	r3, r3
 8008a0c:	e085      	b.n	8008b1a <led_string_setBrightness+0x13a>
    }
    uint16_t dutycycle = (uint16_t) (brightness * (float) UINT16_MAX);
 8008a0e:	4944      	ldr	r1, [pc, #272]	; (8008b20 <led_string_setBrightness+0x140>)
 8008a10:	9800      	ldr	r0, [sp, #0]
 8008a12:	f7f7 febb 	bl	800078c <__aeabi_fmul>
 8008a16:	1c03      	adds	r3, r0, #0
 8008a18:	240e      	movs	r4, #14
 8008a1a:	446c      	add	r4, sp
 8008a1c:	1c18      	adds	r0, r3, #0
 8008a1e:	f7fa f87b 	bl	8002b18 <__aeabi_f2uiz>
 8008a22:	0003      	movs	r3, r0
 8008a24:	8023      	strh	r3, [r4, #0]
    switch (channel) {
 8008a26:	466b      	mov	r3, sp
 8008a28:	3307      	adds	r3, #7
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	2b06      	cmp	r3, #6
 8008a2e:	d870      	bhi.n	8008b12 <led_string_setBrightness+0x132>
 8008a30:	009a      	lsls	r2, r3, #2
 8008a32:	4b3c      	ldr	r3, [pc, #240]	; (8008b24 <led_string_setBrightness+0x144>)
 8008a34:	18d3      	adds	r3, r2, r3
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	469f      	mov	pc, r3
        case 1:
            pwmEnableChannel(&PWMD3, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, dutycycle));
 8008a3a:	4b3b      	ldr	r3, [pc, #236]	; (8008b28 <led_string_setBrightness+0x148>)
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	220e      	movs	r2, #14
 8008a40:	446a      	add	r2, sp
 8008a42:	8812      	ldrh	r2, [r2, #0]
 8008a44:	4353      	muls	r3, r2
 8008a46:	4939      	ldr	r1, [pc, #228]	; (8008b2c <led_string_setBrightness+0x14c>)
 8008a48:	0018      	movs	r0, r3
 8008a4a:	f7f9 ffbb 	bl	80029c4 <__udivsi3>
 8008a4e:	0003      	movs	r3, r0
 8008a50:	001a      	movs	r2, r3
 8008a52:	4b35      	ldr	r3, [pc, #212]	; (8008b28 <led_string_setBrightness+0x148>)
 8008a54:	2100      	movs	r1, #0
 8008a56:	0018      	movs	r0, r3
 8008a58:	f7fa fff2 	bl	8003a40 <pwmEnableChannel>
 8008a5c:	e05c      	b.n	8008b18 <led_string_setBrightness+0x138>
            break;
        case 2:
            pwmEnableChannel(&PWMD3, 1, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, dutycycle));
 8008a5e:	4b32      	ldr	r3, [pc, #200]	; (8008b28 <led_string_setBrightness+0x148>)
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	220e      	movs	r2, #14
 8008a64:	446a      	add	r2, sp
 8008a66:	8812      	ldrh	r2, [r2, #0]
 8008a68:	4353      	muls	r3, r2
 8008a6a:	4930      	ldr	r1, [pc, #192]	; (8008b2c <led_string_setBrightness+0x14c>)
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	f7f9 ffa9 	bl	80029c4 <__udivsi3>
 8008a72:	0003      	movs	r3, r0
 8008a74:	001a      	movs	r2, r3
 8008a76:	4b2c      	ldr	r3, [pc, #176]	; (8008b28 <led_string_setBrightness+0x148>)
 8008a78:	2101      	movs	r1, #1
 8008a7a:	0018      	movs	r0, r3
 8008a7c:	f7fa ffe0 	bl	8003a40 <pwmEnableChannel>
 8008a80:	e04a      	b.n	8008b18 <led_string_setBrightness+0x138>
            break;
        case 3:
            pwmEnableChannel(&PWMD3, 2, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, dutycycle));
 8008a82:	4b29      	ldr	r3, [pc, #164]	; (8008b28 <led_string_setBrightness+0x148>)
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	220e      	movs	r2, #14
 8008a88:	446a      	add	r2, sp
 8008a8a:	8812      	ldrh	r2, [r2, #0]
 8008a8c:	4353      	muls	r3, r2
 8008a8e:	4927      	ldr	r1, [pc, #156]	; (8008b2c <led_string_setBrightness+0x14c>)
 8008a90:	0018      	movs	r0, r3
 8008a92:	f7f9 ff97 	bl	80029c4 <__udivsi3>
 8008a96:	0003      	movs	r3, r0
 8008a98:	001a      	movs	r2, r3
 8008a9a:	4b23      	ldr	r3, [pc, #140]	; (8008b28 <led_string_setBrightness+0x148>)
 8008a9c:	2102      	movs	r1, #2
 8008a9e:	0018      	movs	r0, r3
 8008aa0:	f7fa ffce 	bl	8003a40 <pwmEnableChannel>
 8008aa4:	e038      	b.n	8008b18 <led_string_setBrightness+0x138>
            break;
        case 4:
            pwmEnableChannel(&PWMD3, 3, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, dutycycle));
 8008aa6:	4b20      	ldr	r3, [pc, #128]	; (8008b28 <led_string_setBrightness+0x148>)
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	220e      	movs	r2, #14
 8008aac:	446a      	add	r2, sp
 8008aae:	8812      	ldrh	r2, [r2, #0]
 8008ab0:	4353      	muls	r3, r2
 8008ab2:	491e      	ldr	r1, [pc, #120]	; (8008b2c <led_string_setBrightness+0x14c>)
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	f7f9 ff85 	bl	80029c4 <__udivsi3>
 8008aba:	0003      	movs	r3, r0
 8008abc:	001a      	movs	r2, r3
 8008abe:	4b1a      	ldr	r3, [pc, #104]	; (8008b28 <led_string_setBrightness+0x148>)
 8008ac0:	2103      	movs	r1, #3
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	f7fa ffbc 	bl	8003a40 <pwmEnableChannel>
 8008ac8:	e026      	b.n	8008b18 <led_string_setBrightness+0x138>
            break;
        case 5:
            pwmEnableChannel(&PWMD15, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD15, dutycycle));
 8008aca:	4b19      	ldr	r3, [pc, #100]	; (8008b30 <led_string_setBrightness+0x150>)
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	220e      	movs	r2, #14
 8008ad0:	446a      	add	r2, sp
 8008ad2:	8812      	ldrh	r2, [r2, #0]
 8008ad4:	4353      	muls	r3, r2
 8008ad6:	4915      	ldr	r1, [pc, #84]	; (8008b2c <led_string_setBrightness+0x14c>)
 8008ad8:	0018      	movs	r0, r3
 8008ada:	f7f9 ff73 	bl	80029c4 <__udivsi3>
 8008ade:	0003      	movs	r3, r0
 8008ae0:	001a      	movs	r2, r3
 8008ae2:	4b13      	ldr	r3, [pc, #76]	; (8008b30 <led_string_setBrightness+0x150>)
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	0018      	movs	r0, r3
 8008ae8:	f7fa ffaa 	bl	8003a40 <pwmEnableChannel>
 8008aec:	e014      	b.n	8008b18 <led_string_setBrightness+0x138>
            break;
        case 6:
            pwmEnableChannel(&PWMD15, 1, PWM_PERCENTAGE_TO_WIDTH(&PWMD15, dutycycle));
 8008aee:	4b10      	ldr	r3, [pc, #64]	; (8008b30 <led_string_setBrightness+0x150>)
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	220e      	movs	r2, #14
 8008af4:	446a      	add	r2, sp
 8008af6:	8812      	ldrh	r2, [r2, #0]
 8008af8:	4353      	muls	r3, r2
 8008afa:	490c      	ldr	r1, [pc, #48]	; (8008b2c <led_string_setBrightness+0x14c>)
 8008afc:	0018      	movs	r0, r3
 8008afe:	f7f9 ff61 	bl	80029c4 <__udivsi3>
 8008b02:	0003      	movs	r3, r0
 8008b04:	001a      	movs	r2, r3
 8008b06:	4b0a      	ldr	r3, [pc, #40]	; (8008b30 <led_string_setBrightness+0x150>)
 8008b08:	2101      	movs	r1, #1
 8008b0a:	0018      	movs	r0, r3
 8008b0c:	f7fa ff98 	bl	8003a40 <pwmEnableChannel>
 8008b10:	e002      	b.n	8008b18 <led_string_setBrightness+0x138>
            break;

        default:
            return -1;  // invalid channel
 8008b12:	2301      	movs	r3, #1
 8008b14:	425b      	negs	r3, r3
 8008b16:	e000      	b.n	8008b1a <led_string_setBrightness+0x13a>
    }
    return 0;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	0018      	movs	r0, r3
 8008b1c:	b004      	add	sp, #16
 8008b1e:	bd10      	pop	{r4, pc}
 8008b20:	477fff00 	.word	0x477fff00
 8008b24:	0800b9f8 	.word	0x0800b9f8
 8008b28:	20000960 	.word	0x20000960
 8008b2c:	00002710 	.word	0x00002710
 8008b30:	20000980 	.word	0x20000980
	...

08008b40 <led_string_on>:

int led_string_on(uint8_t channel) {
 8008b40:	b082      	sub	sp, #8
 8008b42:	0002      	movs	r2, r0
 8008b44:	466b      	mov	r3, sp
 8008b46:	3307      	adds	r3, #7
 8008b48:	701a      	strb	r2, [r3, #0]
    switch (channel) {
 8008b4a:	466b      	mov	r3, sp
 8008b4c:	3307      	adds	r3, #7
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	2b06      	cmp	r3, #6
 8008b52:	d81d      	bhi.n	8008b90 <led_string_on+0x50>
 8008b54:	009a      	lsls	r2, r3, #2
 8008b56:	4b12      	ldr	r3, [pc, #72]	; (8008ba0 <led_string_on+0x60>)
 8008b58:	18d3      	adds	r3, r2, r3
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	469f      	mov	pc, r3
        case 1:
            palSetLine(LINE_LEDSTRING1_DRV_EN);
 8008b5e:	4b11      	ldr	r3, [pc, #68]	; (8008ba4 <led_string_on+0x64>)
 8008b60:	2201      	movs	r2, #1
 8008b62:	831a      	strh	r2, [r3, #24]
 8008b64:	e017      	b.n	8008b96 <led_string_on+0x56>
            break;
        case 2:
            palSetLine(LINE_LEDSTRING2_DRV_EN);
 8008b66:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <led_string_on+0x64>)
 8008b68:	2202      	movs	r2, #2
 8008b6a:	831a      	strh	r2, [r3, #24]
 8008b6c:	e013      	b.n	8008b96 <led_string_on+0x56>
            break;
        case 3:
            palSetLine(LINE_LEDSTRING3_DRV_EN);
 8008b6e:	4b0d      	ldr	r3, [pc, #52]	; (8008ba4 <led_string_on+0x64>)
 8008b70:	2280      	movs	r2, #128	; 0x80
 8008b72:	01d2      	lsls	r2, r2, #7
 8008b74:	831a      	strh	r2, [r3, #24]
 8008b76:	e00e      	b.n	8008b96 <led_string_on+0x56>
            break;
        case 4:
            palSetLine(LINE_LEDSTRING4_DRV_EN);
 8008b78:	4b0a      	ldr	r3, [pc, #40]	; (8008ba4 <led_string_on+0x64>)
 8008b7a:	4a0b      	ldr	r2, [pc, #44]	; (8008ba8 <led_string_on+0x68>)
 8008b7c:	831a      	strh	r2, [r3, #24]
 8008b7e:	e00a      	b.n	8008b96 <led_string_on+0x56>
            break;
        case 5:
            palSetLine(LINE_LEDSTRING5_DRV_EN);
 8008b80:	4b08      	ldr	r3, [pc, #32]	; (8008ba4 <led_string_on+0x64>)
 8008b82:	2210      	movs	r2, #16
 8008b84:	831a      	strh	r2, [r3, #24]
 8008b86:	e006      	b.n	8008b96 <led_string_on+0x56>
            break;
        case 6:
            palSetLine(LINE_LEDSTRING6_DRV_EN);
 8008b88:	4b06      	ldr	r3, [pc, #24]	; (8008ba4 <led_string_on+0x64>)
 8008b8a:	2220      	movs	r2, #32
 8008b8c:	831a      	strh	r2, [r3, #24]
 8008b8e:	e002      	b.n	8008b96 <led_string_on+0x56>
            break;
        default:
            return -1;
 8008b90:	2301      	movs	r3, #1
 8008b92:	425b      	negs	r3, r3
 8008b94:	e000      	b.n	8008b98 <led_string_on+0x58>
    }
    return 0;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	0018      	movs	r0, r3
 8008b9a:	b002      	add	sp, #8
 8008b9c:	4770      	bx	lr
 8008b9e:	46c0      	nop			; (mov r8, r8)
 8008ba0:	0800ba14 	.word	0x0800ba14
 8008ba4:	48000800 	.word	0x48000800
 8008ba8:	ffff8000 	.word	0xffff8000
 8008bac:	00000000 	.word	0x00000000

08008bb0 <led_string_off>:

int led_string_off(uint8_t channel) {
 8008bb0:	b082      	sub	sp, #8
 8008bb2:	0002      	movs	r2, r0
 8008bb4:	466b      	mov	r3, sp
 8008bb6:	3307      	adds	r3, #7
 8008bb8:	701a      	strb	r2, [r3, #0]
    switch (channel) {
 8008bba:	466b      	mov	r3, sp
 8008bbc:	3307      	adds	r3, #7
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	2b06      	cmp	r3, #6
 8008bc2:	d81d      	bhi.n	8008c00 <led_string_off+0x50>
 8008bc4:	009a      	lsls	r2, r3, #2
 8008bc6:	4b12      	ldr	r3, [pc, #72]	; (8008c10 <led_string_off+0x60>)
 8008bc8:	18d3      	adds	r3, r2, r3
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	469f      	mov	pc, r3
        case 1:
            palClearLine(LINE_LEDSTRING1_DRV_EN);
 8008bce:	4b11      	ldr	r3, [pc, #68]	; (8008c14 <led_string_off+0x64>)
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	835a      	strh	r2, [r3, #26]
 8008bd4:	e017      	b.n	8008c06 <led_string_off+0x56>
            break;
        case 2:
            palClearLine(LINE_LEDSTRING2_DRV_EN);
 8008bd6:	4b0f      	ldr	r3, [pc, #60]	; (8008c14 <led_string_off+0x64>)
 8008bd8:	2202      	movs	r2, #2
 8008bda:	835a      	strh	r2, [r3, #26]
 8008bdc:	e013      	b.n	8008c06 <led_string_off+0x56>
            break;
        case 3:
            palClearLine(LINE_LEDSTRING3_DRV_EN);
 8008bde:	4b0d      	ldr	r3, [pc, #52]	; (8008c14 <led_string_off+0x64>)
 8008be0:	2280      	movs	r2, #128	; 0x80
 8008be2:	01d2      	lsls	r2, r2, #7
 8008be4:	835a      	strh	r2, [r3, #26]
 8008be6:	e00e      	b.n	8008c06 <led_string_off+0x56>
            break;
        case 4:
            palClearLine(LINE_LEDSTRING4_DRV_EN);
 8008be8:	4b0a      	ldr	r3, [pc, #40]	; (8008c14 <led_string_off+0x64>)
 8008bea:	4a0b      	ldr	r2, [pc, #44]	; (8008c18 <led_string_off+0x68>)
 8008bec:	835a      	strh	r2, [r3, #26]
 8008bee:	e00a      	b.n	8008c06 <led_string_off+0x56>
            break;
        case 5:
            palClearLine(LINE_LEDSTRING5_DRV_EN);
 8008bf0:	4b08      	ldr	r3, [pc, #32]	; (8008c14 <led_string_off+0x64>)
 8008bf2:	2210      	movs	r2, #16
 8008bf4:	835a      	strh	r2, [r3, #26]
 8008bf6:	e006      	b.n	8008c06 <led_string_off+0x56>
            break;
        case 6:
            palClearLine(LINE_LEDSTRING6_DRV_EN);
 8008bf8:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <led_string_off+0x64>)
 8008bfa:	2220      	movs	r2, #32
 8008bfc:	835a      	strh	r2, [r3, #26]
 8008bfe:	e002      	b.n	8008c06 <led_string_off+0x56>
            break;
        default:
            return -1;
 8008c00:	2301      	movs	r3, #1
 8008c02:	425b      	negs	r3, r3
 8008c04:	e000      	b.n	8008c08 <led_string_off+0x58>
    }
    return 0;
 8008c06:	2300      	movs	r3, #0
 8008c08:	0018      	movs	r0, r3
 8008c0a:	b002      	add	sp, #8
 8008c0c:	4770      	bx	lr
 8008c0e:	46c0      	nop			; (mov r8, r8)
 8008c10:	0800ba30 	.word	0x0800ba30
 8008c14:	48000800 	.word	0x48000800
 8008c18:	ffff8000 	.word	0xffff8000
 8008c1c:	00000000 	.word	0x00000000

08008c20 <_light>:
#include "serial_interface/common.h"
#include "waber_thread.h"
#include "chprintf.h"
#include "core_defines.h"

int _light(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008c20:	b500      	push	{lr}
 8008c22:	b08b      	sub	sp, #44	; 0x2c
 8008c24:	9003      	str	r0, [sp, #12]
 8008c26:	9102      	str	r1, [sp, #8]
 8008c28:	9201      	str	r2, [sp, #4]
    if (argc < 3) {
 8008c2a:	9b02      	ldr	r3, [sp, #8]
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	dc06      	bgt.n	8008c3e <_light+0x1e>
        argument_missing(chp);
 8008c30:	9b03      	ldr	r3, [sp, #12]
 8008c32:	0018      	movs	r0, r3
 8008c34:	f7ff fea4 	bl	8008980 <argument_missing>
        return -1;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	425b      	negs	r3, r3
 8008c3c:	e093      	b.n	8008d66 <_light+0x146>
    }
    const char *which_parameter_to_set = argv[0];
 8008c3e:	9b01      	ldr	r3, [sp, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	9308      	str	r3, [sp, #32]
    const char *which_led = argv[1];
 8008c44:	9b01      	ldr	r3, [sp, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	9307      	str	r3, [sp, #28]
    const char *value = argv[2];
 8008c4a:	9b01      	ldr	r3, [sp, #4]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	9306      	str	r3, [sp, #24]

    wabercfg_parameter_e parameter;
    if (isEqual(which_parameter_to_set, "phase")) {
 8008c50:	4a46      	ldr	r2, [pc, #280]	; (8008d6c <_light+0x14c>)
 8008c52:	9b08      	ldr	r3, [sp, #32]
 8008c54:	0011      	movs	r1, r2
 8008c56:	0018      	movs	r0, r3
 8008c58:	f7ff fe7a 	bl	8008950 <isEqual>
 8008c5c:	1e03      	subs	r3, r0, #0
 8008c5e:	d004      	beq.n	8008c6a <_light+0x4a>
        parameter = WABER_CFG_PHASE;
 8008c60:	2327      	movs	r3, #39	; 0x27
 8008c62:	446b      	add	r3, sp
 8008c64:	2200      	movs	r2, #0
 8008c66:	701a      	strb	r2, [r3, #0]
 8008c68:	e056      	b.n	8008d18 <_light+0xf8>
    }
    else if (isEqual(which_parameter_to_set, "depth")) {
 8008c6a:	4a41      	ldr	r2, [pc, #260]	; (8008d70 <_light+0x150>)
 8008c6c:	9b08      	ldr	r3, [sp, #32]
 8008c6e:	0011      	movs	r1, r2
 8008c70:	0018      	movs	r0, r3
 8008c72:	f7ff fe6d 	bl	8008950 <isEqual>
 8008c76:	1e03      	subs	r3, r0, #0
 8008c78:	d004      	beq.n	8008c84 <_light+0x64>
        parameter = WABER_CFG_DEPTH;
 8008c7a:	2327      	movs	r3, #39	; 0x27
 8008c7c:	446b      	add	r3, sp
 8008c7e:	2201      	movs	r2, #1
 8008c80:	701a      	strb	r2, [r3, #0]
 8008c82:	e049      	b.n	8008d18 <_light+0xf8>
    }
    else if (isEqual(which_parameter_to_set, "frequency")) {
 8008c84:	4a3b      	ldr	r2, [pc, #236]	; (8008d74 <_light+0x154>)
 8008c86:	9b08      	ldr	r3, [sp, #32]
 8008c88:	0011      	movs	r1, r2
 8008c8a:	0018      	movs	r0, r3
 8008c8c:	f7ff fe60 	bl	8008950 <isEqual>
 8008c90:	1e03      	subs	r3, r0, #0
 8008c92:	d004      	beq.n	8008c9e <_light+0x7e>
        parameter = WABER_CFG_FREQUENCY;
 8008c94:	2327      	movs	r3, #39	; 0x27
 8008c96:	446b      	add	r3, sp
 8008c98:	2202      	movs	r2, #2
 8008c9a:	701a      	strb	r2, [r3, #0]
 8008c9c:	e03c      	b.n	8008d18 <_light+0xf8>
    }
    else if (isEqual(which_parameter_to_set, "max_brightness")) {
 8008c9e:	4a36      	ldr	r2, [pc, #216]	; (8008d78 <_light+0x158>)
 8008ca0:	9b08      	ldr	r3, [sp, #32]
 8008ca2:	0011      	movs	r1, r2
 8008ca4:	0018      	movs	r0, r3
 8008ca6:	f7ff fe53 	bl	8008950 <isEqual>
 8008caa:	1e03      	subs	r3, r0, #0
 8008cac:	d004      	beq.n	8008cb8 <_light+0x98>
        parameter = WABER_CFG_MAX_BRIGHTNESS;
 8008cae:	2327      	movs	r3, #39	; 0x27
 8008cb0:	446b      	add	r3, sp
 8008cb2:	2203      	movs	r2, #3
 8008cb4:	701a      	strb	r2, [r3, #0]
 8008cb6:	e02f      	b.n	8008d18 <_light+0xf8>
    }
    else if (isEqual(which_parameter_to_set, "brightness")) {
 8008cb8:	4a30      	ldr	r2, [pc, #192]	; (8008d7c <_light+0x15c>)
 8008cba:	9b08      	ldr	r3, [sp, #32]
 8008cbc:	0011      	movs	r1, r2
 8008cbe:	0018      	movs	r0, r3
 8008cc0:	f7ff fe46 	bl	8008950 <isEqual>
 8008cc4:	1e03      	subs	r3, r0, #0
 8008cc6:	d004      	beq.n	8008cd2 <_light+0xb2>
        parameter = WABER_CFG_MOMENTARY_BRIGHTNESS;
 8008cc8:	2327      	movs	r3, #39	; 0x27
 8008cca:	446b      	add	r3, sp
 8008ccc:	2204      	movs	r2, #4
 8008cce:	701a      	strb	r2, [r3, #0]
 8008cd0:	e022      	b.n	8008d18 <_light+0xf8>
    }
    else if (isEqual(which_parameter_to_set, "smoothness")) {
 8008cd2:	4a2b      	ldr	r2, [pc, #172]	; (8008d80 <_light+0x160>)
 8008cd4:	9b08      	ldr	r3, [sp, #32]
 8008cd6:	0011      	movs	r1, r2
 8008cd8:	0018      	movs	r0, r3
 8008cda:	f7ff fe39 	bl	8008950 <isEqual>
 8008cde:	1e03      	subs	r3, r0, #0
 8008ce0:	d004      	beq.n	8008cec <_light+0xcc>
        parameter = WABER_CFG_SMOOTHNESS;
 8008ce2:	2327      	movs	r3, #39	; 0x27
 8008ce4:	446b      	add	r3, sp
 8008ce6:	2205      	movs	r2, #5
 8008ce8:	701a      	strb	r2, [r3, #0]
 8008cea:	e015      	b.n	8008d18 <_light+0xf8>
    }
    else if (isEqual(which_parameter_to_set, "active")) {
 8008cec:	4a25      	ldr	r2, [pc, #148]	; (8008d84 <_light+0x164>)
 8008cee:	9b08      	ldr	r3, [sp, #32]
 8008cf0:	0011      	movs	r1, r2
 8008cf2:	0018      	movs	r0, r3
 8008cf4:	f7ff fe2c 	bl	8008950 <isEqual>
 8008cf8:	1e03      	subs	r3, r0, #0
 8008cfa:	d004      	beq.n	8008d06 <_light+0xe6>
        parameter = WABER_CFG_ACTIVE;
 8008cfc:	2327      	movs	r3, #39	; 0x27
 8008cfe:	446b      	add	r3, sp
 8008d00:	2206      	movs	r2, #6
 8008d02:	701a      	strb	r2, [r3, #0]
 8008d04:	e008      	b.n	8008d18 <_light+0xf8>
    }
    else {
        chprintf(chp, "no such parameter as %s\n\r", which_parameter_to_set);
 8008d06:	9a08      	ldr	r2, [sp, #32]
 8008d08:	491f      	ldr	r1, [pc, #124]	; (8008d88 <_light+0x168>)
 8008d0a:	9b03      	ldr	r3, [sp, #12]
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	f7ff fd47 	bl	80087a0 <chprintf>
        return -1;
 8008d12:	2301      	movs	r3, #1
 8008d14:	425b      	negs	r3, r3
 8008d16:	e026      	b.n	8008d66 <_light+0x146>
    }

    int led_to_set;
    customAtoI(which_led, &led_to_set);
 8008d18:	aa04      	add	r2, sp, #16
 8008d1a:	9b07      	ldr	r3, [sp, #28]
 8008d1c:	0011      	movs	r1, r2
 8008d1e:	0018      	movs	r0, r3
 8008d20:	f7ff fd56 	bl	80087d0 <customAtoI>
    if ((led_to_set < 0) || (led_to_set > 6)) {
 8008d24:	9b04      	ldr	r3, [sp, #16]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	db02      	blt.n	8008d30 <_light+0x110>
 8008d2a:	9b04      	ldr	r3, [sp, #16]
 8008d2c:	2b06      	cmp	r3, #6
 8008d2e:	dd08      	ble.n	8008d42 <_light+0x122>
        chprintf(chp, "invalid led: %d\n\r", led_to_set);
 8008d30:	9a04      	ldr	r2, [sp, #16]
 8008d32:	4916      	ldr	r1, [pc, #88]	; (8008d8c <_light+0x16c>)
 8008d34:	9b03      	ldr	r3, [sp, #12]
 8008d36:	0018      	movs	r0, r3
 8008d38:	f7ff fd32 	bl	80087a0 <chprintf>
        return -1;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	425b      	negs	r3, r3
 8008d40:	e011      	b.n	8008d66 <_light+0x146>
    }

    float value_decoded = customAtoF(value);
 8008d42:	9b06      	ldr	r3, [sp, #24]
 8008d44:	0018      	movs	r0, r3
 8008d46:	f7ff fd7b 	bl	8008840 <customAtoF>
 8008d4a:	1c03      	adds	r3, r0, #0
 8008d4c:	9305      	str	r3, [sp, #20]
    waberthread_set_cfg((uint8_t) led_to_set-1, parameter, value_decoded);
 8008d4e:	9b04      	ldr	r3, [sp, #16]
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	3b01      	subs	r3, #1
 8008d54:	b2d8      	uxtb	r0, r3
 8008d56:	9a05      	ldr	r2, [sp, #20]
 8008d58:	2327      	movs	r3, #39	; 0x27
 8008d5a:	446b      	add	r3, sp
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	0019      	movs	r1, r3
 8008d60:	f000 fcf6 	bl	8009750 <waberthread_set_cfg>
    return 0;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	0018      	movs	r0, r3
 8008d68:	b00b      	add	sp, #44	; 0x2c
 8008d6a:	bd00      	pop	{pc}
 8008d6c:	0800ba4c 	.word	0x0800ba4c
 8008d70:	0800ba54 	.word	0x0800ba54
 8008d74:	0800ba5c 	.word	0x0800ba5c
 8008d78:	0800ba68 	.word	0x0800ba68
 8008d7c:	0800ba6c 	.word	0x0800ba6c
 8008d80:	0800ba78 	.word	0x0800ba78
 8008d84:	0800ba84 	.word	0x0800ba84
 8008d88:	0800ba8c 	.word	0x0800ba8c
 8008d8c:	0800baa8 	.word	0x0800baa8

08008d90 <_mode>:

int _mode(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008d90:	b500      	push	{lr}
 8008d92:	b085      	sub	sp, #20
 8008d94:	9003      	str	r0, [sp, #12]
 8008d96:	9102      	str	r1, [sp, #8]
 8008d98:	9201      	str	r2, [sp, #4]
    if (argc < 1) {
 8008d9a:	9b02      	ldr	r3, [sp, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	dc06      	bgt.n	8008dae <_mode+0x1e>
        argument_missing(chp);
 8008da0:	9b03      	ldr	r3, [sp, #12]
 8008da2:	0018      	movs	r0, r3
 8008da4:	f7ff fdec 	bl	8008980 <argument_missing>
        return -1;
 8008da8:	2301      	movs	r3, #1
 8008daa:	425b      	negs	r3, r3
 8008dac:	e01c      	b.n	8008de8 <_mode+0x58>
    }
    if (isEqual(argv[0], "manual")) {
 8008dae:	9b01      	ldr	r3, [sp, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a0f      	ldr	r2, [pc, #60]	; (8008df0 <_mode+0x60>)
 8008db4:	0011      	movs	r1, r2
 8008db6:	0018      	movs	r0, r3
 8008db8:	f7ff fdca 	bl	8008950 <isEqual>
 8008dbc:	1e03      	subs	r3, r0, #0
 8008dbe:	d009      	beq.n	8008dd4 <_mode+0x44>
        waberthread_set_manual_mode(true);
 8008dc0:	2001      	movs	r0, #1
 8008dc2:	f000 fca5 	bl	8009710 <waberthread_set_manual_mode>
        chprintf(chp, "setting manual mode\n\r");
 8008dc6:	4a0b      	ldr	r2, [pc, #44]	; (8008df4 <_mode+0x64>)
 8008dc8:	9b03      	ldr	r3, [sp, #12]
 8008dca:	0011      	movs	r1, r2
 8008dcc:	0018      	movs	r0, r3
 8008dce:	f7ff fce7 	bl	80087a0 <chprintf>
 8008dd2:	e008      	b.n	8008de6 <_mode+0x56>
    }
    else {
        waberthread_set_manual_mode(false);
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	f000 fc9b 	bl	8009710 <waberthread_set_manual_mode>
        chprintf(chp, "setting automatic (\"wabering\") mode (you might have to send this command a second time)\n\r");
 8008dda:	4a07      	ldr	r2, [pc, #28]	; (8008df8 <_mode+0x68>)
 8008ddc:	9b03      	ldr	r3, [sp, #12]
 8008dde:	0011      	movs	r1, r2
 8008de0:	0018      	movs	r0, r3
 8008de2:	f7ff fcdd 	bl	80087a0 <chprintf>
    }
    return 0;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	0018      	movs	r0, r3
 8008dea:	b005      	add	sp, #20
 8008dec:	bd00      	pop	{pc}
 8008dee:	46c0      	nop			; (mov r8, r8)
 8008df0:	0800babc 	.word	0x0800babc
 8008df4:	0800bac4 	.word	0x0800bac4
 8008df8:	0800badc 	.word	0x0800badc
 8008dfc:	00000000 	.word	0x00000000

08008e00 <_poti_range>:

int _poti_range(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008e00:	b500      	push	{lr}
 8008e02:	b085      	sub	sp, #20
 8008e04:	9003      	str	r0, [sp, #12]
 8008e06:	9102      	str	r1, [sp, #8]
 8008e08:	9201      	str	r2, [sp, #4]
    UNUSED_PARAM(argc);
    UNUSED_PARAM(argv);
    chprintf(chp, "not implemented\n\r");
 8008e0a:	4a05      	ldr	r2, [pc, #20]	; (8008e20 <_poti_range+0x20>)
 8008e0c:	9b03      	ldr	r3, [sp, #12]
 8008e0e:	0011      	movs	r1, r2
 8008e10:	0018      	movs	r0, r3
 8008e12:	f7ff fcc5 	bl	80087a0 <chprintf>
    return -1;
 8008e16:	2301      	movs	r3, #1
 8008e18:	425b      	negs	r3, r3
}
 8008e1a:	0018      	movs	r0, r3
 8008e1c:	b005      	add	sp, #20
 8008e1e:	bd00      	pop	{pc}
 8008e20:	0800bb38 	.word	0x0800bb38
	...

08008e30 <_battery_monitor>:

int _battery_monitor(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008e30:	b500      	push	{lr}
 8008e32:	b085      	sub	sp, #20
 8008e34:	9003      	str	r0, [sp, #12]
 8008e36:	9102      	str	r1, [sp, #8]
 8008e38:	9201      	str	r2, [sp, #4]
    UNUSED_PARAM(argc);
    UNUSED_PARAM(argv);
    chprintf(chp, "not implemented\n\r");
 8008e3a:	4a05      	ldr	r2, [pc, #20]	; (8008e50 <_battery_monitor+0x20>)
 8008e3c:	9b03      	ldr	r3, [sp, #12]
 8008e3e:	0011      	movs	r1, r2
 8008e40:	0018      	movs	r0, r3
 8008e42:	f7ff fcad 	bl	80087a0 <chprintf>
    return -1;
 8008e46:	2301      	movs	r3, #1
 8008e48:	425b      	negs	r3, r3
}
 8008e4a:	0018      	movs	r0, r3
 8008e4c:	b005      	add	sp, #20
 8008e4e:	bd00      	pop	{pc}
 8008e50:	0800bb38 	.word	0x0800bb38
	...

08008e60 <_smps>:

int _smps(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008e60:	b500      	push	{lr}
 8008e62:	b087      	sub	sp, #28
 8008e64:	9003      	str	r0, [sp, #12]
 8008e66:	9102      	str	r1, [sp, #8]
 8008e68:	9201      	str	r2, [sp, #4]
    if (argc < 1) {
 8008e6a:	9b02      	ldr	r3, [sp, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	dc06      	bgt.n	8008e7e <_smps+0x1e>
        argument_missing(chp);
 8008e70:	9b03      	ldr	r3, [sp, #12]
 8008e72:	0018      	movs	r0, r3
 8008e74:	f7ff fd84 	bl	8008980 <argument_missing>
        return -1;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	425b      	negs	r3, r3
 8008e7c:	e009      	b.n	8008e92 <_smps+0x32>
    }
    const char *on_or_off = argv[0];
 8008e7e:	9b01      	ldr	r3, [sp, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	9305      	str	r3, [sp, #20]
    if (isEqual(on_or_off, "on")) {
 8008e84:	4a04      	ldr	r2, [pc, #16]	; (8008e98 <_smps+0x38>)
 8008e86:	9b05      	ldr	r3, [sp, #20]
 8008e88:	0011      	movs	r1, r2
 8008e8a:	0018      	movs	r0, r3
 8008e8c:	f7ff fd60 	bl	8008950 <isEqual>

    }
    return 0;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	0018      	movs	r0, r3
 8008e94:	b007      	add	sp, #28
 8008e96:	bd00      	pop	{pc}
 8008e98:	0800bb4c 	.word	0x0800bb4c
 8008e9c:	00000000 	.word	0x00000000

08008ea0 <_temperature>:

int _temperature(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008ea0:	b500      	push	{lr}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	9003      	str	r0, [sp, #12]
 8008ea6:	9102      	str	r1, [sp, #8]
 8008ea8:	9201      	str	r2, [sp, #4]
    UNUSED_PARAM(argc);
    UNUSED_PARAM(argv);
    chprintf(chp, "not implemented\n\r");
 8008eaa:	4a05      	ldr	r2, [pc, #20]	; (8008ec0 <_temperature+0x20>)
 8008eac:	9b03      	ldr	r3, [sp, #12]
 8008eae:	0011      	movs	r1, r2
 8008eb0:	0018      	movs	r0, r3
 8008eb2:	f7ff fc75 	bl	80087a0 <chprintf>
    return -1;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	425b      	negs	r3, r3
}
 8008eba:	0018      	movs	r0, r3
 8008ebc:	b005      	add	sp, #20
 8008ebe:	bd00      	pop	{pc}
 8008ec0:	0800bb38 	.word	0x0800bb38
	...

08008ed0 <set>:

void set(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008ed0:	b500      	push	{lr}
 8008ed2:	b087      	sub	sp, #28
 8008ed4:	9003      	str	r0, [sp, #12]
 8008ed6:	9102      	str	r1, [sp, #8]
 8008ed8:	9201      	str	r2, [sp, #4]
    if (argc < 1) {
 8008eda:	9b02      	ldr	r3, [sp, #8]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	dc04      	bgt.n	8008eea <set+0x1a>
        argument_missing(chp);
 8008ee0:	9b03      	ldr	r3, [sp, #12]
 8008ee2:	0018      	movs	r0, r3
 8008ee4:	f7ff fd4c 	bl	8008980 <argument_missing>
 8008ee8:	e095      	b.n	8009016 <set+0x146>
        return;
    }
    int retval = 0;
 8008eea:	2300      	movs	r3, #0
 8008eec:	9305      	str	r3, [sp, #20]
    const char *what_to_set = argv[0];
 8008eee:	9b01      	ldr	r3, [sp, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	9304      	str	r3, [sp, #16]

    if (isEqual(what_to_set, "light")) {
 8008ef4:	4a49      	ldr	r2, [pc, #292]	; (800901c <set+0x14c>)
 8008ef6:	9b04      	ldr	r3, [sp, #16]
 8008ef8:	0011      	movs	r1, r2
 8008efa:	0018      	movs	r0, r3
 8008efc:	f7ff fd28 	bl	8008950 <isEqual>
 8008f00:	1e03      	subs	r3, r0, #0
 8008f02:	d00a      	beq.n	8008f1a <set+0x4a>
        retval = _light(chp, argc-1, argv+1);
 8008f04:	9b02      	ldr	r3, [sp, #8]
 8008f06:	1e59      	subs	r1, r3, #1
 8008f08:	9b01      	ldr	r3, [sp, #4]
 8008f0a:	1d1a      	adds	r2, r3, #4
 8008f0c:	9b03      	ldr	r3, [sp, #12]
 8008f0e:	0018      	movs	r0, r3
 8008f10:	f7ff fe86 	bl	8008c20 <_light>
 8008f14:	0003      	movs	r3, r0
 8008f16:	9305      	str	r3, [sp, #20]
 8008f18:	e067      	b.n	8008fea <set+0x11a>
    }
    else if (isEqual(what_to_set, "mode")) {
 8008f1a:	4a41      	ldr	r2, [pc, #260]	; (8009020 <set+0x150>)
 8008f1c:	9b04      	ldr	r3, [sp, #16]
 8008f1e:	0011      	movs	r1, r2
 8008f20:	0018      	movs	r0, r3
 8008f22:	f7ff fd15 	bl	8008950 <isEqual>
 8008f26:	1e03      	subs	r3, r0, #0
 8008f28:	d00a      	beq.n	8008f40 <set+0x70>
        retval = _mode(chp, argc-1, argv+1);
 8008f2a:	9b02      	ldr	r3, [sp, #8]
 8008f2c:	1e59      	subs	r1, r3, #1
 8008f2e:	9b01      	ldr	r3, [sp, #4]
 8008f30:	1d1a      	adds	r2, r3, #4
 8008f32:	9b03      	ldr	r3, [sp, #12]
 8008f34:	0018      	movs	r0, r3
 8008f36:	f7ff ff2b 	bl	8008d90 <_mode>
 8008f3a:	0003      	movs	r3, r0
 8008f3c:	9305      	str	r3, [sp, #20]
 8008f3e:	e054      	b.n	8008fea <set+0x11a>
    }
    else if (isEqual(what_to_set, "poti_range")) {
 8008f40:	4a38      	ldr	r2, [pc, #224]	; (8009024 <set+0x154>)
 8008f42:	9b04      	ldr	r3, [sp, #16]
 8008f44:	0011      	movs	r1, r2
 8008f46:	0018      	movs	r0, r3
 8008f48:	f7ff fd02 	bl	8008950 <isEqual>
 8008f4c:	1e03      	subs	r3, r0, #0
 8008f4e:	d00a      	beq.n	8008f66 <set+0x96>
        retval = _poti_range(chp, argc-1, argv+1);
 8008f50:	9b02      	ldr	r3, [sp, #8]
 8008f52:	1e59      	subs	r1, r3, #1
 8008f54:	9b01      	ldr	r3, [sp, #4]
 8008f56:	1d1a      	adds	r2, r3, #4
 8008f58:	9b03      	ldr	r3, [sp, #12]
 8008f5a:	0018      	movs	r0, r3
 8008f5c:	f7ff ff50 	bl	8008e00 <_poti_range>
 8008f60:	0003      	movs	r3, r0
 8008f62:	9305      	str	r3, [sp, #20]
 8008f64:	e041      	b.n	8008fea <set+0x11a>
    }
    else if (isEqual(what_to_set, "battery_monitor")) {
 8008f66:	4a30      	ldr	r2, [pc, #192]	; (8009028 <set+0x158>)
 8008f68:	9b04      	ldr	r3, [sp, #16]
 8008f6a:	0011      	movs	r1, r2
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	f7ff fcef 	bl	8008950 <isEqual>
 8008f72:	1e03      	subs	r3, r0, #0
 8008f74:	d00a      	beq.n	8008f8c <set+0xbc>
        retval = _battery_monitor(chp, argc-1, argv+1);
 8008f76:	9b02      	ldr	r3, [sp, #8]
 8008f78:	1e59      	subs	r1, r3, #1
 8008f7a:	9b01      	ldr	r3, [sp, #4]
 8008f7c:	1d1a      	adds	r2, r3, #4
 8008f7e:	9b03      	ldr	r3, [sp, #12]
 8008f80:	0018      	movs	r0, r3
 8008f82:	f7ff ff55 	bl	8008e30 <_battery_monitor>
 8008f86:	0003      	movs	r3, r0
 8008f88:	9305      	str	r3, [sp, #20]
 8008f8a:	e02e      	b.n	8008fea <set+0x11a>
    }
    else if (isEqual(what_to_set, "smps")) {
 8008f8c:	4a27      	ldr	r2, [pc, #156]	; (800902c <set+0x15c>)
 8008f8e:	9b04      	ldr	r3, [sp, #16]
 8008f90:	0011      	movs	r1, r2
 8008f92:	0018      	movs	r0, r3
 8008f94:	f7ff fcdc 	bl	8008950 <isEqual>
 8008f98:	1e03      	subs	r3, r0, #0
 8008f9a:	d00a      	beq.n	8008fb2 <set+0xe2>
        retval = _smps(chp, argc-1, argv+1);
 8008f9c:	9b02      	ldr	r3, [sp, #8]
 8008f9e:	1e59      	subs	r1, r3, #1
 8008fa0:	9b01      	ldr	r3, [sp, #4]
 8008fa2:	1d1a      	adds	r2, r3, #4
 8008fa4:	9b03      	ldr	r3, [sp, #12]
 8008fa6:	0018      	movs	r0, r3
 8008fa8:	f7ff ff5a 	bl	8008e60 <_smps>
 8008fac:	0003      	movs	r3, r0
 8008fae:	9305      	str	r3, [sp, #20]
 8008fb0:	e01b      	b.n	8008fea <set+0x11a>
    }
    else if (isEqual(what_to_set, "temperature")) {
 8008fb2:	4a1f      	ldr	r2, [pc, #124]	; (8009030 <set+0x160>)
 8008fb4:	9b04      	ldr	r3, [sp, #16]
 8008fb6:	0011      	movs	r1, r2
 8008fb8:	0018      	movs	r0, r3
 8008fba:	f7ff fcc9 	bl	8008950 <isEqual>
 8008fbe:	1e03      	subs	r3, r0, #0
 8008fc0:	d00a      	beq.n	8008fd8 <set+0x108>
        retval = _temperature(chp, argc-1, argv+1);
 8008fc2:	9b02      	ldr	r3, [sp, #8]
 8008fc4:	1e59      	subs	r1, r3, #1
 8008fc6:	9b01      	ldr	r3, [sp, #4]
 8008fc8:	1d1a      	adds	r2, r3, #4
 8008fca:	9b03      	ldr	r3, [sp, #12]
 8008fcc:	0018      	movs	r0, r3
 8008fce:	f7ff ff67 	bl	8008ea0 <_temperature>
 8008fd2:	0003      	movs	r3, r0
 8008fd4:	9305      	str	r3, [sp, #20]
 8008fd6:	e008      	b.n	8008fea <set+0x11a>
    }
    else {
        retval = -1;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	425b      	negs	r3, r3
 8008fdc:	9305      	str	r3, [sp, #20]
        chprintf(chp, "no such setter as %s\n\r", what_to_set);
 8008fde:	9a04      	ldr	r2, [sp, #16]
 8008fe0:	4914      	ldr	r1, [pc, #80]	; (8009034 <set+0x164>)
 8008fe2:	9b03      	ldr	r3, [sp, #12]
 8008fe4:	0018      	movs	r0, r3
 8008fe6:	f7ff fbdb 	bl	80087a0 <chprintf>
    }

    chprintf(chp, "setting %s ", what_to_set);
 8008fea:	9a04      	ldr	r2, [sp, #16]
 8008fec:	4912      	ldr	r1, [pc, #72]	; (8009038 <set+0x168>)
 8008fee:	9b03      	ldr	r3, [sp, #12]
 8008ff0:	0018      	movs	r0, r3
 8008ff2:	f7ff fbd5 	bl	80087a0 <chprintf>
    if (retval == 0) {
 8008ff6:	9b05      	ldr	r3, [sp, #20]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d106      	bne.n	800900a <set+0x13a>
        chprintf(chp, "successful\n\r");
 8008ffc:	4a0f      	ldr	r2, [pc, #60]	; (800903c <set+0x16c>)
 8008ffe:	9b03      	ldr	r3, [sp, #12]
 8009000:	0011      	movs	r1, r2
 8009002:	0018      	movs	r0, r3
 8009004:	f7ff fbcc 	bl	80087a0 <chprintf>
 8009008:	e005      	b.n	8009016 <set+0x146>
    }
    else {
        chprintf(chp, "failed\n\r");
 800900a:	4a0d      	ldr	r2, [pc, #52]	; (8009040 <set+0x170>)
 800900c:	9b03      	ldr	r3, [sp, #12]
 800900e:	0011      	movs	r1, r2
 8009010:	0018      	movs	r0, r3
 8009012:	f7ff fbc5 	bl	80087a0 <chprintf>
    }

}
 8009016:	b007      	add	sp, #28
 8009018:	bd00      	pop	{pc}
 800901a:	46c0      	nop			; (mov r8, r8)
 800901c:	0800bb50 	.word	0x0800bb50
 8009020:	0800bb58 	.word	0x0800bb58
 8009024:	0800bb60 	.word	0x0800bb60
 8009028:	0800bb6c 	.word	0x0800bb6c
 800902c:	0800bb7c 	.word	0x0800bb7c
 8009030:	0800bb84 	.word	0x0800bb84
 8009034:	0800bb90 	.word	0x0800bb90
 8009038:	0800bba8 	.word	0x0800bba8
 800903c:	0800bbb4 	.word	0x0800bbb4
 8009040:	0800bbc4 	.word	0x0800bbc4
	...

08009050 <_probe>:
#include "serial_interface/common.h"
#include "serial_interface_set.h"



void _probe(BaseSequentialStream *chp, int argc, char *argv[]) {
 8009050:	b500      	push	{lr}
 8009052:	b085      	sub	sp, #20
 8009054:	9003      	str	r0, [sp, #12]
 8009056:	9102      	str	r1, [sp, #8]
 8009058:	9201      	str	r2, [sp, #4]
    UNUSED_PARAM(chp);
    UNUSED_PARAM(argc);
    UNUSED_PARAM(argv);
    chprintf(chp, "Echo\n");
 800905a:	4a04      	ldr	r2, [pc, #16]	; (800906c <_probe+0x1c>)
 800905c:	9b03      	ldr	r3, [sp, #12]
 800905e:	0011      	movs	r1, r2
 8009060:	0018      	movs	r0, r3
 8009062:	f7ff fb9d 	bl	80087a0 <chprintf>
}
 8009066:	b005      	add	sp, #20
 8009068:	bd00      	pop	{pc}
 800906a:	46c0      	nop			; (mov r8, r8)
 800906c:	0800bbd0 	.word	0x0800bbd0

08009070 <communicationThreads_init>:
    while (true) {
        _communicationInputMainloop();
    }
}

void communicationThreads_init(void) {
 8009070:	b500      	push	{lr}
 8009072:	b085      	sub	sp, #20
    shellInit();
 8009074:	f7fe fec4 	bl	8007e00 <shellInit>
    sdStart(&SD2, NULL);
 8009078:	4b09      	ldr	r3, [pc, #36]	; (80090a0 <communicationThreads_init+0x30>)
 800907a:	2100      	movs	r1, #0
 800907c:	0018      	movs	r0, r3
 800907e:	f7fa fe97 	bl	8003db0 <sdStart>
    thread_t *shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE, "shell", NORMALPRIO + 1, shellThread, (void *)&shell_cfg1);
 8009082:	4a08      	ldr	r2, [pc, #32]	; (80090a4 <communicationThreads_init+0x34>)
 8009084:	239a      	movs	r3, #154	; 0x9a
 8009086:	00d9      	lsls	r1, r3, #3
 8009088:	4b07      	ldr	r3, [pc, #28]	; (80090a8 <communicationThreads_init+0x38>)
 800908a:	9301      	str	r3, [sp, #4]
 800908c:	4b07      	ldr	r3, [pc, #28]	; (80090ac <communicationThreads_init+0x3c>)
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	2381      	movs	r3, #129	; 0x81
 8009092:	2000      	movs	r0, #0
 8009094:	f7fd ffd4 	bl	8007040 <chThdCreateFromHeap>
 8009098:	0003      	movs	r3, r0
 800909a:	9303      	str	r3, [sp, #12]
    //chThdWait(shelltp);               /* Waiting termination.             */
 800909c:	b005      	add	sp, #20
 800909e:	bd00      	pop	{pc}
 80090a0:	200009a0 	.word	0x200009a0
 80090a4:	0800b5b8 	.word	0x0800b5b8
 80090a8:	20000508 	.word	0x20000508
 80090ac:	08007c31 	.word	0x08007c31

080090b0 <_compressor>:
#include "wabering.h"
#include "math.h"

float _compressor(float input, float smoothness) {
 80090b0:	b500      	push	{lr}
 80090b2:	b085      	sub	sp, #20
 80090b4:	9001      	str	r0, [sp, #4]
 80090b6:	9100      	str	r1, [sp, #0]
    float numerator = exp(input * smoothness) - 1;
 80090b8:	9900      	ldr	r1, [sp, #0]
 80090ba:	9801      	ldr	r0, [sp, #4]
 80090bc:	f7f7 fb66 	bl	800078c <__aeabi_fmul>
 80090c0:	1c03      	adds	r3, r0, #0
 80090c2:	1c18      	adds	r0, r3, #0
 80090c4:	f7f9 fe88 	bl	8002dd8 <__aeabi_f2d>
 80090c8:	0002      	movs	r2, r0
 80090ca:	000b      	movs	r3, r1
 80090cc:	0010      	movs	r0, r2
 80090ce:	0019      	movs	r1, r3
 80090d0:	f000 fcb0 	bl	8009a34 <exp>
 80090d4:	2200      	movs	r2, #0
 80090d6:	4b14      	ldr	r3, [pc, #80]	; (8009128 <_compressor+0x78>)
 80090d8:	f7f9 f87c 	bl	80021d4 <__aeabi_dsub>
 80090dc:	0002      	movs	r2, r0
 80090de:	000b      	movs	r3, r1
 80090e0:	0010      	movs	r0, r2
 80090e2:	0019      	movs	r1, r3
 80090e4:	f7f9 fec0 	bl	8002e68 <__aeabi_d2f>
 80090e8:	1c03      	adds	r3, r0, #0
 80090ea:	9303      	str	r3, [sp, #12]
    float denominator = exp(smoothness) - 1;
 80090ec:	9800      	ldr	r0, [sp, #0]
 80090ee:	f7f9 fe73 	bl	8002dd8 <__aeabi_f2d>
 80090f2:	0002      	movs	r2, r0
 80090f4:	000b      	movs	r3, r1
 80090f6:	0010      	movs	r0, r2
 80090f8:	0019      	movs	r1, r3
 80090fa:	f000 fc9b 	bl	8009a34 <exp>
 80090fe:	2200      	movs	r2, #0
 8009100:	4b09      	ldr	r3, [pc, #36]	; (8009128 <_compressor+0x78>)
 8009102:	f7f9 f867 	bl	80021d4 <__aeabi_dsub>
 8009106:	0002      	movs	r2, r0
 8009108:	000b      	movs	r3, r1
 800910a:	0010      	movs	r0, r2
 800910c:	0019      	movs	r1, r3
 800910e:	f7f9 feab 	bl	8002e68 <__aeabi_d2f>
 8009112:	1c03      	adds	r3, r0, #0
 8009114:	9302      	str	r3, [sp, #8]
    return numerator / denominator;
 8009116:	9902      	ldr	r1, [sp, #8]
 8009118:	9803      	ldr	r0, [sp, #12]
 800911a:	f7f9 fd15 	bl	8002b48 <__aeabi_fdiv>
 800911e:	1c03      	adds	r3, r0, #0
}
 8009120:	1c18      	adds	r0, r3, #0
 8009122:	b005      	add	sp, #20
 8009124:	bd00      	pop	{pc}
 8009126:	46c0      	nop			; (mov r8, r8)
 8009128:	3ff00000 	.word	0x3ff00000
 800912c:	00000000 	.word	0x00000000

08009130 <_sine>:

float _sine(float tick, float frequency, float phase) {
 8009130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009132:	b087      	sub	sp, #28
 8009134:	9003      	str	r0, [sp, #12]
 8009136:	9102      	str	r1, [sp, #8]
 8009138:	9201      	str	r2, [sp, #4]
    float in_sine = phase + 2 * M_PI * frequency * tick / WABER_TICKS_PER_S;
 800913a:	9801      	ldr	r0, [sp, #4]
 800913c:	f7f9 fe4c 	bl	8002dd8 <__aeabi_f2d>
 8009140:	0004      	movs	r4, r0
 8009142:	000d      	movs	r5, r1
 8009144:	9802      	ldr	r0, [sp, #8]
 8009146:	f7f9 fe47 	bl	8002dd8 <__aeabi_f2d>
 800914a:	4a22      	ldr	r2, [pc, #136]	; (80091d4 <_sine+0xa4>)
 800914c:	4b22      	ldr	r3, [pc, #136]	; (80091d8 <_sine+0xa8>)
 800914e:	f7f8 fdd5 	bl	8001cfc <__aeabi_dmul>
 8009152:	0002      	movs	r2, r0
 8009154:	000b      	movs	r3, r1
 8009156:	0016      	movs	r6, r2
 8009158:	001f      	movs	r7, r3
 800915a:	9803      	ldr	r0, [sp, #12]
 800915c:	f7f9 fe3c 	bl	8002dd8 <__aeabi_f2d>
 8009160:	0002      	movs	r2, r0
 8009162:	000b      	movs	r3, r1
 8009164:	0030      	movs	r0, r6
 8009166:	0039      	movs	r1, r7
 8009168:	f7f8 fdc8 	bl	8001cfc <__aeabi_dmul>
 800916c:	0002      	movs	r2, r0
 800916e:	000b      	movs	r3, r1
 8009170:	0010      	movs	r0, r2
 8009172:	0019      	movs	r1, r3
 8009174:	2200      	movs	r2, #0
 8009176:	4b19      	ldr	r3, [pc, #100]	; (80091dc <_sine+0xac>)
 8009178:	f7f8 f9ba 	bl	80014f0 <__aeabi_ddiv>
 800917c:	0002      	movs	r2, r0
 800917e:	000b      	movs	r3, r1
 8009180:	0020      	movs	r0, r4
 8009182:	0029      	movs	r1, r5
 8009184:	f7f7 fe4a 	bl	8000e1c <__aeabi_dadd>
 8009188:	0002      	movs	r2, r0
 800918a:	000b      	movs	r3, r1
 800918c:	0010      	movs	r0, r2
 800918e:	0019      	movs	r1, r3
 8009190:	f7f9 fe6a 	bl	8002e68 <__aeabi_d2f>
 8009194:	1c03      	adds	r3, r0, #0
 8009196:	9305      	str	r3, [sp, #20]
    return 0.5 * sinf(in_sine) + 0.5;
 8009198:	9b05      	ldr	r3, [sp, #20]
 800919a:	1c18      	adds	r0, r3, #0
 800919c:	f000 fc0c 	bl	80099b8 <sinf>
 80091a0:	1c03      	adds	r3, r0, #0
 80091a2:	1c18      	adds	r0, r3, #0
 80091a4:	f7f9 fe18 	bl	8002dd8 <__aeabi_f2d>
 80091a8:	2200      	movs	r2, #0
 80091aa:	4b0d      	ldr	r3, [pc, #52]	; (80091e0 <_sine+0xb0>)
 80091ac:	f7f8 fda6 	bl	8001cfc <__aeabi_dmul>
 80091b0:	0002      	movs	r2, r0
 80091b2:	000b      	movs	r3, r1
 80091b4:	0010      	movs	r0, r2
 80091b6:	0019      	movs	r1, r3
 80091b8:	2200      	movs	r2, #0
 80091ba:	4b09      	ldr	r3, [pc, #36]	; (80091e0 <_sine+0xb0>)
 80091bc:	f7f7 fe2e 	bl	8000e1c <__aeabi_dadd>
 80091c0:	0002      	movs	r2, r0
 80091c2:	000b      	movs	r3, r1
 80091c4:	0010      	movs	r0, r2
 80091c6:	0019      	movs	r1, r3
 80091c8:	f7f9 fe4e 	bl	8002e68 <__aeabi_d2f>
 80091cc:	1c03      	adds	r3, r0, #0
}
 80091ce:	1c18      	adds	r0, r3, #0
 80091d0:	b007      	add	sp, #28
 80091d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091d4:	54442d18 	.word	0x54442d18
 80091d8:	401921fb 	.word	0x401921fb
 80091dc:	40490000 	.word	0x40490000
 80091e0:	3fe00000 	.word	0x3fe00000
	...

080091f0 <_compressed_sine>:

float _compressed_sine(float tick_f, float frequency, float phase, float smoothness) {
 80091f0:	b500      	push	{lr}
 80091f2:	b087      	sub	sp, #28
 80091f4:	9003      	str	r0, [sp, #12]
 80091f6:	9102      	str	r1, [sp, #8]
 80091f8:	9201      	str	r2, [sp, #4]
 80091fa:	9300      	str	r3, [sp, #0]
    float sine = _sine(tick_f, frequency, phase);
 80091fc:	9a01      	ldr	r2, [sp, #4]
 80091fe:	9902      	ldr	r1, [sp, #8]
 8009200:	9b03      	ldr	r3, [sp, #12]
 8009202:	1c18      	adds	r0, r3, #0
 8009204:	f7ff ff94 	bl	8009130 <_sine>
 8009208:	1c03      	adds	r3, r0, #0
 800920a:	9305      	str	r3, [sp, #20]
    return _compressor(sine, smoothness);
 800920c:	9a00      	ldr	r2, [sp, #0]
 800920e:	9b05      	ldr	r3, [sp, #20]
 8009210:	1c11      	adds	r1, r2, #0
 8009212:	1c18      	adds	r0, r3, #0
 8009214:	f7ff ff4c 	bl	80090b0 <_compressor>
 8009218:	1c03      	adds	r3, r0, #0
}
 800921a:	1c18      	adds	r0, r3, #0
 800921c:	b007      	add	sp, #28
 800921e:	bd00      	pop	{pc}

08009220 <waber>:

float waber(uint32_t tick, waber_led_cfg_t* cfg) {
 8009220:	b500      	push	{lr}
 8009222:	b08b      	sub	sp, #44	; 0x2c
 8009224:	9001      	str	r0, [sp, #4]
 8009226:	9100      	str	r1, [sp, #0]
    float phase = cfg->phase;
 8009228:	9b00      	ldr	r3, [sp, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	9309      	str	r3, [sp, #36]	; 0x24
    float depth = cfg->depth;
 800922e:	9b00      	ldr	r3, [sp, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	9308      	str	r3, [sp, #32]
    float frequency = cfg->frequency;
 8009234:	9b00      	ldr	r3, [sp, #0]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	9307      	str	r3, [sp, #28]
    float brightness = cfg->max_brightness;
 800923a:	9b00      	ldr	r3, [sp, #0]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	9306      	str	r3, [sp, #24]
    float smoothness = cfg->smoothness;
 8009240:	9b00      	ldr	r3, [sp, #0]
 8009242:	695b      	ldr	r3, [r3, #20]
 8009244:	9305      	str	r3, [sp, #20]
    float tick_f = (float) tick;
 8009246:	9801      	ldr	r0, [sp, #4]
 8009248:	f7f9 fd8a 	bl	8002d60 <__aeabi_ui2f>
 800924c:	1c03      	adds	r3, r0, #0
 800924e:	9304      	str	r3, [sp, #16]


    float compressed_sine = _compressed_sine(tick_f, frequency, phase, smoothness);
 8009250:	9b05      	ldr	r3, [sp, #20]
 8009252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009254:	9907      	ldr	r1, [sp, #28]
 8009256:	9804      	ldr	r0, [sp, #16]
 8009258:	f7ff ffca 	bl	80091f0 <_compressed_sine>
 800925c:	1c03      	adds	r3, r0, #0
 800925e:	9303      	str	r3, [sp, #12]
    float waber = brightness * (1 + depth * (compressed_sine - 1));
 8009260:	21fe      	movs	r1, #254	; 0xfe
 8009262:	0589      	lsls	r1, r1, #22
 8009264:	9803      	ldr	r0, [sp, #12]
 8009266:	f7f7 fbab 	bl	80009c0 <__aeabi_fsub>
 800926a:	1c03      	adds	r3, r0, #0
 800926c:	9908      	ldr	r1, [sp, #32]
 800926e:	1c18      	adds	r0, r3, #0
 8009270:	f7f7 fa8c 	bl	800078c <__aeabi_fmul>
 8009274:	1c03      	adds	r3, r0, #0
 8009276:	21fe      	movs	r1, #254	; 0xfe
 8009278:	0589      	lsls	r1, r1, #22
 800927a:	1c18      	adds	r0, r3, #0
 800927c:	f7f7 f82c 	bl	80002d8 <__aeabi_fadd>
 8009280:	1c03      	adds	r3, r0, #0
 8009282:	1c19      	adds	r1, r3, #0
 8009284:	9806      	ldr	r0, [sp, #24]
 8009286:	f7f7 fa81 	bl	800078c <__aeabi_fmul>
 800928a:	1c03      	adds	r3, r0, #0
 800928c:	9302      	str	r3, [sp, #8]
    return waber;
 800928e:	9b02      	ldr	r3, [sp, #8]
 8009290:	1c18      	adds	r0, r3, #0
 8009292:	b00b      	add	sp, #44	; 0x2c
 8009294:	bd00      	pop	{pc}
 8009296:	46c0      	nop			; (mov r8, r8)
	...

080092a0 <port_timer_get_time.lto_priv.4>:
static inline systime_t port_timer_get_time(void) {
 80092a0:	b510      	push	{r4, lr}
  return stGetCounter();
 80092a2:	f7f9 ff65 	bl	8003170 <stGetCounter>
 80092a6:	0003      	movs	r3, r0
}
 80092a8:	0018      	movs	r0, r3
 80092aa:	bd10      	pop	{r4, pc}
 80092ac:	0000      	movs	r0, r0
	...

080092b0 <chVTGetSystemTimeX.lto_priv.4>:
static inline systime_t chVTGetSystemTimeX(void) {
 80092b0:	b510      	push	{r4, lr}
  return port_timer_get_time();
 80092b2:	f7ff fff5 	bl	80092a0 <port_timer_get_time.lto_priv.4>
 80092b6:	0003      	movs	r3, r0
}
 80092b8:	0018      	movs	r0, r3
 80092ba:	bd10      	pop	{r4, pc}
 80092bc:	0000      	movs	r0, r0
	...

080092c0 <chRegSetThreadName.lto_priv.2>:
static inline void chRegSetThreadName(const char *name) {
 80092c0:	b082      	sub	sp, #8
 80092c2:	9001      	str	r0, [sp, #4]
  __sch_get_currthread()->name = name;
 80092c4:	4b02      	ldr	r3, [pc, #8]	; (80092d0 <chRegSetThreadName.lto_priv.2+0x10>)
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	9a01      	ldr	r2, [sp, #4]
 80092ca:	61da      	str	r2, [r3, #28]
}
 80092cc:	b002      	add	sp, #8
 80092ce:	4770      	bx	lr
 80092d0:	20000a28 	.word	0x20000a28
	...

080092e0 <_wabercfg_init>:

waber_led_cfg_t waber_led_cfg[6];
static bool manual_mode = false;

int _wabercfg_init(void) {
    waber_led_cfg[0].phase = 0;
 80092e0:	4b46      	ldr	r3, [pc, #280]	; (80093fc <_wabercfg_init+0x11c>)
 80092e2:	2200      	movs	r2, #0
 80092e4:	601a      	str	r2, [r3, #0]
    waber_led_cfg[0].depth = 1;
 80092e6:	4b45      	ldr	r3, [pc, #276]	; (80093fc <_wabercfg_init+0x11c>)
 80092e8:	22fe      	movs	r2, #254	; 0xfe
 80092ea:	0592      	lsls	r2, r2, #22
 80092ec:	605a      	str	r2, [r3, #4]
    waber_led_cfg[0].frequency = 1;
 80092ee:	4b43      	ldr	r3, [pc, #268]	; (80093fc <_wabercfg_init+0x11c>)
 80092f0:	22fe      	movs	r2, #254	; 0xfe
 80092f2:	0592      	lsls	r2, r2, #22
 80092f4:	609a      	str	r2, [r3, #8]
    waber_led_cfg[0].max_brightness = 1;
 80092f6:	4b41      	ldr	r3, [pc, #260]	; (80093fc <_wabercfg_init+0x11c>)
 80092f8:	22fe      	movs	r2, #254	; 0xfe
 80092fa:	0592      	lsls	r2, r2, #22
 80092fc:	60da      	str	r2, [r3, #12]
    waber_led_cfg[0].momentary_brightness = 0.5f;
 80092fe:	4b3f      	ldr	r3, [pc, #252]	; (80093fc <_wabercfg_init+0x11c>)
 8009300:	22fc      	movs	r2, #252	; 0xfc
 8009302:	0592      	lsls	r2, r2, #22
 8009304:	611a      	str	r2, [r3, #16]
    waber_led_cfg[0].smoothness = 4;
 8009306:	4b3d      	ldr	r3, [pc, #244]	; (80093fc <_wabercfg_init+0x11c>)
 8009308:	2281      	movs	r2, #129	; 0x81
 800930a:	05d2      	lsls	r2, r2, #23
 800930c:	615a      	str	r2, [r3, #20]

    waber_led_cfg[1].phase = 0;
 800930e:	4b3b      	ldr	r3, [pc, #236]	; (80093fc <_wabercfg_init+0x11c>)
 8009310:	2200      	movs	r2, #0
 8009312:	61da      	str	r2, [r3, #28]
    waber_led_cfg[1].depth = 1;
 8009314:	4b39      	ldr	r3, [pc, #228]	; (80093fc <_wabercfg_init+0x11c>)
 8009316:	22fe      	movs	r2, #254	; 0xfe
 8009318:	0592      	lsls	r2, r2, #22
 800931a:	621a      	str	r2, [r3, #32]
    waber_led_cfg[1].frequency = 0.2f;
 800931c:	4b37      	ldr	r3, [pc, #220]	; (80093fc <_wabercfg_init+0x11c>)
 800931e:	4a38      	ldr	r2, [pc, #224]	; (8009400 <_wabercfg_init+0x120>)
 8009320:	625a      	str	r2, [r3, #36]	; 0x24
    waber_led_cfg[1].max_brightness = 1;
 8009322:	4b36      	ldr	r3, [pc, #216]	; (80093fc <_wabercfg_init+0x11c>)
 8009324:	22fe      	movs	r2, #254	; 0xfe
 8009326:	0592      	lsls	r2, r2, #22
 8009328:	629a      	str	r2, [r3, #40]	; 0x28
    waber_led_cfg[1].momentary_brightness = 0.6f;
 800932a:	4b34      	ldr	r3, [pc, #208]	; (80093fc <_wabercfg_init+0x11c>)
 800932c:	4a35      	ldr	r2, [pc, #212]	; (8009404 <_wabercfg_init+0x124>)
 800932e:	62da      	str	r2, [r3, #44]	; 0x2c
    waber_led_cfg[1].smoothness = 2;
 8009330:	4b32      	ldr	r3, [pc, #200]	; (80093fc <_wabercfg_init+0x11c>)
 8009332:	2280      	movs	r2, #128	; 0x80
 8009334:	05d2      	lsls	r2, r2, #23
 8009336:	631a      	str	r2, [r3, #48]	; 0x30

    waber_led_cfg[2].phase = 2;
 8009338:	4b30      	ldr	r3, [pc, #192]	; (80093fc <_wabercfg_init+0x11c>)
 800933a:	2280      	movs	r2, #128	; 0x80
 800933c:	05d2      	lsls	r2, r2, #23
 800933e:	639a      	str	r2, [r3, #56]	; 0x38
    waber_led_cfg[2].depth = 1;
 8009340:	4b2e      	ldr	r3, [pc, #184]	; (80093fc <_wabercfg_init+0x11c>)
 8009342:	22fe      	movs	r2, #254	; 0xfe
 8009344:	0592      	lsls	r2, r2, #22
 8009346:	63da      	str	r2, [r3, #60]	; 0x3c
    waber_led_cfg[2].frequency = 0.2f;
 8009348:	4b2c      	ldr	r3, [pc, #176]	; (80093fc <_wabercfg_init+0x11c>)
 800934a:	4a2d      	ldr	r2, [pc, #180]	; (8009400 <_wabercfg_init+0x120>)
 800934c:	641a      	str	r2, [r3, #64]	; 0x40
    waber_led_cfg[2].max_brightness = 1;
 800934e:	4b2b      	ldr	r3, [pc, #172]	; (80093fc <_wabercfg_init+0x11c>)
 8009350:	22fe      	movs	r2, #254	; 0xfe
 8009352:	0592      	lsls	r2, r2, #22
 8009354:	645a      	str	r2, [r3, #68]	; 0x44
    waber_led_cfg[2].momentary_brightness = 0.7f;
 8009356:	4b29      	ldr	r3, [pc, #164]	; (80093fc <_wabercfg_init+0x11c>)
 8009358:	4a2b      	ldr	r2, [pc, #172]	; (8009408 <_wabercfg_init+0x128>)
 800935a:	649a      	str	r2, [r3, #72]	; 0x48
    waber_led_cfg[2].smoothness = 2;
 800935c:	4b27      	ldr	r3, [pc, #156]	; (80093fc <_wabercfg_init+0x11c>)
 800935e:	2280      	movs	r2, #128	; 0x80
 8009360:	05d2      	lsls	r2, r2, #23
 8009362:	64da      	str	r2, [r3, #76]	; 0x4c

    waber_led_cfg[3].phase = 0;
 8009364:	4b25      	ldr	r3, [pc, #148]	; (80093fc <_wabercfg_init+0x11c>)
 8009366:	2200      	movs	r2, #0
 8009368:	655a      	str	r2, [r3, #84]	; 0x54
    waber_led_cfg[3].depth = 0.1f;
 800936a:	4b24      	ldr	r3, [pc, #144]	; (80093fc <_wabercfg_init+0x11c>)
 800936c:	4a27      	ldr	r2, [pc, #156]	; (800940c <_wabercfg_init+0x12c>)
 800936e:	659a      	str	r2, [r3, #88]	; 0x58
    waber_led_cfg[3].frequency = 0.2f;
 8009370:	4b22      	ldr	r3, [pc, #136]	; (80093fc <_wabercfg_init+0x11c>)
 8009372:	4a23      	ldr	r2, [pc, #140]	; (8009400 <_wabercfg_init+0x120>)
 8009374:	65da      	str	r2, [r3, #92]	; 0x5c
    waber_led_cfg[3].max_brightness = 1;
 8009376:	4b21      	ldr	r3, [pc, #132]	; (80093fc <_wabercfg_init+0x11c>)
 8009378:	22fe      	movs	r2, #254	; 0xfe
 800937a:	0592      	lsls	r2, r2, #22
 800937c:	661a      	str	r2, [r3, #96]	; 0x60
    waber_led_cfg[3].momentary_brightness = 0.8f;
 800937e:	4b1f      	ldr	r3, [pc, #124]	; (80093fc <_wabercfg_init+0x11c>)
 8009380:	4a23      	ldr	r2, [pc, #140]	; (8009410 <_wabercfg_init+0x130>)
 8009382:	665a      	str	r2, [r3, #100]	; 0x64
    waber_led_cfg[3].smoothness = 2;
 8009384:	4b1d      	ldr	r3, [pc, #116]	; (80093fc <_wabercfg_init+0x11c>)
 8009386:	2280      	movs	r2, #128	; 0x80
 8009388:	05d2      	lsls	r2, r2, #23
 800938a:	669a      	str	r2, [r3, #104]	; 0x68

    waber_led_cfg[4].phase = 0;
 800938c:	4b1b      	ldr	r3, [pc, #108]	; (80093fc <_wabercfg_init+0x11c>)
 800938e:	2200      	movs	r2, #0
 8009390:	671a      	str	r2, [r3, #112]	; 0x70
    waber_led_cfg[4].depth = 1;
 8009392:	4b1a      	ldr	r3, [pc, #104]	; (80093fc <_wabercfg_init+0x11c>)
 8009394:	22fe      	movs	r2, #254	; 0xfe
 8009396:	0592      	lsls	r2, r2, #22
 8009398:	675a      	str	r2, [r3, #116]	; 0x74
    waber_led_cfg[4].frequency = 1;
 800939a:	4b18      	ldr	r3, [pc, #96]	; (80093fc <_wabercfg_init+0x11c>)
 800939c:	22fe      	movs	r2, #254	; 0xfe
 800939e:	0592      	lsls	r2, r2, #22
 80093a0:	679a      	str	r2, [r3, #120]	; 0x78
    waber_led_cfg[4].max_brightness = 1;
 80093a2:	4b16      	ldr	r3, [pc, #88]	; (80093fc <_wabercfg_init+0x11c>)
 80093a4:	22fe      	movs	r2, #254	; 0xfe
 80093a6:	0592      	lsls	r2, r2, #22
 80093a8:	67da      	str	r2, [r3, #124]	; 0x7c
    waber_led_cfg[4].momentary_brightness = 0.9f;
 80093aa:	4b14      	ldr	r3, [pc, #80]	; (80093fc <_wabercfg_init+0x11c>)
 80093ac:	2280      	movs	r2, #128	; 0x80
 80093ae:	4919      	ldr	r1, [pc, #100]	; (8009414 <_wabercfg_init+0x134>)
 80093b0:	5099      	str	r1, [r3, r2]
    waber_led_cfg[4].smoothness = 2;
 80093b2:	4b12      	ldr	r3, [pc, #72]	; (80093fc <_wabercfg_init+0x11c>)
 80093b4:	2284      	movs	r2, #132	; 0x84
 80093b6:	2180      	movs	r1, #128	; 0x80
 80093b8:	05c9      	lsls	r1, r1, #23
 80093ba:	5099      	str	r1, [r3, r2]

    waber_led_cfg[5].phase = 0;
 80093bc:	4b0f      	ldr	r3, [pc, #60]	; (80093fc <_wabercfg_init+0x11c>)
 80093be:	228c      	movs	r2, #140	; 0x8c
 80093c0:	2100      	movs	r1, #0
 80093c2:	5099      	str	r1, [r3, r2]
    waber_led_cfg[5].depth = 1;
 80093c4:	4b0d      	ldr	r3, [pc, #52]	; (80093fc <_wabercfg_init+0x11c>)
 80093c6:	2290      	movs	r2, #144	; 0x90
 80093c8:	21fe      	movs	r1, #254	; 0xfe
 80093ca:	0589      	lsls	r1, r1, #22
 80093cc:	5099      	str	r1, [r3, r2]
    waber_led_cfg[5].frequency = 0.5f;
 80093ce:	4b0b      	ldr	r3, [pc, #44]	; (80093fc <_wabercfg_init+0x11c>)
 80093d0:	2294      	movs	r2, #148	; 0x94
 80093d2:	21fc      	movs	r1, #252	; 0xfc
 80093d4:	0589      	lsls	r1, r1, #22
 80093d6:	5099      	str	r1, [r3, r2]
    waber_led_cfg[5].max_brightness = 0.5f;
 80093d8:	4b08      	ldr	r3, [pc, #32]	; (80093fc <_wabercfg_init+0x11c>)
 80093da:	2298      	movs	r2, #152	; 0x98
 80093dc:	21fc      	movs	r1, #252	; 0xfc
 80093de:	0589      	lsls	r1, r1, #22
 80093e0:	5099      	str	r1, [r3, r2]
    waber_led_cfg[5].momentary_brightness = 1;
 80093e2:	4b06      	ldr	r3, [pc, #24]	; (80093fc <_wabercfg_init+0x11c>)
 80093e4:	229c      	movs	r2, #156	; 0x9c
 80093e6:	21fe      	movs	r1, #254	; 0xfe
 80093e8:	0589      	lsls	r1, r1, #22
 80093ea:	5099      	str	r1, [r3, r2]
    waber_led_cfg[5].smoothness = 2;
 80093ec:	4b03      	ldr	r3, [pc, #12]	; (80093fc <_wabercfg_init+0x11c>)
 80093ee:	22a0      	movs	r2, #160	; 0xa0
 80093f0:	2180      	movs	r1, #128	; 0x80
 80093f2:	05c9      	lsls	r1, r1, #23
 80093f4:	5099      	str	r1, [r3, r2]
    return 0;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	0018      	movs	r0, r3
 80093fa:	4770      	bx	lr
 80093fc:	20000c14 	.word	0x20000c14
 8009400:	3e4ccccd 	.word	0x3e4ccccd
 8009404:	3f19999a 	.word	0x3f19999a
 8009408:	3f333333 	.word	0x3f333333
 800940c:	3dcccccd 	.word	0x3dcccccd
 8009410:	3f4ccccd 	.word	0x3f4ccccd
 8009414:	3f666666 	.word	0x3f666666
	...

08009420 <waberThread1>:

static THD_WORKING_AREA(waberThread, 1024);
static THD_FUNCTION(waberThread1, arg) {
 8009420:	b510      	push	{r4, lr}
 8009422:	b094      	sub	sp, #80	; 0x50
 8009424:	9001      	str	r0, [sp, #4]
    (void)arg;
    chRegSetThreadName("waberthread1");
 8009426:	4ba1      	ldr	r3, [pc, #644]	; (80096ac <waberThread1+0x28c>)
 8009428:	0018      	movs	r0, r3
 800942a:	f7ff ff49 	bl	80092c0 <chRegSetThreadName.lto_priv.2>
    systime_t time = chVTGetSystemTimeX();
 800942e:	244e      	movs	r4, #78	; 0x4e
 8009430:	446c      	add	r4, sp
 8009432:	f7ff ff3d 	bl	80092b0 <chVTGetSystemTimeX.lto_priv.4>
 8009436:	0003      	movs	r3, r0
 8009438:	8023      	strh	r3, [r4, #0]
    float brightness[6] = {0};
 800943a:	ab09      	add	r3, sp, #36	; 0x24
 800943c:	0018      	movs	r0, r3
 800943e:	2318      	movs	r3, #24
 8009440:	001a      	movs	r2, r3
 8009442:	2100      	movs	r1, #0
 8009444:	f001 fc3e 	bl	800acc4 <memset>
    uint32_t tick = 0;
 8009448:	2300      	movs	r3, #0
 800944a:	9312      	str	r3, [sp, #72]	; 0x48

    _wabercfg_init();
 800944c:	f7ff ff48 	bl	80092e0 <_wabercfg_init>

    systime_t time_start = 0;
 8009450:	2342      	movs	r3, #66	; 0x42
 8009452:	446b      	add	r3, sp
 8009454:	2200      	movs	r2, #0
 8009456:	801a      	strh	r2, [r3, #0]
    systime_t time_needed = 0;
 8009458:	ab10      	add	r3, sp, #64	; 0x40
 800945a:	2200      	movs	r2, #0
 800945c:	801a      	strh	r2, [r3, #0]
    systime_t time_available = TIME_MS2I(WABER_TICK_MS);
 800945e:	233e      	movs	r3, #62	; 0x3e
 8009460:	446b      	add	r3, sp
 8009462:	22c8      	movs	r2, #200	; 0xc8
 8009464:	801a      	strh	r2, [r3, #0]
    systime_t time_max = 0;
 8009466:	2346      	movs	r3, #70	; 0x46
 8009468:	446b      	add	r3, sp
 800946a:	2200      	movs	r2, #0
 800946c:	801a      	strh	r2, [r3, #0]
    float brightness_max[6] = {0};  // just to use the dc
 800946e:	ab03      	add	r3, sp, #12
 8009470:	0018      	movs	r0, r3
 8009472:	2318      	movs	r3, #24
 8009474:	001a      	movs	r2, r3
 8009476:	2100      	movs	r1, #0
 8009478:	f001 fc24 	bl	800acc4 <memset>
    bool read_manual_mode = false;
 800947c:	233d      	movs	r3, #61	; 0x3d
 800947e:	446b      	add	r3, sp
 8009480:	2200      	movs	r2, #0
 8009482:	701a      	strb	r2, [r3, #0]

    while (true) {
        chMtxLock(&manual_mode_cfg);
 8009484:	4b8a      	ldr	r3, [pc, #552]	; (80096b0 <waberThread1+0x290>)
 8009486:	0018      	movs	r0, r3
 8009488:	f7fd fbda 	bl	8006c40 <chMtxLock>
        read_manual_mode = manual_mode;
 800948c:	233d      	movs	r3, #61	; 0x3d
 800948e:	446b      	add	r3, sp
 8009490:	4a88      	ldr	r2, [pc, #544]	; (80096b4 <waberThread1+0x294>)
 8009492:	7812      	ldrb	r2, [r2, #0]
 8009494:	701a      	strb	r2, [r3, #0]
        chMtxUnlock(&manual_mode_cfg);
 8009496:	4b86      	ldr	r3, [pc, #536]	; (80096b0 <waberThread1+0x290>)
 8009498:	0018      	movs	r0, r3
 800949a:	f7fd fc79 	bl	8006d90 <chMtxUnlock>
        if (!read_manual_mode) {
 800949e:	233d      	movs	r3, #61	; 0x3d
 80094a0:	446b      	add	r3, sp
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	2201      	movs	r2, #1
 80094a6:	4053      	eors	r3, r2
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d100      	bne.n	80094b0 <waberThread1+0x90>
 80094ae:	e0c9      	b.n	8009644 <waberThread1+0x224>
            chMtxLock(&led_cfg);
 80094b0:	4b81      	ldr	r3, [pc, #516]	; (80096b8 <waberThread1+0x298>)
 80094b2:	0018      	movs	r0, r3
 80094b4:	f7fd fbc4 	bl	8006c40 <chMtxLock>
            led_string_setBrightness(1, brightness[0]);
 80094b8:	ab09      	add	r3, sp, #36	; 0x24
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	1c19      	adds	r1, r3, #0
 80094be:	2001      	movs	r0, #1
 80094c0:	f7ff fa8e 	bl	80089e0 <led_string_setBrightness>
            led_string_setBrightness(2, brightness[1]);
 80094c4:	ab09      	add	r3, sp, #36	; 0x24
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	1c19      	adds	r1, r3, #0
 80094ca:	2002      	movs	r0, #2
 80094cc:	f7ff fa88 	bl	80089e0 <led_string_setBrightness>
            led_string_setBrightness(3, brightness[2]);
 80094d0:	ab09      	add	r3, sp, #36	; 0x24
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	1c19      	adds	r1, r3, #0
 80094d6:	2003      	movs	r0, #3
 80094d8:	f7ff fa82 	bl	80089e0 <led_string_setBrightness>
            led_string_setBrightness(4, brightness[3]);
 80094dc:	ab09      	add	r3, sp, #36	; 0x24
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	1c19      	adds	r1, r3, #0
 80094e2:	2004      	movs	r0, #4
 80094e4:	f7ff fa7c 	bl	80089e0 <led_string_setBrightness>
            led_string_setBrightness(5, brightness[4]);
 80094e8:	ab09      	add	r3, sp, #36	; 0x24
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	1c19      	adds	r1, r3, #0
 80094ee:	2005      	movs	r0, #5
 80094f0:	f7ff fa76 	bl	80089e0 <led_string_setBrightness>
            led_string_setBrightness(6, brightness[5]);
 80094f4:	ab09      	add	r3, sp, #36	; 0x24
 80094f6:	695b      	ldr	r3, [r3, #20]
 80094f8:	1c19      	adds	r1, r3, #0
 80094fa:	2006      	movs	r0, #6
 80094fc:	f7ff fa70 	bl	80089e0 <led_string_setBrightness>
            chMtxUnlock(&led_cfg);
 8009500:	4b6d      	ldr	r3, [pc, #436]	; (80096b8 <waberThread1+0x298>)
 8009502:	0018      	movs	r0, r3
 8009504:	f7fd fc44 	bl	8006d90 <chMtxUnlock>

            time_start = chVTGetSystemTimeX();
 8009508:	2442      	movs	r4, #66	; 0x42
 800950a:	446c      	add	r4, sp
 800950c:	f7ff fed0 	bl	80092b0 <chVTGetSystemTimeX.lto_priv.4>
 8009510:	0003      	movs	r3, r0
 8009512:	8023      	strh	r3, [r4, #0]
            time += TIME_MS2I(WABER_TICK_MS);
 8009514:	234e      	movs	r3, #78	; 0x4e
 8009516:	446b      	add	r3, sp
 8009518:	224e      	movs	r2, #78	; 0x4e
 800951a:	446a      	add	r2, sp
 800951c:	8812      	ldrh	r2, [r2, #0]
 800951e:	32c8      	adds	r2, #200	; 0xc8
 8009520:	801a      	strh	r2, [r3, #0]
            chMtxLock(&led_cfg);
 8009522:	4b65      	ldr	r3, [pc, #404]	; (80096b8 <waberThread1+0x298>)
 8009524:	0018      	movs	r0, r3
 8009526:	f7fd fb8b 	bl	8006c40 <chMtxLock>
            brightness[0] = waber(tick, &waber_led_cfg[0]);
 800952a:	4a64      	ldr	r2, [pc, #400]	; (80096bc <waberThread1+0x29c>)
 800952c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800952e:	0011      	movs	r1, r2
 8009530:	0018      	movs	r0, r3
 8009532:	f7ff fe75 	bl	8009220 <waber>
 8009536:	1c02      	adds	r2, r0, #0
 8009538:	ab09      	add	r3, sp, #36	; 0x24
 800953a:	601a      	str	r2, [r3, #0]
            brightness[1] = waber(tick, &waber_led_cfg[1]);
 800953c:	4a60      	ldr	r2, [pc, #384]	; (80096c0 <waberThread1+0x2a0>)
 800953e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009540:	0011      	movs	r1, r2
 8009542:	0018      	movs	r0, r3
 8009544:	f7ff fe6c 	bl	8009220 <waber>
 8009548:	1c02      	adds	r2, r0, #0
 800954a:	ab09      	add	r3, sp, #36	; 0x24
 800954c:	605a      	str	r2, [r3, #4]
            brightness[2] = waber(tick, &waber_led_cfg[2]);
 800954e:	4a5d      	ldr	r2, [pc, #372]	; (80096c4 <waberThread1+0x2a4>)
 8009550:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009552:	0011      	movs	r1, r2
 8009554:	0018      	movs	r0, r3
 8009556:	f7ff fe63 	bl	8009220 <waber>
 800955a:	1c02      	adds	r2, r0, #0
 800955c:	ab09      	add	r3, sp, #36	; 0x24
 800955e:	609a      	str	r2, [r3, #8]
            brightness[3] = waber(tick, &waber_led_cfg[3]);
 8009560:	4a59      	ldr	r2, [pc, #356]	; (80096c8 <waberThread1+0x2a8>)
 8009562:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009564:	0011      	movs	r1, r2
 8009566:	0018      	movs	r0, r3
 8009568:	f7ff fe5a 	bl	8009220 <waber>
 800956c:	1c02      	adds	r2, r0, #0
 800956e:	ab09      	add	r3, sp, #36	; 0x24
 8009570:	60da      	str	r2, [r3, #12]
            brightness[4] = waber(tick, &waber_led_cfg[4]);
 8009572:	4a56      	ldr	r2, [pc, #344]	; (80096cc <waberThread1+0x2ac>)
 8009574:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009576:	0011      	movs	r1, r2
 8009578:	0018      	movs	r0, r3
 800957a:	f7ff fe51 	bl	8009220 <waber>
 800957e:	1c02      	adds	r2, r0, #0
 8009580:	ab09      	add	r3, sp, #36	; 0x24
 8009582:	611a      	str	r2, [r3, #16]
            brightness[5] = waber(tick, &waber_led_cfg[5]);
 8009584:	4a52      	ldr	r2, [pc, #328]	; (80096d0 <waberThread1+0x2b0>)
 8009586:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009588:	0011      	movs	r1, r2
 800958a:	0018      	movs	r0, r3
 800958c:	f7ff fe48 	bl	8009220 <waber>
 8009590:	1c02      	adds	r2, r0, #0
 8009592:	ab09      	add	r3, sp, #36	; 0x24
 8009594:	615a      	str	r2, [r3, #20]
            chMtxUnlock(&led_cfg);
 8009596:	4b48      	ldr	r3, [pc, #288]	; (80096b8 <waberThread1+0x298>)
 8009598:	0018      	movs	r0, r3
 800959a:	f7fd fbf9 	bl	8006d90 <chMtxUnlock>
            tick++;
 800959e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095a0:	3301      	adds	r3, #1
 80095a2:	9312      	str	r3, [sp, #72]	; 0x48
            time_needed = chVTGetSystemTimeX() - time_start;
 80095a4:	f7ff fe84 	bl	80092b0 <chVTGetSystemTimeX.lto_priv.4>
 80095a8:	0003      	movs	r3, r0
 80095aa:	0019      	movs	r1, r3
 80095ac:	ab10      	add	r3, sp, #64	; 0x40
 80095ae:	2242      	movs	r2, #66	; 0x42
 80095b0:	446a      	add	r2, sp
 80095b2:	8812      	ldrh	r2, [r2, #0]
 80095b4:	1a8a      	subs	r2, r1, r2
 80095b6:	801a      	strh	r2, [r3, #0]
            if (time_needed > time_max) {
 80095b8:	aa10      	add	r2, sp, #64	; 0x40
 80095ba:	2346      	movs	r3, #70	; 0x46
 80095bc:	446b      	add	r3, sp
 80095be:	8812      	ldrh	r2, [r2, #0]
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d904      	bls.n	80095d0 <waberThread1+0x1b0>
                time_max = time_needed;
 80095c6:	2346      	movs	r3, #70	; 0x46
 80095c8:	446b      	add	r3, sp
 80095ca:	aa10      	add	r2, sp, #64	; 0x40
 80095cc:	8812      	ldrh	r2, [r2, #0]
 80095ce:	801a      	strh	r2, [r3, #0]
            }
            for (uint8_t c = 0; c < 6; c++) {
 80095d0:	2345      	movs	r3, #69	; 0x45
 80095d2:	446b      	add	r3, sp
 80095d4:	2200      	movs	r2, #0
 80095d6:	701a      	strb	r2, [r3, #0]
 80095d8:	e023      	b.n	8009622 <waberThread1+0x202>
                if (brightness[c] > brightness_max[c]) {
 80095da:	2345      	movs	r3, #69	; 0x45
 80095dc:	446b      	add	r3, sp
 80095de:	781a      	ldrb	r2, [r3, #0]
 80095e0:	ab09      	add	r3, sp, #36	; 0x24
 80095e2:	0092      	lsls	r2, r2, #2
 80095e4:	58d0      	ldr	r0, [r2, r3]
 80095e6:	2345      	movs	r3, #69	; 0x45
 80095e8:	446b      	add	r3, sp
 80095ea:	781a      	ldrb	r2, [r3, #0]
 80095ec:	ab03      	add	r3, sp, #12
 80095ee:	0092      	lsls	r2, r2, #2
 80095f0:	58d3      	ldr	r3, [r2, r3]
 80095f2:	1c19      	adds	r1, r3, #0
 80095f4:	f7f6 fe5c 	bl	80002b0 <__aeabi_fcmpgt>
 80095f8:	1e03      	subs	r3, r0, #0
 80095fa:	d00b      	beq.n	8009614 <waberThread1+0x1f4>
                    brightness_max[c] = brightness[c];
 80095fc:	2345      	movs	r3, #69	; 0x45
 80095fe:	446b      	add	r3, sp
 8009600:	7819      	ldrb	r1, [r3, #0]
 8009602:	2345      	movs	r3, #69	; 0x45
 8009604:	446b      	add	r3, sp
 8009606:	781a      	ldrb	r2, [r3, #0]
 8009608:	ab09      	add	r3, sp, #36	; 0x24
 800960a:	0089      	lsls	r1, r1, #2
 800960c:	58c9      	ldr	r1, [r1, r3]
 800960e:	ab03      	add	r3, sp, #12
 8009610:	0092      	lsls	r2, r2, #2
 8009612:	50d1      	str	r1, [r2, r3]
            for (uint8_t c = 0; c < 6; c++) {
 8009614:	2345      	movs	r3, #69	; 0x45
 8009616:	446b      	add	r3, sp
 8009618:	781a      	ldrb	r2, [r3, #0]
 800961a:	2345      	movs	r3, #69	; 0x45
 800961c:	446b      	add	r3, sp
 800961e:	3201      	adds	r2, #1
 8009620:	701a      	strb	r2, [r3, #0]
 8009622:	2345      	movs	r3, #69	; 0x45
 8009624:	446b      	add	r3, sp
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	2b05      	cmp	r3, #5
 800962a:	d9d6      	bls.n	80095da <waberThread1+0x1ba>
                }
            }
            if (tick % 50 == 0) {
 800962c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800962e:	2132      	movs	r1, #50	; 0x32
 8009630:	0018      	movs	r0, r3
 8009632:	f7f9 fa4d 	bl	8002ad0 <__aeabi_uidivmod>
                //chprintf((BaseSequentialStream*) &SD2, "Maximum Time needed: %d of %d: [%f, %f, %f, %f, %f, %f]\n\r", time_max, time_available, brightness[0], brightness[1], brightness[2], brightness[3], brightness[4], brightness[5]);
            }
            chThdSleepUntil(time);
 8009636:	234e      	movs	r3, #78	; 0x4e
 8009638:	446b      	add	r3, sp
 800963a:	881b      	ldrh	r3, [r3, #0]
 800963c:	0018      	movs	r0, r3
 800963e:	f7fd f8e7 	bl	8006810 <chThdSleepUntil>
 8009642:	e71f      	b.n	8009484 <waberThread1+0x64>
        }
        else {
            // manual mode
            chMtxLock(&led_cfg);
 8009644:	4b1c      	ldr	r3, [pc, #112]	; (80096b8 <waberThread1+0x298>)
 8009646:	0018      	movs	r0, r3
 8009648:	f7fd fafa 	bl	8006c40 <chMtxLock>
            led_string_setBrightness(1, waber_led_cfg[0].momentary_brightness);
 800964c:	4b1b      	ldr	r3, [pc, #108]	; (80096bc <waberThread1+0x29c>)
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	1c19      	adds	r1, r3, #0
 8009652:	2001      	movs	r0, #1
 8009654:	f7ff f9c4 	bl	80089e0 <led_string_setBrightness>
            led_string_setBrightness(2, waber_led_cfg[1].momentary_brightness);
 8009658:	4b18      	ldr	r3, [pc, #96]	; (80096bc <waberThread1+0x29c>)
 800965a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965c:	1c19      	adds	r1, r3, #0
 800965e:	2002      	movs	r0, #2
 8009660:	f7ff f9be 	bl	80089e0 <led_string_setBrightness>
            led_string_setBrightness(3, waber_led_cfg[2].momentary_brightness);
 8009664:	4b15      	ldr	r3, [pc, #84]	; (80096bc <waberThread1+0x29c>)
 8009666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009668:	1c19      	adds	r1, r3, #0
 800966a:	2003      	movs	r0, #3
 800966c:	f7ff f9b8 	bl	80089e0 <led_string_setBrightness>
            led_string_setBrightness(4, waber_led_cfg[3].momentary_brightness);
 8009670:	4b12      	ldr	r3, [pc, #72]	; (80096bc <waberThread1+0x29c>)
 8009672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009674:	1c19      	adds	r1, r3, #0
 8009676:	2004      	movs	r0, #4
 8009678:	f7ff f9b2 	bl	80089e0 <led_string_setBrightness>
            led_string_setBrightness(5, waber_led_cfg[4].momentary_brightness);
 800967c:	4b0f      	ldr	r3, [pc, #60]	; (80096bc <waberThread1+0x29c>)
 800967e:	2280      	movs	r2, #128	; 0x80
 8009680:	589b      	ldr	r3, [r3, r2]
 8009682:	1c19      	adds	r1, r3, #0
 8009684:	2005      	movs	r0, #5
 8009686:	f7ff f9ab 	bl	80089e0 <led_string_setBrightness>
            led_string_setBrightness(6, waber_led_cfg[5].momentary_brightness);
 800968a:	4b0c      	ldr	r3, [pc, #48]	; (80096bc <waberThread1+0x29c>)
 800968c:	229c      	movs	r2, #156	; 0x9c
 800968e:	589b      	ldr	r3, [r3, r2]
 8009690:	1c19      	adds	r1, r3, #0
 8009692:	2006      	movs	r0, #6
 8009694:	f7ff f9a4 	bl	80089e0 <led_string_setBrightness>
            chMtxUnlock(&led_cfg);
 8009698:	4b07      	ldr	r3, [pc, #28]	; (80096b8 <waberThread1+0x298>)
 800969a:	0018      	movs	r0, r3
 800969c:	f7fd fb78 	bl	8006d90 <chMtxUnlock>
            chThdSleepMilliseconds(100);
 80096a0:	23fa      	movs	r3, #250	; 0xfa
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	0018      	movs	r0, r3
 80096a6:	f7fd f8a3 	bl	80067f0 <chThdSleep>
 80096aa:	e6eb      	b.n	8009484 <waberThread1+0x64>
 80096ac:	0800bbf0 	.word	0x0800bbf0
 80096b0:	20000450 	.word	0x20000450
 80096b4:	20000cbc 	.word	0x20000cbc
 80096b8:	20000440 	.word	0x20000440
 80096bc:	20000c14 	.word	0x20000c14
 80096c0:	20000c30 	.word	0x20000c30
 80096c4:	20000c4c 	.word	0x20000c4c
 80096c8:	20000c68 	.word	0x20000c68
 80096cc:	20000c84 	.word	0x20000c84
 80096d0:	20000ca0 	.word	0x20000ca0
	...

080096e0 <waberthread_init>:
        }
    }
}

void waberthread_init(void) {
 80096e0:	b500      	push	{lr}
 80096e2:	b083      	sub	sp, #12
    chThdCreateStatic(waberThread, sizeof(waberThread), HIGHPRIO, waberThread1, NULL);
 80096e4:	4b05      	ldr	r3, [pc, #20]	; (80096fc <waberthread_init+0x1c>)
 80096e6:	229a      	movs	r2, #154	; 0x9a
 80096e8:	00d1      	lsls	r1, r2, #3
 80096ea:	4805      	ldr	r0, [pc, #20]	; (8009700 <waberthread_init+0x20>)
 80096ec:	2200      	movs	r2, #0
 80096ee:	9200      	str	r2, [sp, #0]
 80096f0:	22ff      	movs	r2, #255	; 0xff
 80096f2:	f7fc ff45 	bl	8006580 <chThdCreateStatic>
}
 80096f6:	b003      	add	sp, #12
 80096f8:	bd00      	pop	{pc}
 80096fa:	46c0      	nop			; (mov r8, r8)
 80096fc:	08009421 	.word	0x08009421
 8009700:	20000cc0 	.word	0x20000cc0
	...

08009710 <waberthread_set_manual_mode>:

int waberthread_set_manual_mode(const bool set_manual_mode) {
 8009710:	b500      	push	{lr}
 8009712:	b083      	sub	sp, #12
 8009714:	0002      	movs	r2, r0
 8009716:	466b      	mov	r3, sp
 8009718:	3307      	adds	r3, #7
 800971a:	701a      	strb	r2, [r3, #0]
    chMtxLock(&manual_mode_cfg);
 800971c:	4b08      	ldr	r3, [pc, #32]	; (8009740 <waberthread_set_manual_mode+0x30>)
 800971e:	0018      	movs	r0, r3
 8009720:	f7fd fa8e 	bl	8006c40 <chMtxLock>
    manual_mode = set_manual_mode;
 8009724:	4b07      	ldr	r3, [pc, #28]	; (8009744 <waberthread_set_manual_mode+0x34>)
 8009726:	466a      	mov	r2, sp
 8009728:	3207      	adds	r2, #7
 800972a:	7812      	ldrb	r2, [r2, #0]
 800972c:	701a      	strb	r2, [r3, #0]
    chMtxUnlock(&manual_mode_cfg);
 800972e:	4b04      	ldr	r3, [pc, #16]	; (8009740 <waberthread_set_manual_mode+0x30>)
 8009730:	0018      	movs	r0, r3
 8009732:	f7fd fb2d 	bl	8006d90 <chMtxUnlock>
    return 0;
 8009736:	2300      	movs	r3, #0
}
 8009738:	0018      	movs	r0, r3
 800973a:	b003      	add	sp, #12
 800973c:	bd00      	pop	{pc}
 800973e:	46c0      	nop			; (mov r8, r8)
 8009740:	20000450 	.word	0x20000450
 8009744:	20000cbc 	.word	0x20000cbc
	...

08009750 <waberthread_set_cfg>:

int waberthread_set_cfg(uint8_t led_channel, wabercfg_parameter_e parameter, float value) {
 8009750:	b530      	push	{r4, r5, lr}
 8009752:	b083      	sub	sp, #12
 8009754:	9200      	str	r2, [sp, #0]
 8009756:	466b      	mov	r3, sp
 8009758:	3307      	adds	r3, #7
 800975a:	1c02      	adds	r2, r0, #0
 800975c:	701a      	strb	r2, [r3, #0]
 800975e:	466b      	mov	r3, sp
 8009760:	3306      	adds	r3, #6
 8009762:	1c0a      	adds	r2, r1, #0
 8009764:	701a      	strb	r2, [r3, #0]
    chMtxLock(&led_cfg);
 8009766:	4b64      	ldr	r3, [pc, #400]	; (80098f8 <waberthread_set_cfg+0x1a8>)
 8009768:	0018      	movs	r0, r3
 800976a:	f7fd fa69 	bl	8006c40 <chMtxLock>
    switch (parameter) {
 800976e:	466b      	mov	r3, sp
 8009770:	3306      	adds	r3, #6
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	2b06      	cmp	r3, #6
 8009776:	d900      	bls.n	800977a <waberthread_set_cfg+0x2a>
 8009778:	e0b3      	b.n	80098e2 <waberthread_set_cfg+0x192>
 800977a:	009a      	lsls	r2, r3, #2
 800977c:	4b5f      	ldr	r3, [pc, #380]	; (80098fc <waberthread_set_cfg+0x1ac>)
 800977e:	18d3      	adds	r3, r2, r3
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	469f      	mov	pc, r3
        case WABER_CFG_PHASE:
            waber_led_cfg[led_channel].phase = value;
 8009784:	466b      	mov	r3, sp
 8009786:	3307      	adds	r3, #7
 8009788:	781a      	ldrb	r2, [r3, #0]
 800978a:	495d      	ldr	r1, [pc, #372]	; (8009900 <waberthread_set_cfg+0x1b0>)
 800978c:	0013      	movs	r3, r2
 800978e:	00db      	lsls	r3, r3, #3
 8009790:	1a9b      	subs	r3, r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	9a00      	ldr	r2, [sp, #0]
 8009796:	505a      	str	r2, [r3, r1]
 8009798:	e0a6      	b.n	80098e8 <waberthread_set_cfg+0x198>
            break;
        case WABER_CFG_DEPTH:
            if ((value > 1.0f) || (value < 0.0f)) {
 800979a:	21fe      	movs	r1, #254	; 0xfe
 800979c:	0589      	lsls	r1, r1, #22
 800979e:	9800      	ldr	r0, [sp, #0]
 80097a0:	f7f6 fd86 	bl	80002b0 <__aeabi_fcmpgt>
 80097a4:	1e03      	subs	r3, r0, #0
 80097a6:	d105      	bne.n	80097b4 <waberthread_set_cfg+0x64>
 80097a8:	2100      	movs	r1, #0
 80097aa:	9800      	ldr	r0, [sp, #0]
 80097ac:	f7f6 fd6c 	bl	8000288 <__aeabi_fcmplt>
 80097b0:	1e03      	subs	r3, r0, #0
 80097b2:	d002      	beq.n	80097ba <waberthread_set_cfg+0x6a>
                return -1;
 80097b4:	2301      	movs	r3, #1
 80097b6:	425b      	negs	r3, r3
 80097b8:	e09b      	b.n	80098f2 <waberthread_set_cfg+0x1a2>
            }
            waber_led_cfg[led_channel].depth = value;
 80097ba:	466b      	mov	r3, sp
 80097bc:	3307      	adds	r3, #7
 80097be:	781a      	ldrb	r2, [r3, #0]
 80097c0:	494f      	ldr	r1, [pc, #316]	; (8009900 <waberthread_set_cfg+0x1b0>)
 80097c2:	0013      	movs	r3, r2
 80097c4:	00db      	lsls	r3, r3, #3
 80097c6:	1a9b      	subs	r3, r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	18cb      	adds	r3, r1, r3
 80097cc:	3304      	adds	r3, #4
 80097ce:	9a00      	ldr	r2, [sp, #0]
 80097d0:	601a      	str	r2, [r3, #0]
 80097d2:	e089      	b.n	80098e8 <waberthread_set_cfg+0x198>
            break;
        case WABER_CFG_FREQUENCY:
            waber_led_cfg[led_channel].frequency = value;
 80097d4:	466b      	mov	r3, sp
 80097d6:	3307      	adds	r3, #7
 80097d8:	781a      	ldrb	r2, [r3, #0]
 80097da:	4949      	ldr	r1, [pc, #292]	; (8009900 <waberthread_set_cfg+0x1b0>)
 80097dc:	0013      	movs	r3, r2
 80097de:	00db      	lsls	r3, r3, #3
 80097e0:	1a9b      	subs	r3, r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	18cb      	adds	r3, r1, r3
 80097e6:	3308      	adds	r3, #8
 80097e8:	9a00      	ldr	r2, [sp, #0]
 80097ea:	601a      	str	r2, [r3, #0]
 80097ec:	e07c      	b.n	80098e8 <waberthread_set_cfg+0x198>
            break;
        case WABER_CFG_MAX_BRIGHTNESS:
            if ((value > 1.0f) || (value < 0.0f)) {
 80097ee:	21fe      	movs	r1, #254	; 0xfe
 80097f0:	0589      	lsls	r1, r1, #22
 80097f2:	9800      	ldr	r0, [sp, #0]
 80097f4:	f7f6 fd5c 	bl	80002b0 <__aeabi_fcmpgt>
 80097f8:	1e03      	subs	r3, r0, #0
 80097fa:	d105      	bne.n	8009808 <waberthread_set_cfg+0xb8>
 80097fc:	2100      	movs	r1, #0
 80097fe:	9800      	ldr	r0, [sp, #0]
 8009800:	f7f6 fd42 	bl	8000288 <__aeabi_fcmplt>
 8009804:	1e03      	subs	r3, r0, #0
 8009806:	d002      	beq.n	800980e <waberthread_set_cfg+0xbe>
                return -1;
 8009808:	2301      	movs	r3, #1
 800980a:	425b      	negs	r3, r3
 800980c:	e071      	b.n	80098f2 <waberthread_set_cfg+0x1a2>
            }
            waber_led_cfg[led_channel].max_brightness = value;
 800980e:	466b      	mov	r3, sp
 8009810:	3307      	adds	r3, #7
 8009812:	781a      	ldrb	r2, [r3, #0]
 8009814:	493a      	ldr	r1, [pc, #232]	; (8009900 <waberthread_set_cfg+0x1b0>)
 8009816:	0013      	movs	r3, r2
 8009818:	00db      	lsls	r3, r3, #3
 800981a:	1a9b      	subs	r3, r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	18cb      	adds	r3, r1, r3
 8009820:	330c      	adds	r3, #12
 8009822:	9a00      	ldr	r2, [sp, #0]
 8009824:	601a      	str	r2, [r3, #0]
 8009826:	e05f      	b.n	80098e8 <waberthread_set_cfg+0x198>
            break;
        case WABER_CFG_MOMENTARY_BRIGHTNESS:
            if ((value > 1.0f) || (value < 0.0f)) {
 8009828:	21fe      	movs	r1, #254	; 0xfe
 800982a:	0589      	lsls	r1, r1, #22
 800982c:	9800      	ldr	r0, [sp, #0]
 800982e:	f7f6 fd3f 	bl	80002b0 <__aeabi_fcmpgt>
 8009832:	1e03      	subs	r3, r0, #0
 8009834:	d105      	bne.n	8009842 <waberthread_set_cfg+0xf2>
 8009836:	2100      	movs	r1, #0
 8009838:	9800      	ldr	r0, [sp, #0]
 800983a:	f7f6 fd25 	bl	8000288 <__aeabi_fcmplt>
 800983e:	1e03      	subs	r3, r0, #0
 8009840:	d002      	beq.n	8009848 <waberthread_set_cfg+0xf8>
                return -1;
 8009842:	2301      	movs	r3, #1
 8009844:	425b      	negs	r3, r3
 8009846:	e054      	b.n	80098f2 <waberthread_set_cfg+0x1a2>
            }
            waber_led_cfg[led_channel].momentary_brightness = value;
 8009848:	466b      	mov	r3, sp
 800984a:	3307      	adds	r3, #7
 800984c:	781a      	ldrb	r2, [r3, #0]
 800984e:	492c      	ldr	r1, [pc, #176]	; (8009900 <waberthread_set_cfg+0x1b0>)
 8009850:	0013      	movs	r3, r2
 8009852:	00db      	lsls	r3, r3, #3
 8009854:	1a9b      	subs	r3, r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	18cb      	adds	r3, r1, r3
 800985a:	3310      	adds	r3, #16
 800985c:	9a00      	ldr	r2, [sp, #0]
 800985e:	601a      	str	r2, [r3, #0]
 8009860:	e042      	b.n	80098e8 <waberthread_set_cfg+0x198>
            break;
        case WABER_CFG_SMOOTHNESS:
            waber_led_cfg[led_channel].smoothness = value;
 8009862:	466b      	mov	r3, sp
 8009864:	3307      	adds	r3, #7
 8009866:	781a      	ldrb	r2, [r3, #0]
 8009868:	4925      	ldr	r1, [pc, #148]	; (8009900 <waberthread_set_cfg+0x1b0>)
 800986a:	0013      	movs	r3, r2
 800986c:	00db      	lsls	r3, r3, #3
 800986e:	1a9b      	subs	r3, r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	18cb      	adds	r3, r1, r3
 8009874:	3314      	adds	r3, #20
 8009876:	9a00      	ldr	r2, [sp, #0]
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	e035      	b.n	80098e8 <waberthread_set_cfg+0x198>
            break;
        case WABER_CFG_ACTIVE:
            waber_led_cfg[led_channel].active = value > 0.5;
 800987c:	466b      	mov	r3, sp
 800987e:	3307      	adds	r3, #7
 8009880:	781c      	ldrb	r4, [r3, #0]
 8009882:	2301      	movs	r3, #1
 8009884:	1c1d      	adds	r5, r3, #0
 8009886:	21fc      	movs	r1, #252	; 0xfc
 8009888:	0589      	lsls	r1, r1, #22
 800988a:	9800      	ldr	r0, [sp, #0]
 800988c:	f7f6 fd10 	bl	80002b0 <__aeabi_fcmpgt>
 8009890:	1e03      	subs	r3, r0, #0
 8009892:	d101      	bne.n	8009898 <waberthread_set_cfg+0x148>
 8009894:	2300      	movs	r3, #0
 8009896:	1c1d      	adds	r5, r3, #0
 8009898:	b2e9      	uxtb	r1, r5
 800989a:	4a19      	ldr	r2, [pc, #100]	; (8009900 <waberthread_set_cfg+0x1b0>)
 800989c:	0023      	movs	r3, r4
 800989e:	00db      	lsls	r3, r3, #3
 80098a0:	1b1b      	subs	r3, r3, r4
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	18d3      	adds	r3, r2, r3
 80098a6:	3318      	adds	r3, #24
 80098a8:	1c0a      	adds	r2, r1, #0
 80098aa:	701a      	strb	r2, [r3, #0]
            if (waber_led_cfg[led_channel].active) {
 80098ac:	466b      	mov	r3, sp
 80098ae:	3307      	adds	r3, #7
 80098b0:	781a      	ldrb	r2, [r3, #0]
 80098b2:	4913      	ldr	r1, [pc, #76]	; (8009900 <waberthread_set_cfg+0x1b0>)
 80098b4:	0013      	movs	r3, r2
 80098b6:	00db      	lsls	r3, r3, #3
 80098b8:	1a9b      	subs	r3, r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	18cb      	adds	r3, r1, r3
 80098be:	3318      	adds	r3, #24
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d006      	beq.n	80098d4 <waberthread_set_cfg+0x184>
                led_string_on(led_channel);
 80098c6:	466b      	mov	r3, sp
 80098c8:	3307      	adds	r3, #7
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	0018      	movs	r0, r3
 80098ce:	f7ff f937 	bl	8008b40 <led_string_on>
            }
            else {
                led_string_off(led_channel);
 80098d2:	e009      	b.n	80098e8 <waberthread_set_cfg+0x198>
 80098d4:	466b      	mov	r3, sp
 80098d6:	3307      	adds	r3, #7
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	0018      	movs	r0, r3
 80098dc:	f7ff f968 	bl	8008bb0 <led_string_off>
 80098e0:	e002      	b.n	80098e8 <waberthread_set_cfg+0x198>
            }
            break;
        default:
            return -1;
 80098e2:	2301      	movs	r3, #1
 80098e4:	425b      	negs	r3, r3
 80098e6:	e004      	b.n	80098f2 <waberthread_set_cfg+0x1a2>
    }
    chMtxUnlock(&led_cfg);
 80098e8:	4b03      	ldr	r3, [pc, #12]	; (80098f8 <waberthread_set_cfg+0x1a8>)
 80098ea:	0018      	movs	r0, r3
 80098ec:	f7fd fa50 	bl	8006d90 <chMtxUnlock>
    return 0;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	0018      	movs	r0, r3
 80098f4:	b003      	add	sp, #12
 80098f6:	bd30      	pop	{r4, r5, pc}
 80098f8:	20000440 	.word	0x20000440
 80098fc:	0800bc00 	.word	0x0800bc00
 8009900:	20000c14 	.word	0x20000c14
	...

08009910 <chRegSetThreadName.lto_priv.3>:
static inline void chRegSetThreadName(const char *name) {
 8009910:	b082      	sub	sp, #8
 8009912:	9001      	str	r0, [sp, #4]
  __sch_get_currthread()->name = name;
 8009914:	4b02      	ldr	r3, [pc, #8]	; (8009920 <chRegSetThreadName.lto_priv.3+0x10>)
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	9a01      	ldr	r2, [sp, #4]
 800991a:	61da      	str	r2, [r3, #28]
}
 800991c:	b002      	add	sp, #8
 800991e:	4770      	bx	lr
 8009920:	20000a28 	.word	0x20000a28
	...

08009930 <Thread1>:

/*
 * Green LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8009930:	b500      	push	{lr}
 8009932:	b083      	sub	sp, #12
 8009934:	9001      	str	r0, [sp, #4]

  (void)arg;
  chRegSetThreadName("blinker");
 8009936:	4b0b      	ldr	r3, [pc, #44]	; (8009964 <Thread1+0x34>)
 8009938:	0018      	movs	r0, r3
 800993a:	f7ff ffe9 	bl	8009910 <chRegSetThreadName.lto_priv.3>
  while (true) {
    palClearPad(GPIOA, GPIOA_LED_GREEN);
 800993e:	2390      	movs	r3, #144	; 0x90
 8009940:	05db      	lsls	r3, r3, #23
 8009942:	2220      	movs	r2, #32
 8009944:	835a      	strh	r2, [r3, #26]
    chThdSleepMilliseconds(200);
 8009946:	23fa      	movs	r3, #250	; 0xfa
 8009948:	00db      	lsls	r3, r3, #3
 800994a:	0018      	movs	r0, r3
 800994c:	f7fc ff50 	bl	80067f0 <chThdSleep>
    palSetPad(GPIOA, GPIOA_LED_GREEN);
 8009950:	2390      	movs	r3, #144	; 0x90
 8009952:	05db      	lsls	r3, r3, #23
 8009954:	2220      	movs	r2, #32
 8009956:	831a      	strh	r2, [r3, #24]
    chThdSleepMilliseconds(200);
 8009958:	23fa      	movs	r3, #250	; 0xfa
 800995a:	00db      	lsls	r3, r3, #3
 800995c:	0018      	movs	r0, r3
 800995e:	f7fc ff47 	bl	80067f0 <chThdSleep>
 8009962:	e7ec      	b.n	800993e <Thread1+0xe>
 8009964:	0800bc1c 	.word	0x0800bc1c
	...

08009970 <main>:


/*
 * Application entry point.
 */
int main(void) {
 8009970:	b500      	push	{lr}
 8009972:	b085      	sub	sp, #20
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
 8009974:	f7f9 fb9c 	bl	80030b0 <halInit>
  chSysInit();
 8009978:	f7fb fa1a 	bl	8004db0 <chSysInit>
   */

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800997c:	4b0c      	ldr	r3, [pc, #48]	; (80099b0 <main+0x40>)
 800997e:	22a8      	movs	r2, #168	; 0xa8
 8009980:	0051      	lsls	r1, r2, #1
 8009982:	480c      	ldr	r0, [pc, #48]	; (80099b4 <main+0x44>)
 8009984:	2200      	movs	r2, #0
 8009986:	9200      	str	r2, [sp, #0]
 8009988:	2280      	movs	r2, #128	; 0x80
 800998a:	f7fc fdf9 	bl	8006580 <chThdCreateStatic>

    /*
     * Normal main() thread activity, in this demo it does nothing except
     * sleeping in a loop and check the button state.
     */
    led_string_init();
 800998e:	f7ff f807 	bl	80089a0 <led_string_init>
    waberthread_init();
 8009992:	f7ff fea5 	bl	80096e0 <waberthread_init>
    communicationThreads_init();
 8009996:	f7ff fb6b 	bl	8009070 <communicationThreads_init>
    uint16_t brightness = 0;
 800999a:	230e      	movs	r3, #14
 800999c:	446b      	add	r3, sp
 800999e:	2200      	movs	r2, #0
 80099a0:	801a      	strh	r2, [r3, #0]
        }
        else {
            brightness++;
        }
#else
        chThdSleepMilliseconds(100);
 80099a2:	23fa      	movs	r3, #250	; 0xfa
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	0018      	movs	r0, r3
 80099a8:	f7fc ff22 	bl	80067f0 <chThdSleep>
 80099ac:	e7f9      	b.n	80099a2 <main+0x32>
 80099ae:	46c0      	nop			; (mov r8, r8)
 80099b0:	08009931 	.word	0x08009931
 80099b4:	20001190 	.word	0x20001190

080099b8 <sinf>:
 80099b8:	b500      	push	{lr}
 80099ba:	4a1d      	ldr	r2, [pc, #116]	; (8009a30 <sinf+0x78>)
 80099bc:	0043      	lsls	r3, r0, #1
 80099be:	b083      	sub	sp, #12
 80099c0:	085b      	lsrs	r3, r3, #1
 80099c2:	4293      	cmp	r3, r2
 80099c4:	dd1c      	ble.n	8009a00 <sinf+0x48>
 80099c6:	22ff      	movs	r2, #255	; 0xff
 80099c8:	05d2      	lsls	r2, r2, #23
 80099ca:	4293      	cmp	r3, r2
 80099cc:	db04      	blt.n	80099d8 <sinf+0x20>
 80099ce:	1c01      	adds	r1, r0, #0
 80099d0:	f7f6 fff6 	bl	80009c0 <__aeabi_fsub>
 80099d4:	b003      	add	sp, #12
 80099d6:	bd00      	pop	{pc}
 80099d8:	4669      	mov	r1, sp
 80099da:	f000 fa19 	bl	8009e10 <__ieee754_rem_pio2f>
 80099de:	2303      	movs	r3, #3
 80099e0:	9901      	ldr	r1, [sp, #4]
 80099e2:	4018      	ands	r0, r3
 80099e4:	2801      	cmp	r0, #1
 80099e6:	d010      	beq.n	8009a0a <sinf+0x52>
 80099e8:	2802      	cmp	r0, #2
 80099ea:	d017      	beq.n	8009a1c <sinf+0x64>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d010      	beq.n	8009a12 <sinf+0x5a>
 80099f0:	9800      	ldr	r0, [sp, #0]
 80099f2:	f000 fb87 	bl	800a104 <__kernel_cosf>
 80099f6:	2380      	movs	r3, #128	; 0x80
 80099f8:	061b      	lsls	r3, r3, #24
 80099fa:	469c      	mov	ip, r3
 80099fc:	4460      	add	r0, ip
 80099fe:	e7e9      	b.n	80099d4 <sinf+0x1c>
 8009a00:	2200      	movs	r2, #0
 8009a02:	2100      	movs	r1, #0
 8009a04:	f000 ffe0 	bl	800a9c8 <__kernel_sinf>
 8009a08:	e7e4      	b.n	80099d4 <sinf+0x1c>
 8009a0a:	9800      	ldr	r0, [sp, #0]
 8009a0c:	f000 fb7a 	bl	800a104 <__kernel_cosf>
 8009a10:	e7e0      	b.n	80099d4 <sinf+0x1c>
 8009a12:	2201      	movs	r2, #1
 8009a14:	9800      	ldr	r0, [sp, #0]
 8009a16:	f000 ffd7 	bl	800a9c8 <__kernel_sinf>
 8009a1a:	e7db      	b.n	80099d4 <sinf+0x1c>
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	9800      	ldr	r0, [sp, #0]
 8009a20:	f000 ffd2 	bl	800a9c8 <__kernel_sinf>
 8009a24:	2380      	movs	r3, #128	; 0x80
 8009a26:	061b      	lsls	r3, r3, #24
 8009a28:	469c      	mov	ip, r3
 8009a2a:	4460      	add	r0, ip
 8009a2c:	e7d2      	b.n	80099d4 <sinf+0x1c>
 8009a2e:	46c0      	nop			; (mov r8, r8)
 8009a30:	3f490fd8 	.word	0x3f490fd8

08009a34 <exp>:
 8009a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a36:	0004      	movs	r4, r0
 8009a38:	000d      	movs	r5, r1
 8009a3a:	f000 f83b 	bl	8009ab4 <__ieee754_exp>
 8009a3e:	4b17      	ldr	r3, [pc, #92]	; (8009a9c <exp+0x68>)
 8009a40:	0006      	movs	r6, r0
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	000f      	movs	r7, r1
 8009a46:	b25b      	sxtb	r3, r3
 8009a48:	3301      	adds	r3, #1
 8009a4a:	d015      	beq.n	8009a78 <exp+0x44>
 8009a4c:	0020      	movs	r0, r4
 8009a4e:	0029      	movs	r1, r5
 8009a50:	f001 f832 	bl	800aab8 <finite>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d00f      	beq.n	8009a78 <exp+0x44>
 8009a58:	0020      	movs	r0, r4
 8009a5a:	0029      	movs	r1, r5
 8009a5c:	4a10      	ldr	r2, [pc, #64]	; (8009aa0 <exp+0x6c>)
 8009a5e:	4b11      	ldr	r3, [pc, #68]	; (8009aa4 <exp+0x70>)
 8009a60:	f7f6 fbec 	bl	800023c <__aeabi_dcmpgt>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d111      	bne.n	8009a8c <exp+0x58>
 8009a68:	0020      	movs	r0, r4
 8009a6a:	0029      	movs	r1, r5
 8009a6c:	4a0e      	ldr	r2, [pc, #56]	; (8009aa8 <exp+0x74>)
 8009a6e:	4b0f      	ldr	r3, [pc, #60]	; (8009aac <exp+0x78>)
 8009a70:	f7f6 fbd0 	bl	8000214 <__aeabi_dcmplt>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	d102      	bne.n	8009a7e <exp+0x4a>
 8009a78:	0030      	movs	r0, r6
 8009a7a:	0039      	movs	r1, r7
 8009a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a7e:	f001 f8c9 	bl	800ac14 <__errno>
 8009a82:	2322      	movs	r3, #34	; 0x22
 8009a84:	2600      	movs	r6, #0
 8009a86:	2700      	movs	r7, #0
 8009a88:	6003      	str	r3, [r0, #0]
 8009a8a:	e7f5      	b.n	8009a78 <exp+0x44>
 8009a8c:	f001 f8c2 	bl	800ac14 <__errno>
 8009a90:	2322      	movs	r3, #34	; 0x22
 8009a92:	2600      	movs	r6, #0
 8009a94:	4f06      	ldr	r7, [pc, #24]	; (8009ab0 <exp+0x7c>)
 8009a96:	6003      	str	r3, [r0, #0]
 8009a98:	e7ee      	b.n	8009a78 <exp+0x44>
 8009a9a:	46c0      	nop			; (mov r8, r8)
 8009a9c:	20000510 	.word	0x20000510
 8009aa0:	fefa39ef 	.word	0xfefa39ef
 8009aa4:	40862e42 	.word	0x40862e42
 8009aa8:	d52d3051 	.word	0xd52d3051
 8009aac:	c0874910 	.word	0xc0874910
 8009ab0:	7ff00000 	.word	0x7ff00000

08009ab4 <__ieee754_exp>:
 8009ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ab6:	46d6      	mov	lr, sl
 8009ab8:	b500      	push	{lr}
 8009aba:	004b      	lsls	r3, r1, #1
 8009abc:	000e      	movs	r6, r1
 8009abe:	0fcc      	lsrs	r4, r1, #31
 8009ac0:	49b3      	ldr	r1, [pc, #716]	; (8009d90 <__ieee754_exp+0x2dc>)
 8009ac2:	0007      	movs	r7, r0
 8009ac4:	b088      	sub	sp, #32
 8009ac6:	085b      	lsrs	r3, r3, #1
 8009ac8:	428b      	cmp	r3, r1
 8009aca:	d90d      	bls.n	8009ae8 <__ieee754_exp+0x34>
 8009acc:	49b1      	ldr	r1, [pc, #708]	; (8009d94 <__ieee754_exp+0x2e0>)
 8009ace:	428b      	cmp	r3, r1
 8009ad0:	d926      	bls.n	8009b20 <__ieee754_exp+0x6c>
 8009ad2:	0332      	lsls	r2, r6, #12
 8009ad4:	0b12      	lsrs	r2, r2, #12
 8009ad6:	4302      	orrs	r2, r0
 8009ad8:	d000      	beq.n	8009adc <__ieee754_exp+0x28>
 8009ada:	e13c      	b.n	8009d56 <__ieee754_exp+0x2a2>
 8009adc:	2c00      	cmp	r4, #0
 8009ade:	d000      	beq.n	8009ae2 <__ieee754_exp+0x2e>
 8009ae0:	e153      	b.n	8009d8a <__ieee754_exp+0x2d6>
 8009ae2:	0004      	movs	r4, r0
 8009ae4:	0033      	movs	r3, r6
 8009ae6:	e0da      	b.n	8009c9e <__ieee754_exp+0x1ea>
 8009ae8:	4aab      	ldr	r2, [pc, #684]	; (8009d98 <__ieee754_exp+0x2e4>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d852      	bhi.n	8009b94 <__ieee754_exp+0xe0>
 8009aee:	4aab      	ldr	r2, [pc, #684]	; (8009d9c <__ieee754_exp+0x2e8>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d900      	bls.n	8009af6 <__ieee754_exp+0x42>
 8009af4:	e0d9      	b.n	8009caa <__ieee754_exp+0x1f6>
 8009af6:	4aaa      	ldr	r2, [pc, #680]	; (8009da0 <__ieee754_exp+0x2ec>)
 8009af8:	4baa      	ldr	r3, [pc, #680]	; (8009da4 <__ieee754_exp+0x2f0>)
 8009afa:	0031      	movs	r1, r6
 8009afc:	f7f7 f98e 	bl	8000e1c <__aeabi_dadd>
 8009b00:	2200      	movs	r2, #0
 8009b02:	4ba9      	ldr	r3, [pc, #676]	; (8009da8 <__ieee754_exp+0x2f4>)
 8009b04:	f7f6 fb9a 	bl	800023c <__aeabi_dcmpgt>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	d100      	bne.n	8009b0e <__ieee754_exp+0x5a>
 8009b0c:	e0cd      	b.n	8009caa <__ieee754_exp+0x1f6>
 8009b0e:	2200      	movs	r2, #0
 8009b10:	4ba5      	ldr	r3, [pc, #660]	; (8009da8 <__ieee754_exp+0x2f4>)
 8009b12:	0038      	movs	r0, r7
 8009b14:	0031      	movs	r1, r6
 8009b16:	f7f7 f981 	bl	8000e1c <__aeabi_dadd>
 8009b1a:	0004      	movs	r4, r0
 8009b1c:	000b      	movs	r3, r1
 8009b1e:	e0be      	b.n	8009c9e <__ieee754_exp+0x1ea>
 8009b20:	0031      	movs	r1, r6
 8009b22:	4aa2      	ldr	r2, [pc, #648]	; (8009dac <__ieee754_exp+0x2f8>)
 8009b24:	4ba2      	ldr	r3, [pc, #648]	; (8009db0 <__ieee754_exp+0x2fc>)
 8009b26:	f7f6 fb89 	bl	800023c <__aeabi_dcmpgt>
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	d000      	beq.n	8009b30 <__ieee754_exp+0x7c>
 8009b2e:	e115      	b.n	8009d5c <__ieee754_exp+0x2a8>
 8009b30:	0038      	movs	r0, r7
 8009b32:	0031      	movs	r1, r6
 8009b34:	4a9f      	ldr	r2, [pc, #636]	; (8009db4 <__ieee754_exp+0x300>)
 8009b36:	4ba0      	ldr	r3, [pc, #640]	; (8009db8 <__ieee754_exp+0x304>)
 8009b38:	f7f6 fb6c 	bl	8000214 <__aeabi_dcmplt>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	d000      	beq.n	8009b42 <__ieee754_exp+0x8e>
 8009b40:	e123      	b.n	8009d8a <__ieee754_exp+0x2d6>
 8009b42:	489e      	ldr	r0, [pc, #632]	; (8009dbc <__ieee754_exp+0x308>)
 8009b44:	00e4      	lsls	r4, r4, #3
 8009b46:	1904      	adds	r4, r0, r4
 8009b48:	4a9d      	ldr	r2, [pc, #628]	; (8009dc0 <__ieee754_exp+0x30c>)
 8009b4a:	4b9e      	ldr	r3, [pc, #632]	; (8009dc4 <__ieee754_exp+0x310>)
 8009b4c:	0038      	movs	r0, r7
 8009b4e:	0031      	movs	r1, r6
 8009b50:	f7f8 f8d4 	bl	8001cfc <__aeabi_dmul>
 8009b54:	6822      	ldr	r2, [r4, #0]
 8009b56:	6863      	ldr	r3, [r4, #4]
 8009b58:	f7f7 f960 	bl	8000e1c <__aeabi_dadd>
 8009b5c:	f7f8 fecc 	bl	80028f8 <__aeabi_d2iz>
 8009b60:	4682      	mov	sl, r0
 8009b62:	f7f8 feff 	bl	8002964 <__aeabi_i2d>
 8009b66:	4a98      	ldr	r2, [pc, #608]	; (8009dc8 <__ieee754_exp+0x314>)
 8009b68:	4b98      	ldr	r3, [pc, #608]	; (8009dcc <__ieee754_exp+0x318>)
 8009b6a:	0004      	movs	r4, r0
 8009b6c:	000d      	movs	r5, r1
 8009b6e:	f7f8 f8c5 	bl	8001cfc <__aeabi_dmul>
 8009b72:	0002      	movs	r2, r0
 8009b74:	000b      	movs	r3, r1
 8009b76:	0038      	movs	r0, r7
 8009b78:	0031      	movs	r1, r6
 8009b7a:	f7f8 fb2b 	bl	80021d4 <__aeabi_dsub>
 8009b7e:	4a94      	ldr	r2, [pc, #592]	; (8009dd0 <__ieee754_exp+0x31c>)
 8009b80:	9002      	str	r0, [sp, #8]
 8009b82:	9103      	str	r1, [sp, #12]
 8009b84:	4b93      	ldr	r3, [pc, #588]	; (8009dd4 <__ieee754_exp+0x320>)
 8009b86:	0020      	movs	r0, r4
 8009b88:	0029      	movs	r1, r5
 8009b8a:	f7f8 f8b7 	bl	8001cfc <__aeabi_dmul>
 8009b8e:	9004      	str	r0, [sp, #16]
 8009b90:	9105      	str	r1, [sp, #20]
 8009b92:	e016      	b.n	8009bc2 <__ieee754_exp+0x10e>
 8009b94:	4a90      	ldr	r2, [pc, #576]	; (8009dd8 <__ieee754_exp+0x324>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d8d3      	bhi.n	8009b42 <__ieee754_exp+0x8e>
 8009b9a:	4b90      	ldr	r3, [pc, #576]	; (8009ddc <__ieee754_exp+0x328>)
 8009b9c:	00e5      	lsls	r5, r4, #3
 8009b9e:	195b      	adds	r3, r3, r5
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	0031      	movs	r1, r6
 8009ba6:	f7f8 fb15 	bl	80021d4 <__aeabi_dsub>
 8009baa:	9002      	str	r0, [sp, #8]
 8009bac:	9103      	str	r1, [sp, #12]
 8009bae:	2001      	movs	r0, #1
 8009bb0:	4b8b      	ldr	r3, [pc, #556]	; (8009de0 <__ieee754_exp+0x32c>)
 8009bb2:	1b00      	subs	r0, r0, r4
 8009bb4:	195b      	adds	r3, r3, r5
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	9204      	str	r2, [sp, #16]
 8009bbc:	9305      	str	r3, [sp, #20]
 8009bbe:	1b03      	subs	r3, r0, r4
 8009bc0:	469a      	mov	sl, r3
 8009bc2:	9a04      	ldr	r2, [sp, #16]
 8009bc4:	9b05      	ldr	r3, [sp, #20]
 8009bc6:	9802      	ldr	r0, [sp, #8]
 8009bc8:	9903      	ldr	r1, [sp, #12]
 8009bca:	f7f8 fb03 	bl	80021d4 <__aeabi_dsub>
 8009bce:	0002      	movs	r2, r0
 8009bd0:	000b      	movs	r3, r1
 8009bd2:	0007      	movs	r7, r0
 8009bd4:	000e      	movs	r6, r1
 8009bd6:	9000      	str	r0, [sp, #0]
 8009bd8:	9101      	str	r1, [sp, #4]
 8009bda:	f7f8 f88f 	bl	8001cfc <__aeabi_dmul>
 8009bde:	0004      	movs	r4, r0
 8009be0:	000d      	movs	r5, r1
 8009be2:	4a80      	ldr	r2, [pc, #512]	; (8009de4 <__ieee754_exp+0x330>)
 8009be4:	4b80      	ldr	r3, [pc, #512]	; (8009de8 <__ieee754_exp+0x334>)
 8009be6:	f7f8 f889 	bl	8001cfc <__aeabi_dmul>
 8009bea:	4a80      	ldr	r2, [pc, #512]	; (8009dec <__ieee754_exp+0x338>)
 8009bec:	4b80      	ldr	r3, [pc, #512]	; (8009df0 <__ieee754_exp+0x33c>)
 8009bee:	f7f8 faf1 	bl	80021d4 <__aeabi_dsub>
 8009bf2:	0022      	movs	r2, r4
 8009bf4:	002b      	movs	r3, r5
 8009bf6:	f7f8 f881 	bl	8001cfc <__aeabi_dmul>
 8009bfa:	4a7e      	ldr	r2, [pc, #504]	; (8009df4 <__ieee754_exp+0x340>)
 8009bfc:	4b7e      	ldr	r3, [pc, #504]	; (8009df8 <__ieee754_exp+0x344>)
 8009bfe:	f7f7 f90d 	bl	8000e1c <__aeabi_dadd>
 8009c02:	0022      	movs	r2, r4
 8009c04:	002b      	movs	r3, r5
 8009c06:	f7f8 f879 	bl	8001cfc <__aeabi_dmul>
 8009c0a:	4a7c      	ldr	r2, [pc, #496]	; (8009dfc <__ieee754_exp+0x348>)
 8009c0c:	4b7c      	ldr	r3, [pc, #496]	; (8009e00 <__ieee754_exp+0x34c>)
 8009c0e:	f7f8 fae1 	bl	80021d4 <__aeabi_dsub>
 8009c12:	0022      	movs	r2, r4
 8009c14:	002b      	movs	r3, r5
 8009c16:	f7f8 f871 	bl	8001cfc <__aeabi_dmul>
 8009c1a:	4a7a      	ldr	r2, [pc, #488]	; (8009e04 <__ieee754_exp+0x350>)
 8009c1c:	4b7a      	ldr	r3, [pc, #488]	; (8009e08 <__ieee754_exp+0x354>)
 8009c1e:	f7f7 f8fd 	bl	8000e1c <__aeabi_dadd>
 8009c22:	0022      	movs	r2, r4
 8009c24:	002b      	movs	r3, r5
 8009c26:	f7f8 f869 	bl	8001cfc <__aeabi_dmul>
 8009c2a:	000b      	movs	r3, r1
 8009c2c:	0002      	movs	r2, r0
 8009c2e:	9800      	ldr	r0, [sp, #0]
 8009c30:	9901      	ldr	r1, [sp, #4]
 8009c32:	f7f8 facf 	bl	80021d4 <__aeabi_dsub>
 8009c36:	4653      	mov	r3, sl
 8009c38:	0004      	movs	r4, r0
 8009c3a:	000d      	movs	r5, r1
 8009c3c:	9406      	str	r4, [sp, #24]
 8009c3e:	9507      	str	r5, [sp, #28]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d066      	beq.n	8009d12 <__ieee754_exp+0x25e>
 8009c44:	0002      	movs	r2, r0
 8009c46:	000b      	movs	r3, r1
 8009c48:	9800      	ldr	r0, [sp, #0]
 8009c4a:	9901      	ldr	r1, [sp, #4]
 8009c4c:	f7f8 f856 	bl	8001cfc <__aeabi_dmul>
 8009c50:	000f      	movs	r7, r1
 8009c52:	2180      	movs	r1, #128	; 0x80
 8009c54:	0006      	movs	r6, r0
 8009c56:	0022      	movs	r2, r4
 8009c58:	002b      	movs	r3, r5
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	05c9      	lsls	r1, r1, #23
 8009c5e:	f7f8 fab9 	bl	80021d4 <__aeabi_dsub>
 8009c62:	0002      	movs	r2, r0
 8009c64:	000b      	movs	r3, r1
 8009c66:	0030      	movs	r0, r6
 8009c68:	0039      	movs	r1, r7
 8009c6a:	f7f7 fc41 	bl	80014f0 <__aeabi_ddiv>
 8009c6e:	0002      	movs	r2, r0
 8009c70:	000b      	movs	r3, r1
 8009c72:	9804      	ldr	r0, [sp, #16]
 8009c74:	9905      	ldr	r1, [sp, #20]
 8009c76:	f7f8 faad 	bl	80021d4 <__aeabi_dsub>
 8009c7a:	9a02      	ldr	r2, [sp, #8]
 8009c7c:	9b03      	ldr	r3, [sp, #12]
 8009c7e:	f7f8 faa9 	bl	80021d4 <__aeabi_dsub>
 8009c82:	000b      	movs	r3, r1
 8009c84:	0002      	movs	r2, r0
 8009c86:	4948      	ldr	r1, [pc, #288]	; (8009da8 <__ieee754_exp+0x2f4>)
 8009c88:	2000      	movs	r0, #0
 8009c8a:	f7f8 faa3 	bl	80021d4 <__aeabi_dsub>
 8009c8e:	4b5f      	ldr	r3, [pc, #380]	; (8009e0c <__ieee754_exp+0x358>)
 8009c90:	459a      	cmp	sl, r3
 8009c92:	da00      	bge.n	8009c96 <__ieee754_exp+0x1e2>
 8009c94:	e06b      	b.n	8009d6e <__ieee754_exp+0x2ba>
 8009c96:	4654      	mov	r4, sl
 8009c98:	0524      	lsls	r4, r4, #20
 8009c9a:	1863      	adds	r3, r4, r1
 8009c9c:	0004      	movs	r4, r0
 8009c9e:	0020      	movs	r0, r4
 8009ca0:	0019      	movs	r1, r3
 8009ca2:	b008      	add	sp, #32
 8009ca4:	bc80      	pop	{r7}
 8009ca6:	46ba      	mov	sl, r7
 8009ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009caa:	003a      	movs	r2, r7
 8009cac:	0033      	movs	r3, r6
 8009cae:	0038      	movs	r0, r7
 8009cb0:	0031      	movs	r1, r6
 8009cb2:	f7f8 f823 	bl	8001cfc <__aeabi_dmul>
 8009cb6:	0004      	movs	r4, r0
 8009cb8:	000d      	movs	r5, r1
 8009cba:	4a4a      	ldr	r2, [pc, #296]	; (8009de4 <__ieee754_exp+0x330>)
 8009cbc:	4b4a      	ldr	r3, [pc, #296]	; (8009de8 <__ieee754_exp+0x334>)
 8009cbe:	f7f8 f81d 	bl	8001cfc <__aeabi_dmul>
 8009cc2:	4a4a      	ldr	r2, [pc, #296]	; (8009dec <__ieee754_exp+0x338>)
 8009cc4:	4b4a      	ldr	r3, [pc, #296]	; (8009df0 <__ieee754_exp+0x33c>)
 8009cc6:	f7f8 fa85 	bl	80021d4 <__aeabi_dsub>
 8009cca:	0022      	movs	r2, r4
 8009ccc:	002b      	movs	r3, r5
 8009cce:	f7f8 f815 	bl	8001cfc <__aeabi_dmul>
 8009cd2:	4a48      	ldr	r2, [pc, #288]	; (8009df4 <__ieee754_exp+0x340>)
 8009cd4:	4b48      	ldr	r3, [pc, #288]	; (8009df8 <__ieee754_exp+0x344>)
 8009cd6:	f7f7 f8a1 	bl	8000e1c <__aeabi_dadd>
 8009cda:	0022      	movs	r2, r4
 8009cdc:	002b      	movs	r3, r5
 8009cde:	f7f8 f80d 	bl	8001cfc <__aeabi_dmul>
 8009ce2:	4a46      	ldr	r2, [pc, #280]	; (8009dfc <__ieee754_exp+0x348>)
 8009ce4:	4b46      	ldr	r3, [pc, #280]	; (8009e00 <__ieee754_exp+0x34c>)
 8009ce6:	f7f8 fa75 	bl	80021d4 <__aeabi_dsub>
 8009cea:	0022      	movs	r2, r4
 8009cec:	002b      	movs	r3, r5
 8009cee:	f7f8 f805 	bl	8001cfc <__aeabi_dmul>
 8009cf2:	4a44      	ldr	r2, [pc, #272]	; (8009e04 <__ieee754_exp+0x350>)
 8009cf4:	4b44      	ldr	r3, [pc, #272]	; (8009e08 <__ieee754_exp+0x354>)
 8009cf6:	f7f7 f891 	bl	8000e1c <__aeabi_dadd>
 8009cfa:	0022      	movs	r2, r4
 8009cfc:	002b      	movs	r3, r5
 8009cfe:	f7f7 fffd 	bl	8001cfc <__aeabi_dmul>
 8009d02:	0002      	movs	r2, r0
 8009d04:	000b      	movs	r3, r1
 8009d06:	0038      	movs	r0, r7
 8009d08:	0031      	movs	r1, r6
 8009d0a:	f7f8 fa63 	bl	80021d4 <__aeabi_dsub>
 8009d0e:	9006      	str	r0, [sp, #24]
 8009d10:	9107      	str	r1, [sp, #28]
 8009d12:	9a06      	ldr	r2, [sp, #24]
 8009d14:	9b07      	ldr	r3, [sp, #28]
 8009d16:	0038      	movs	r0, r7
 8009d18:	0031      	movs	r1, r6
 8009d1a:	f7f7 ffef 	bl	8001cfc <__aeabi_dmul>
 8009d1e:	2380      	movs	r3, #128	; 0x80
 8009d20:	0004      	movs	r4, r0
 8009d22:	000d      	movs	r5, r1
 8009d24:	9806      	ldr	r0, [sp, #24]
 8009d26:	9907      	ldr	r1, [sp, #28]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	05db      	lsls	r3, r3, #23
 8009d2c:	f7f8 fa52 	bl	80021d4 <__aeabi_dsub>
 8009d30:	0002      	movs	r2, r0
 8009d32:	000b      	movs	r3, r1
 8009d34:	0020      	movs	r0, r4
 8009d36:	0029      	movs	r1, r5
 8009d38:	f7f7 fbda 	bl	80014f0 <__aeabi_ddiv>
 8009d3c:	003a      	movs	r2, r7
 8009d3e:	0033      	movs	r3, r6
 8009d40:	f7f8 fa48 	bl	80021d4 <__aeabi_dsub>
 8009d44:	000b      	movs	r3, r1
 8009d46:	0002      	movs	r2, r0
 8009d48:	4917      	ldr	r1, [pc, #92]	; (8009da8 <__ieee754_exp+0x2f4>)
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	f7f8 fa42 	bl	80021d4 <__aeabi_dsub>
 8009d50:	0004      	movs	r4, r0
 8009d52:	000b      	movs	r3, r1
 8009d54:	e7a3      	b.n	8009c9e <__ieee754_exp+0x1ea>
 8009d56:	0002      	movs	r2, r0
 8009d58:	0033      	movs	r3, r6
 8009d5a:	e6da      	b.n	8009b12 <__ieee754_exp+0x5e>
 8009d5c:	4b11      	ldr	r3, [pc, #68]	; (8009da4 <__ieee754_exp+0x2f0>)
 8009d5e:	4a10      	ldr	r2, [pc, #64]	; (8009da0 <__ieee754_exp+0x2ec>)
 8009d60:	0019      	movs	r1, r3
 8009d62:	0010      	movs	r0, r2
 8009d64:	f7f7 ffca 	bl	8001cfc <__aeabi_dmul>
 8009d68:	0004      	movs	r4, r0
 8009d6a:	000b      	movs	r3, r1
 8009d6c:	e797      	b.n	8009c9e <__ieee754_exp+0x1ea>
 8009d6e:	24fa      	movs	r4, #250	; 0xfa
 8009d70:	00a4      	lsls	r4, r4, #2
 8009d72:	4454      	add	r4, sl
 8009d74:	0524      	lsls	r4, r4, #20
 8009d76:	1863      	adds	r3, r4, r1
 8009d78:	0019      	movs	r1, r3
 8009d7a:	23b8      	movs	r3, #184	; 0xb8
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	045b      	lsls	r3, r3, #17
 8009d80:	f7f7 ffbc 	bl	8001cfc <__aeabi_dmul>
 8009d84:	0004      	movs	r4, r0
 8009d86:	000b      	movs	r3, r1
 8009d88:	e789      	b.n	8009c9e <__ieee754_exp+0x1ea>
 8009d8a:	2400      	movs	r4, #0
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	e786      	b.n	8009c9e <__ieee754_exp+0x1ea>
 8009d90:	40862e41 	.word	0x40862e41
 8009d94:	7fefffff 	.word	0x7fefffff
 8009d98:	3fd62e42 	.word	0x3fd62e42
 8009d9c:	3e2fffff 	.word	0x3e2fffff
 8009da0:	8800759c 	.word	0x8800759c
 8009da4:	7e37e43c 	.word	0x7e37e43c
 8009da8:	3ff00000 	.word	0x3ff00000
 8009dac:	fefa39ef 	.word	0xfefa39ef
 8009db0:	40862e42 	.word	0x40862e42
 8009db4:	d52d3051 	.word	0xd52d3051
 8009db8:	c0874910 	.word	0xc0874910
 8009dbc:	0800bc28 	.word	0x0800bc28
 8009dc0:	652b82fe 	.word	0x652b82fe
 8009dc4:	3ff71547 	.word	0x3ff71547
 8009dc8:	fee00000 	.word	0xfee00000
 8009dcc:	3fe62e42 	.word	0x3fe62e42
 8009dd0:	35793c76 	.word	0x35793c76
 8009dd4:	3dea39ef 	.word	0x3dea39ef
 8009dd8:	3ff0a2b1 	.word	0x3ff0a2b1
 8009ddc:	0800bc38 	.word	0x0800bc38
 8009de0:	0800bc48 	.word	0x0800bc48
 8009de4:	72bea4d0 	.word	0x72bea4d0
 8009de8:	3e663769 	.word	0x3e663769
 8009dec:	c5d26bf1 	.word	0xc5d26bf1
 8009df0:	3ebbbd41 	.word	0x3ebbbd41
 8009df4:	af25de2c 	.word	0xaf25de2c
 8009df8:	3f11566a 	.word	0x3f11566a
 8009dfc:	16bebd93 	.word	0x16bebd93
 8009e00:	3f66c16c 	.word	0x3f66c16c
 8009e04:	5555553e 	.word	0x5555553e
 8009e08:	3fc55555 	.word	0x3fc55555
 8009e0c:	fffffc03 	.word	0xfffffc03

08009e10 <__ieee754_rem_pio2f>:
 8009e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e12:	464e      	mov	r6, r9
 8009e14:	46de      	mov	lr, fp
 8009e16:	4657      	mov	r7, sl
 8009e18:	4645      	mov	r5, r8
 8009e1a:	b5e0      	push	{r5, r6, r7, lr}
 8009e1c:	4bac      	ldr	r3, [pc, #688]	; (800a0d0 <__ieee754_rem_pio2f+0x2c0>)
 8009e1e:	b089      	sub	sp, #36	; 0x24
 8009e20:	0046      	lsls	r6, r0, #1
 8009e22:	000c      	movs	r4, r1
 8009e24:	9003      	str	r0, [sp, #12]
 8009e26:	0876      	lsrs	r6, r6, #1
 8009e28:	429e      	cmp	r6, r3
 8009e2a:	dc00      	bgt.n	8009e2e <__ieee754_rem_pio2f+0x1e>
 8009e2c:	e071      	b.n	8009f12 <__ieee754_rem_pio2f+0x102>
 8009e2e:	4ba9      	ldr	r3, [pc, #676]	; (800a0d4 <__ieee754_rem_pio2f+0x2c4>)
 8009e30:	429e      	cmp	r6, r3
 8009e32:	dc20      	bgt.n	8009e76 <__ieee754_rem_pio2f+0x66>
 8009e34:	49a8      	ldr	r1, [pc, #672]	; (800a0d8 <__ieee754_rem_pio2f+0x2c8>)
 8009e36:	2800      	cmp	r0, #0
 8009e38:	dc00      	bgt.n	8009e3c <__ieee754_rem_pio2f+0x2c>
 8009e3a:	e11f      	b.n	800a07c <__ieee754_rem_pio2f+0x26c>
 8009e3c:	f7f6 fdc0 	bl	80009c0 <__aeabi_fsub>
 8009e40:	230f      	movs	r3, #15
 8009e42:	439e      	bics	r6, r3
 8009e44:	4ba5      	ldr	r3, [pc, #660]	; (800a0dc <__ieee754_rem_pio2f+0x2cc>)
 8009e46:	1c05      	adds	r5, r0, #0
 8009e48:	429e      	cmp	r6, r3
 8009e4a:	d06e      	beq.n	8009f2a <__ieee754_rem_pio2f+0x11a>
 8009e4c:	49a4      	ldr	r1, [pc, #656]	; (800a0e0 <__ieee754_rem_pio2f+0x2d0>)
 8009e4e:	f7f6 fdb7 	bl	80009c0 <__aeabi_fsub>
 8009e52:	1c01      	adds	r1, r0, #0
 8009e54:	6020      	str	r0, [r4, #0]
 8009e56:	1c28      	adds	r0, r5, #0
 8009e58:	f7f6 fdb2 	bl	80009c0 <__aeabi_fsub>
 8009e5c:	49a0      	ldr	r1, [pc, #640]	; (800a0e0 <__ieee754_rem_pio2f+0x2d0>)
 8009e5e:	f7f6 fdaf 	bl	80009c0 <__aeabi_fsub>
 8009e62:	2501      	movs	r5, #1
 8009e64:	6060      	str	r0, [r4, #4]
 8009e66:	0028      	movs	r0, r5
 8009e68:	b009      	add	sp, #36	; 0x24
 8009e6a:	bcf0      	pop	{r4, r5, r6, r7}
 8009e6c:	46bb      	mov	fp, r7
 8009e6e:	46b2      	mov	sl, r6
 8009e70:	46a9      	mov	r9, r5
 8009e72:	46a0      	mov	r8, r4
 8009e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e76:	4b9b      	ldr	r3, [pc, #620]	; (800a0e4 <__ieee754_rem_pio2f+0x2d4>)
 8009e78:	429e      	cmp	r6, r3
 8009e7a:	dd68      	ble.n	8009f4e <__ieee754_rem_pio2f+0x13e>
 8009e7c:	23ff      	movs	r3, #255	; 0xff
 8009e7e:	05db      	lsls	r3, r3, #23
 8009e80:	429e      	cmp	r6, r3
 8009e82:	da4b      	bge.n	8009f1c <__ieee754_rem_pio2f+0x10c>
 8009e84:	15f7      	asrs	r7, r6, #23
 8009e86:	3f86      	subs	r7, #134	; 0x86
 8009e88:	05fd      	lsls	r5, r7, #23
 8009e8a:	1b75      	subs	r5, r6, r5
 8009e8c:	1c28      	adds	r0, r5, #0
 8009e8e:	f7f6 ff5f 	bl	8000d50 <__aeabi_f2iz>
 8009e92:	f7f6 ff7d 	bl	8000d90 <__aeabi_i2f>
 8009e96:	1c01      	adds	r1, r0, #0
 8009e98:	9005      	str	r0, [sp, #20]
 8009e9a:	1c28      	adds	r0, r5, #0
 8009e9c:	f7f6 fd90 	bl	80009c0 <__aeabi_fsub>
 8009ea0:	2187      	movs	r1, #135	; 0x87
 8009ea2:	05c9      	lsls	r1, r1, #23
 8009ea4:	f7f6 fc72 	bl	800078c <__aeabi_fmul>
 8009ea8:	4680      	mov	r8, r0
 8009eaa:	f7f6 ff51 	bl	8000d50 <__aeabi_f2iz>
 8009eae:	f7f6 ff6f 	bl	8000d90 <__aeabi_i2f>
 8009eb2:	1c01      	adds	r1, r0, #0
 8009eb4:	9006      	str	r0, [sp, #24]
 8009eb6:	1c05      	adds	r5, r0, #0
 8009eb8:	4640      	mov	r0, r8
 8009eba:	f7f6 fd81 	bl	80009c0 <__aeabi_fsub>
 8009ebe:	2187      	movs	r1, #135	; 0x87
 8009ec0:	05c9      	lsls	r1, r1, #23
 8009ec2:	f7f6 fc63 	bl	800078c <__aeabi_fmul>
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	9007      	str	r0, [sp, #28]
 8009eca:	f7f6 f9d7 	bl	800027c <__aeabi_fcmpeq>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d100      	bne.n	8009ed4 <__ieee754_rem_pio2f+0xc4>
 8009ed2:	e0b6      	b.n	800a042 <__ieee754_rem_pio2f+0x232>
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	1c28      	adds	r0, r5, #0
 8009ed8:	f7f6 f9d0 	bl	800027c <__aeabi_fcmpeq>
 8009edc:	4243      	negs	r3, r0
 8009ede:	4143      	adcs	r3, r0
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	4a81      	ldr	r2, [pc, #516]	; (800a0e8 <__ieee754_rem_pio2f+0x2d8>)
 8009ee4:	0021      	movs	r1, r4
 8009ee6:	9201      	str	r2, [sp, #4]
 8009ee8:	2202      	movs	r2, #2
 8009eea:	a805      	add	r0, sp, #20
 8009eec:	9200      	str	r2, [sp, #0]
 8009eee:	003a      	movs	r2, r7
 8009ef0:	f000 f9d0 	bl	800a294 <__kernel_rem_pio2f>
 8009ef4:	9b03      	ldr	r3, [sp, #12]
 8009ef6:	0005      	movs	r5, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	dab4      	bge.n	8009e66 <__ieee754_rem_pio2f+0x56>
 8009efc:	2280      	movs	r2, #128	; 0x80
 8009efe:	0612      	lsls	r2, r2, #24
 8009f00:	4694      	mov	ip, r2
 8009f02:	6823      	ldr	r3, [r4, #0]
 8009f04:	4245      	negs	r5, r0
 8009f06:	4463      	add	r3, ip
 8009f08:	6023      	str	r3, [r4, #0]
 8009f0a:	6863      	ldr	r3, [r4, #4]
 8009f0c:	4463      	add	r3, ip
 8009f0e:	6063      	str	r3, [r4, #4]
 8009f10:	e7a9      	b.n	8009e66 <__ieee754_rem_pio2f+0x56>
 8009f12:	2300      	movs	r3, #0
 8009f14:	2500      	movs	r5, #0
 8009f16:	6008      	str	r0, [r1, #0]
 8009f18:	604b      	str	r3, [r1, #4]
 8009f1a:	e7a4      	b.n	8009e66 <__ieee754_rem_pio2f+0x56>
 8009f1c:	1c01      	adds	r1, r0, #0
 8009f1e:	f7f6 fd4f 	bl	80009c0 <__aeabi_fsub>
 8009f22:	2500      	movs	r5, #0
 8009f24:	6060      	str	r0, [r4, #4]
 8009f26:	6020      	str	r0, [r4, #0]
 8009f28:	e79d      	b.n	8009e66 <__ieee754_rem_pio2f+0x56>
 8009f2a:	4970      	ldr	r1, [pc, #448]	; (800a0ec <__ieee754_rem_pio2f+0x2dc>)
 8009f2c:	f7f6 fd48 	bl	80009c0 <__aeabi_fsub>
 8009f30:	496f      	ldr	r1, [pc, #444]	; (800a0f0 <__ieee754_rem_pio2f+0x2e0>)
 8009f32:	1c05      	adds	r5, r0, #0
 8009f34:	f7f6 fd44 	bl	80009c0 <__aeabi_fsub>
 8009f38:	1c01      	adds	r1, r0, #0
 8009f3a:	6020      	str	r0, [r4, #0]
 8009f3c:	1c28      	adds	r0, r5, #0
 8009f3e:	f7f6 fd3f 	bl	80009c0 <__aeabi_fsub>
 8009f42:	496b      	ldr	r1, [pc, #428]	; (800a0f0 <__ieee754_rem_pio2f+0x2e0>)
 8009f44:	f7f6 fd3c 	bl	80009c0 <__aeabi_fsub>
 8009f48:	2501      	movs	r5, #1
 8009f4a:	6060      	str	r0, [r4, #4]
 8009f4c:	e78b      	b.n	8009e66 <__ieee754_rem_pio2f+0x56>
 8009f4e:	f000 fdbd 	bl	800aacc <fabsf>
 8009f52:	4968      	ldr	r1, [pc, #416]	; (800a0f4 <__ieee754_rem_pio2f+0x2e4>)
 8009f54:	1c07      	adds	r7, r0, #0
 8009f56:	f7f6 fc19 	bl	800078c <__aeabi_fmul>
 8009f5a:	21fc      	movs	r1, #252	; 0xfc
 8009f5c:	0589      	lsls	r1, r1, #22
 8009f5e:	f7f6 f9bb 	bl	80002d8 <__aeabi_fadd>
 8009f62:	f7f6 fef5 	bl	8000d50 <__aeabi_f2iz>
 8009f66:	0005      	movs	r5, r0
 8009f68:	f7f6 ff12 	bl	8000d90 <__aeabi_i2f>
 8009f6c:	495a      	ldr	r1, [pc, #360]	; (800a0d8 <__ieee754_rem_pio2f+0x2c8>)
 8009f6e:	4682      	mov	sl, r0
 8009f70:	f7f6 fc0c 	bl	800078c <__aeabi_fmul>
 8009f74:	1c01      	adds	r1, r0, #0
 8009f76:	1c38      	adds	r0, r7, #0
 8009f78:	f7f6 fd22 	bl	80009c0 <__aeabi_fsub>
 8009f7c:	4958      	ldr	r1, [pc, #352]	; (800a0e0 <__ieee754_rem_pio2f+0x2d0>)
 8009f7e:	4681      	mov	r9, r0
 8009f80:	4650      	mov	r0, sl
 8009f82:	f7f6 fc03 	bl	800078c <__aeabi_fmul>
 8009f86:	4680      	mov	r8, r0
 8009f88:	2d1f      	cmp	r5, #31
 8009f8a:	dc23      	bgt.n	8009fd4 <__ieee754_rem_pio2f+0x1c4>
 8009f8c:	23ff      	movs	r3, #255	; 0xff
 8009f8e:	0032      	movs	r2, r6
 8009f90:	4959      	ldr	r1, [pc, #356]	; (800a0f8 <__ieee754_rem_pio2f+0x2e8>)
 8009f92:	439a      	bics	r2, r3
 8009f94:	1e6b      	subs	r3, r5, #1
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	585b      	ldr	r3, [r3, r1]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d01a      	beq.n	8009fd4 <__ieee754_rem_pio2f+0x1c4>
 8009f9e:	4641      	mov	r1, r8
 8009fa0:	4648      	mov	r0, r9
 8009fa2:	f7f6 fd0d 	bl	80009c0 <__aeabi_fsub>
 8009fa6:	1c07      	adds	r7, r0, #0
 8009fa8:	6027      	str	r7, [r4, #0]
 8009faa:	1c39      	adds	r1, r7, #0
 8009fac:	4648      	mov	r0, r9
 8009fae:	f7f6 fd07 	bl	80009c0 <__aeabi_fsub>
 8009fb2:	4641      	mov	r1, r8
 8009fb4:	f7f6 fd04 	bl	80009c0 <__aeabi_fsub>
 8009fb8:	9b03      	ldr	r3, [sp, #12]
 8009fba:	6060      	str	r0, [r4, #4]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	db00      	blt.n	8009fc2 <__ieee754_rem_pio2f+0x1b2>
 8009fc0:	e751      	b.n	8009e66 <__ieee754_rem_pio2f+0x56>
 8009fc2:	2380      	movs	r3, #128	; 0x80
 8009fc4:	061b      	lsls	r3, r3, #24
 8009fc6:	469c      	mov	ip, r3
 8009fc8:	4467      	add	r7, ip
 8009fca:	4460      	add	r0, ip
 8009fcc:	6027      	str	r7, [r4, #0]
 8009fce:	6060      	str	r0, [r4, #4]
 8009fd0:	426d      	negs	r5, r5
 8009fd2:	e748      	b.n	8009e66 <__ieee754_rem_pio2f+0x56>
 8009fd4:	4641      	mov	r1, r8
 8009fd6:	4648      	mov	r0, r9
 8009fd8:	f7f6 fcf2 	bl	80009c0 <__aeabi_fsub>
 8009fdc:	15f3      	asrs	r3, r6, #23
 8009fde:	469b      	mov	fp, r3
 8009fe0:	22ff      	movs	r2, #255	; 0xff
 8009fe2:	0dc3      	lsrs	r3, r0, #23
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	465a      	mov	r2, fp
 8009fe8:	1c07      	adds	r7, r0, #0
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	2b08      	cmp	r3, #8
 8009fee:	dddb      	ble.n	8009fa8 <__ieee754_rem_pio2f+0x198>
 8009ff0:	493e      	ldr	r1, [pc, #248]	; (800a0ec <__ieee754_rem_pio2f+0x2dc>)
 8009ff2:	4650      	mov	r0, sl
 8009ff4:	f7f6 fbca 	bl	800078c <__aeabi_fmul>
 8009ff8:	1c07      	adds	r7, r0, #0
 8009ffa:	1c01      	adds	r1, r0, #0
 8009ffc:	4648      	mov	r0, r9
 8009ffe:	f7f6 fcdf 	bl	80009c0 <__aeabi_fsub>
 800a002:	1c01      	adds	r1, r0, #0
 800a004:	1c06      	adds	r6, r0, #0
 800a006:	4648      	mov	r0, r9
 800a008:	f7f6 fcda 	bl	80009c0 <__aeabi_fsub>
 800a00c:	1c39      	adds	r1, r7, #0
 800a00e:	f7f6 fcd7 	bl	80009c0 <__aeabi_fsub>
 800a012:	4937      	ldr	r1, [pc, #220]	; (800a0f0 <__ieee754_rem_pio2f+0x2e0>)
 800a014:	1c07      	adds	r7, r0, #0
 800a016:	4650      	mov	r0, sl
 800a018:	f7f6 fbb8 	bl	800078c <__aeabi_fmul>
 800a01c:	1c39      	adds	r1, r7, #0
 800a01e:	f7f6 fccf 	bl	80009c0 <__aeabi_fsub>
 800a022:	1c01      	adds	r1, r0, #0
 800a024:	4680      	mov	r8, r0
 800a026:	1c30      	adds	r0, r6, #0
 800a028:	f7f6 fcca 	bl	80009c0 <__aeabi_fsub>
 800a02c:	22ff      	movs	r2, #255	; 0xff
 800a02e:	0dc3      	lsrs	r3, r0, #23
 800a030:	4013      	ands	r3, r2
 800a032:	465a      	mov	r2, fp
 800a034:	1c07      	adds	r7, r0, #0
 800a036:	1ad3      	subs	r3, r2, r3
 800a038:	2b19      	cmp	r3, #25
 800a03a:	dc04      	bgt.n	800a046 <__ieee754_rem_pio2f+0x236>
 800a03c:	46b1      	mov	r9, r6
 800a03e:	6020      	str	r0, [r4, #0]
 800a040:	e7b3      	b.n	8009faa <__ieee754_rem_pio2f+0x19a>
 800a042:	2303      	movs	r3, #3
 800a044:	e74d      	b.n	8009ee2 <__ieee754_rem_pio2f+0xd2>
 800a046:	492d      	ldr	r1, [pc, #180]	; (800a0fc <__ieee754_rem_pio2f+0x2ec>)
 800a048:	4650      	mov	r0, sl
 800a04a:	f7f6 fb9f 	bl	800078c <__aeabi_fmul>
 800a04e:	1c07      	adds	r7, r0, #0
 800a050:	1c01      	adds	r1, r0, #0
 800a052:	1c30      	adds	r0, r6, #0
 800a054:	f7f6 fcb4 	bl	80009c0 <__aeabi_fsub>
 800a058:	1c01      	adds	r1, r0, #0
 800a05a:	4681      	mov	r9, r0
 800a05c:	1c30      	adds	r0, r6, #0
 800a05e:	f7f6 fcaf 	bl	80009c0 <__aeabi_fsub>
 800a062:	1c39      	adds	r1, r7, #0
 800a064:	f7f6 fcac 	bl	80009c0 <__aeabi_fsub>
 800a068:	4925      	ldr	r1, [pc, #148]	; (800a100 <__ieee754_rem_pio2f+0x2f0>)
 800a06a:	1c07      	adds	r7, r0, #0
 800a06c:	4650      	mov	r0, sl
 800a06e:	f7f6 fb8d 	bl	800078c <__aeabi_fmul>
 800a072:	1c39      	adds	r1, r7, #0
 800a074:	f7f6 fca4 	bl	80009c0 <__aeabi_fsub>
 800a078:	4680      	mov	r8, r0
 800a07a:	e790      	b.n	8009f9e <__ieee754_rem_pio2f+0x18e>
 800a07c:	f7f6 f92c 	bl	80002d8 <__aeabi_fadd>
 800a080:	230f      	movs	r3, #15
 800a082:	439e      	bics	r6, r3
 800a084:	4b15      	ldr	r3, [pc, #84]	; (800a0dc <__ieee754_rem_pio2f+0x2cc>)
 800a086:	1c05      	adds	r5, r0, #0
 800a088:	429e      	cmp	r6, r3
 800a08a:	d00e      	beq.n	800a0aa <__ieee754_rem_pio2f+0x29a>
 800a08c:	4914      	ldr	r1, [pc, #80]	; (800a0e0 <__ieee754_rem_pio2f+0x2d0>)
 800a08e:	f7f6 f923 	bl	80002d8 <__aeabi_fadd>
 800a092:	1c01      	adds	r1, r0, #0
 800a094:	6020      	str	r0, [r4, #0]
 800a096:	1c28      	adds	r0, r5, #0
 800a098:	f7f6 fc92 	bl	80009c0 <__aeabi_fsub>
 800a09c:	4910      	ldr	r1, [pc, #64]	; (800a0e0 <__ieee754_rem_pio2f+0x2d0>)
 800a09e:	f7f6 f91b 	bl	80002d8 <__aeabi_fadd>
 800a0a2:	2501      	movs	r5, #1
 800a0a4:	6060      	str	r0, [r4, #4]
 800a0a6:	426d      	negs	r5, r5
 800a0a8:	e6dd      	b.n	8009e66 <__ieee754_rem_pio2f+0x56>
 800a0aa:	4910      	ldr	r1, [pc, #64]	; (800a0ec <__ieee754_rem_pio2f+0x2dc>)
 800a0ac:	f7f6 f914 	bl	80002d8 <__aeabi_fadd>
 800a0b0:	490f      	ldr	r1, [pc, #60]	; (800a0f0 <__ieee754_rem_pio2f+0x2e0>)
 800a0b2:	1c05      	adds	r5, r0, #0
 800a0b4:	f7f6 f910 	bl	80002d8 <__aeabi_fadd>
 800a0b8:	1c01      	adds	r1, r0, #0
 800a0ba:	6020      	str	r0, [r4, #0]
 800a0bc:	1c28      	adds	r0, r5, #0
 800a0be:	f7f6 fc7f 	bl	80009c0 <__aeabi_fsub>
 800a0c2:	490b      	ldr	r1, [pc, #44]	; (800a0f0 <__ieee754_rem_pio2f+0x2e0>)
 800a0c4:	f7f6 f908 	bl	80002d8 <__aeabi_fadd>
 800a0c8:	2501      	movs	r5, #1
 800a0ca:	6060      	str	r0, [r4, #4]
 800a0cc:	426d      	negs	r5, r5
 800a0ce:	e6ca      	b.n	8009e66 <__ieee754_rem_pio2f+0x56>
 800a0d0:	3f490fd8 	.word	0x3f490fd8
 800a0d4:	4016cbe3 	.word	0x4016cbe3
 800a0d8:	3fc90f80 	.word	0x3fc90f80
 800a0dc:	3fc90fd0 	.word	0x3fc90fd0
 800a0e0:	37354443 	.word	0x37354443
 800a0e4:	43490f80 	.word	0x43490f80
 800a0e8:	0800bcd8 	.word	0x0800bcd8
 800a0ec:	37354400 	.word	0x37354400
 800a0f0:	2e85a308 	.word	0x2e85a308
 800a0f4:	3f22f984 	.word	0x3f22f984
 800a0f8:	0800bc58 	.word	0x0800bc58
 800a0fc:	2e85a300 	.word	0x2e85a300
 800a100:	248d3132 	.word	0x248d3132

0800a104 <__kernel_cosf>:
 800a104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a106:	4647      	mov	r7, r8
 800a108:	46ce      	mov	lr, r9
 800a10a:	23c8      	movs	r3, #200	; 0xc8
 800a10c:	0046      	lsls	r6, r0, #1
 800a10e:	b580      	push	{r7, lr}
 800a110:	1c05      	adds	r5, r0, #0
 800a112:	1c0f      	adds	r7, r1, #0
 800a114:	0876      	lsrs	r6, r6, #1
 800a116:	059b      	lsls	r3, r3, #22
 800a118:	429e      	cmp	r6, r3
 800a11a:	da48      	bge.n	800a1ae <__kernel_cosf+0xaa>
 800a11c:	f7f6 fe18 	bl	8000d50 <__aeabi_f2iz>
 800a120:	2800      	cmp	r0, #0
 800a122:	d100      	bne.n	800a126 <__kernel_cosf+0x22>
 800a124:	e09f      	b.n	800a266 <__kernel_cosf+0x162>
 800a126:	1c29      	adds	r1, r5, #0
 800a128:	1c28      	adds	r0, r5, #0
 800a12a:	f7f6 fb2f 	bl	800078c <__aeabi_fmul>
 800a12e:	494f      	ldr	r1, [pc, #316]	; (800a26c <__kernel_cosf+0x168>)
 800a130:	1c04      	adds	r4, r0, #0
 800a132:	f7f6 fb2b 	bl	800078c <__aeabi_fmul>
 800a136:	494e      	ldr	r1, [pc, #312]	; (800a270 <__kernel_cosf+0x16c>)
 800a138:	f7f6 f8ce 	bl	80002d8 <__aeabi_fadd>
 800a13c:	1c21      	adds	r1, r4, #0
 800a13e:	f7f6 fb25 	bl	800078c <__aeabi_fmul>
 800a142:	494c      	ldr	r1, [pc, #304]	; (800a274 <__kernel_cosf+0x170>)
 800a144:	f7f6 fc3c 	bl	80009c0 <__aeabi_fsub>
 800a148:	1c21      	adds	r1, r4, #0
 800a14a:	f7f6 fb1f 	bl	800078c <__aeabi_fmul>
 800a14e:	494a      	ldr	r1, [pc, #296]	; (800a278 <__kernel_cosf+0x174>)
 800a150:	f7f6 f8c2 	bl	80002d8 <__aeabi_fadd>
 800a154:	1c21      	adds	r1, r4, #0
 800a156:	f7f6 fb19 	bl	800078c <__aeabi_fmul>
 800a15a:	4948      	ldr	r1, [pc, #288]	; (800a27c <__kernel_cosf+0x178>)
 800a15c:	f7f6 fc30 	bl	80009c0 <__aeabi_fsub>
 800a160:	1c21      	adds	r1, r4, #0
 800a162:	f7f6 fb13 	bl	800078c <__aeabi_fmul>
 800a166:	4946      	ldr	r1, [pc, #280]	; (800a280 <__kernel_cosf+0x17c>)
 800a168:	f7f6 f8b6 	bl	80002d8 <__aeabi_fadd>
 800a16c:	1c21      	adds	r1, r4, #0
 800a16e:	f7f6 fb0d 	bl	800078c <__aeabi_fmul>
 800a172:	4680      	mov	r8, r0
 800a174:	21fc      	movs	r1, #252	; 0xfc
 800a176:	1c20      	adds	r0, r4, #0
 800a178:	0589      	lsls	r1, r1, #22
 800a17a:	f7f6 fb07 	bl	800078c <__aeabi_fmul>
 800a17e:	4641      	mov	r1, r8
 800a180:	1c06      	adds	r6, r0, #0
 800a182:	1c20      	adds	r0, r4, #0
 800a184:	f7f6 fb02 	bl	800078c <__aeabi_fmul>
 800a188:	1c39      	adds	r1, r7, #0
 800a18a:	1c04      	adds	r4, r0, #0
 800a18c:	1c28      	adds	r0, r5, #0
 800a18e:	f7f6 fafd 	bl	800078c <__aeabi_fmul>
 800a192:	1c01      	adds	r1, r0, #0
 800a194:	1c20      	adds	r0, r4, #0
 800a196:	f7f6 fc13 	bl	80009c0 <__aeabi_fsub>
 800a19a:	1c01      	adds	r1, r0, #0
 800a19c:	1c30      	adds	r0, r6, #0
 800a19e:	f7f6 fc0f 	bl	80009c0 <__aeabi_fsub>
 800a1a2:	1c01      	adds	r1, r0, #0
 800a1a4:	20fe      	movs	r0, #254	; 0xfe
 800a1a6:	0580      	lsls	r0, r0, #22
 800a1a8:	f7f6 fc0a 	bl	80009c0 <__aeabi_fsub>
 800a1ac:	e053      	b.n	800a256 <__kernel_cosf+0x152>
 800a1ae:	1c01      	adds	r1, r0, #0
 800a1b0:	f7f6 faec 	bl	800078c <__aeabi_fmul>
 800a1b4:	492d      	ldr	r1, [pc, #180]	; (800a26c <__kernel_cosf+0x168>)
 800a1b6:	1c04      	adds	r4, r0, #0
 800a1b8:	f7f6 fae8 	bl	800078c <__aeabi_fmul>
 800a1bc:	492c      	ldr	r1, [pc, #176]	; (800a270 <__kernel_cosf+0x16c>)
 800a1be:	f7f6 f88b 	bl	80002d8 <__aeabi_fadd>
 800a1c2:	1c21      	adds	r1, r4, #0
 800a1c4:	f7f6 fae2 	bl	800078c <__aeabi_fmul>
 800a1c8:	492a      	ldr	r1, [pc, #168]	; (800a274 <__kernel_cosf+0x170>)
 800a1ca:	f7f6 fbf9 	bl	80009c0 <__aeabi_fsub>
 800a1ce:	1c21      	adds	r1, r4, #0
 800a1d0:	f7f6 fadc 	bl	800078c <__aeabi_fmul>
 800a1d4:	4928      	ldr	r1, [pc, #160]	; (800a278 <__kernel_cosf+0x174>)
 800a1d6:	f7f6 f87f 	bl	80002d8 <__aeabi_fadd>
 800a1da:	1c21      	adds	r1, r4, #0
 800a1dc:	f7f6 fad6 	bl	800078c <__aeabi_fmul>
 800a1e0:	4926      	ldr	r1, [pc, #152]	; (800a27c <__kernel_cosf+0x178>)
 800a1e2:	f7f6 fbed 	bl	80009c0 <__aeabi_fsub>
 800a1e6:	1c21      	adds	r1, r4, #0
 800a1e8:	f7f6 fad0 	bl	800078c <__aeabi_fmul>
 800a1ec:	4924      	ldr	r1, [pc, #144]	; (800a280 <__kernel_cosf+0x17c>)
 800a1ee:	f7f6 f873 	bl	80002d8 <__aeabi_fadd>
 800a1f2:	1c21      	adds	r1, r4, #0
 800a1f4:	f7f6 faca 	bl	800078c <__aeabi_fmul>
 800a1f8:	4b22      	ldr	r3, [pc, #136]	; (800a284 <__kernel_cosf+0x180>)
 800a1fa:	4680      	mov	r8, r0
 800a1fc:	429e      	cmp	r6, r3
 800a1fe:	ddb9      	ble.n	800a174 <__kernel_cosf+0x70>
 800a200:	4b21      	ldr	r3, [pc, #132]	; (800a288 <__kernel_cosf+0x184>)
 800a202:	429e      	cmp	r6, r3
 800a204:	dc2b      	bgt.n	800a25e <__kernel_cosf+0x15a>
 800a206:	23ff      	movs	r3, #255	; 0xff
 800a208:	061b      	lsls	r3, r3, #24
 800a20a:	469c      	mov	ip, r3
 800a20c:	20fe      	movs	r0, #254	; 0xfe
 800a20e:	4466      	add	r6, ip
 800a210:	1c31      	adds	r1, r6, #0
 800a212:	0580      	lsls	r0, r0, #22
 800a214:	f7f6 fbd4 	bl	80009c0 <__aeabi_fsub>
 800a218:	4681      	mov	r9, r0
 800a21a:	21fc      	movs	r1, #252	; 0xfc
 800a21c:	1c20      	adds	r0, r4, #0
 800a21e:	0589      	lsls	r1, r1, #22
 800a220:	f7f6 fab4 	bl	800078c <__aeabi_fmul>
 800a224:	1c31      	adds	r1, r6, #0
 800a226:	f7f6 fbcb 	bl	80009c0 <__aeabi_fsub>
 800a22a:	4641      	mov	r1, r8
 800a22c:	1c06      	adds	r6, r0, #0
 800a22e:	1c20      	adds	r0, r4, #0
 800a230:	f7f6 faac 	bl	800078c <__aeabi_fmul>
 800a234:	1c39      	adds	r1, r7, #0
 800a236:	1c04      	adds	r4, r0, #0
 800a238:	1c28      	adds	r0, r5, #0
 800a23a:	f7f6 faa7 	bl	800078c <__aeabi_fmul>
 800a23e:	1c01      	adds	r1, r0, #0
 800a240:	1c20      	adds	r0, r4, #0
 800a242:	f7f6 fbbd 	bl	80009c0 <__aeabi_fsub>
 800a246:	1c01      	adds	r1, r0, #0
 800a248:	1c30      	adds	r0, r6, #0
 800a24a:	f7f6 fbb9 	bl	80009c0 <__aeabi_fsub>
 800a24e:	1c01      	adds	r1, r0, #0
 800a250:	4648      	mov	r0, r9
 800a252:	f7f6 fbb5 	bl	80009c0 <__aeabi_fsub>
 800a256:	bcc0      	pop	{r6, r7}
 800a258:	46b9      	mov	r9, r7
 800a25a:	46b0      	mov	r8, r6
 800a25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a25e:	4b0b      	ldr	r3, [pc, #44]	; (800a28c <__kernel_cosf+0x188>)
 800a260:	4e0b      	ldr	r6, [pc, #44]	; (800a290 <__kernel_cosf+0x18c>)
 800a262:	4699      	mov	r9, r3
 800a264:	e7d9      	b.n	800a21a <__kernel_cosf+0x116>
 800a266:	20fe      	movs	r0, #254	; 0xfe
 800a268:	0580      	lsls	r0, r0, #22
 800a26a:	e7f4      	b.n	800a256 <__kernel_cosf+0x152>
 800a26c:	ad47d74e 	.word	0xad47d74e
 800a270:	310f74f6 	.word	0x310f74f6
 800a274:	3493f27c 	.word	0x3493f27c
 800a278:	37d00d01 	.word	0x37d00d01
 800a27c:	3ab60b61 	.word	0x3ab60b61
 800a280:	3d2aaaab 	.word	0x3d2aaaab
 800a284:	3e999999 	.word	0x3e999999
 800a288:	3f480000 	.word	0x3f480000
 800a28c:	3f380000 	.word	0x3f380000
 800a290:	3e900000 	.word	0x3e900000

0800a294 <__kernel_rem_pio2f>:
 800a294:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a296:	46de      	mov	lr, fp
 800a298:	4657      	mov	r7, sl
 800a29a:	464e      	mov	r6, r9
 800a29c:	4645      	mov	r5, r8
 800a29e:	b5e0      	push	{r5, r6, r7, lr}
 800a2a0:	b0df      	sub	sp, #380	; 0x17c
 800a2a2:	9003      	str	r0, [sp, #12]
 800a2a4:	0018      	movs	r0, r3
 800a2a6:	910b      	str	r1, [sp, #44]	; 0x2c
 800a2a8:	9968      	ldr	r1, [sp, #416]	; 0x1a0
 800a2aa:	9308      	str	r3, [sp, #32]
 800a2ac:	4bbe      	ldr	r3, [pc, #760]	; (800a5a8 <__kernel_rem_pio2f+0x314>)
 800a2ae:	0014      	movs	r4, r2
 800a2b0:	920d      	str	r2, [sp, #52]	; 0x34
 800a2b2:	008a      	lsls	r2, r1, #2
 800a2b4:	58d1      	ldr	r1, [r2, r3]
 800a2b6:	9106      	str	r1, [sp, #24]
 800a2b8:	0001      	movs	r1, r0
 800a2ba:	3901      	subs	r1, #1
 800a2bc:	9101      	str	r1, [sp, #4]
 800a2be:	1d22      	adds	r2, r4, #4
 800a2c0:	da00      	bge.n	800a2c4 <__kernel_rem_pio2f+0x30>
 800a2c2:	e2fa      	b.n	800a8ba <__kernel_rem_pio2f+0x626>
 800a2c4:	2307      	movs	r3, #7
 800a2c6:	1ee2      	subs	r2, r4, #3
 800a2c8:	17d1      	asrs	r1, r2, #31
 800a2ca:	400b      	ands	r3, r1
 800a2cc:	189b      	adds	r3, r3, r2
 800a2ce:	10db      	asrs	r3, r3, #3
 800a2d0:	1c59      	adds	r1, r3, #1
 800a2d2:	9300      	str	r3, [sp, #0]
 800a2d4:	00cb      	lsls	r3, r1, #3
 800a2d6:	930c      	str	r3, [sp, #48]	; 0x30
 800a2d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2dc:	1a9b      	subs	r3, r3, r2
 800a2de:	9305      	str	r3, [sp, #20]
 800a2e0:	9a00      	ldr	r2, [sp, #0]
 800a2e2:	9b01      	ldr	r3, [sp, #4]
 800a2e4:	1ad4      	subs	r4, r2, r3
 800a2e6:	9a06      	ldr	r2, [sp, #24]
 800a2e8:	18d6      	adds	r6, r2, r3
 800a2ea:	d40e      	bmi.n	800a30a <__kernel_rem_pio2f+0x76>
 800a2ec:	3601      	adds	r6, #1
 800a2ee:	9f69      	ldr	r7, [sp, #420]	; 0x1a4
 800a2f0:	ad22      	add	r5, sp, #136	; 0x88
 800a2f2:	1936      	adds	r6, r6, r4
 800a2f4:	2000      	movs	r0, #0
 800a2f6:	2c00      	cmp	r4, #0
 800a2f8:	db03      	blt.n	800a302 <__kernel_rem_pio2f+0x6e>
 800a2fa:	00a3      	lsls	r3, r4, #2
 800a2fc:	58f8      	ldr	r0, [r7, r3]
 800a2fe:	f7f6 fd47 	bl	8000d90 <__aeabi_i2f>
 800a302:	3401      	adds	r4, #1
 800a304:	c501      	stmia	r5!, {r0}
 800a306:	42b4      	cmp	r4, r6
 800a308:	d1f4      	bne.n	800a2f4 <__kernel_rem_pio2f+0x60>
 800a30a:	9b06      	ldr	r3, [sp, #24]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	da00      	bge.n	800a312 <__kernel_rem_pio2f+0x7e>
 800a310:	e339      	b.n	800a986 <__kernel_rem_pio2f+0x6f2>
 800a312:	9a08      	ldr	r2, [sp, #32]
 800a314:	ab4a      	add	r3, sp, #296	; 0x128
 800a316:	4694      	mov	ip, r2
 800a318:	469a      	mov	sl, r3
 800a31a:	9307      	str	r3, [sp, #28]
 800a31c:	9b01      	ldr	r3, [sp, #4]
 800a31e:	009f      	lsls	r7, r3, #2
 800a320:	4699      	mov	r9, r3
 800a322:	ab22      	add	r3, sp, #136	; 0x88
 800a324:	4698      	mov	r8, r3
 800a326:	9b06      	ldr	r3, [sp, #24]
 800a328:	44b8      	add	r8, r7
 800a32a:	4463      	add	r3, ip
 800a32c:	469b      	mov	fp, r3
 800a32e:	9b03      	ldr	r3, [sp, #12]
 800a330:	3704      	adds	r7, #4
 800a332:	469c      	mov	ip, r3
 800a334:	4467      	add	r7, ip
 800a336:	9b01      	ldr	r3, [sp, #4]
 800a338:	2400      	movs	r4, #0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	db0e      	blt.n	800a35c <__kernel_rem_pio2f+0xc8>
 800a33e:	4646      	mov	r6, r8
 800a340:	2400      	movs	r4, #0
 800a342:	9d03      	ldr	r5, [sp, #12]
 800a344:	6831      	ldr	r1, [r6, #0]
 800a346:	cd01      	ldmia	r5!, {r0}
 800a348:	f7f6 fa20 	bl	800078c <__aeabi_fmul>
 800a34c:	1c01      	adds	r1, r0, #0
 800a34e:	1c20      	adds	r0, r4, #0
 800a350:	f7f5 ffc2 	bl	80002d8 <__aeabi_fadd>
 800a354:	3e04      	subs	r6, #4
 800a356:	1c04      	adds	r4, r0, #0
 800a358:	42bd      	cmp	r5, r7
 800a35a:	d1f3      	bne.n	800a344 <__kernel_rem_pio2f+0xb0>
 800a35c:	4653      	mov	r3, sl
 800a35e:	c310      	stmia	r3!, {r4}
 800a360:	469a      	mov	sl, r3
 800a362:	2304      	movs	r3, #4
 800a364:	469c      	mov	ip, r3
 800a366:	3b03      	subs	r3, #3
 800a368:	44e0      	add	r8, ip
 800a36a:	469c      	mov	ip, r3
 800a36c:	44e1      	add	r9, ip
 800a36e:	45d9      	cmp	r9, fp
 800a370:	d1e1      	bne.n	800a336 <__kernel_rem_pio2f+0xa2>
 800a372:	ab0e      	add	r3, sp, #56	; 0x38
 800a374:	2104      	movs	r1, #4
 800a376:	469a      	mov	sl, r3
 800a378:	4249      	negs	r1, r1
 800a37a:	4451      	add	r1, sl
 800a37c:	468c      	mov	ip, r1
 800a37e:	9a06      	ldr	r2, [sp, #24]
 800a380:	0093      	lsls	r3, r2, #2
 800a382:	449c      	add	ip, r3
 800a384:	4661      	mov	r1, ip
 800a386:	910a      	str	r1, [sp, #40]	; 0x28
 800a388:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 800a38a:	3b08      	subs	r3, #8
 800a38c:	468c      	mov	ip, r1
 800a38e:	4453      	add	r3, sl
 800a390:	9309      	str	r3, [sp, #36]	; 0x24
 800a392:	9b00      	ldr	r3, [sp, #0]
 800a394:	9908      	ldr	r1, [sp, #32]
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	4463      	add	r3, ip
 800a39a:	9302      	str	r3, [sp, #8]
 800a39c:	9b03      	ldr	r3, [sp, #12]
 800a39e:	008f      	lsls	r7, r1, #2
 800a3a0:	3b04      	subs	r3, #4
 800a3a2:	19df      	adds	r7, r3, r7
 800a3a4:	9204      	str	r2, [sp, #16]
 800a3a6:	9b04      	ldr	r3, [sp, #16]
 800a3a8:	009a      	lsls	r2, r3, #2
 800a3aa:	4693      	mov	fp, r2
 800a3ac:	4659      	mov	r1, fp
 800a3ae:	9a07      	ldr	r2, [sp, #28]
 800a3b0:	5854      	ldr	r4, [r2, r1]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	dd26      	ble.n	800a404 <__kernel_rem_pio2f+0x170>
 800a3b6:	497d      	ldr	r1, [pc, #500]	; (800a5ac <__kernel_rem_pio2f+0x318>)
 800a3b8:	46b9      	mov	r9, r7
 800a3ba:	468c      	mov	ip, r1
 800a3bc:	4690      	mov	r8, r2
 800a3be:	4657      	mov	r7, sl
 800a3c0:	4463      	add	r3, ip
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	18d6      	adds	r6, r2, r3
 800a3c6:	21ee      	movs	r1, #238	; 0xee
 800a3c8:	1c20      	adds	r0, r4, #0
 800a3ca:	0589      	lsls	r1, r1, #22
 800a3cc:	f7f6 f9de 	bl	800078c <__aeabi_fmul>
 800a3d0:	f7f6 fcbe 	bl	8000d50 <__aeabi_f2iz>
 800a3d4:	f7f6 fcdc 	bl	8000d90 <__aeabi_i2f>
 800a3d8:	2187      	movs	r1, #135	; 0x87
 800a3da:	05c9      	lsls	r1, r1, #23
 800a3dc:	1c05      	adds	r5, r0, #0
 800a3de:	f7f6 f9d5 	bl	800078c <__aeabi_fmul>
 800a3e2:	1c01      	adds	r1, r0, #0
 800a3e4:	1c20      	adds	r0, r4, #0
 800a3e6:	f7f6 faeb 	bl	80009c0 <__aeabi_fsub>
 800a3ea:	f7f6 fcb1 	bl	8000d50 <__aeabi_f2iz>
 800a3ee:	6831      	ldr	r1, [r6, #0]
 800a3f0:	c701      	stmia	r7!, {r0}
 800a3f2:	1c28      	adds	r0, r5, #0
 800a3f4:	f7f5 ff70 	bl	80002d8 <__aeabi_fadd>
 800a3f8:	0033      	movs	r3, r6
 800a3fa:	1c04      	adds	r4, r0, #0
 800a3fc:	3e04      	subs	r6, #4
 800a3fe:	4598      	cmp	r8, r3
 800a400:	d1e1      	bne.n	800a3c6 <__kernel_rem_pio2f+0x132>
 800a402:	464f      	mov	r7, r9
 800a404:	9e05      	ldr	r6, [sp, #20]
 800a406:	1c20      	adds	r0, r4, #0
 800a408:	0031      	movs	r1, r6
 800a40a:	f000 fba5 	bl	800ab58 <scalbnf>
 800a40e:	21f8      	movs	r1, #248	; 0xf8
 800a410:	0589      	lsls	r1, r1, #22
 800a412:	1c04      	adds	r4, r0, #0
 800a414:	f7f6 f9ba 	bl	800078c <__aeabi_fmul>
 800a418:	f000 fb5c 	bl	800aad4 <floorf>
 800a41c:	2182      	movs	r1, #130	; 0x82
 800a41e:	05c9      	lsls	r1, r1, #23
 800a420:	f7f6 f9b4 	bl	800078c <__aeabi_fmul>
 800a424:	1c01      	adds	r1, r0, #0
 800a426:	1c20      	adds	r0, r4, #0
 800a428:	f7f6 faca 	bl	80009c0 <__aeabi_fsub>
 800a42c:	1c04      	adds	r4, r0, #0
 800a42e:	f7f6 fc8f 	bl	8000d50 <__aeabi_f2iz>
 800a432:	4681      	mov	r9, r0
 800a434:	f7f6 fcac 	bl	8000d90 <__aeabi_i2f>
 800a438:	1c01      	adds	r1, r0, #0
 800a43a:	1c20      	adds	r0, r4, #0
 800a43c:	f7f6 fac0 	bl	80009c0 <__aeabi_fsub>
 800a440:	1c05      	adds	r5, r0, #0
 800a442:	2e00      	cmp	r6, #0
 800a444:	dd7b      	ble.n	800a53e <__kernel_rem_pio2f+0x2aa>
 800a446:	9b04      	ldr	r3, [sp, #16]
 800a448:	2008      	movs	r0, #8
 800a44a:	1e5a      	subs	r2, r3, #1
 800a44c:	4653      	mov	r3, sl
 800a44e:	0092      	lsls	r2, r2, #2
 800a450:	589b      	ldr	r3, [r3, r2]
 800a452:	1b80      	subs	r0, r0, r6
 800a454:	0019      	movs	r1, r3
 800a456:	4101      	asrs	r1, r0
 800a458:	4489      	add	r9, r1
 800a45a:	4081      	lsls	r1, r0
 800a45c:	1a5b      	subs	r3, r3, r1
 800a45e:	4651      	mov	r1, sl
 800a460:	508b      	str	r3, [r1, r2]
 800a462:	2207      	movs	r2, #7
 800a464:	1b92      	subs	r2, r2, r6
 800a466:	4113      	asrs	r3, r2
 800a468:	4698      	mov	r8, r3
 800a46a:	4643      	mov	r3, r8
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	dc74      	bgt.n	800a55a <__kernel_rem_pio2f+0x2c6>
 800a470:	2100      	movs	r1, #0
 800a472:	1c28      	adds	r0, r5, #0
 800a474:	f7f5 ff02 	bl	800027c <__aeabi_fcmpeq>
 800a478:	2800      	cmp	r0, #0
 800a47a:	d100      	bne.n	800a47e <__kernel_rem_pio2f+0x1ea>
 800a47c:	e0cd      	b.n	800a61a <__kernel_rem_pio2f+0x386>
 800a47e:	9b04      	ldr	r3, [sp, #16]
 800a480:	9a06      	ldr	r2, [sp, #24]
 800a482:	1e59      	subs	r1, r3, #1
 800a484:	428a      	cmp	r2, r1
 800a486:	dc0e      	bgt.n	800a4a6 <__kernel_rem_pio2f+0x212>
 800a488:	4a48      	ldr	r2, [pc, #288]	; (800a5ac <__kernel_rem_pio2f+0x318>)
 800a48a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a48c:	4694      	mov	ip, r2
 800a48e:	2200      	movs	r2, #0
 800a490:	4463      	add	r3, ip
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4453      	add	r3, sl
 800a496:	681c      	ldr	r4, [r3, #0]
 800a498:	3b04      	subs	r3, #4
 800a49a:	4322      	orrs	r2, r4
 800a49c:	4283      	cmp	r3, r0
 800a49e:	d1fa      	bne.n	800a496 <__kernel_rem_pio2f+0x202>
 800a4a0:	2a00      	cmp	r2, #0
 800a4a2:	d000      	beq.n	800a4a6 <__kernel_rem_pio2f+0x212>
 800a4a4:	e10b      	b.n	800a6be <__kernel_rem_pio2f+0x42a>
 800a4a6:	4652      	mov	r2, sl
 800a4a8:	9b06      	ldr	r3, [sp, #24]
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	58d1      	ldr	r1, [r2, r3]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b4:	2900      	cmp	r1, #0
 800a4b6:	d000      	beq.n	800a4ba <__kernel_rem_pio2f+0x226>
 800a4b8:	e0fc      	b.n	800a6b4 <__kernel_rem_pio2f+0x420>
 800a4ba:	6819      	ldr	r1, [r3, #0]
 800a4bc:	3b04      	subs	r3, #4
 800a4be:	3201      	adds	r2, #1
 800a4c0:	2900      	cmp	r1, #0
 800a4c2:	d0fa      	beq.n	800a4ba <__kernel_rem_pio2f+0x226>
 800a4c4:	9b04      	ldr	r3, [sp, #16]
 800a4c6:	469c      	mov	ip, r3
 800a4c8:	1c59      	adds	r1, r3, #1
 800a4ca:	4689      	mov	r9, r1
 800a4cc:	4462      	add	r2, ip
 800a4ce:	9200      	str	r2, [sp, #0]
 800a4d0:	9a08      	ldr	r2, [sp, #32]
 800a4d2:	9b04      	ldr	r3, [sp, #16]
 800a4d4:	4694      	mov	ip, r2
 800a4d6:	4463      	add	r3, ip
 800a4d8:	009e      	lsls	r6, r3, #2
 800a4da:	ab22      	add	r3, sp, #136	; 0x88
 800a4dc:	4698      	mov	r8, r3
 800a4de:	9b07      	ldr	r3, [sp, #28]
 800a4e0:	44b0      	add	r8, r6
 800a4e2:	469c      	mov	ip, r3
 800a4e4:	44e3      	add	fp, ip
 800a4e6:	464b      	mov	r3, r9
 800a4e8:	9a02      	ldr	r2, [sp, #8]
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	58d0      	ldr	r0, [r2, r3]
 800a4ee:	f7f6 fc4f 	bl	8000d90 <__aeabi_i2f>
 800a4f2:	4643      	mov	r3, r8
 800a4f4:	6018      	str	r0, [r3, #0]
 800a4f6:	9b01      	ldr	r3, [sp, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	db1e      	blt.n	800a53a <__kernel_rem_pio2f+0x2a6>
 800a4fc:	4646      	mov	r6, r8
 800a4fe:	2400      	movs	r4, #0
 800a500:	9d03      	ldr	r5, [sp, #12]
 800a502:	e001      	b.n	800a508 <__kernel_rem_pio2f+0x274>
 800a504:	6830      	ldr	r0, [r6, #0]
 800a506:	3504      	adds	r5, #4
 800a508:	6829      	ldr	r1, [r5, #0]
 800a50a:	f7f6 f93f 	bl	800078c <__aeabi_fmul>
 800a50e:	1c01      	adds	r1, r0, #0
 800a510:	1c20      	adds	r0, r4, #0
 800a512:	f7f5 fee1 	bl	80002d8 <__aeabi_fadd>
 800a516:	3e04      	subs	r6, #4
 800a518:	1c04      	adds	r4, r0, #0
 800a51a:	42bd      	cmp	r5, r7
 800a51c:	d1f2      	bne.n	800a504 <__kernel_rem_pio2f+0x270>
 800a51e:	465b      	mov	r3, fp
 800a520:	605c      	str	r4, [r3, #4]
 800a522:	2301      	movs	r3, #1
 800a524:	469c      	mov	ip, r3
 800a526:	3303      	adds	r3, #3
 800a528:	44e1      	add	r9, ip
 800a52a:	469c      	mov	ip, r3
 800a52c:	9b00      	ldr	r3, [sp, #0]
 800a52e:	44e0      	add	r8, ip
 800a530:	44e3      	add	fp, ip
 800a532:	4599      	cmp	r9, r3
 800a534:	ddd7      	ble.n	800a4e6 <__kernel_rem_pio2f+0x252>
 800a536:	9304      	str	r3, [sp, #16]
 800a538:	e735      	b.n	800a3a6 <__kernel_rem_pio2f+0x112>
 800a53a:	2400      	movs	r4, #0
 800a53c:	e7ef      	b.n	800a51e <__kernel_rem_pio2f+0x28a>
 800a53e:	9b05      	ldr	r3, [sp, #20]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d000      	beq.n	800a546 <__kernel_rem_pio2f+0x2b2>
 800a544:	e0ac      	b.n	800a6a0 <__kernel_rem_pio2f+0x40c>
 800a546:	4652      	mov	r2, sl
 800a548:	9b04      	ldr	r3, [sp, #16]
 800a54a:	3b01      	subs	r3, #1
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	58d3      	ldr	r3, [r2, r3]
 800a550:	121b      	asrs	r3, r3, #8
 800a552:	4698      	mov	r8, r3
 800a554:	4643      	mov	r3, r8
 800a556:	2b00      	cmp	r3, #0
 800a558:	dd8a      	ble.n	800a470 <__kernel_rem_pio2f+0x1dc>
 800a55a:	2301      	movs	r3, #1
 800a55c:	469c      	mov	ip, r3
 800a55e:	9b04      	ldr	r3, [sp, #16]
 800a560:	44e1      	add	r9, ip
 800a562:	2b00      	cmp	r3, #0
 800a564:	dc00      	bgt.n	800a568 <__kernel_rem_pio2f+0x2d4>
 800a566:	e1bd      	b.n	800a8e4 <__kernel_rem_pio2f+0x650>
 800a568:	4653      	mov	r3, sl
 800a56a:	681c      	ldr	r4, [r3, #0]
 800a56c:	2c00      	cmp	r4, #0
 800a56e:	d000      	beq.n	800a572 <__kernel_rem_pio2f+0x2de>
 800a570:	e08c      	b.n	800a68c <__kernel_rem_pio2f+0x3f8>
 800a572:	9b04      	ldr	r3, [sp, #16]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d021      	beq.n	800a5bc <__kernel_rem_pio2f+0x328>
 800a578:	2201      	movs	r2, #1
 800a57a:	ab0f      	add	r3, sp, #60	; 0x3c
 800a57c:	681c      	ldr	r4, [r3, #0]
 800a57e:	2c00      	cmp	r4, #0
 800a580:	d100      	bne.n	800a584 <__kernel_rem_pio2f+0x2f0>
 800a582:	e086      	b.n	800a692 <__kernel_rem_pio2f+0x3fe>
 800a584:	1c53      	adds	r3, r2, #1
 800a586:	2180      	movs	r1, #128	; 0x80
 800a588:	0049      	lsls	r1, r1, #1
 800a58a:	1b0c      	subs	r4, r1, r4
 800a58c:	4651      	mov	r1, sl
 800a58e:	0092      	lsls	r2, r2, #2
 800a590:	508c      	str	r4, [r1, r2]
 800a592:	9a04      	ldr	r2, [sp, #16]
 800a594:	429a      	cmp	r2, r3
 800a596:	dd10      	ble.n	800a5ba <__kernel_rem_pio2f+0x326>
 800a598:	4650      	mov	r0, sl
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	58ca      	ldr	r2, [r1, r3]
 800a59e:	4458      	add	r0, fp
 800a5a0:	21ff      	movs	r1, #255	; 0xff
 800a5a2:	4453      	add	r3, sl
 800a5a4:	e005      	b.n	800a5b2 <__kernel_rem_pio2f+0x31e>
 800a5a6:	46c0      	nop			; (mov r8, r8)
 800a5a8:	0800c01c 	.word	0x0800c01c
 800a5ac:	3fffffff 	.word	0x3fffffff
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	1a8a      	subs	r2, r1, r2
 800a5b4:	c304      	stmia	r3!, {r2}
 800a5b6:	4283      	cmp	r3, r0
 800a5b8:	d1fa      	bne.n	800a5b0 <__kernel_rem_pio2f+0x31c>
 800a5ba:	2401      	movs	r4, #1
 800a5bc:	9b05      	ldr	r3, [sp, #20]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	dd0d      	ble.n	800a5de <__kernel_rem_pio2f+0x34a>
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d100      	bne.n	800a5c8 <__kernel_rem_pio2f+0x334>
 800a5c6:	e173      	b.n	800a8b0 <__kernel_rem_pio2f+0x61c>
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	d108      	bne.n	800a5de <__kernel_rem_pio2f+0x34a>
 800a5cc:	223f      	movs	r2, #63	; 0x3f
 800a5ce:	9b04      	ldr	r3, [sp, #16]
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	4651      	mov	r1, sl
 800a5d6:	58c9      	ldr	r1, [r1, r3]
 800a5d8:	400a      	ands	r2, r1
 800a5da:	4651      	mov	r1, sl
 800a5dc:	50ca      	str	r2, [r1, r3]
 800a5de:	4643      	mov	r3, r8
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d000      	beq.n	800a5e6 <__kernel_rem_pio2f+0x352>
 800a5e4:	e744      	b.n	800a470 <__kernel_rem_pio2f+0x1dc>
 800a5e6:	20fe      	movs	r0, #254	; 0xfe
 800a5e8:	1c29      	adds	r1, r5, #0
 800a5ea:	0580      	lsls	r0, r0, #22
 800a5ec:	f7f6 f9e8 	bl	80009c0 <__aeabi_fsub>
 800a5f0:	1c05      	adds	r5, r0, #0
 800a5f2:	2c00      	cmp	r4, #0
 800a5f4:	d100      	bne.n	800a5f8 <__kernel_rem_pio2f+0x364>
 800a5f6:	e73b      	b.n	800a470 <__kernel_rem_pio2f+0x1dc>
 800a5f8:	20fe      	movs	r0, #254	; 0xfe
 800a5fa:	9905      	ldr	r1, [sp, #20]
 800a5fc:	0580      	lsls	r0, r0, #22
 800a5fe:	f000 faab 	bl	800ab58 <scalbnf>
 800a602:	1c01      	adds	r1, r0, #0
 800a604:	1c28      	adds	r0, r5, #0
 800a606:	f7f6 f9db 	bl	80009c0 <__aeabi_fsub>
 800a60a:	1c05      	adds	r5, r0, #0
 800a60c:	2100      	movs	r1, #0
 800a60e:	1c28      	adds	r0, r5, #0
 800a610:	f7f5 fe34 	bl	800027c <__aeabi_fcmpeq>
 800a614:	2800      	cmp	r0, #0
 800a616:	d000      	beq.n	800a61a <__kernel_rem_pio2f+0x386>
 800a618:	e731      	b.n	800a47e <__kernel_rem_pio2f+0x1ea>
 800a61a:	464b      	mov	r3, r9
 800a61c:	9303      	str	r3, [sp, #12]
 800a61e:	4643      	mov	r3, r8
 800a620:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a622:	9301      	str	r3, [sp, #4]
 800a624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a626:	1c28      	adds	r0, r5, #0
 800a628:	1a99      	subs	r1, r3, r2
 800a62a:	f000 fa95 	bl	800ab58 <scalbnf>
 800a62e:	2187      	movs	r1, #135	; 0x87
 800a630:	05c9      	lsls	r1, r1, #23
 800a632:	1c05      	adds	r5, r0, #0
 800a634:	f7f5 fe46 	bl	80002c4 <__aeabi_fcmpge>
 800a638:	2800      	cmp	r0, #0
 800a63a:	d100      	bne.n	800a63e <__kernel_rem_pio2f+0x3aa>
 800a63c:	e17f      	b.n	800a93e <__kernel_rem_pio2f+0x6aa>
 800a63e:	21ee      	movs	r1, #238	; 0xee
 800a640:	1c28      	adds	r0, r5, #0
 800a642:	0589      	lsls	r1, r1, #22
 800a644:	f7f6 f8a2 	bl	800078c <__aeabi_fmul>
 800a648:	f7f6 fb82 	bl	8000d50 <__aeabi_f2iz>
 800a64c:	f7f6 fba0 	bl	8000d90 <__aeabi_i2f>
 800a650:	2187      	movs	r1, #135	; 0x87
 800a652:	05c9      	lsls	r1, r1, #23
 800a654:	1c04      	adds	r4, r0, #0
 800a656:	f7f6 f899 	bl	800078c <__aeabi_fmul>
 800a65a:	1c01      	adds	r1, r0, #0
 800a65c:	1c28      	adds	r0, r5, #0
 800a65e:	f7f6 f9af 	bl	80009c0 <__aeabi_fsub>
 800a662:	f7f6 fb75 	bl	8000d50 <__aeabi_f2iz>
 800a666:	4653      	mov	r3, sl
 800a668:	465a      	mov	r2, fp
 800a66a:	5098      	str	r0, [r3, r2]
 800a66c:	2201      	movs	r2, #1
 800a66e:	4694      	mov	ip, r2
 800a670:	9b04      	ldr	r3, [sp, #16]
 800a672:	1c20      	adds	r0, r4, #0
 800a674:	4463      	add	r3, ip
 800a676:	4698      	mov	r8, r3
 800a678:	9b05      	ldr	r3, [sp, #20]
 800a67a:	3308      	adds	r3, #8
 800a67c:	9305      	str	r3, [sp, #20]
 800a67e:	4643      	mov	r3, r8
 800a680:	009d      	lsls	r5, r3, #2
 800a682:	f7f6 fb65 	bl	8000d50 <__aeabi_f2iz>
 800a686:	4653      	mov	r3, sl
 800a688:	5158      	str	r0, [r3, r5]
 800a68a:	e035      	b.n	800a6f8 <__kernel_rem_pio2f+0x464>
 800a68c:	2301      	movs	r3, #1
 800a68e:	2200      	movs	r2, #0
 800a690:	e779      	b.n	800a586 <__kernel_rem_pio2f+0x2f2>
 800a692:	9904      	ldr	r1, [sp, #16]
 800a694:	3201      	adds	r2, #1
 800a696:	3304      	adds	r3, #4
 800a698:	428a      	cmp	r2, r1
 800a69a:	d000      	beq.n	800a69e <__kernel_rem_pio2f+0x40a>
 800a69c:	e76e      	b.n	800a57c <__kernel_rem_pio2f+0x2e8>
 800a69e:	e78d      	b.n	800a5bc <__kernel_rem_pio2f+0x328>
 800a6a0:	21fc      	movs	r1, #252	; 0xfc
 800a6a2:	0589      	lsls	r1, r1, #22
 800a6a4:	f7f5 fe0e 	bl	80002c4 <__aeabi_fcmpge>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d000      	beq.n	800a6ae <__kernel_rem_pio2f+0x41a>
 800a6ac:	e10a      	b.n	800a8c4 <__kernel_rem_pio2f+0x630>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	4698      	mov	r8, r3
 800a6b2:	e6dd      	b.n	800a470 <__kernel_rem_pio2f+0x1dc>
 800a6b4:	9b04      	ldr	r3, [sp, #16]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	4699      	mov	r9, r3
 800a6ba:	9300      	str	r3, [sp, #0]
 800a6bc:	e708      	b.n	800a4d0 <__kernel_rem_pio2f+0x23c>
 800a6be:	464b      	mov	r3, r9
 800a6c0:	9303      	str	r3, [sp, #12]
 800a6c2:	4643      	mov	r3, r8
 800a6c4:	4688      	mov	r8, r1
 800a6c6:	9301      	str	r3, [sp, #4]
 800a6c8:	4643      	mov	r3, r8
 800a6ca:	4652      	mov	r2, sl
 800a6cc:	9905      	ldr	r1, [sp, #20]
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	58d3      	ldr	r3, [r2, r3]
 800a6d2:	3908      	subs	r1, #8
 800a6d4:	9105      	str	r1, [sp, #20]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d10e      	bne.n	800a6f8 <__kernel_rem_pio2f+0x464>
 800a6da:	4ab7      	ldr	r2, [pc, #732]	; (800a9b8 <__kernel_rem_pio2f+0x724>)
 800a6dc:	9b04      	ldr	r3, [sp, #16]
 800a6de:	4694      	mov	ip, r2
 800a6e0:	4642      	mov	r2, r8
 800a6e2:	4463      	add	r3, ip
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	4453      	add	r3, sl
 800a6e8:	6818      	ldr	r0, [r3, #0]
 800a6ea:	3b04      	subs	r3, #4
 800a6ec:	3a01      	subs	r2, #1
 800a6ee:	3908      	subs	r1, #8
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	d0f9      	beq.n	800a6e8 <__kernel_rem_pio2f+0x454>
 800a6f4:	4690      	mov	r8, r2
 800a6f6:	9105      	str	r1, [sp, #20]
 800a6f8:	20fe      	movs	r0, #254	; 0xfe
 800a6fa:	9905      	ldr	r1, [sp, #20]
 800a6fc:	0580      	lsls	r0, r0, #22
 800a6fe:	f000 fa2b 	bl	800ab58 <scalbnf>
 800a702:	4643      	mov	r3, r8
 800a704:	1c04      	adds	r4, r0, #0
 800a706:	2b00      	cmp	r3, #0
 800a708:	da00      	bge.n	800a70c <__kernel_rem_pio2f+0x478>
 800a70a:	e13f      	b.n	800a98c <__kernel_rem_pio2f+0x6f8>
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	469c      	mov	ip, r3
 800a710:	9a07      	ldr	r2, [sp, #28]
 800a712:	001d      	movs	r5, r3
 800a714:	4462      	add	r2, ip
 800a716:	4691      	mov	r9, r2
 800a718:	0016      	movs	r6, r2
 800a71a:	9302      	str	r3, [sp, #8]
 800a71c:	4455      	add	r5, sl
 800a71e:	6828      	ldr	r0, [r5, #0]
 800a720:	f7f6 fb36 	bl	8000d90 <__aeabi_i2f>
 800a724:	1c21      	adds	r1, r4, #0
 800a726:	f7f6 f831 	bl	800078c <__aeabi_fmul>
 800a72a:	21ee      	movs	r1, #238	; 0xee
 800a72c:	6030      	str	r0, [r6, #0]
 800a72e:	0589      	lsls	r1, r1, #22
 800a730:	1c20      	adds	r0, r4, #0
 800a732:	f7f6 f82b 	bl	800078c <__aeabi_fmul>
 800a736:	3e04      	subs	r6, #4
 800a738:	002b      	movs	r3, r5
 800a73a:	1c04      	adds	r4, r0, #0
 800a73c:	3d04      	subs	r5, #4
 800a73e:	459a      	cmp	sl, r3
 800a740:	d1ed      	bne.n	800a71e <__kernel_rem_pio2f+0x48a>
 800a742:	ab36      	add	r3, sp, #216	; 0xd8
 800a744:	469b      	mov	fp, r3
 800a746:	4b9d      	ldr	r3, [pc, #628]	; (800a9bc <__kernel_rem_pio2f+0x728>)
 800a748:	2700      	movs	r7, #0
 800a74a:	469a      	mov	sl, r3
 800a74c:	4643      	mov	r3, r8
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	9b06      	ldr	r3, [sp, #24]
 800a752:	4698      	mov	r8, r3
 800a754:	4643      	mov	r3, r8
 800a756:	2400      	movs	r4, #0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	db1a      	blt.n	800a792 <__kernel_rem_pio2f+0x4fe>
 800a75c:	003b      	movs	r3, r7
 800a75e:	2600      	movs	r6, #0
 800a760:	464f      	mov	r7, r9
 800a762:	2400      	movs	r4, #0
 800a764:	2500      	movs	r5, #0
 800a766:	4699      	mov	r9, r3
 800a768:	4895      	ldr	r0, [pc, #596]	; (800a9c0 <__kernel_rem_pio2f+0x72c>)
 800a76a:	e004      	b.n	800a776 <__kernel_rem_pio2f+0x4e2>
 800a76c:	3604      	adds	r6, #4
 800a76e:	45a9      	cmp	r9, r5
 800a770:	db0c      	blt.n	800a78c <__kernel_rem_pio2f+0x4f8>
 800a772:	4653      	mov	r3, sl
 800a774:	58f0      	ldr	r0, [r6, r3]
 800a776:	59b9      	ldr	r1, [r7, r6]
 800a778:	f7f6 f808 	bl	800078c <__aeabi_fmul>
 800a77c:	1c01      	adds	r1, r0, #0
 800a77e:	1c20      	adds	r0, r4, #0
 800a780:	f7f5 fdaa 	bl	80002d8 <__aeabi_fadd>
 800a784:	3501      	adds	r5, #1
 800a786:	1c04      	adds	r4, r0, #0
 800a788:	45a8      	cmp	r8, r5
 800a78a:	daef      	bge.n	800a76c <__kernel_rem_pio2f+0x4d8>
 800a78c:	464b      	mov	r3, r9
 800a78e:	46b9      	mov	r9, r7
 800a790:	001f      	movs	r7, r3
 800a792:	465a      	mov	r2, fp
 800a794:	00bb      	lsls	r3, r7, #2
 800a796:	50d4      	str	r4, [r2, r3]
 800a798:	2204      	movs	r2, #4
 800a79a:	4252      	negs	r2, r2
 800a79c:	4694      	mov	ip, r2
 800a79e:	9a00      	ldr	r2, [sp, #0]
 800a7a0:	1c7b      	adds	r3, r7, #1
 800a7a2:	44e1      	add	r9, ip
 800a7a4:	4297      	cmp	r7, r2
 800a7a6:	d001      	beq.n	800a7ac <__kernel_rem_pio2f+0x518>
 800a7a8:	001f      	movs	r7, r3
 800a7aa:	e7d3      	b.n	800a754 <__kernel_rem_pio2f+0x4c0>
 800a7ac:	9b00      	ldr	r3, [sp, #0]
 800a7ae:	4698      	mov	r8, r3
 800a7b0:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	dc22      	bgt.n	800a7fc <__kernel_rem_pio2f+0x568>
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	dd00      	ble.n	800a7bc <__kernel_rem_pio2f+0x528>
 800a7ba:	e095      	b.n	800a8e8 <__kernel_rem_pio2f+0x654>
 800a7bc:	d114      	bne.n	800a7e8 <__kernel_rem_pio2f+0x554>
 800a7be:	9b02      	ldr	r3, [sp, #8]
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	445b      	add	r3, fp
 800a7c4:	001c      	movs	r4, r3
 800a7c6:	465d      	mov	r5, fp
 800a7c8:	6821      	ldr	r1, [r4, #0]
 800a7ca:	f7f5 fd85 	bl	80002d8 <__aeabi_fadd>
 800a7ce:	0023      	movs	r3, r4
 800a7d0:	3c04      	subs	r4, #4
 800a7d2:	429d      	cmp	r5, r3
 800a7d4:	d1f8      	bne.n	800a7c8 <__kernel_rem_pio2f+0x534>
 800a7d6:	9b01      	ldr	r3, [sp, #4]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d003      	beq.n	800a7e4 <__kernel_rem_pio2f+0x550>
 800a7dc:	2380      	movs	r3, #128	; 0x80
 800a7de:	061b      	lsls	r3, r3, #24
 800a7e0:	469c      	mov	ip, r3
 800a7e2:	4460      	add	r0, ip
 800a7e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7e6:	6018      	str	r0, [r3, #0]
 800a7e8:	2007      	movs	r0, #7
 800a7ea:	9b03      	ldr	r3, [sp, #12]
 800a7ec:	4018      	ands	r0, r3
 800a7ee:	b05f      	add	sp, #380	; 0x17c
 800a7f0:	bcf0      	pop	{r4, r5, r6, r7}
 800a7f2:	46bb      	mov	fp, r7
 800a7f4:	46b2      	mov	sl, r6
 800a7f6:	46a9      	mov	r9, r5
 800a7f8:	46a0      	mov	r8, r4
 800a7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7fc:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 800a7fe:	2b03      	cmp	r3, #3
 800a800:	d1f2      	bne.n	800a7e8 <__kernel_rem_pio2f+0x554>
 800a802:	4643      	mov	r3, r8
 800a804:	2b00      	cmp	r3, #0
 800a806:	d100      	bne.n	800a80a <__kernel_rem_pio2f+0x576>
 800a808:	e0d4      	b.n	800a9b4 <__kernel_rem_pio2f+0x720>
 800a80a:	465b      	mov	r3, fp
 800a80c:	9a02      	ldr	r2, [sp, #8]
 800a80e:	589e      	ldr	r6, [r3, r2]
 800a810:	4b6c      	ldr	r3, [pc, #432]	; (800a9c4 <__kernel_rem_pio2f+0x730>)
 800a812:	4443      	add	r3, r8
 800a814:	4699      	mov	r9, r3
 800a816:	009d      	lsls	r5, r3, #2
 800a818:	445d      	add	r5, fp
 800a81a:	682b      	ldr	r3, [r5, #0]
 800a81c:	1c30      	adds	r0, r6, #0
 800a81e:	1c19      	adds	r1, r3, #0
 800a820:	469a      	mov	sl, r3
 800a822:	f7f5 fd59 	bl	80002d8 <__aeabi_fadd>
 800a826:	1c34      	adds	r4, r6, #0
 800a828:	1c01      	adds	r1, r0, #0
 800a82a:	1c06      	adds	r6, r0, #0
 800a82c:	4650      	mov	r0, sl
 800a82e:	f7f6 f8c7 	bl	80009c0 <__aeabi_fsub>
 800a832:	1c21      	adds	r1, r4, #0
 800a834:	f7f5 fd50 	bl	80002d8 <__aeabi_fadd>
 800a838:	002f      	movs	r7, r5
 800a83a:	6068      	str	r0, [r5, #4]
 800a83c:	602e      	str	r6, [r5, #0]
 800a83e:	3d04      	subs	r5, #4
 800a840:	45bb      	cmp	fp, r7
 800a842:	d1ea      	bne.n	800a81a <__kernel_rem_pio2f+0x586>
 800a844:	4643      	mov	r3, r8
 800a846:	2b01      	cmp	r3, #1
 800a848:	dc00      	bgt.n	800a84c <__kernel_rem_pio2f+0x5b8>
 800a84a:	e0b3      	b.n	800a9b4 <__kernel_rem_pio2f+0x720>
 800a84c:	465b      	mov	r3, fp
 800a84e:	9a02      	ldr	r2, [sp, #8]
 800a850:	465d      	mov	r5, fp
 800a852:	589e      	ldr	r6, [r3, r2]
 800a854:	464b      	mov	r3, r9
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4698      	mov	r8, r3
 800a85a:	4445      	add	r5, r8
 800a85c:	682f      	ldr	r7, [r5, #0]
 800a85e:	1c30      	adds	r0, r6, #0
 800a860:	1c39      	adds	r1, r7, #0
 800a862:	f7f5 fd39 	bl	80002d8 <__aeabi_fadd>
 800a866:	1c34      	adds	r4, r6, #0
 800a868:	1c01      	adds	r1, r0, #0
 800a86a:	1c06      	adds	r6, r0, #0
 800a86c:	1c38      	adds	r0, r7, #0
 800a86e:	f7f6 f8a7 	bl	80009c0 <__aeabi_fsub>
 800a872:	1c21      	adds	r1, r4, #0
 800a874:	f7f5 fd30 	bl	80002d8 <__aeabi_fadd>
 800a878:	002f      	movs	r7, r5
 800a87a:	6068      	str	r0, [r5, #4]
 800a87c:	602e      	str	r6, [r5, #0]
 800a87e:	3d04      	subs	r5, #4
 800a880:	45ab      	cmp	fp, r5
 800a882:	d1eb      	bne.n	800a85c <__kernel_rem_pio2f+0x5c8>
 800a884:	4644      	mov	r4, r8
 800a886:	2000      	movs	r0, #0
 800a888:	3404      	adds	r4, #4
 800a88a:	445c      	add	r4, fp
 800a88c:	6821      	ldr	r1, [r4, #0]
 800a88e:	3c04      	subs	r4, #4
 800a890:	f7f5 fd22 	bl	80002d8 <__aeabi_fadd>
 800a894:	42a7      	cmp	r7, r4
 800a896:	d1f9      	bne.n	800a88c <__kernel_rem_pio2f+0x5f8>
 800a898:	9b01      	ldr	r3, [sp, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d158      	bne.n	800a950 <__kernel_rem_pio2f+0x6bc>
 800a89e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8a0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 800a8a2:	6098      	str	r0, [r3, #8]
 800a8a4:	601a      	str	r2, [r3, #0]
 800a8a6:	465a      	mov	r2, fp
 800a8a8:	6852      	ldr	r2, [r2, #4]
 800a8aa:	9200      	str	r2, [sp, #0]
 800a8ac:	605a      	str	r2, [r3, #4]
 800a8ae:	e79b      	b.n	800a7e8 <__kernel_rem_pio2f+0x554>
 800a8b0:	9b04      	ldr	r3, [sp, #16]
 800a8b2:	227f      	movs	r2, #127	; 0x7f
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	e68c      	b.n	800a5d4 <__kernel_rem_pio2f+0x340>
 800a8ba:	2308      	movs	r3, #8
 800a8bc:	930c      	str	r3, [sp, #48]	; 0x30
 800a8be:	2300      	movs	r3, #0
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	e509      	b.n	800a2d8 <__kernel_rem_pio2f+0x44>
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	469c      	mov	ip, r3
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	4698      	mov	r8, r3
 800a8cc:	9b04      	ldr	r3, [sp, #16]
 800a8ce:	44e1      	add	r9, ip
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	dd00      	ble.n	800a8d6 <__kernel_rem_pio2f+0x642>
 800a8d4:	e648      	b.n	800a568 <__kernel_rem_pio2f+0x2d4>
 800a8d6:	20fe      	movs	r0, #254	; 0xfe
 800a8d8:	1c29      	adds	r1, r5, #0
 800a8da:	0580      	lsls	r0, r0, #22
 800a8dc:	f7f6 f870 	bl	80009c0 <__aeabi_fsub>
 800a8e0:	1c05      	adds	r5, r0, #0
 800a8e2:	e5c5      	b.n	800a470 <__kernel_rem_pio2f+0x1dc>
 800a8e4:	2400      	movs	r4, #0
 800a8e6:	e669      	b.n	800a5bc <__kernel_rem_pio2f+0x328>
 800a8e8:	9b02      	ldr	r3, [sp, #8]
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	445b      	add	r3, fp
 800a8ee:	001c      	movs	r4, r3
 800a8f0:	465d      	mov	r5, fp
 800a8f2:	6821      	ldr	r1, [r4, #0]
 800a8f4:	f7f5 fcf0 	bl	80002d8 <__aeabi_fadd>
 800a8f8:	0023      	movs	r3, r4
 800a8fa:	3c04      	subs	r4, #4
 800a8fc:	429d      	cmp	r5, r3
 800a8fe:	d1f8      	bne.n	800a8f2 <__kernel_rem_pio2f+0x65e>
 800a900:	9b01      	ldr	r3, [sp, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d132      	bne.n	800a96c <__kernel_rem_pio2f+0x6d8>
 800a906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a908:	1c01      	adds	r1, r0, #0
 800a90a:	6018      	str	r0, [r3, #0]
 800a90c:	9836      	ldr	r0, [sp, #216]	; 0xd8
 800a90e:	f7f6 f857 	bl	80009c0 <__aeabi_fsub>
 800a912:	4643      	mov	r3, r8
 800a914:	2b00      	cmp	r3, #0
 800a916:	dd0f      	ble.n	800a938 <__kernel_rem_pio2f+0x6a4>
 800a918:	2401      	movs	r4, #1
 800a91a:	4646      	mov	r6, r8
 800a91c:	ad37      	add	r5, sp, #220	; 0xdc
 800a91e:	cd02      	ldmia	r5!, {r1}
 800a920:	3401      	adds	r4, #1
 800a922:	f7f5 fcd9 	bl	80002d8 <__aeabi_fadd>
 800a926:	42a6      	cmp	r6, r4
 800a928:	daf9      	bge.n	800a91e <__kernel_rem_pio2f+0x68a>
 800a92a:	9b01      	ldr	r3, [sp, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d003      	beq.n	800a938 <__kernel_rem_pio2f+0x6a4>
 800a930:	2380      	movs	r3, #128	; 0x80
 800a932:	061b      	lsls	r3, r3, #24
 800a934:	469c      	mov	ip, r3
 800a936:	4460      	add	r0, ip
 800a938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a93a:	6058      	str	r0, [r3, #4]
 800a93c:	e754      	b.n	800a7e8 <__kernel_rem_pio2f+0x554>
 800a93e:	1c28      	adds	r0, r5, #0
 800a940:	f7f6 fa06 	bl	8000d50 <__aeabi_f2iz>
 800a944:	4653      	mov	r3, sl
 800a946:	465a      	mov	r2, fp
 800a948:	5098      	str	r0, [r3, r2]
 800a94a:	9b04      	ldr	r3, [sp, #16]
 800a94c:	4698      	mov	r8, r3
 800a94e:	e6d3      	b.n	800a6f8 <__kernel_rem_pio2f+0x464>
 800a950:	2280      	movs	r2, #128	; 0x80
 800a952:	0612      	lsls	r2, r2, #24
 800a954:	4694      	mov	ip, r2
 800a956:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800a958:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a95a:	4463      	add	r3, ip
 800a95c:	6013      	str	r3, [r2, #0]
 800a95e:	465b      	mov	r3, fp
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	4460      	add	r0, ip
 800a964:	4463      	add	r3, ip
 800a966:	6053      	str	r3, [r2, #4]
 800a968:	6090      	str	r0, [r2, #8]
 800a96a:	e73d      	b.n	800a7e8 <__kernel_rem_pio2f+0x554>
 800a96c:	2380      	movs	r3, #128	; 0x80
 800a96e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a970:	061b      	lsls	r3, r3, #24
 800a972:	18c3      	adds	r3, r0, r3
 800a974:	6013      	str	r3, [r2, #0]
 800a976:	1c01      	adds	r1, r0, #0
 800a978:	9836      	ldr	r0, [sp, #216]	; 0xd8
 800a97a:	f7f6 f821 	bl	80009c0 <__aeabi_fsub>
 800a97e:	4643      	mov	r3, r8
 800a980:	2b00      	cmp	r3, #0
 800a982:	dcc9      	bgt.n	800a918 <__kernel_rem_pio2f+0x684>
 800a984:	e7d4      	b.n	800a930 <__kernel_rem_pio2f+0x69c>
 800a986:	ab4a      	add	r3, sp, #296	; 0x128
 800a988:	9307      	str	r3, [sp, #28]
 800a98a:	e4f2      	b.n	800a372 <__kernel_rem_pio2f+0xde>
 800a98c:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 800a98e:	2b02      	cmp	r3, #2
 800a990:	dc06      	bgt.n	800a9a0 <__kernel_rem_pio2f+0x70c>
 800a992:	2b00      	cmp	r3, #0
 800a994:	dc0c      	bgt.n	800a9b0 <__kernel_rem_pio2f+0x71c>
 800a996:	2000      	movs	r0, #0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d100      	bne.n	800a99e <__kernel_rem_pio2f+0x70a>
 800a99c:	e71b      	b.n	800a7d6 <__kernel_rem_pio2f+0x542>
 800a99e:	e723      	b.n	800a7e8 <__kernel_rem_pio2f+0x554>
 800a9a0:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 800a9a2:	2b03      	cmp	r3, #3
 800a9a4:	d000      	beq.n	800a9a8 <__kernel_rem_pio2f+0x714>
 800a9a6:	e71f      	b.n	800a7e8 <__kernel_rem_pio2f+0x554>
 800a9a8:	ab36      	add	r3, sp, #216	; 0xd8
 800a9aa:	2000      	movs	r0, #0
 800a9ac:	469b      	mov	fp, r3
 800a9ae:	e773      	b.n	800a898 <__kernel_rem_pio2f+0x604>
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	e7a5      	b.n	800a900 <__kernel_rem_pio2f+0x66c>
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	e76f      	b.n	800a898 <__kernel_rem_pio2f+0x604>
 800a9b8:	3ffffffe 	.word	0x3ffffffe
 800a9bc:	0800bff0 	.word	0x0800bff0
 800a9c0:	3fc90000 	.word	0x3fc90000
 800a9c4:	3fffffff 	.word	0x3fffffff

0800a9c8 <__kernel_sinf>:
 800a9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ca:	4647      	mov	r7, r8
 800a9cc:	46ce      	mov	lr, r9
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	0017      	movs	r7, r2
 800a9d2:	22c8      	movs	r2, #200	; 0xc8
 800a9d4:	0043      	lsls	r3, r0, #1
 800a9d6:	1c04      	adds	r4, r0, #0
 800a9d8:	1c0e      	adds	r6, r1, #0
 800a9da:	085b      	lsrs	r3, r3, #1
 800a9dc:	0592      	lsls	r2, r2, #22
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	da03      	bge.n	800a9ea <__kernel_sinf+0x22>
 800a9e2:	f7f6 f9b5 	bl	8000d50 <__aeabi_f2iz>
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	d058      	beq.n	800aa9c <__kernel_sinf+0xd4>
 800a9ea:	1c21      	adds	r1, r4, #0
 800a9ec:	1c20      	adds	r0, r4, #0
 800a9ee:	f7f5 fecd 	bl	800078c <__aeabi_fmul>
 800a9f2:	1c05      	adds	r5, r0, #0
 800a9f4:	1c01      	adds	r1, r0, #0
 800a9f6:	1c20      	adds	r0, r4, #0
 800a9f8:	f7f5 fec8 	bl	800078c <__aeabi_fmul>
 800a9fc:	4928      	ldr	r1, [pc, #160]	; (800aaa0 <__kernel_sinf+0xd8>)
 800a9fe:	4680      	mov	r8, r0
 800aa00:	1c28      	adds	r0, r5, #0
 800aa02:	f7f5 fec3 	bl	800078c <__aeabi_fmul>
 800aa06:	4927      	ldr	r1, [pc, #156]	; (800aaa4 <__kernel_sinf+0xdc>)
 800aa08:	f7f5 ffda 	bl	80009c0 <__aeabi_fsub>
 800aa0c:	1c29      	adds	r1, r5, #0
 800aa0e:	f7f5 febd 	bl	800078c <__aeabi_fmul>
 800aa12:	4925      	ldr	r1, [pc, #148]	; (800aaa8 <__kernel_sinf+0xe0>)
 800aa14:	f7f5 fc60 	bl	80002d8 <__aeabi_fadd>
 800aa18:	1c29      	adds	r1, r5, #0
 800aa1a:	f7f5 feb7 	bl	800078c <__aeabi_fmul>
 800aa1e:	4923      	ldr	r1, [pc, #140]	; (800aaac <__kernel_sinf+0xe4>)
 800aa20:	f7f5 ffce 	bl	80009c0 <__aeabi_fsub>
 800aa24:	1c29      	adds	r1, r5, #0
 800aa26:	f7f5 feb1 	bl	800078c <__aeabi_fmul>
 800aa2a:	4921      	ldr	r1, [pc, #132]	; (800aab0 <__kernel_sinf+0xe8>)
 800aa2c:	f7f5 fc54 	bl	80002d8 <__aeabi_fadd>
 800aa30:	4681      	mov	r9, r0
 800aa32:	2f00      	cmp	r7, #0
 800aa34:	d024      	beq.n	800aa80 <__kernel_sinf+0xb8>
 800aa36:	21fc      	movs	r1, #252	; 0xfc
 800aa38:	1c30      	adds	r0, r6, #0
 800aa3a:	0589      	lsls	r1, r1, #22
 800aa3c:	f7f5 fea6 	bl	800078c <__aeabi_fmul>
 800aa40:	4649      	mov	r1, r9
 800aa42:	1c07      	adds	r7, r0, #0
 800aa44:	4640      	mov	r0, r8
 800aa46:	f7f5 fea1 	bl	800078c <__aeabi_fmul>
 800aa4a:	1c01      	adds	r1, r0, #0
 800aa4c:	1c38      	adds	r0, r7, #0
 800aa4e:	f7f5 ffb7 	bl	80009c0 <__aeabi_fsub>
 800aa52:	1c29      	adds	r1, r5, #0
 800aa54:	f7f5 fe9a 	bl	800078c <__aeabi_fmul>
 800aa58:	1c31      	adds	r1, r6, #0
 800aa5a:	f7f5 ffb1 	bl	80009c0 <__aeabi_fsub>
 800aa5e:	4915      	ldr	r1, [pc, #84]	; (800aab4 <__kernel_sinf+0xec>)
 800aa60:	1c05      	adds	r5, r0, #0
 800aa62:	4640      	mov	r0, r8
 800aa64:	f7f5 fe92 	bl	800078c <__aeabi_fmul>
 800aa68:	1c01      	adds	r1, r0, #0
 800aa6a:	1c28      	adds	r0, r5, #0
 800aa6c:	f7f5 fc34 	bl	80002d8 <__aeabi_fadd>
 800aa70:	1c01      	adds	r1, r0, #0
 800aa72:	1c20      	adds	r0, r4, #0
 800aa74:	f7f5 ffa4 	bl	80009c0 <__aeabi_fsub>
 800aa78:	bcc0      	pop	{r6, r7}
 800aa7a:	46b9      	mov	r9, r7
 800aa7c:	46b0      	mov	r8, r6
 800aa7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa80:	1c01      	adds	r1, r0, #0
 800aa82:	1c28      	adds	r0, r5, #0
 800aa84:	f7f5 fe82 	bl	800078c <__aeabi_fmul>
 800aa88:	490a      	ldr	r1, [pc, #40]	; (800aab4 <__kernel_sinf+0xec>)
 800aa8a:	f7f5 ff99 	bl	80009c0 <__aeabi_fsub>
 800aa8e:	4641      	mov	r1, r8
 800aa90:	f7f5 fe7c 	bl	800078c <__aeabi_fmul>
 800aa94:	1c21      	adds	r1, r4, #0
 800aa96:	f7f5 fc1f 	bl	80002d8 <__aeabi_fadd>
 800aa9a:	e7ed      	b.n	800aa78 <__kernel_sinf+0xb0>
 800aa9c:	1c20      	adds	r0, r4, #0
 800aa9e:	e7eb      	b.n	800aa78 <__kernel_sinf+0xb0>
 800aaa0:	2f2ec9d3 	.word	0x2f2ec9d3
 800aaa4:	32d72f34 	.word	0x32d72f34
 800aaa8:	3638ef1b 	.word	0x3638ef1b
 800aaac:	39500d01 	.word	0x39500d01
 800aab0:	3c088889 	.word	0x3c088889
 800aab4:	3e2aaaab 	.word	0x3e2aaaab

0800aab8 <finite>:
 800aab8:	4b03      	ldr	r3, [pc, #12]	; (800aac8 <finite+0x10>)
 800aaba:	0048      	lsls	r0, r1, #1
 800aabc:	469c      	mov	ip, r3
 800aabe:	0840      	lsrs	r0, r0, #1
 800aac0:	4460      	add	r0, ip
 800aac2:	0fc0      	lsrs	r0, r0, #31
 800aac4:	4770      	bx	lr
 800aac6:	46c0      	nop			; (mov r8, r8)
 800aac8:	80100000 	.word	0x80100000

0800aacc <fabsf>:
 800aacc:	0040      	lsls	r0, r0, #1
 800aace:	0840      	lsrs	r0, r0, #1
 800aad0:	4770      	bx	lr
 800aad2:	46c0      	nop			; (mov r8, r8)

0800aad4 <floorf>:
 800aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad6:	0043      	lsls	r3, r0, #1
 800aad8:	085f      	lsrs	r7, r3, #1
 800aada:	0e1b      	lsrs	r3, r3, #24
 800aadc:	3b7f      	subs	r3, #127	; 0x7f
 800aade:	0006      	movs	r6, r0
 800aae0:	001d      	movs	r5, r3
 800aae2:	1c04      	adds	r4, r0, #0
 800aae4:	2b16      	cmp	r3, #22
 800aae6:	dc16      	bgt.n	800ab16 <floorf+0x42>
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	db1c      	blt.n	800ab26 <floorf+0x52>
 800aaec:	4f17      	ldr	r7, [pc, #92]	; (800ab4c <floorf+0x78>)
 800aaee:	411f      	asrs	r7, r3
 800aaf0:	4207      	tst	r7, r0
 800aaf2:	d028      	beq.n	800ab46 <floorf+0x72>
 800aaf4:	4916      	ldr	r1, [pc, #88]	; (800ab50 <floorf+0x7c>)
 800aaf6:	f7f5 fbef 	bl	80002d8 <__aeabi_fadd>
 800aafa:	2100      	movs	r1, #0
 800aafc:	f7f5 fbd8 	bl	80002b0 <__aeabi_fcmpgt>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	d020      	beq.n	800ab46 <floorf+0x72>
 800ab04:	2c00      	cmp	r4, #0
 800ab06:	da03      	bge.n	800ab10 <floorf+0x3c>
 800ab08:	2080      	movs	r0, #128	; 0x80
 800ab0a:	0400      	lsls	r0, r0, #16
 800ab0c:	4128      	asrs	r0, r5
 800ab0e:	1906      	adds	r6, r0, r4
 800ab10:	43be      	bics	r6, r7
 800ab12:	0030      	movs	r0, r6
 800ab14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab16:	23ff      	movs	r3, #255	; 0xff
 800ab18:	05db      	lsls	r3, r3, #23
 800ab1a:	429f      	cmp	r7, r3
 800ab1c:	d3fa      	bcc.n	800ab14 <floorf+0x40>
 800ab1e:	1c01      	adds	r1, r0, #0
 800ab20:	f7f5 fbda 	bl	80002d8 <__aeabi_fadd>
 800ab24:	e7f6      	b.n	800ab14 <floorf+0x40>
 800ab26:	490a      	ldr	r1, [pc, #40]	; (800ab50 <floorf+0x7c>)
 800ab28:	f7f5 fbd6 	bl	80002d8 <__aeabi_fadd>
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	f7f5 fbbf 	bl	80002b0 <__aeabi_fcmpgt>
 800ab32:	2800      	cmp	r0, #0
 800ab34:	d007      	beq.n	800ab46 <floorf+0x72>
 800ab36:	2000      	movs	r0, #0
 800ab38:	2c00      	cmp	r4, #0
 800ab3a:	daeb      	bge.n	800ab14 <floorf+0x40>
 800ab3c:	1c20      	adds	r0, r4, #0
 800ab3e:	2f00      	cmp	r7, #0
 800ab40:	d0e8      	beq.n	800ab14 <floorf+0x40>
 800ab42:	4804      	ldr	r0, [pc, #16]	; (800ab54 <floorf+0x80>)
 800ab44:	e7e6      	b.n	800ab14 <floorf+0x40>
 800ab46:	1c20      	adds	r0, r4, #0
 800ab48:	e7e4      	b.n	800ab14 <floorf+0x40>
 800ab4a:	46c0      	nop			; (mov r8, r8)
 800ab4c:	007fffff 	.word	0x007fffff
 800ab50:	7149f2ca 	.word	0x7149f2ca
 800ab54:	bf800000 	.word	0xbf800000

0800ab58 <scalbnf>:
 800ab58:	0043      	lsls	r3, r0, #1
 800ab5a:	b570      	push	{r4, r5, r6, lr}
 800ab5c:	0002      	movs	r2, r0
 800ab5e:	000c      	movs	r4, r1
 800ab60:	085d      	lsrs	r5, r3, #1
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d01b      	beq.n	800ab9e <scalbnf+0x46>
 800ab66:	21ff      	movs	r1, #255	; 0xff
 800ab68:	05c9      	lsls	r1, r1, #23
 800ab6a:	428d      	cmp	r5, r1
 800ab6c:	d218      	bcs.n	800aba0 <scalbnf+0x48>
 800ab6e:	4208      	tst	r0, r1
 800ab70:	d11a      	bne.n	800aba8 <scalbnf+0x50>
 800ab72:	2198      	movs	r1, #152	; 0x98
 800ab74:	05c9      	lsls	r1, r1, #23
 800ab76:	f7f5 fe09 	bl	800078c <__aeabi_fmul>
 800ab7a:	4b1f      	ldr	r3, [pc, #124]	; (800abf8 <scalbnf+0xa0>)
 800ab7c:	429c      	cmp	r4, r3
 800ab7e:	db2d      	blt.n	800abdc <scalbnf+0x84>
 800ab80:	0043      	lsls	r3, r0, #1
 800ab82:	0e1b      	lsrs	r3, r3, #24
 800ab84:	3b19      	subs	r3, #25
 800ab86:	191b      	adds	r3, r3, r4
 800ab88:	0002      	movs	r2, r0
 800ab8a:	2bfe      	cmp	r3, #254	; 0xfe
 800ab8c:	dd10      	ble.n	800abb0 <scalbnf+0x58>
 800ab8e:	4b1b      	ldr	r3, [pc, #108]	; (800abfc <scalbnf+0xa4>)
 800ab90:	2800      	cmp	r0, #0
 800ab92:	da00      	bge.n	800ab96 <scalbnf+0x3e>
 800ab94:	4b1a      	ldr	r3, [pc, #104]	; (800ac00 <scalbnf+0xa8>)
 800ab96:	4919      	ldr	r1, [pc, #100]	; (800abfc <scalbnf+0xa4>)
 800ab98:	1c18      	adds	r0, r3, #0
 800ab9a:	f7f5 fdf7 	bl	800078c <__aeabi_fmul>
 800ab9e:	bd70      	pop	{r4, r5, r6, pc}
 800aba0:	1c01      	adds	r1, r0, #0
 800aba2:	f7f5 fb99 	bl	80002d8 <__aeabi_fadd>
 800aba6:	e7fa      	b.n	800ab9e <scalbnf+0x46>
 800aba8:	0e1b      	lsrs	r3, r3, #24
 800abaa:	191b      	adds	r3, r3, r4
 800abac:	2bfe      	cmp	r3, #254	; 0xfe
 800abae:	dcee      	bgt.n	800ab8e <scalbnf+0x36>
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	dc0e      	bgt.n	800abd2 <scalbnf+0x7a>
 800abb4:	0019      	movs	r1, r3
 800abb6:	3116      	adds	r1, #22
 800abb8:	da14      	bge.n	800abe4 <scalbnf+0x8c>
 800abba:	4b12      	ldr	r3, [pc, #72]	; (800ac04 <scalbnf+0xac>)
 800abbc:	429c      	cmp	r4, r3
 800abbe:	dce6      	bgt.n	800ab8e <scalbnf+0x36>
 800abc0:	4b11      	ldr	r3, [pc, #68]	; (800ac08 <scalbnf+0xb0>)
 800abc2:	2800      	cmp	r0, #0
 800abc4:	da00      	bge.n	800abc8 <scalbnf+0x70>
 800abc6:	4b11      	ldr	r3, [pc, #68]	; (800ac0c <scalbnf+0xb4>)
 800abc8:	490f      	ldr	r1, [pc, #60]	; (800ac08 <scalbnf+0xb0>)
 800abca:	1c18      	adds	r0, r3, #0
 800abcc:	f7f5 fdde 	bl	800078c <__aeabi_fmul>
 800abd0:	e7e5      	b.n	800ab9e <scalbnf+0x46>
 800abd2:	480f      	ldr	r0, [pc, #60]	; (800ac10 <scalbnf+0xb8>)
 800abd4:	4002      	ands	r2, r0
 800abd6:	05d8      	lsls	r0, r3, #23
 800abd8:	4310      	orrs	r0, r2
 800abda:	e7e0      	b.n	800ab9e <scalbnf+0x46>
 800abdc:	490a      	ldr	r1, [pc, #40]	; (800ac08 <scalbnf+0xb0>)
 800abde:	f7f5 fdd5 	bl	800078c <__aeabi_fmul>
 800abe2:	e7dc      	b.n	800ab9e <scalbnf+0x46>
 800abe4:	21cc      	movs	r1, #204	; 0xcc
 800abe6:	480a      	ldr	r0, [pc, #40]	; (800ac10 <scalbnf+0xb8>)
 800abe8:	3319      	adds	r3, #25
 800abea:	05db      	lsls	r3, r3, #23
 800abec:	4010      	ands	r0, r2
 800abee:	4318      	orrs	r0, r3
 800abf0:	0589      	lsls	r1, r1, #22
 800abf2:	f7f5 fdcb 	bl	800078c <__aeabi_fmul>
 800abf6:	e7d2      	b.n	800ab9e <scalbnf+0x46>
 800abf8:	ffff3cb0 	.word	0xffff3cb0
 800abfc:	7149f2ca 	.word	0x7149f2ca
 800ac00:	f149f2ca 	.word	0xf149f2ca
 800ac04:	0000c350 	.word	0x0000c350
 800ac08:	0da24260 	.word	0x0da24260
 800ac0c:	8da24260 	.word	0x8da24260
 800ac10:	807fffff 	.word	0x807fffff

0800ac14 <__errno>:
 800ac14:	4b01      	ldr	r3, [pc, #4]	; (800ac1c <__errno+0x8>)
 800ac16:	6818      	ldr	r0, [r3, #0]
 800ac18:	4770      	bx	lr
 800ac1a:	46c0      	nop			; (mov r8, r8)
 800ac1c:	20000514 	.word	0x20000514

0800ac20 <memcpy>:
 800ac20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac22:	46c6      	mov	lr, r8
 800ac24:	b500      	push	{lr}
 800ac26:	2a0f      	cmp	r2, #15
 800ac28:	d941      	bls.n	800acae <memcpy+0x8e>
 800ac2a:	2703      	movs	r7, #3
 800ac2c:	000d      	movs	r5, r1
 800ac2e:	003e      	movs	r6, r7
 800ac30:	4305      	orrs	r5, r0
 800ac32:	000c      	movs	r4, r1
 800ac34:	0003      	movs	r3, r0
 800ac36:	402e      	ands	r6, r5
 800ac38:	422f      	tst	r7, r5
 800ac3a:	d13d      	bne.n	800acb8 <memcpy+0x98>
 800ac3c:	0015      	movs	r5, r2
 800ac3e:	3d10      	subs	r5, #16
 800ac40:	092d      	lsrs	r5, r5, #4
 800ac42:	46ac      	mov	ip, r5
 800ac44:	012d      	lsls	r5, r5, #4
 800ac46:	46a8      	mov	r8, r5
 800ac48:	4480      	add	r8, r0
 800ac4a:	6825      	ldr	r5, [r4, #0]
 800ac4c:	6867      	ldr	r7, [r4, #4]
 800ac4e:	601d      	str	r5, [r3, #0]
 800ac50:	605f      	str	r7, [r3, #4]
 800ac52:	68a5      	ldr	r5, [r4, #8]
 800ac54:	68e7      	ldr	r7, [r4, #12]
 800ac56:	609d      	str	r5, [r3, #8]
 800ac58:	60df      	str	r7, [r3, #12]
 800ac5a:	3410      	adds	r4, #16
 800ac5c:	001f      	movs	r7, r3
 800ac5e:	3310      	adds	r3, #16
 800ac60:	4547      	cmp	r7, r8
 800ac62:	d1f2      	bne.n	800ac4a <memcpy+0x2a>
 800ac64:	4665      	mov	r5, ip
 800ac66:	230f      	movs	r3, #15
 800ac68:	240c      	movs	r4, #12
 800ac6a:	3501      	adds	r5, #1
 800ac6c:	012d      	lsls	r5, r5, #4
 800ac6e:	1949      	adds	r1, r1, r5
 800ac70:	4013      	ands	r3, r2
 800ac72:	1945      	adds	r5, r0, r5
 800ac74:	4214      	tst	r4, r2
 800ac76:	d022      	beq.n	800acbe <memcpy+0x9e>
 800ac78:	598c      	ldr	r4, [r1, r6]
 800ac7a:	51ac      	str	r4, [r5, r6]
 800ac7c:	3604      	adds	r6, #4
 800ac7e:	1b9c      	subs	r4, r3, r6
 800ac80:	2c03      	cmp	r4, #3
 800ac82:	d8f9      	bhi.n	800ac78 <memcpy+0x58>
 800ac84:	2403      	movs	r4, #3
 800ac86:	3b04      	subs	r3, #4
 800ac88:	089b      	lsrs	r3, r3, #2
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4022      	ands	r2, r4
 800ac90:	18ed      	adds	r5, r5, r3
 800ac92:	18c9      	adds	r1, r1, r3
 800ac94:	1e56      	subs	r6, r2, #1
 800ac96:	2a00      	cmp	r2, #0
 800ac98:	d006      	beq.n	800aca8 <memcpy+0x88>
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	5ccc      	ldrb	r4, [r1, r3]
 800ac9e:	001a      	movs	r2, r3
 800aca0:	54ec      	strb	r4, [r5, r3]
 800aca2:	3301      	adds	r3, #1
 800aca4:	4296      	cmp	r6, r2
 800aca6:	d1f9      	bne.n	800ac9c <memcpy+0x7c>
 800aca8:	bc80      	pop	{r7}
 800acaa:	46b8      	mov	r8, r7
 800acac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acae:	0005      	movs	r5, r0
 800acb0:	1e56      	subs	r6, r2, #1
 800acb2:	2a00      	cmp	r2, #0
 800acb4:	d1f1      	bne.n	800ac9a <memcpy+0x7a>
 800acb6:	e7f7      	b.n	800aca8 <memcpy+0x88>
 800acb8:	0005      	movs	r5, r0
 800acba:	1e56      	subs	r6, r2, #1
 800acbc:	e7ed      	b.n	800ac9a <memcpy+0x7a>
 800acbe:	001a      	movs	r2, r3
 800acc0:	e7f6      	b.n	800acb0 <memcpy+0x90>
 800acc2:	46c0      	nop			; (mov r8, r8)

0800acc4 <memset>:
 800acc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acc6:	0005      	movs	r5, r0
 800acc8:	0783      	lsls	r3, r0, #30
 800acca:	d04a      	beq.n	800ad62 <memset+0x9e>
 800accc:	1e54      	subs	r4, r2, #1
 800acce:	2a00      	cmp	r2, #0
 800acd0:	d044      	beq.n	800ad5c <memset+0x98>
 800acd2:	0003      	movs	r3, r0
 800acd4:	2203      	movs	r2, #3
 800acd6:	b2ce      	uxtb	r6, r1
 800acd8:	e002      	b.n	800ace0 <memset+0x1c>
 800acda:	3501      	adds	r5, #1
 800acdc:	3c01      	subs	r4, #1
 800acde:	d33d      	bcc.n	800ad5c <memset+0x98>
 800ace0:	3301      	adds	r3, #1
 800ace2:	702e      	strb	r6, [r5, #0]
 800ace4:	4213      	tst	r3, r2
 800ace6:	d1f8      	bne.n	800acda <memset+0x16>
 800ace8:	2c03      	cmp	r4, #3
 800acea:	d92f      	bls.n	800ad4c <memset+0x88>
 800acec:	22ff      	movs	r2, #255	; 0xff
 800acee:	400a      	ands	r2, r1
 800acf0:	0215      	lsls	r5, r2, #8
 800acf2:	4315      	orrs	r5, r2
 800acf4:	042a      	lsls	r2, r5, #16
 800acf6:	4315      	orrs	r5, r2
 800acf8:	2c0f      	cmp	r4, #15
 800acfa:	d935      	bls.n	800ad68 <memset+0xa4>
 800acfc:	0027      	movs	r7, r4
 800acfe:	3f10      	subs	r7, #16
 800ad00:	093f      	lsrs	r7, r7, #4
 800ad02:	013e      	lsls	r6, r7, #4
 800ad04:	46b4      	mov	ip, r6
 800ad06:	001e      	movs	r6, r3
 800ad08:	001a      	movs	r2, r3
 800ad0a:	3610      	adds	r6, #16
 800ad0c:	4466      	add	r6, ip
 800ad0e:	6015      	str	r5, [r2, #0]
 800ad10:	6055      	str	r5, [r2, #4]
 800ad12:	6095      	str	r5, [r2, #8]
 800ad14:	60d5      	str	r5, [r2, #12]
 800ad16:	3210      	adds	r2, #16
 800ad18:	42b2      	cmp	r2, r6
 800ad1a:	d1f8      	bne.n	800ad0e <memset+0x4a>
 800ad1c:	260f      	movs	r6, #15
 800ad1e:	220c      	movs	r2, #12
 800ad20:	3701      	adds	r7, #1
 800ad22:	013f      	lsls	r7, r7, #4
 800ad24:	4026      	ands	r6, r4
 800ad26:	19db      	adds	r3, r3, r7
 800ad28:	0037      	movs	r7, r6
 800ad2a:	4222      	tst	r2, r4
 800ad2c:	d017      	beq.n	800ad5e <memset+0x9a>
 800ad2e:	1f3e      	subs	r6, r7, #4
 800ad30:	08b6      	lsrs	r6, r6, #2
 800ad32:	00b4      	lsls	r4, r6, #2
 800ad34:	46a4      	mov	ip, r4
 800ad36:	001a      	movs	r2, r3
 800ad38:	1d1c      	adds	r4, r3, #4
 800ad3a:	4464      	add	r4, ip
 800ad3c:	c220      	stmia	r2!, {r5}
 800ad3e:	42a2      	cmp	r2, r4
 800ad40:	d1fc      	bne.n	800ad3c <memset+0x78>
 800ad42:	2403      	movs	r4, #3
 800ad44:	3601      	adds	r6, #1
 800ad46:	00b6      	lsls	r6, r6, #2
 800ad48:	199b      	adds	r3, r3, r6
 800ad4a:	403c      	ands	r4, r7
 800ad4c:	2c00      	cmp	r4, #0
 800ad4e:	d005      	beq.n	800ad5c <memset+0x98>
 800ad50:	b2c9      	uxtb	r1, r1
 800ad52:	191c      	adds	r4, r3, r4
 800ad54:	7019      	strb	r1, [r3, #0]
 800ad56:	3301      	adds	r3, #1
 800ad58:	429c      	cmp	r4, r3
 800ad5a:	d1fb      	bne.n	800ad54 <memset+0x90>
 800ad5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad5e:	0034      	movs	r4, r6
 800ad60:	e7f4      	b.n	800ad4c <memset+0x88>
 800ad62:	0014      	movs	r4, r2
 800ad64:	0003      	movs	r3, r0
 800ad66:	e7bf      	b.n	800ace8 <memset+0x24>
 800ad68:	0027      	movs	r7, r4
 800ad6a:	e7e0      	b.n	800ad2e <memset+0x6a>

0800ad6c <strchr>:
 800ad6c:	b2ca      	uxtb	r2, r1
 800ad6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad70:	2a00      	cmp	r2, #0
 800ad72:	d035      	beq.n	800ade0 <strchr+0x74>
 800ad74:	2403      	movs	r4, #3
 800ad76:	0783      	lsls	r3, r0, #30
 800ad78:	d12d      	bne.n	800add6 <strchr+0x6a>
 800ad7a:	25ff      	movs	r5, #255	; 0xff
 800ad7c:	4029      	ands	r1, r5
 800ad7e:	020d      	lsls	r5, r1, #8
 800ad80:	4329      	orrs	r1, r5
 800ad82:	040d      	lsls	r5, r1, #16
 800ad84:	430d      	orrs	r5, r1
 800ad86:	0029      	movs	r1, r5
 800ad88:	6804      	ldr	r4, [r0, #0]
 800ad8a:	4e26      	ldr	r6, [pc, #152]	; (800ae24 <strchr+0xb8>)
 800ad8c:	4061      	eors	r1, r4
 800ad8e:	198b      	adds	r3, r1, r6
 800ad90:	438b      	bics	r3, r1
 800ad92:	19a1      	adds	r1, r4, r6
 800ad94:	43a1      	bics	r1, r4
 800ad96:	4e24      	ldr	r6, [pc, #144]	; (800ae28 <strchr+0xbc>)
 800ad98:	430b      	orrs	r3, r1
 800ad9a:	4233      	tst	r3, r6
 800ad9c:	d111      	bne.n	800adc2 <strchr+0x56>
 800ad9e:	6841      	ldr	r1, [r0, #4]
 800ada0:	4f20      	ldr	r7, [pc, #128]	; (800ae24 <strchr+0xb8>)
 800ada2:	000c      	movs	r4, r1
 800ada4:	19cb      	adds	r3, r1, r7
 800ada6:	406c      	eors	r4, r5
 800ada8:	438b      	bics	r3, r1
 800adaa:	19e1      	adds	r1, r4, r7
 800adac:	43a1      	bics	r1, r4
 800adae:	430b      	orrs	r3, r1
 800adb0:	3004      	adds	r0, #4
 800adb2:	4233      	tst	r3, r6
 800adb4:	d0f3      	beq.n	800ad9e <strchr+0x32>
 800adb6:	7803      	ldrb	r3, [r0, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d005      	beq.n	800adc8 <strchr+0x5c>
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d004      	beq.n	800adca <strchr+0x5e>
 800adc0:	3001      	adds	r0, #1
 800adc2:	7803      	ldrb	r3, [r0, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d1f9      	bne.n	800adbc <strchr+0x50>
 800adc8:	2000      	movs	r0, #0
 800adca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adcc:	4293      	cmp	r3, r2
 800adce:	d0fc      	beq.n	800adca <strchr+0x5e>
 800add0:	3001      	adds	r0, #1
 800add2:	4220      	tst	r0, r4
 800add4:	d0d1      	beq.n	800ad7a <strchr+0xe>
 800add6:	7803      	ldrb	r3, [r0, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1f7      	bne.n	800adcc <strchr+0x60>
 800addc:	2000      	movs	r0, #0
 800adde:	e7f4      	b.n	800adca <strchr+0x5e>
 800ade0:	0783      	lsls	r3, r0, #30
 800ade2:	d008      	beq.n	800adf6 <strchr+0x8a>
 800ade4:	2203      	movs	r2, #3
 800ade6:	e002      	b.n	800adee <strchr+0x82>
 800ade8:	3001      	adds	r0, #1
 800adea:	4210      	tst	r0, r2
 800adec:	d003      	beq.n	800adf6 <strchr+0x8a>
 800adee:	7803      	ldrb	r3, [r0, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1f9      	bne.n	800ade8 <strchr+0x7c>
 800adf4:	e7e9      	b.n	800adca <strchr+0x5e>
 800adf6:	6802      	ldr	r2, [r0, #0]
 800adf8:	4b0a      	ldr	r3, [pc, #40]	; (800ae24 <strchr+0xb8>)
 800adfa:	490b      	ldr	r1, [pc, #44]	; (800ae28 <strchr+0xbc>)
 800adfc:	18d3      	adds	r3, r2, r3
 800adfe:	4393      	bics	r3, r2
 800ae00:	420b      	tst	r3, r1
 800ae02:	d106      	bne.n	800ae12 <strchr+0xa6>
 800ae04:	6842      	ldr	r2, [r0, #4]
 800ae06:	4b07      	ldr	r3, [pc, #28]	; (800ae24 <strchr+0xb8>)
 800ae08:	3004      	adds	r0, #4
 800ae0a:	18d3      	adds	r3, r2, r3
 800ae0c:	4393      	bics	r3, r2
 800ae0e:	420b      	tst	r3, r1
 800ae10:	d0f8      	beq.n	800ae04 <strchr+0x98>
 800ae12:	7803      	ldrb	r3, [r0, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d0d8      	beq.n	800adca <strchr+0x5e>
 800ae18:	7843      	ldrb	r3, [r0, #1]
 800ae1a:	3001      	adds	r0, #1
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1fb      	bne.n	800ae18 <strchr+0xac>
 800ae20:	e7d3      	b.n	800adca <strchr+0x5e>
 800ae22:	46c0      	nop			; (mov r8, r8)
 800ae24:	fefefeff 	.word	0xfefefeff
 800ae28:	80808080 	.word	0x80808080

0800ae2c <strpbrk>:
 800ae2c:	b530      	push	{r4, r5, lr}
 800ae2e:	7804      	ldrb	r4, [r0, #0]
 800ae30:	2c00      	cmp	r4, #0
 800ae32:	d015      	beq.n	800ae60 <strpbrk+0x34>
 800ae34:	780d      	ldrb	r5, [r1, #0]
 800ae36:	000a      	movs	r2, r1
 800ae38:	1e2b      	subs	r3, r5, #0
 800ae3a:	d104      	bne.n	800ae46 <strpbrk+0x1a>
 800ae3c:	e009      	b.n	800ae52 <strpbrk+0x26>
 800ae3e:	7853      	ldrb	r3, [r2, #1]
 800ae40:	3201      	adds	r2, #1
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d005      	beq.n	800ae52 <strpbrk+0x26>
 800ae46:	429c      	cmp	r4, r3
 800ae48:	d1f9      	bne.n	800ae3e <strpbrk+0x12>
 800ae4a:	7813      	ldrb	r3, [r2, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d007      	beq.n	800ae60 <strpbrk+0x34>
 800ae50:	bd30      	pop	{r4, r5, pc}
 800ae52:	7844      	ldrb	r4, [r0, #1]
 800ae54:	3001      	adds	r0, #1
 800ae56:	2c00      	cmp	r4, #0
 800ae58:	d1ed      	bne.n	800ae36 <strpbrk+0xa>
 800ae5a:	7813      	ldrb	r3, [r2, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1f7      	bne.n	800ae50 <strpbrk+0x24>
 800ae60:	2000      	movs	r0, #0
 800ae62:	e7f5      	b.n	800ae50 <strpbrk+0x24>

0800ae64 <strspn>:
 800ae64:	b570      	push	{r4, r5, r6, lr}
 800ae66:	7804      	ldrb	r4, [r0, #0]
 800ae68:	2c00      	cmp	r4, #0
 800ae6a:	d012      	beq.n	800ae92 <strspn+0x2e>
 800ae6c:	0005      	movs	r5, r0
 800ae6e:	780e      	ldrb	r6, [r1, #0]
 800ae70:	2e00      	cmp	r6, #0
 800ae72:	d00c      	beq.n	800ae8e <strspn+0x2a>
 800ae74:	000a      	movs	r2, r1
 800ae76:	0033      	movs	r3, r6
 800ae78:	e003      	b.n	800ae82 <strspn+0x1e>
 800ae7a:	7853      	ldrb	r3, [r2, #1]
 800ae7c:	3201      	adds	r2, #1
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d005      	beq.n	800ae8e <strspn+0x2a>
 800ae82:	42a3      	cmp	r3, r4
 800ae84:	d1f9      	bne.n	800ae7a <strspn+0x16>
 800ae86:	786c      	ldrb	r4, [r5, #1]
 800ae88:	3501      	adds	r5, #1
 800ae8a:	2c00      	cmp	r4, #0
 800ae8c:	d1f0      	bne.n	800ae70 <strspn+0xc>
 800ae8e:	1a28      	subs	r0, r5, r0
 800ae90:	bd70      	pop	{r4, r5, r6, pc}
 800ae92:	2000      	movs	r0, #0
 800ae94:	e7fc      	b.n	800ae90 <strspn+0x2c>
 800ae96:	46c0      	nop			; (mov r8, r8)
